Date: 12 May 1980 01:50-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Closures
To: INFO-ULISP at MIT-MC

Also, closures are their own datatype now and print as #<Closure definition>.
-kmp

Date: 12 May 1980 01:46-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Tracing
To: INFO-ULISP at MIT-MC

Versions of ULisp 156 and up (:TEACH;XULISP on MC currently the only such
thing) have trace capability. See the file TEACH;ULISP TRACE on MC for
details, or just load up a ULisp with the capability in it and try
(trace name1 name2 ...) and then run the functions. Comments welcomed -- the
i/o style is kinda wierd, taken from Rutgers Lisp, but probably helpful.
-kmp

Date: 25 Apr 1980 1141-EST
From: KMP at MIT-EE
Subject: ULisp debugging
To: INFO-ULISP at MIT-MC, 031.ANDRE at MIT-EE

The ULisp debugger which lives in all versions from 121 up is documented in
MC:TEACH;ULISP DEBUG and [EE]<KMP>UDEBUG.INFO.0 for those who forget how
it works. It will be moved to a more public place if/when it gets released.
To run that version of ULisp, you can use :TEACH;ULISP on MC or 
<KMP>XULISP on EE.
-------

Date: 20 APR 1980 0757-EST
From: KMP at MIT-MC (Kent M. Pitman)
Subject: You asked for it!
To: INFO-ULISP at MIT-MC

I have released ULisp.121 on MC. Anyone who has time to play with it
is encouraged to do so. Differences...

(1) Speedup. Alist lookup should now work in more or less 
    constant time if you have few local variables rather than
    being dependent on the depth of your global var in the global
    area. This can be as much as a factor of 40 speedup on looking
    up some symbols, but probably averages in the range of a factor of
    10 speedup. There should be no user-visible change in how this stuff
    works other than that new global variables go on the front of the
    global area instead of the tail.

(2) Debugging. We can quibble about what the default debugging mode should
    be but I have all the bells and whistles enabled for this version on MC.
    The following debugging features are new...

    (a) (debug) is a system-provided stack-debugger. Documentation on this
        will be created. Please play with it and send me gripes/comments.
        Basically, you can walk up and down the stack, ask to return a value
	from a particular place on the stack, get a debug breakpoint at any
	stack frame, or retry evaluation of a stack frame.
    (b) (break [ message [ condition ] ] ) gives a debugging breakpoint.
        *Important* -- The function "recover" becomes defined in a break
	loop. It accepts an optional argument of a value to return from the
	break. If someone would like to suggest a better function name to use
	for this purpose, I'd be glad to take it... No fair "return" -- that's
	strictly for (ugh) progs... and I'd rather not look for P
    (c) ^X quits locally (to breakpoint or debugger)
        ^B quits globally
	Would anyone object strongly to making ^G, ^B, and ^X have the
	ULisp analog of their Maclisp meanings? This might be less confusing.
    (d) (backtrace debug) enables automatic running of (debug) on errors.
	(backtrace nodebug) disables automatic running of (debug) on errors.

(3) Break levels. You can't fall out into Lisp as easily. Lisp errors give
    ULisp debugging breakpoints. [Break Level <n>] displays if you have 
    prompting selected to remind you of what's going on. Remember (as above)
    the function "recover" will get you out of most breakpoints. MacLISP
    makes you create thousands of different handlers to cover all the cases,
    so please let me know where "recover" doesn't work from if you run across
    such a place. I'm pretty sure PDL overflow is such a case and this will
    be fixed soon.

(4) Some improved error messages. Wrong-Type-Arg and Wrong-No-of-Args now
    give nicer error display.

I'll go over all these changes again to make sure all the code looks 
reasonable when I am more awake. In the meantime, there has been such a 
massive amount of added code that some exercising will do it good.

-kmp

ps No, there is still no trace facility. I will put one in soon -- I know
   it is lacking.


Date: 11 Apr 1980 1922-EST
From: KMP at MIT-EE
Subject: Patching the symptom: REGPDL overflow and Illegal Memory Write attempt
To: 031.ANDRE at MIT-EE, GJC at MIT-MC, BUG-ULISP at MIT-MC
cc: INFO-ULISP at MIT-MC

The REGPDL overflow and illegal memory write error you reported is still
around -- a combination of several Maclisp bugs -- not yet resolved. But
I have put prinlevel/prinlength into ULisp, as you probably saw in system
messages (yeah, i know -- routed announcement to wrong place, oh, well).
Documentation in <LISP>ULISP.NOTES ... -kmp
-------

Date:  9 APR 1980 1746-EST
From: HAL at MIT-MC (Hal Abelson)
To: INFO-ULISP at MIT-MC


i just spent an hour trying to help a 6.03 students debug a lisp
program.  it seemed that every time she read in her file it would
clobber lisp ``do.''

the reason, it turned out, was that she had in her file a definition
of ``reverse'' that used ``do''.........

KMP@MIT-MC 04/05/80 00:45:06
To: INFO-ULISP at MIT-MC
ULisp.108 is now the standard on Unix. Features:

(1) There was a gruesome bug in the way ULisp subscripts were being converted
    into appropriate accessors for internal arrays. This affected non-linear,
    non-square arrays and made 031.ANDRE's Morris solution die awfully. Anyway,
    the bug has been squashed.

(2) More type checking -- array subscripts are now more extensively 
    type-checked. also, rplaca and rplacd also do typechecking for
    their first arg now.

(3) At RZ's request, we have implemented a way of getting at MacLISP
    functions. Don't advertise to students as it is likely to confuse them --
    this is mostly for implementing aids to them -- but if you do

		(import functionname propname flag)

    where functionname denotes a maclisp function name,
          propname denotes its functional type (one of [SUBR, FSUBR, LSUBR]),
          and flag denotes whether function should eval its args or not in 
          ULisp. If no, then function had better be a function that can get
          called with one arg, as it will receive a single arg which is the
          list of unevaluated args. The ULisp subr or fsubr pointer is 
	  returned.

    Scenario:

  (setq fasload (import FASLOAD FSUBR nil))	       | enable fasloading
  (fasload (foo) bar fasl)			       | load helper file
  (setq nifty-aid-for-students (import MYFUN SUBR t))  | import compiled fn
  (defun f (x) (+ (nifty-aid-for-students x) 3))       | use compiled fn
	

KMP@MIT-MC 04/03/80 00:14:10 Re: (STATUS LINMO)
To: INFO-ULISP at MIT-MC
All right, CPR, this should make you happy. I was over at the terminal room
listening to a student telling me that anyone who would type in a long
expression at the terminal is obviously losing and that if you can't rub
back into previous line it will encourage you to type it to an editor
instead ... and he's probably right. So the lisp they've got now uses
the line-at-a-time reader. I'm going to see later about linking that in with
SFA's so that its less screw-prone and can maybe even work to rub back out
over that <CR> ... but we'll see. This should do for now... let me know if
you get good or bad comments about the way it works.
-kmp

KMP@MIT-MC 04/03/80 00:10:44 Re: Unix/Twenex Lisp Differences
To: INFO-ULISP at MIT-MC
The files MC:TEACH;ULISP NOTES and [EE]<LISP>ULISP.NOTES contain
descriptions of the most blatant differences between Unix Lisp and
the simulator. They have been augmented to describe filenaming
conventions. HAL, maybe these or some similar item should be distributed
to students or made available to TA's for curious students or something.

KMP@MIT-MC 04/02/80 14:04:50
To: INFO-ULISP at MIT-MC
The file directory <LISP> is the EE equivalent of Unix's /mnt/lisp

The files PS5.COMPLEX and PS5.ALGEBRA have what /mnt/lisp/complex
and /mnt/lisp/algebra should have had. I had copied them over and checked
the copies visually a couple times carefully, but an error or two might
have leaked in -- be on guard.

The file ULISP.NOTES has useful information about my simulator. I will
install information about how to load the PS5 files (and files in general
later). The general syntax that you should be pushing is:

	(load '((dir) fn1 fn2))
	and/or
	(fr (dir) fn1 fn2)

where (dir) is optional if loading from their own directory.
-kmp

KMP@MIT-MC 03/31/80 13:48:37
To: INFO-ULISP at MIT-MC
ULisp.104 is now running on EE as <KMP>ULISP. This is the version that
will be released to students if no one finds any bugs in it; it has been
tested on MC pretty thoroughly and rather cursorily on EE. Please give it
some exercise if you have the chance. Feedback will be appreciated. Thanks.
-kmp

KMP@MIT-MC 03/30/80 03:46:48
To: INFO-ULISP at MIT-MC
On MC, :TEACH;ULISP now is the canonical place to find ULisp. I have changed
some of the macros -- they've just been thru a bit of a workout tho' so should
be ok. The function gensym, which is installed in the simulator but not in
Unix Lisp, is being used in do and parallel-setq (which is called by do). So
if people ask what g0001 etc means and why they can't type it in, it's because
I am making real gensyms.

Because I have not been able to get the ftp connection to work directly to
EE from MC for image files, I will have to wait until XX comes back up to
install this on XX. Mail will be sent out when that is done.

ULisp version 104 (yes, the numbers took a giant leap backward when I did
a big rewrite the other night) has fixes for all known bugs so if something
isn't working right, please report it to BUG-ULISP@MC.

The mapcar function works in version 104, although mapping of fsubrs and
nlambdas will not do the same thing as Unix Lisp will. That's a pretty ill-
defined thing to do -- students shouldn't be writing code that depends on it
anyway -- so hopefully it won't cause any trouble.

-kmp

KMP@MIT-MC 03/30/80 02:59:10
To: INFO-ULISP at MIT-MC
There is a ULISP mode for Emacs on MC. To get it, do

	MM Load LibraryKP;ULISP
	MM ULisp

This is pretty much like Lisp mode but knows about ULisp's slightly
different syntax, including \ as slashifier and | as comment char.
-kmp

Date: 30 March 1980 01:25-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: New mailing list formed
To: "(FILE [DSK:TEACH;ULISP INFO])" at MIT-MC, GJC at MIT-MC,
    CPR at MIT-MC, PAO at MIT-MC, RZ at MIT-MC, JEFERY at MIT-MC,
    DCB at MIT-MC, JIS at MIT-MC, HAL at MIT-MC

I have created an INFO-ULISP mailing list. If your name is in the header
above, you are on the list. If you don't want to be on it, feel free to
remove yourself -- my selection of initial names is probably somewhat
random. If you know people that got left out, please see that they get added
somehow.

This mailing list is for me to send info about new ULisp features and
bug-fixes. There will likely be a number of notes to this mailing 
list while things get started up, and hopefully it will dwindle in use 
as things stabilize.

More soon, I suspect.
  -kmp

