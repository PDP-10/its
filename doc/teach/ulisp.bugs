Date: 12 May 1980 01:22-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Fixed.
To: BUG-ULISP at MIT-MC

Date: 11 May 1980 23:09-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To:   BUG-ULISP

Traced functions don't seem to be capable of being applied ...

Date: 11 May 1980 23:09-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

Traced functions don't seem to be capable of being applied ...

Date: 11 May 1980 21:21-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC
cc: GJC at MIT-MC

ULISP should support a subst operator.

Date: 1 May 1980 06:05-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

Date: 10 April 1980 13:52-EST
From: George J. Carrette <GJC at MIT-MC>
To:   KMP

illeagal memory write a 11056 or something.

When they try and print out circular list structure (sigh...)
which can happen quite easily in the problem set, they get
;UNRECOVERABLE FIXNUM PDL OVERFLOW

sometimes it just gets a PDL oveflow. 

I tried (setq foo '(a b))
(rplaca foo foo)
and got a pdl oveflow.
then did ^b, o.k. then (cons foo foo)
threw me out to the monitor. I then used "start" to get
back in, futsed around for a while, and then got
things into a state where PAO had to bring the system down.
No kidding.  Anyway, I think you need to put in a PDL
handler. You might have to write the printer using a go-to
instead of recursion. Which is a thought. I was talking to
JPG the other day about how crufty MEVAL1 was. He said it
was because it couldn't be written modular because of lack
of stack space. YUK. Do you know of a clean way, using macros
perhaps, to get tail recursion in maclisp compiled correctly?

-gjc

Date: 25 April 1980 01:01-EST
From: Kent M. Pitman <KMP at MIT-MC>
Sender: ___051 at MIT-MC
Subject: PROGN/PROG2 in ULisp
To: GJC at MIT-MC
cc: BUG-ULISP at MIT-MC

Yeah, Leigh pointed out the PROGN problem a couple days ago and it's been fixed
in MC:TEACH;TS ULISP and [EE]<KMP>ULISP.EXE.122 for a while now ... 

PROG2 is in the macros package (tho' actually not a macro). I will probably
make PROGN, PROG2, and a few others (probably DO) be special forms (=> FSUBRs)
pretty soon. But it's not worth the efficiency loss to have PROG2 do a check
for number of args ... a bad arg to cdr message for (PROG2 arg) or (PROG2) 
is sufficiently informative I think.

-kmp

Date: 24 April 1980 17:03-EST
From: George J. Carrette <gjc at MIT-MC>
Sender: ___077 at MIT-MC
To: BUG-ULISP at MIT-MC

(progn) i.e. no arguments. gives bad arg to cdr.
(prog2) also gives a lusing error message.

Date: 22 Apr 1980 1741-EST
From: Leigh L. Klotz, Jr. <KLOTZ at MIT-EE>
To: bug-ulisp at MIT-MC

(progn) causes an obscure error.

I got this while using displace inside a defmacro.

Leigh.
-------

Date: 16 April 1980 17:28-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: MP at MIT-MC
cc: JIS at MIT-MC, PAO at MIT-MC, GJC at MIT-MC, CPR at MIT-MC,
    BUG-ULISP at MIT-MC

    Date: 16 Apr 1980 0124-EST
    From: MP at MIT-EE (Mark A. Plotnick)
    To:   kmp
    Re:   ftp to ee

    JIS says you have a program which enables the sending of 36-bit
    byte files to and from EE. Could you tell me what it is?
-----
On MC:TURNIP;ASCII FASL are two functions ASCII->BINARY and BINARY->ASCII.
They each take two args of filenames. Eg,

	(BINARY->ASCII '((DSK FOO) BAR >) '((DSK FOO) BAR ASCII))

makes an ascii file. Then do text transfer to EE and load up <KMP>ASCII.FASL
and do

	(ASCII->BINARY ...)

to undo the effect. Sorry it can't all be done as one job -- I don't hav the
time to hack that up. But this has worked for me getting the latest ULisp
fasl over there, so maybe it'll do for you until they get FTP fixed. Let
me know if it gives you any problems. If you're paranoid, you can do
the inverse function on MC and verify that the file you get back out is the
same as the original. There is a third function in that file named 
BINARY-COMPARE that takes two filespecs and tells you if the two are the same
and if not what the first word is where they differ. (Does no output, just
returns the info as a lisp list.)

-kmp

Date: 11 Apr 1980 1922-EST
From: KMP at MIT-EE
Subject: Patching the symptom: REGPDL overflow and Illegal Memory Write attempt
To: 031.ANDRE at MIT-EE, GJC at MIT-MC, BUG-ULISP at MIT-MC
cc: INFO-ULISP at MIT-MC

The REGPDL overflow and illegal memory write error you reported is still
around -- a combination of several Maclisp bugs -- not yet resolved. But
I have put prinlevel/prinlength into ULisp, as you probably saw in system
messages (yeah, i know -- routed announcement to wrong place, oh, well).
Documentation in <LISP>ULISP.NOTES ... -kmp
-------

Date:  8 Apr 1980 1746-EST
From: KMP at MIT-EE
Subject: (((empty (((empty ...
To: 031.ANDRE at MIT-EE
cc: BUG-ULISP at MIT-MC

Kinda too bad about that ... it's a Maclisp bug, by the way, not just
a ULisp bug -- hence I don't know what to say really. We will try to
trace it down and get it fixed as soon as possible... -kmp

ps It's also a Maclisp bug that you end up in a ;BKPT PDL-OVERFLOW
   when the stack runs out the first two times before the fatal error.
   I have code that would trap all errors if the error trapping code
   would just do its thing right ... sigh.

-------

Date:  8 Apr 1980 1603-EST
From: 031.ANDRE at MIT-EE
Subject: A bug in Ulisp (!)
To: bug-ulisp at MIT-MC
cc: jis at MIT-EE, pao at MIT-EE, 031.gunning at MIT-EE

Printing an "infinite" list structure 3 times seems to trash the lisp.
Try loading <lisp>morris.lsp and then:
Lisp->(setq foo (create-board))
Lisp->(aref foo 0 0)  || Three times.
	-- Dave
-------


10003
*** EOOH ***
Date: 7 April 1980 04:57-EST
From: Kent M. Pitman <KMP at MIT-MC>
To:   JIS, GJC, HAL, CPR
cc:   KMP

I am now keeping a source to ULisp on EE. This source should be read-only
for the following reasons:

(1) The lisp compiler on EE probably does not know about SFA's.

(2) The master copy of the source lives on MC:TEACH;ULISP > and I don't
    want to get an accidental divergence with copies on two different
    systems being editted.

I would prefer if people did not edit the file at all -- leaving it for me --
In extreme emergencies (heaven forbid) this may, of course, not be possible.
If you do find a need to edit the file, be sure to tell me that you did
and what changes you have made. Write the file out to a higher version number
and make sure the version number is preserved in transfer to EE so we can tell
what version is installed. Until FTP starts to work more reliably,
the FASL for such changes should be mag-tape transfered to EE rather than 
net-transfered.

I will see about making a CTL file for dumping out a new ULISP.EXE and/or
a description of the process in case this needs to be done while I'm not
around.

-kmp
Date: 7 April 1980 04:58-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: JIS at MIT-MC
cc: BUG-ULISP at MIT-MC

Btw, in case i forgot to mention it, the current ulisp.exe is running in your
new maclisp. the old ulisp.exe (same ulisp version, older maclisp) lives in
<KMP>OULISP.EXE.108 and will go away in a day or two if this one seems to be
winning ok. -kmp

Date:  5 April 1980 21:08-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

Date: 30 March 1980 19:34-EST
From: George J. Carrette <GJC at MIT-MC>
To:   JIS at MIT-AI
cc:   LISP-6001

KMP and I talked the other day about ways to speed up ULISP,
[1] have every defun and lambda create a closure by default, this
    will speed up the search down the a-list since lexical environments
    are usually small.
[2] special case the "global" end of the a-list. All KMP has to do is
    redefine his look-up-in-alist function so that when it gets to the
    **END*OF*ALIST** it does some faster thing like GET. (PUT for SETQ).

There are some things to do which will slow down ULISP a little.
[1] generate a warning message when built-in functions are
    "redefined" by using them as lambda variables.
[2] certain features ala TEACH;LISP maybe.

      -George

Date:  5 April 1980 05:38-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

Date: 1 Apr 1980 0937-EST
From: JIS at MIT-EE
To:   KMP
cc:   cpr at MIT-EE
Re:   UNIX LISP

I have installed a bootstrap in SUBSYS called LISP that
when invoked, arranges to call <KMP>ULISP.EXE so Kent ULISP.EXE
in your directory is now the "Live" version of the program.
MacLisp can be invoked by typing "maclisp."

			-Jeff

Date:  5 April 1980 05:37-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

Date: 2 April 1980 00:35-EST
From: George J. Carrette <GJC at MIT-MC>
To:   KMP
cc:   JONL

I think you should get rub-out processing somehow.
even if it means writing your own reader. (even if it means
that I have to write it.) I was lusing my ass an hour ago,
didn't realise that ^q is needed after a ^L. Even if you
do ^B you still get no response until the blasted ^q, which
must be seen by the operating system I suppose. Lusing ^Q ^S,
!!!!!. I want -MORE-  !!!!.

Kent, is there any way to get 20 maclisp to win easily on tty I/O?

Date:  5 April 1980 04:41-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

Date: 04/04/80 10:58:38
From: JEFERY at MIT-AI
To:   KMP at MIT-AI

Some observations which I find a little confusing, and which
there might some fix:

if a student inadvertantly changes his directory on TOPS-20,
is it true he must type (fr (\031\.{name}) {name} lsp) to
get his stuff into LISP?  How about (fr |031.{name}| {name} lsp)??

if a student names his file something simple (i.e., no extension),
is it true there is nothing he can type at lisp to get it?
How about (fr {name} nil)?? or (fr |{name}..|)?

Perhaps a student message that warns of these, and says what the best
course a action is would be appropriate ... ?

				Mark Jeffery

Date:  5 April 1980 04:41-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: JEFERY at MIT-AI
cc: BUG-ULISP at MIT-MC

Please send your comments to BUG-ULISP@MC so that it gets filed correctly.

    Date: 04/04/80 10:58:38
    From: JEFERY at MIT-AI

    Some observations which I find a little confusing, and which
    there might some fix:

    if a student inadvertantly changes his directory on TOPS-20,
    is it true he must type (fr (\031\.{name}) {name} lsp) to
    get his stuff into LISP?  How about (fr |031.{name}| {name} lsp)??

This is incompatible with Unix Lisp and will only serve to confuse people.
In fact, you only have to type (031\.{name}) which is less typing than
the |...|'d form. If and when we split off the two versions and do this
one 'right' then we can make such modifications trivially. Right now I am
trying to go to reasonable lengths so that people can say the two lisps
are equivalent.

    if a student names his file something simple (i.e., no extension),
    is it true there is nothing he can type at lisp to get it?
    How about (fr {name} nil)?? or (fr |{name}..|)?

yeah, this is a problem, but the reason it is is because maclisp hacks
filenames in this way and it happens to work out fine. there are several
ways he can get it (i think -- haven't tested them) ... (fr fn1 ||) should
work ... if not, then try (load 'name\.\ ) ... sigh ...

    Perhaps a student message that warns of these, and says what the best
    course a action is would be appropriate ... ?

Well, I advertise in <LISP>ULISP.NOTES that files should be named with
an extension of LSP so that they will read right in lisp without specifying
filename2.

Sorry, it sounds like i don't appreciate your comments when really i do...
don't want it to sound like i'm writing you off -- just saying these happen
to be issues i've thought about in some degree and how i've ended up deciding.
let me know if my answers seem unsatisfactory and we'll hash it out some
more. see you later.
-kmp

Date:  5 April 1980 04:35-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

Date: 4 April 1980 11:39-EST
From: Chris Ryland <CPR at MIT-MC>
To:   KMP
Re:   (STATUS LINMO)

Kent: Ok, I think this is the right thing to do for the students' sake;
admittedly, it is sort of a screw that you can rubout over line boundaries,
but this should be fixed someday, no?  Actually what's needed is a zwei-
like editor that is totally integrated with the top-level of lisp so you
never worry about these issues...

Date:  5 April 1980 04:34-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

Date: 4 April 1980 11:40-EST
From: Chris Ryland <CPR at MIT-MC>
To:   KMP
Re:   Unix/Twenex Lisp Differences

We just discovered this am that you can't specify a non-existent file
extension in uLisp (eg, morrow..1), or else we don't know how.  I
tried nil, and it didn't buy it...

Date:  4 April 1980 15:37-EST
From: Kent M. Pitman <KMP at MIT-MC>
Sender: JONL at MIT-MC
Subject: Unix/Twenex and Morrow..1
To: CPR at MIT-MC
cc: BUG-ULISP at MIT-MC

People should be using the extension LSP and not be specifying files anyway.
I suspect that doing (MORROW \  \1) will probably do it. So should the
string '<WHATEVER>MORROW\.\.1  so take your choice. I recommend not using
the non-existent extensions, tho'.

Date:  3 Apr 1980 0154-EST
From: KLOTZ at MIT-EE
Subject: arrays, character hacking
To: bug-ulisp at MIT-MC
cc: klotz at MIT-AI

Addressing the nil'th element of an array is the same as referencing
the 0'th element. This screwed me when I got the order of arguments
to aset wrong.

Also, this may not be the proper place, but...

Even if the terminal is in page mode, print out something large
(like doing (getal)) scrolls off the screen.
Leigh.
-------

Date:  2 April 1980 09:08-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: (STATUS LINMO)
To: BUG-ULISP at MIT-MC

Date: 28 March 1980 09:21-EST
From: Chris Ryland <CPR at MIT-MC>
To:   KMP
cc:   HAL, JIS, PAO
Re:   linemode in twenex ulisp

Kent: I would agree with you in theory --that we don't want to give people the
inconvenience of not being able to delete back arbitrarily far-- but remember
that these poor unix lisp students have never had that luxury, so it would be
much more 'compatible' to use the twenex linemode.  (Someone correct me if
I'm wrong about real unix lisp.)  And, I don't understand why the Maclisp
implementation is stupid enough to make linemode thwart full rubout handling
-- it certainly is doable (well, I guess I know why, since it's probably alot
of work).  Comments?

Date:  2 April 1980 09:07-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: LPR/LPT fix
To: BUG-ULISP at MIT-MC

Date: 28 Mar 1980 1126-EST
From: Chris Ryland <CPR at MIT-EE>
To:   kmp
Re:   lpt: is reinstated for now...let's say lpr: is the right thing

to use, and this won't change when lpt: goes back to being tty:.

Date: 29 March 1980 22:08-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

KMP@MIT-MC 03/29/80 22:06:41
To: HAL at MIT-MC
CC: JIS at MIT-MC
Unix Lisp doesn't seem to let you say (add1 1.0) -- you get a non-numeric
arg (=> floating point arg) error. For the time being, I am going to set
things so that this is an error on floating point with my stuff as well.
I think that given how you are handling some of those other math operators,
that add1 and sub1 should be willing to do coercion.

Unix Lisp also returns t for (and 'foo 'bar). Up 'til now my simulator has
been too. (or 'foo 'bar), according to PAO, who I just called up to have this
checked, does return foo (which is reasonable). I am changing the simulator
to give back t for (and 'foo 'bar) but I think that's a real loss. bar should
get returned as it does in maclisp.

Applying and mapping nlambda's and fsubrs is currently still undefined in
my simulator. You get something utterly different than you would get in real
unix lisp. If you are going to want me to support things like
(mapcar '(nlambda (x) x) '(a b c)) => ('a 'b 'c) -- which I think is a 
crock -- let me know and I'll install it, but I think it's very ugly.
Currently if you do that in mine you get just (a b c). Note also that this
means that
(mapcar and '(a nil b)) => (t () t)
in Unix Lisp but is undefined in the simulator (actually errs out, I suspect).
Let me know your thoughts on this subject.
-kmp
^_

Date: 25 March 1980 16:10-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

System functions should not get bashed if redefined.

Date: 25 March 1980 16:02-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

(defun foo nil (print nil))

Date: 18 February 1980 15:02-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

what does (flodiv 3 4) return on delphi?

Date: 18 February 1980 10:45-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

The "Lisp->" message should not display when reading from files.

Date: 18 February 1980 10:44-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-ULISP at MIT-MC

This is a test.

