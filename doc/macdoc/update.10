JPG@MIT-MC 05/10/85 14:26:34-EST  To: INFO-MACSYM
If you are interested in using new code which handles the differentiation 
of unknown functions in MACSYMA, please read MC:JPG;NDIFF USAGE .
Comments to JPG.

JGA@MIT-MC 10/20/84 11:25  Re.: divided differences
To: INFO-MACSYM
I put a divided difference function in SHARE2;DIVDIF .

RWG@SPA-NIMBUS 01/07/84 21:23 PST  Re.: new Share USAGE files
SHARE1;SPANGL USAGE for simplifying trigfun(rational*%PI).
SHARE2;SQDNST USAGE for denesting SQRTs of surds.

JPG@MIT-MC 12/17/83 11:44  To: INFO-MACSYM
An EULERPOLY(v,n) function has been written by ASB.
It generates the nth Euler polynomial in the variable v.

ELLEN@MIT-MC 08/13/83 16:11  To: INFO-MACSYM  Re.: Updates to MACSYMA
A new entry has been added to DESCRIBE.  DESCRIBE(UPDATE);  will print 
out a summary of the changes to MACSYMA since the most recent version 
of the Manual was printed.  (In this case, since January 1983.)  

JPG@MIT-MC 06/17/83 03:59 EDT  To: INFO-MACSYM
Macsyma 304 has just been created in the newly released Lisp 2138.

LPH@MIT-MC 05/12/83 17:59 EDT  To: INFO-MACSYM
A set of rules for performing simplifications on inequalities is
available in SHARE1;INEQ FASL, and DEMO and USAGE files are provided.
Send comments and bugs to LPH@MIT-MC.

GCOOK@MIT-MC 05/03/83 19:50  To: INFO-MACSYM
[1] A new function for generating FORTRAN:
The file DSK:SHARE1;CFORTR FASL contains the function CRAY_FORTRAN and 
some other related functions (see the description file).  CRAY_FORTRAN 
generates FORTRAN suitable for the CRAY compilers.
A demo is available in DSK:SHARE1;CFORTR DEMO.
The function is described in DSK:SHARE1;CFORTR USAGE.

[2] A code sequence optimization function:
The file DSK:SHARE1;SEQOPT FASL contains the function SEQUENCE_OPTIMIZE, a
function which optimizes a MACSYMA expression or code sequence (list of
MACSYMA equations).  It knows slightly more about optimization than OPTIMIZE.
A demo is available in DSK:SHARE1;SEQOPT DEMO.
The function is described in DSK:SHARE1;SEQOPT USAGE.

[3] A function which replaces constant subexpressions with new constants:
The file DSK:SHARE1;RDUCON FASL contains the function REDUCE_CONSTS, a
function which replaces constant subexpressions by newly-generated constant
atoms, and maintains a list of definitions of those atoms.
A demo is available in DSK:SHARE1;RDUCON DEMO.
The function is described in DSK:SHARE1;RDUCON USAGE.

[4] A new factoring function:
The file DSK:SHARE1;SCIFAC FASL contains the function GCFAC, a new
factoring function which is capable of doing some "scientific" factoring.
A demo is available in DSK:SHARE1;SCIFAC DEMO.
The function is described in DSK:SHARE1;SCIFAC USAGE.

ASB@MIT-MC 01/27/83 12:26 EST  To: INFO-MACSYM
SHARE1;ATRIG1 FASL contains several additional simplification rules for
inverse trig functions.
A brief description can be found in SHARE1;ATRIG1 USAGE.
LOAD(ATRIG1) to use the rules.

ASB@MIT-MC 01/15/83 13:02-EST To: INFO-MACSYM
There is a new function RNCOMBINE which is similar to COMBINE, but 
unlike COMBINE it collects terms whose denominators may differ by 
numerical factors.  A more complete description is in SHARE1;RNCOMB USAGE 
and a demo in SHARE1;RNCOMB DEMO.

LCM, a function that finds the Least Common Multiple of a set of 
expressions, has been added to SHARE;FUNCTS >.  A brief description is in 
SHARE;FUNCTS USAGE, and a line for LCM has been added to SHARE;FUNCTS DEMO.

JPG@MIT-MC 01/12/83 06:31-EST  To: INFO-MACSYM
MACSYMA 303 has just been created.

GJC@MIT-MC 05/06/80 1816-EDT  To: INFO-MACSYMA-TRANSLATION
The 4 argument version of ROMBERG, e.g.
F(A):=(MODEDECLARE(A,FLOAT),ROMBERG(SIN(A*X)*(X^2-A*X+1),X,0,%PI));
now compiles well, actually better than the three argument version.
In this example F(3.3) takes 2.1 seconds to calculate uncompiled
but only 0.022 seconds compiled.  Using a separate function for
SIN(A*X)*(X^2-A*X+1), and compiling it, gives a timing of 0.032 seconds.
P.S. the 4 argument version of INTERPOLATE works also.

GJC@MIT-MC 03/09/80 0612-EST  To: INFO-MACSYM
There is a version of CFFK's famous INTERPOLATE function on the NUMER 
directory. The changes are that it now takes a macsyma (untranslated) 
function as a functional argument in the 3 argument case. And a call 
to it can be used in compiled code without loss of variable scoping. 
These changes will also be made soon to PLOT2 and ROMBERG. If any users 
have always wanted to write a function that took arguments in the neat
way that these functions do I can show you the package I used to convert 
INTERPOLATE. A demo, NUMER;INTPOL DEMO highlights these changes.

GJC@MIT-MC 01/12/80 0035-EST  To: INFO-MACSYM
NUMER;BATCH FASL has some functions in it that may be useful to users 
who run MACSYMA while not being logged in.  Such things as checking 
the status of a disowned running macsyma without stopping it.
See the file NUMER;BATCH INFO.

JPG@MIT-MC 08/07/79 0716-EDT  To: INFO-MACSYM, SPECIAL-FUNCTIONS
To aid in the introduction of polylogarithms, etc., when DIFF(F[N](X),X);
is done and F has a GRADEF defined for it, then DIFF(F(N,X),X); is 
attempted.  As an example, a GRADEF for the Bessel function %J[N](X)
has been set up, so e.g. RATSIMP(DIFF(%J[2](X),X,2)); may be done.
(The fact that this is implemented in terms of DIFF(%J(N,X),X) is 
somewhat hidden here.)  (Compare with the example given in the manual on 
p.72.  (Please note that the "RATSIMP" used there should be in line (C5), 
not (C4).))  At this time, setting up the GRADEF via GRADEF(F[N](X),...);
cannot be done.  The syntax GRADEF(F(N,X),...); must be used.

GJC@MIT-MC 08/05/79 2134-EDT  To: INFO-MACSYM
See the "SUPER WINNING EXAMPLE" in the documentation for the macsyma 
COMPILE command for turning expressions derived with macsyma into 
floating point function definitions that you will then use in GRAPH2, 
RUNGEKUTTA, ROMBERG, or whatever.

GJC@MIT-MC 08/04/79 0147-EDT  To: INFO-MACSYM
To see an example of fast numerical methods in macsyma, do
DEMO(RGKTEST,MAC,GJC); .  It shows the usage of the compiler from macsyma, 
and two ways of calculating (GRAPH2'ing) the solution of a differential 
equation, formal and RUNGEKUTTA. 

GJC@MIT-MC 07/26/79 02:56:58  To: INFO-MACSYM
A program RUNGEKUTTA(F,X,Y,D) that is fairly winning
when used in conjunction with GRAPH2 (X,Y, and D are arrays),
resides as NUMER;RUNGE FASL. Documentation is in the file RUNGE USAGE .
(*** For updated note on RUNGE_KUTTA, see this file, note of 06/07/81. ***)

GJC@MIT-MC 07/08/79 15:47:02  To: INFO-MACSYM
I have just added to the share2 directory functions that I have been 
using for a while that are both fast and convenient when working with 
declared floating point arrays and translated functions. There are 
functions for tabulating and mapping over declared arrays, a Gaussian 
quadrature formula, a simpson's rule for functions and one for arrays.
If you tend to use PLOT2 and ROMBERG on the same functions, then these 
can save you a lot of time. Please see the file SHARE2;NUMRCL INFO if 
you are interested.

