.sr sect_rcons Section`10.6.2
.
.ec a	 and
.ec d	 equivalence
.ec e	 epsilon
.ec f	 right arrow
.ec g	 >=
.ec j	 union (join)
.ec o	 or
.ec q	 <=
.ec v	 for all
.ec w	 there exists
.sr arg1 2arg1*
.sr arg2 2arg2*
.sr arg3 2arg3*
.sr argN 2argN*
.sr res 2res*
.sr each 1each*
.sr T1 T71*
.sr Ti T7i*
.sr Tn T7n*
.sr N1 N71*
.sr Ni N7i*
.sr Nn N7n*
.sr L1 L71*
.sr Li L7i*
.sr Ln L7n*
.sr atype array[T]
.sr rtype record[N1:T1,`...,`Nn:Tn]
.sr otype oneof[N1:T1,`...,`Nn:Tn]
.
.
.de bdfn
.sp .5
.be dfn_block
.nv indent indent
.nv ls
.ls 1
.keep ndfn
.em
.
.
.de ndfn
.end_keep
.sp .5
.en
.sr fff em  look, ma! a space
.if nargs<1
.sr fff
.en
.\fff!bdfn
.em
.
.
.de desc
.sp .5
.nr indent indent_pos
.em
.
.
.de pspec
.br
\0:
.if hpos>=indent_pos
`
.ef
. hp indent_pos!m
.en
proctype
.em
.
.
.de ispec
.br
\0:
.if hpos>=indent_pos
`
.ef
. hp indent_pos!m
.en
itertype
.em
.
.
.de opspec
\0: proctype
.em
.
.
.de args
(
.fr i 0 nargs-1
\\i
.if i<(nargs-1)
,
.en
.en
)
.em
.
.
.de rtns
returns (
.fr i 0 nargs-1
\\i
.if i<(nargs-1)
,
.en
.en
)
.em
.
.
.de ylds
yields (
.fr i 0 nargs-1
\\i
.if i<(nargs-1)
,
.en
.en
)
.em
.
.
.de sigs
signals (
.fr i 0 nargs-1
\\i
.if i<(nargs-1)
,
.en
.en
)
.em
.
.
.de sse
SSE
.em
.
.
.de pse
PSE
.em
.
.
.de where
.br
.hp where_pos!m
where T has \0: proctype
.em
.
.
.de wheach
.br
.hp where_pos!m
where each Ti has \0: proctype
.em
.
.
.de code
.sp .5
.be code_block
.nv ls 100
.nf
.em
.
.
.de ecode
.fi
.en
.em
.
.
.appendix "Built-in Types and Type Generators"
.if
.es temp
.sr env temp
.width "value_Ni`:_"
.nr indent_pos width
.hx where_pos width!m 8
.en
.achapter "Introduction"
.para
The following sections describe the built-in types and the types produced
by the built-in type generators.
For each type,
the objects of the type are characterized,
and all operations of the type are defined
(with the exception of the encode and decode operations,
which are defined in Appendix III).
.para
In defining an operation,
arg1, arg2, etc.,
refer to the arguments (the objects, not the syntactic expressions),
and res refers to the result of the operation.
If execution of an operation terminates in an exception,
we say the exception "occurs".
The order in which exceptions are listed in the operation type
is the order in which the various conditions are checked.
.para
The definition of an operation consists of an 2interface specification*
and an explanation of the relation between arguments and results.
An interface specification has the form
.bdfn
name:
.hp indent_pos!m
type_spec			side_effects
.br
.hp where_pos!m
restrictions
.desc
.ndfn 1
If 2side_effects* is null,
no side-effects can occur.
"PSE" (primary side-effect) indicates that the state of arg1 may change.
"SSE" (secondary side-effect) indicates that a state change may occur in some
object that is contained in an argument.
.foot
Secondary side-effects occur when a subsidiary abstraction performs
unwanted side-effects.
For example,
side-effects are not expected when atype$similar calls T$similar,
but their absence cannot be guaranteed.
.efoot
2Restrictions*,
if present,
is either a standard where clause,
or a clause of the form
.show
where each Ti has oper_decl7i*
.eshow
which is an abbreviation for
.show
where T1 has oper_decl71*, ..., Tn has oper_decl7n*
.eshow
.para
Arithmetic expressions and comparisons used in defining operations
are to be computed over the domain of mathematical integers
or the domain of mathematical reals;
the particular domain will be clear from context.
.para
Definitions of several of the types will involve tuples.
A tuple is written <e71*,`...,`e7n*>;
e7i* is called the i7th* element.
A tuple with 2n* elements is called an n-tuple.
We define the following functions on tuples:
.show
Size(<e71*, ..., e7n*>)  \d  n
.sp .3
A = B  \d  (Size(A) = Size(B)) \a (\vi | 1\qi\qSize(A))[a7i* = b7i*]
.sp .3
<a, ..., b> || <c, ..., d>  \d  <a, ..., b, c, ..., d>
.sp .3
Front(<a, ..., b, c>)  \d  <a, ..., b>.
.sp .3
Tail(<a, b, ..., c>)  \d  <b, ..., c>
.sp .3
Tail70*(A)  \d  A    and    Tail7n+1*(A)  \d  Tail(Tail7n*(A))
.sp .3
Occurs(A, B, i)  \d  (\wC,D)[(B = C || A || D) \a (Size(C) = i - 1)]
.eshow
If Occurs(A, B, i) holds, we say that A occurs in B at index i.
.achapter "Null"
.para
There is one immutable object of type null,
denoted nil.
.bdfn
.pspec equal
.	args null null
.	rtns bool
.pspec similar
.	args null null
.	rtns bool
.desc
Both operations always return true.
.ndfn
.pspec copy
.	args null
.	rtns null
.desc
Copy always returns nil.
.ndfn 1
.achapter "Bool"
.para
There are two immutable objects of type bool,
denoted true and false.
These objects represent logical truth values.
.bdfn
.pspec and
.	args bool bool
.	rtns bool
.pspec or
.	args bool bool
.	rtns bool
.pspec not
.	args bool
.	rtns bool
.desc
These are the standard logical operations.
.ndfn
.pspec equal
.	args bool bool
.	rtns bool
.pspec similar
.	args bool bool
.	rtns bool
.desc
These two operations return true if and only if
both arguments are the same object.
.ndfn
.pspec copy
.	args bool
.	rtns bool
.desc
Copy simply returns its argument.
.ndfn 1
.achapter "Int"
.sr Int_Min 4Int_Min*
.sr Int_Max 4Int_Max*
.para
Objects of type int are immutable,
and are intended to model the mathematical integers.
However,
the only restriction placed on an implementation is that
some closed interval [Int_Min,`Int_Max] be represented,
with Int_Min`<`0 and Int_Max`>`0.
An overflow exception is signalled by an operation if
the result of that operation would lie outside this interval.
.bdfn
.pspec add
.	args int int
.	rtns int
.	sigs overflow
.pspec sub
.	args int int
.	rtns int
.	sigs overflow
.pspec mul
.	args int int
.	rtns int
.	sigs overflow
.desc
The standard integer addition, subtraction, and multiplication operations.
.ndfn
.pspec minus
.	args int
.	rtns int
.	sigs overflow
.desc
Minus returns the negative of its argument.
.ndfn
.pspec div
.	args int int
.	rtns int
.	sigs zero_divide overflow
.desc
Div computes the integer quotient of arg1 and arg2:
	\wr`[(0`\q`r`<`|arg2|)`\a`(arg1`=`arg2*res`+`r)]
.br
Zero_divide occurs if arg2`=`0.
.ndfn
.pspec mod
.	args int int
.	rtns int
.	sigs zero_divide overflow
.desc
Mod computes the integer remainder of dividing arg1 by arg2.
That is,
	\wq`[(0`\q`res`<`|arg2|)`\a`(arg1`=`arg2*q`+`res)]
.br
Zero_divide occurs if arg2`=`0.
.ndfn
.pspec power
.	args int int
.	rtns int
.	sigs negative_exponent overflow
.desc
This operation computes arg1 raised to the arg2 power.
Power(0,`0)`\d`1.
Negative_exponent occurs if arg2`<`0.
.ndfn
.ispec from_to_by
.	args int int int
.	ylds int
.desc
This iterator yields,
in succession,
arg1, arg1`+`arg3, arg1`+`2*arg3, etc.,
as long as the value to yield, x, satisfies
arg1`\q`x`\q`arg2 when arg3`>`0,
or arg2`\q`x`\q`arg1 when arg3`<`0.
The iterator continually yields arg1 if arg3`=`0.
.ndfn
.ispec from_to
.	args int int
.	ylds int
.desc
from_to(arg1,`arg2) is equivalent to from_to_by(arg1,`arg2,`1).
.ndfn
.pspec lt
.	args int int
.	rtns bool
.pspec le
.	args int int
.	rtns bool
.pspec ge
.	args int int
.	rtns bool
.pspec gt
.	args int int
.	rtns bool
.desc
The standard ordering relations.
.ndfn
.pspec equal
.	args int int
.	rtns bool
.pspec similar
.	args int int
.	rtns bool
.desc
These two operations return true if and only if both arguments are the same object.
.ndfn
.pspec copy
.	args int
.	rtns int
.desc
Copy simply returns its argument.
.ndfn 1
.achapter "Real"
.sr Real_Min 4Real_Min*
.sr Real_Max 4Real_Max*
.para
Objects of type real are immutable,
and are intended to model the mathematical real numbers.
However,
only a subset of
	D = [-Real_Max, -Real_Min] \j {0} \j [Real_Min, Real_Max]
.br
need be represented,
where 0`<`Real_Min`<`1`<`Real_Max.
Call this subset Real.
We require that both 0 and 1 be elements of Real.
If the exact value of a real literal lies in D,
then the value in CLU is given by a function Approx,
which satisfies the following axioms:
.keep
.show
\v r \e D		s(1)Approx(r) \e Real
\v r \e Realt(1)Approx(r) = r
\v r \e Dt(1)|(Approx(r) - r)/r| < 10-p        p \g 6, r 6=* 0
\v r,s \e Dt(1)r \q s \f Approx(r) \q Approx(s)
\v r \e Dt(1)Approx(-r) = -Approx(r)
.eshow
The constant 2p* is the 2precision* of the approximation.
.end_keep
.bdfn
.pspec add
.	args real real
.	rtns real
.	sigs overflow underflow
.pspec sub
.	args real real
.	rtns real
.	sigs overflow underflow
.pspec mul
.	args real real
.	rtns real
.	sigs overflow underflow
.pspec minus
.	args real
.	rtns real
.pspec div
.	args real real
.	rtns real
.	sigs zero_divide overflow underflow
.desc
These operations satisfy the following axioms:
.code
1)	(a,b \g 0 \o a,b \q 0) \f add(a, b) = Approx(a + b)
2)	add(a, b) = (1 + \e)(a + b)		|\e| < 10-p
3)	add(a, 0) = a
4)	add(a, b) = add(b, a)
5)	a \q a' \f add(a, b) \q add(a', b)
6)	minus(a) = -a
7)	sub(a, b) = add(a, -b)
8)	mul(a, b) = Approx(a * b)
9)	div(a, b) = Approx(a / b)
.ecode
.ndfn
.nr indent indent_pos
In axiom 2, the value of 2p* is the same as that used in defining Approx.
Note that the infix and prefix expressions above are computed over
the mathematical real numbers.
The axioms only hold if no exceptions occur.
An exception occurs if the result of an exact computation lies outside of D;
overflow occurs if the magnitude exceeds Real_Max,
and underflow occurs if the magnitude is less than Real_Min.
Zero_divide occurs if arg2`=`0.
.ndfn
.pspec power
.	args real real
.	stab 1
.	rtns real
.	btab 1
.	sigs zero_divide complex_result overflow underflow
.desc
This operation computes arg1 raised to the arg2 power.
Zero_divide occurs if arg1`=`0`\a`arg2`<`0.
Complex_result occurs if arg1`<`0 and arg2 is non-integral.
Overflow and underflow occur as explained above.
.ndfn
.pspec i2r
.	args int
.	rtns real
.	sigs overflow
.desc
I2r returns a real number corresponding to the argument:
res`=`Approx(arg1).
Overflow occurs if arg1 lies outside the domain D.
.ndfn
.pspec r2i
.	args real
.	rtns int
.	sigs overflow
.desc
R2i rounds to the nearest integer,
and toward zero in case of a tie:
	(|res`-`arg1|`\q`1/2)`\a`(|res|`<`|arg1|`+`1/2)
.br
Overflow occurs if the result lies outside the domain for CLU integers.
.ndfn
.pspec trunc
.	args real
.	rtns int
.	sigs overflow
.desc
Trunc truncates its argument toward zero:
(|res`-`arg1|`<`1)`\a`(|res|`\q`|arg1|).
Overflow occurs if the result lies outside the domain for CLU integers.
.ndfn
.pspec lt
.	args real real
.	rtns bool
.pspec le
.	args real real
.	rtns bool
.pspec ge
.	args real real
.	rtns bool
.pspec gt
.	args real real
.	rtns bool
.desc
The standard ordering relations.
.ndfn
.pspec equal
.	args real real
.	rtns bool
.pspec similar
.	args real real
.	rtns bool
.desc
These two operations return true if and only if both arguments are the same object.
.ndfn
.pspec copy
.	args real
.	rtns real
.desc
Copy simply returns its argument.
.ndfn 1
.achapter "Char"
.sr Char_Top 4Char_Top*
.para
Objects of type char are immutable,
and represent characters.
Every implementation must provide at least 128,
but no more than 512,
characters.
Characters are numbered from 0 to some Char_Top,
and this numbering defines the ordering for the type.
The first 128 characters are the ASCII characters in their standard order.
.bdfn
.pspec i2c
.	args int
.	rtns char
.	sigs illegal_char
.desc
I2c returns the character corresponding to the argument.
Illegal_char occurs if the argument is not in the range [0,`Char_Top].
.ndfn
.pspec c2i
.	args char
.	rtns int
.desc
This operation returns the number corresponding to the argument.
.ndfn
.pspec lt
.	args char char
.	rtns bool
.pspec le
.	args char char
.	rtns bool
.pspec ge
.	args char char
.	rtns bool
.pspec gt
.	args char char
.	rtns bool
.desc
The ordering relations consistent with the numbering of characters.
.ndfn
.pspec equal
.	args char char
.	rtns bool
.pspec similar
.	args char char
.	rtns bool
.desc
These two operations return true if and only if the two arguments are the same object.
.ndfn
.pspec copy
.	args char
.	rtns char
.desc
Copy simply returns its argument.
.ndfn 1
.achapter "String"
.para
Objects of type string are immutable.
Each string represents a tuple of characters.
The i7th* character of the string is
the i7th* element of the tuple.
There are an infinite number of strings,
but an implementation need only support a finite number.
Attempts to construct illegal strings result in a failure exception.
.bdfn
.pspec size
.	args string
.	rtns int
.desc
This operation simply returns the size of the tuple respresented by the argument.
.ndfn
.pspec indexs
.	args string string
.	rtns int
.desc
If arg1 occurs in arg2,
this operation returns the least index at which arg1 occurs:
	res`=`min{i`|`Occurs(arg1,`arg2,`i)}
.br
Note that the result is 1 if arg1 is the 0-tuple.
The result is 0 if arg1 does not occur.
.ndfn
.pspec indexc
.	args char string
.	rtns int
.desc
If <arg1> occurs in arg2,
the result is the least index at which <arg1> occurs:
	res`=`min{i`|`Occurs(<arg1>,`arg2,`i)}
.br
The result is 0 if <arg1> does not occur.
.ndfn
.pspec c2s
.	args char
.	rtns string
.desc
This operation returns the string representing the 1-tuple <arg1>.
.ndfn
.pspec concat
.	args string string
.	rtns string
.desc
Concat returns the string representing the tuple arg1`||`arg2.
.ndfn
.pspec append
.	args string char
.	rtns string
.desc
This operation returns the string representing the tuple arg1`||`<arg2>.
.ndfn
.pspec fetch
.	args string int
.	rtns char
.	sigs bounds
.desc
Fetch returns the arg27th* character of arg1.
Bounds occurs if arg2`<`1 or arg2`>`size(arg1).
.ndfn
.pspec rest
.	args string int
.	rtns string
.	sigs bounds
.desc
The result of this operation is Tail7arg2-1*(arg1).
Bounds occurs if arg2`<`1 or arg2`>`size(arg1)`+`1.
.ndfn
.pspec substr
.	args string int int
.	rtns string
.	sigs bounds negative_size
.desc
If arg3`\q`size(rest(arg1, arg2)),
the result is the string representing the tuple
of size arg3 which occurs in arg1 at index arg2.
Otherwise,
the result is rest(arg1, arg2).
Bounds occurs if arg2`<`1 or arg2`>`size(arg1)`+`1.
Negative_size occurs if arg3`<`0.
.ndfn
.pspec s2ac
.	args string
.	rtns array[char]
.desc
This operation places the characters of the argument
as elements of a new array of characters.
The low bound of the array is 1,
and the size of the array is size(arg1).
The i7th* element of the array is the i7th* character
of the string.
.ndfn
.pspec ac2s
.	args array[char]
.	rtns string)
.desc
Ac2s serves as the inverse of s2ac.
The result is the string with characters in the same order as in the argument.
That is,
the i7th* character of the result is the
(i`+`low(arg1)`-`1)7th* element of the argument.
.ndfn
.ispec chars
.	args string
.	ylds char
.desc
This iterator yields,
in order,
each character of the argument.
.ndfn
.pspec lt
.	args string string
.	rtns bool
.pspec le
.	args string string
.	rtns bool
.pspec ge
.	args string string
.	rtns bool
.pspec gt
.	args string string
.	rtns bool
.desc
These are the usual lexicographic orderings based on the ordering for characters.
The lt operation is equivalent to the following:
.code
lt = proc (x, y: string) returns (bool);
	size_x: int := string$size(x);
	size_y: int := string$size(y);
	min: int;
	if s(1)size_x <= size_y
t(1)then min := size_x;
t(1)else min := size_y;
t(1)end;
	for i: int in int$from_to_by(1, min, 1) do
		if x[i] < y[i] then return(true); end;
		end;
	return(size_x < size_y);
	end lt;
.ecode
.ndfn
.pspec equal
.	args string string
.	rtns bool
.pspec similar
.	args string string
.	rtns bool
.desc
These two operations return true if and only if both arguments are the same object.
.ndfn
.pspec copy
.	args string
.	rtns string
.desc
Copy simply returns its argument.
.ndfn 1
.achapter "Array Types"
.sr Low 4Low*
.sr High 4High*
.sr Size 4Size*
.sr Elts 4Elts*
.para
The array type generator defines an infinite class of types.
For every type T there is a type atype.
Array objects are mutable.
The state
.foot
For an array A,
we should properly write Low7A*,
etc.,
to refer to the state of that particular object,
but subscripts will be dropped when the association seems clear.
.efoot
of an object of type atype consists of:
.show
.keep
a)  s(1)an integer Low, called the low bound, and
b)t(1)a tuple Elts of objects of type T, called the elements.
.end_keep
.eshow
We also define Size`\d`Size(Elts),
and High`\d`Low`+`Size`-`1.
We want to think of the elements of Elts as being numbered from Low,
so we define the array_index of the i7th* element to be
(i`+`Low`-`1).
.para
For any array,
Low, High, and Size must be legal integers.
Any attempts to create or modify an array in violation of this rule results
in a failure exception.
Note that for all array operations,
if an exception other than failure occurs,
the states of all array arguments are unchanged
from those at the time of invocation.
.bdfn
.pspec create
.	args int
.	rtns atype
.desc
This operation returns a new array for which Low is arg1 and Elts is the 0-tuple.
.ndfn
.pspec new
.	args 
.	rtns atype
.desc
This is equivalent to create(1).
.ndfn
.pspec predict
.	args int int
.	rtns atype
.desc
Predict is essentially the same as create(arg1),
in that it returns a new array for which Low is arg1 and Elts is the 0-tuple.
However,
if arg2 is greater than (less than) 0,
it is assumed that at least |arg2| addh's (addl's) will be performed on the array.
These subsequent operations may execute somewhat faster.
.ndfn
.pspec low
.	args atype
.	rtns int
.pspec high
.	args atype
.	rtns int
.pspec size
.	args atype
.	rtns int
.desc
These operations return Low,
High,
and Size,
respectively.
.ndfn
.pspec set_low
.	args atype int
.	pse
.desc
Set_low makes Low equal to arg2.
.ndfn
.pspec trim
.	args atype int int
.	sigs bounds negative_size
.	pse
.desc
This operation makes Low equal to arg2,
and makes Elts equal to the tuple of size min{arg3,`High'`-`arg2`+`1}
which occurs in Elts' at index arg2`-`Low'`+`1.fn
That is,
every element with array_index less than arg2,
or greater than or equal to arg2`+`arg3,
is removed.
Bounds occurs if arg2`<`Low' or arg2`>`High'`+`1.
Negative_size occurs if arg3`<`0.
Note that this operation is somewhat like string$substr.
.ndfn 1
.sfoot
Elts', High', etc. refer to the state just prior to invoking the operation.
.efoot
.bdfn
.pspec fill
.	args int int T
.	rtns atype
.	sigs negative_size
.desc
Fill creates a new array for which Low is arg1
and Elts is an arg2-tuple in which
every element is arg3.
Negative_size occurs if arg2`<`0.
.ndfn
.pspec fill_copy
.	args int int T
.	rtns atype
.	sigs negative_size
.where copy
.	args T
.	rtns T
.desc
This operation is equivalent to the following:
.code
fill_copy = proc (nlow, nsize: int, elt: T) returns (at) signals (negative_size);
	at = atype;
	if nsize < 0 then signal negative_size; end;
	x: at := at$predict(nlow, nsize);
	for i: int in int$from_to_by(1, nsize, 1) do
		at$addh(x, T$copy(elt));
		end;
	return(x);
	end fill_copy;
.ecode
.ndfn
.pspec fetch
.	args atype int
.	rtns T
.	sigs bounds
.desc
Fetch returns the element of arg1 with array_index arg2.
Bounds occurs if arg2`<`Low or arg2`>`High.
.ndfn
.pspec bottom
.	args atype
.	rtns T
.	sigs bounds
.pspec top
.	args atype
.	rtns T
.	sigs bounds
.desc
These operations return the elements with array_indexes Low and High,
respectively.
Bounds occurs if Size`=`0.
.ndfn
.pspec store
.	args atype int T
.	sigs bounds
.	pse
.desc
Store makes Elts a new tuple which differs from
the old in that arg3 is the element with array_index arg2.
Bounds occurs if arg2`<`Low or arg2`>`High.
.ndfn
.pspec addh
.	args atype T
.	pse
.desc
This operation makes Elts the new tuple Elts'`||`<arg2>.
.ndfn
.pspec addl
.	args atype T
.	pse
.desc
This operation makes Low equal to Low'`-`1,
and makes Elts the tuple <arg2>`||`Elts'.
Decrementing Low keeps the array_indexes of the previous elements the same.
.ndfn
.pspec remh
.	args atype
.	rtns T
.	sigs bounds
.	pse
.desc
Remh makes Elts the tuple Front(Elts'),
and returns the deleted element.
Bounds occurs if Size'`=`0.
.ndfn
.pspec reml
.	args atype
.	rtns T
.	sigs bounds
.	pse
.desc
Reml makes Low equal to Low'`+`1,
makes Elts the tuple Tail(Elts'),
and returns the deleted element.
Incrementing Low keeps the array_indexes of the remaining elements the same.
Bounds occurs if Size'`=`0.
.ndfn
.ispec elements
.	args atype
.	ylds T
.desc
Elements with array_indexes in the range [Low',`High']
are yielded in order.
If the state of arg1 is changed
after the iterator has yielded an element,
it is possible that when the iterator is resumed
there is no element for the next array_index.
Bounds occurs in such a case.
.ndfn
.ispec indexes
.	args atype
.	ylds int
.desc
This iterator is equivalent to  int$from_to(Low',`High').
.ndfn
.pspec equal
.	args atype atype
.	rtns bool
.desc
Equal returns true if and only if both arguments are the same object.
.ndfn
.pspec similar
.	args atype atype
.	rtns bool
.	sse
.where similar
.	args T T
.	rtns bool
.desc
This operation is equivalent to the following:
.code
similar = proc (x, y: at) returns (bool)
		where T has similar: proctype (T, T) returns (bool);
	at = atype;
	if s(1)at$low(x) ~= at$low(y) cor at$size(x) ~= at$size(y)
t(1)then return(false);
t(1)end;
	for i: int in at$indexes(x) do
		if ~T$similar(x[i], y[i]) then return(false); end;
		end;
	return(true);
	end similar;
.ecode
.ndfn
.pspec similar1
.	args atype atype
.	rtns bool
.	sse
.where equal
.	args T T
.	rtns bool
.desc
Similar1 works in the same way as similar,
except that T$equal is used instead of T$similar.
.ndfn
.pspec copy1
.	args atype
.	rtns atype
.desc
Copy1 creates a new array with the same state as the argument.
.ndfn
.pspec copy
.	args atype
.	rtns atype
.	sse
.where copy
.	args T
.	rtns T
.desc
This operation is equivalent to the following:
.code
copy = proc (x: at) returns (at) where T has copy: proctype (T) returns (T);
	at = atype;
	x := at$copy1(x);
	for i: int in at$indexes(x) do
		x[i] := T$copy(x[i]);
		end;
	return(x);
	end copy;
.ecode
.ndfn 1
.achapter "Record Types"
.para
The record type generator defines an infinite class of types.
For every tuple of name/type pairs <(N1,`T1),`...,`(Nn,`Tn)>,
where all the names are distinct,
in lower case,
and in lexicographic order,
there is a type rtype.
(However the user may write this type with the pairs permuted,
and may use upper case letters in names.)`
Records are mutable objects.
The state of a record of type rtype is an n-tuple;
the i7th* element of the tuple is of type Ti.
The i7th* element is also called the Ni-component.
.bdfn
.pspec create
.	args T1 ... Tn
.	rtns rtype
.desc
This operation returns a new record with the tuple
<arg1,`...,`argN> as its state.
This operation is not available to the user;
its use is implicit in the record constructor (see sect_rcons).
.ndfn
.pspec get_Ni`
.	args rtype
.	rtns Ti
.desc
This operation returns the Ni-component of the argument.
There is a get_Ni operation for each Ni.
.ndfn
.pspec set_Ni`
.	args rtype Ti
.	pse
.desc
This operation makes the state of arg1 a new tuple
which differs from the old in that the Ni-component is arg2.
There is a set_Ni operation for each Ni.
.ndfn
.pspec equal
.	args rtype rtype
.	rtns bool
.desc
Equal returns true if and only if both arguments are the same object.
.ndfn
.pspec similar
.	args rtype rtype
.	rtns bool
.	sse
.wheach similar
.	args Ti Ti
.	rtns bool
.desc
Corresponding components of arg1 and arg2 are compared in (lexicographic) order,
using Ti$similar for the Ni-components.
(The Ni-component of arg1 becomes the first argument.)`
If a comparison results in false,
the result of the operation is false,
and no further comparisons are made.
If all comparisons return true,
the result is true.
.ndfn
.pspec similar1
.	args rtype rtype
.	rtns bool
.	sse
.wheach equal
.	args Ti Ti
.	rtns bool
.desc
Similar1 works in the same way as similar,
except that Ti$equal is used instead of Ti$similar.
.ndfn
.pspec copy1
.	args rtype
.	rtns rtype
.desc
Copy1 returns a new record with the same state as the argument.
.ndfn
.pspec copy
.	args rtype
.	rtns rtype
.	sse
.wheach copy
.	args Ti
.	rtns Ti
.desc
This operation is equivalent to the following
(note that the Ni are in lexicographic order):
.code
copy = proc (x: rt) returns (rt)
		where s(1)T1 has copy: proctype (T1) returns (T1),
t(1)...
t(1)Tn has copy: proctype (Tn) returns (Tn);
	rt = rtype;
	x := rt$copy1(x);
	x.N1 := T1$copy(x.N1);
		...
	x.Nn := Tn$copy(x.Nn);
	return(x);
	end copy;
.ecode
.ndfn 1
.achapter "Oneof Types"
.para
The oneof type generator defines an infinite class of types.
For every tuple of name/type pairs <(N1,`T1),`...,`(Nn,`Tn)>,
where all of the names are distinct,
in lower case,
and in lexicographic order,
there is a type otype.
(However the user may write this type with the pairs permuted,
and may use upper case letters in names.)`
Oneof objects are immutable.
Each object represents a name/object pair (Ni,`X),
where X is of type Ti.
For each object X of type Ti there is an object for the pair (Ni,`X).
Ni is called the tag of the oneof,
and X is called the value.
.bdfn
.pspec make_Ni`
.	args Ti
.	rtns otype
.desc
This operation returns the oneof object for the pair (Ni,`arg1).
There is a make_Ni operation for each Ni.
.ndfn
.pspec is_Ni`
.	args otype
.	rtns bool
.desc
This operation returns true if and only if the tag of the argument is Ni.
There is an is_Ni operation for each Ni.
.ndfn
.pspec value_Ni`
.	args otype
.	rtns Ti
.	sigs wrong_tag
.desc
If the argument has tag Ni, the result is the value part of the argument.
Wrong_tag occurs if the tag is other than Ni.
There is a value_Ni operation for each Ni.
.ndfn
.pspec equal
.	args otype otype
.	rtns bool
.	sse
.wheach equal
.	args Ti Ti
.	rtns bool
.desc
If arg1 and arg2 have different tags,
the result is false.
If both tags are Ni,
the result is that of invoking Ti$equal with the two value parts.
.ndfn
.pspec similar
.	args otype otype
.	rtns bool
.	sse
.wheach similar
.	args Ti Ti
.	rtns bool
.desc
If arg1 and arg2 have different tags,
the result is false.
If both tags are Ni,
the result is that of invoking Ti$similar with the two value parts.
.ndfn
.pspec copy
.	args otype
.	rtns otype
.	sse
.wheach copy
.	args Ti
.	rtns Ti
.desc
If arg1 represents the pair (Ni,`X),
then the result is the oneof object for the pair (Ni,`Ti$copy(X)).
.ndfn 1
.achapter "Procedure and Iterator Types"
.para
Let A, R, L1, ..., Ln be ordered lists of types,
and let N1,`...,`Nn be distinct names in lower case and in lexicographic order.
Then there is a type
	proctype`(A)`returns`(R)`signals`(N1(L1),`...,`Nn(Ln))
.br
and a type
	itertype`(A)`yields`(R)`signals`(N1(L1),`...,`Nn(Ln)).
.br
(The user may permute the Ni(Li)'s,
and may use upper case letters in names.
If R is empty then "returns`(R)" is not written,
"(Li)" is not written if Li is empty,
and "signals`(...)" is not written if n`=`0.)
.para
The create operations are not available to the user;
their use is implicit in the procedure and iterator constructors.
.para
Let T be a procedure (or iterator) type in the following.
.bdfn
.pspec equal
.	args T T
.	rtns bool
.pspec similar
.	args T T
.	rtns bool
.desc
These operations return true if and only if both arguments are the same
implementation of the same abstraction,
with the same parameters.
.ndfn
.pspec copy
.	args T
.	rtns T
.desc
Copy simply returns its argument.
.ndfn 1
.achapter "Any"
.para
The type any is the union of all types.
There are no operations for the type any.
Thus,
for example,
no array[any]$copy operation exists.
