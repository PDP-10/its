.begin_table_of_contents 4
.width "1199"
.nr width ll-rindent-width
.am table_of_contents
. ta 8 width!m
3````s(toc1)*
3Overview*
4```````````s(toc2)`````````````````````s(toc3)*
. em
.
.sr sect_library Section`4
.sr sect_compare Section`2.3
.sr app_io Appendix`III
.sr sect_semantics Section`3
.sr sect_progs Section`1.5
.sr sect_except Section`12
.sr sect_parms Section`1.4
.
.sr E 2E*
.sr m 2m*
.sr p 2p*
.sr q 2q*
.sr x 2x*
.sr y 2y*
.sr z 2z*
.sr a 2a*
.sr b 2b*
.sr s 2s*
.sr v 2v*
.sr insert 2insert*
.sr alpha 9a*
.sr beta 9b*
.sr gamma 9g*
.
.de circle
. if
.  nv h hpos
(+1.5)\0(-1.5)
.  hp h!m
\1
.  hs (1.2*fheight)m
\2
.  en
. em
.
.
.de setup_centers
. if
.  nv sum center_spacing*(nargs-1)
.  fr i 0 nargs-1
.   width "\\i"
.   nr sum sum+width
.   en
.  width \0
.  nr center_stop0 master_center-sum/2
.  fr i 0 nargs-1
.   width "\\i"
.   nv ip i+1
.   nr center_stop\ip center_stop\i+width+center_spacing
.   nr center_stop\i center_stop\i+width/2
.   en
.  en
. em
.
.de center_all
. fr i 0 nargs-1
.  width "\\i"
.  hp (center_stop\i-width/2)m
\\i
.  en
. br
. em
.
.chapter "Modules"
.para
A CLU program consists of a group of modules.
Three kinds of modules are provided,
one for each kind of abstraction that we have found to be useful in program construction.
Procedures support procedural abstraction,
iterators support control abstraction,
and clusters support data abstraction.
.section "Procedures"
.para
A CLU 2procedure* performs an action on zero or more 2argument* objects,
and terminates returning zero or more 2result* objects.
All communication between a procedure and its invoker takes place through
these arguments and results,
i.e.,
a procedure has no global variables.
.para
A procedure may terminate in one of a number of 2conditions*.
One of these is the normal condition; the others are exceptional conditions.
Differing numbers and types of results may be returned in different conditions.
All information about the names of conditions and the number and types of
arguments and results is described in the 2procedure heading*.
For example,
.show
square_root = proc (x: real) returns (real) signals (no_real_result)
.eshow
is the heading of a square_root procedure,
which takes a single real argument.
Square_root terminates either in the normal condition (returning the square root of x)
or in the no_real_result condition (returning no results).
.section "Iterators"
.para
An 2iterator* computes a sequence of 2items* based on its input arguments.
These items are provided to its invoker one at a time.
Each item consists of zero or more objects.
.para
An iterator is invoked by a for statement.
The iterator provides each item by 2yielding* it.
The objects in the item are assigned to the loop variables of the for statement,
and the body of the for statement is executed.
Then control is returned to the iterator so it can yield the next item in the sequence.
The for loop is terminated when the iterator terminates,
or the for loop body may explicitly terminate itself and the iterator.
.para
Just like a procedure,
an iterator has no global variables,
and may terminate in one of a number of conditions.
In the normal condition,
no results can be returned,
but different numbers and types of results can be returned in the exceptional conditions.
All information about the names of conditions,
and the number and types of arguments and results is described in
the 2iterator heading*.
For example,
.show
leaves = iter (t: tree) yields (node)
.eshow
is the heading for an iterator that produces all leaf nodes of a tree object.
This iterator might be used in a for statement as follows:
.show 3
for s(1)leaf: node in leaves(x) do
t(1)... examine(leaf) ...
t(1)end
.eshow
.section "Clusters"
.para
A 2cluster* defines a data abstraction,
which is a set of objects and a set of 2primitive operations*
to create and manipulate those objects.
The operations can be either procedural or control abstractions.
The 2cluster heading* states what operations are available, e.g.,
.show
int_set = cluster is create, insert, elements
.eshow
states that the operations of int_set are
2create*, 2insert*, and 2elements*.
.para
A cluster is used to define a distinct 2data type*,
different from all others.
Users of this type are constrained to treat objects of the type abstractly.
That is,
the objects may be manipulated only via the primitive operations.
This means that information about how the objects are represented in storage
may not be used.
Instead,
the primitive operations must be used to manipulate and
query the information in the objects.
.para
Inside the cluster,
a 2concrete representation* (in terms of some other type) is chosen for the objects,
and the operations are implemented in terms of this representation.
Each operation is implemented by a 2routine* (a procedure or iterator);
these routines are exactly like those not contained in clusters,
except that they can treat the objects being defined by the
cluster both abstractly and in terms of the concrete representation.
(Treating the objects abstractly is useful when defining recursive structures,
where the concrete representation makes use of the new type.)
A cluster may contain additional procedures and iterators,
which are purely for local use;
these routines do not define operations of the type.
.section "Parameterized Modules"
.para
Procedures, iterators, and clusters can all be 2parameterized*.
Parameterization provides the ability to define a class of related abstractions
by means of a single module.
Parameters are limited to the following types:
int, real, bool, char, string, null, and type.
The most interesting and useful of these are the type parameters.
.para
When a module is parameterized by a type parameter,
this implies that the module was written without knowledge of what
the actual parameter type would be.
Nevertheless,
if the module is to do anything with objects of the parameter type,
certain operations must be provided by any actual type.
Information about required operations is described in a where clause,
which is part of the heading of a parameterized module.
For example,
.show 2
set = cluster [t: type] s(1)is create, insert, elements
t(1)where t has equal: proctype (t, t) returns (bool)
.eshow
is the header of a parameterized cluster defining a generalized set abstraction.
Sets of many different element types can be obtained from this cluster,
but the where clause states that the element type is constrained to
provide an 2equal* operation.
.para
To use a parameterized module,
actual values for the parameters must be provided,
using the general form
.show
module_name [ parameter_values ]
.eshow
Parameter values are limited to compile-time computable quantities.
Providing actual parameters selects one abstraction out of
the class of related abstractions defined by the parameterized module;
since the values are compile-time known,
the compiler can do the selection and can check that
the where clause restrictions are satisfied.
The result of the selection,
in the case of a parameterized cluster,
is a type,
which can then be used in declarations;
in the case of parameterized procedures or iterators,
a procedure or iterator is obtained,
which is then available for invocation.
For example,
set[int] is a use of the set abstraction shown above,
and is legal because int does have an 2equal* operation.
.para
A parameterized cluster, procedure, or iterator is said to implement a
2type generator*, 2procedure generator*, or 2iterator generator*,
respectively.
.section "Program Structure"
.para
As was mentioned before,
a program consists of a group of modules.
Each module defines either a single abstraction or,
if parameterized,
a class of related abstractions.
Modules are never embedded in other modules.
Rather,
the program is a single level structure,
with all modules potentially usable by all other modules in the program.
Type-checking of inter-module references is carried out using information
in the module headings,
augmented,
in the case of clusters,
by the headings of the procedures and iterators that implement the operations.
.para
Each module is a separate textual unit,
and is compiler independently of other modules.
Compilation and program construction are discussed in sect_library.
.chapter "Data Types"
.para
One of the primary goals of CLU was to provide,
through clusters,
a type extension mechanism that permits user-defined types
to be treated as similarly as possible to built-in types.
This goal has been achieved to a large extent.
Both built-in and user-defined types are viewed as providing
sets of primitive operations,
with access to the real representation information limited to just these operations.
The ways in which built-in types differ from user-defined types
will be discussed in sect_compare below.
.section "Built-in Types"
.para
CLU provides a rich set of built-in types and type-generators.
The built-in types are
int, real, bool, char, string, null, and any.
1Int* and real provide the usual arithmetic and relational operations,
and bool provides the standard boolean operations.
1Char* is the full ASCII character set;
the usual relational operators are provided,
along with conversion to and from integers.
1Strings* are (possibly empty) sequences of characters;
usual string operations like selecting the 2ith* character,
and concatenation are provided.
However,
strings are somewhat unusual in that string objects cannot be modified.
For example,
it is not possible to change a character in a string;
instead,
a new string,
differing from the original in that position,
may be created.
.para
1Null* is a type containing one object, nil.
1Null* is used primarily in conjunction with the tagged union type
discussed below.
.para
1Any* is provided to permit an escape from compile-time type checking.
The type any introduces no new objects,
but instead may be used as the type of a variable when the programmer wishes
to assign objects of different types to that variable,
or does not know what kind of object will be assigned to the variable.
CLU provides a built-in procedure generator,
force,
which permits a run-time examination of the type of object
named by a variable of type any.
.para
The built-in type generators are:
array, record, oneof, proctype, and itertype.
Arrays are one-dimensional.
The type of element contained in the array is specified by a type parameter,
e.g., array[int] and array[array[int]].
(The latter example shows how a two-dimensional array might be handled.)  
CLU arrays are unusual in that they can grow dynamically.
An array is usually empty when first created.
Array operations can grow and shrink the array at either end,
query the current size and low and high bounds of the array,
and access and update elements within the current bounds.
.para
CLU records are heterogeneous collections of component objects;
each component is accessed by a selector name.
Records must be explicitly constructed by means of a special 2record constructor*.
The constructor requires that an object be provided for each component of the record;
this requirement ensures that no component of the record is undefined
in the sense of naming no object.
Record operations permit selection of component objects and
updating the components with new objects.
.para
A oneof type is a tagged,
discriminated union.
The objects of a oneof type each consist of a 2tag* (an identifier)
and an object of some other type.
Operations are provided for creating oneof objects.
Oneof objects are usually decomposed through the tagcase statement.
.para
Procedure and iterator types provide procedures and iterators as objects.
These types are parameterized by all the information appearing in
a procedure or iterator heading, with the exception of the formal argument names.
Since all communication with a procedure or iterator is through
the arguments and results,
no problems concerning evaluation environments arise in the use of
procedures or iterators as first-class objects.
.para
In addition to all the built-in types and type generators mentioned above,
CLU programs may also make use of the type type.
The use of type values is limited to parameters of parameterized modules;
there are no arguments or variables of type type.
Furthermore,
the values of type type (comprising all built-in and user-defined types)
are all compile-time-known.
.para
Finally,
CLU provides a number of types and procedures to support I/O.
These types are not considered to be built-in types of CLU,
but they must be available in the library.
These types are described in app_io.
.section "User-Defined Types"
.para
Users may define new types by providing clusters that implement them.
The cluster may implement a single type,
or,
in the case of a parameterized cluster,
a group of related types.
The type or types defined by a cluster are distinct from all built-in types
and from all types defined by other clusters.
.section "Comparison of User-Defined and Built-In Types"
.para
Little distinction is made between user-defined types and built-in types.
Either can be used freely to declare the arguments,
variables,
and results of routines.
In addition,
in either case there is a set of primitive operations associated with the type,
and the same syntax is used to invoke these operations.
The ordinary syntax to name an operation is
.show
type $ opname
.eshow
Since different types will often have operations of the same name (e.g., 2create*),
this compound form is used to avoid ambiguity.
.para
For many operations there is also a customary abbreviated form of invocation,
which can be used for user-defined types as well as for built-in types.
There is a standard translation from each abbreviated form to
the ordinary form of invocation.
For example,
an addition operation is usually invoked using the infix notation "x + y";
this is translated into "T$add(x, y)",
where T is the type of x.
Extending notation to user-defined types in this way is sometimes called
2operator overloading*.
We permit almost all special syntax to be overloaded;
there are always constraints on the overloading definition
(e.g., 2add* must have two input arguments and one result),
but they are quite minimal.
.para
Nevertheless,
there are three main distinctions between built-in types and user-defined types:
.nlist
Built-in type and type generator names cannot be redefined.
(This is why we always show them in boldface in this document.)
.nnext
Some built-in types,
e.g., int, real, etc.,
have literals.
There is no mechanism for defining literals for user-defined types.
.nnext
Some built-in types are related to certain other constructs of CLU.
For example,
the tagcase statement is a control construct especially provided to
permit discrimination on oneof objects.
In addition,
in places where compile-time constants are required,
e.g., as actual parameters to parameterized modules,
the expressions that may appear are limited to a subset of the built-in types and
their operations.
One reason for this limitation is that the permitted types are known to contain only
2immutable* objects (see sect_semantics.1).
.end_list
.chapter "Semantics"
.para
All languages present their users with some model of computation.
This section describes those aspects of CLU semantics that differ
from the common ALGOL-like model.
In particular,
we discuss the notions of objects and variables,
and the definitions of assignment and argument passing that follow from these notions.
We also discuss type correctness.
.section "Objects and Variables"
.para
The basic elements of CLU semantics are 2objects* and 2variables*.
Objects are the data entities that are created and manipulated by programs.
Variables are just the names used in a program to refer to objects.
.para
Each object has a 2type*,
which characterizes its behavior.
A type defines a set of primitive operations
to create and manipulate objects of that type.
An object may be created and manipulated only via the operations of its type.
.para
An object may 2refer* to objects.
For example,
a record object refers to the objects that are the components of the record.
This notion is one of logical,
not physical,
containment.
In particular,
it is possible for two distinct record objects to refer to (or 2share*)
the same component object.
In the case of a cyclic structure,
it is even possible for an object to "contain" itself.
Thus,
it is possible to have recursive data structure definitions and shared data objects
without explicit reference types.
.para
Objects exist independently of procedure and iterator activations.
Space for objects is allocated from a dynamic storage area as the result of invoking
constructor operations of certain primitive CLU types,
such as records and arrays.
In theory,
all objects continue to exist forever.
In practice,
the space used by an object may be reclaimed (via garbage collection)
when that object is no longer accessible.
(An object is accessible if it is denoted by a variable of an active routine or is
a component of an accessible object.)
.para
Objects may be divided into two categories.
Some objects exhibit time-varying behavior.
Such an object,
called a 2mutable* object,
has a state that may be modified by certain operations without changing
the identity of the object.
Records and arrays are examples of mutable objects.
For example,
updating the 2ith* element of any array a causes the state of a to change
(to contain a different object as the 2ith* element).
.para
If a mutable object m is shared by two other objects x and y,
then a modification to m made via x will be visible when m is examined via y.
Communication through shared mutable objects is most beneficial in the context of
procedure invocation,
described below.
.para
Objects that do not exhibit time-varying behavior are called 2immutable* objects,
or 2constants*.
Examples of constants are integers, booleans, characters, and strings.
The value of a constant object cannot be modified.
.para
Variables are names used in programs to 2denote* particular objects
at execution time.
Unlike variables in many common programming languages,
which are containers for values,
CLU variables are simply names that the programmer uses to refer to objects.
As such,
it is possible for two variables to denote (or 2share*) the same object.
CLU variables are much like those in LISP,
and are similar to pointer variables in other languages.
However,
CLU variables are 2not* objects;
they cannot be denoted by other variables or referred to by objects.
Thus,
variables are completely private to the procedure or iterator in which they are declared,
and cannot be accessed or modified by any other routine.
.section "Assignment and Invocation"
.para
The basic actions in CLU are 2assignment* and 2invocation*.
The assignment primitive x := E,
where x is a variable and e is an expression,
causes x to denote the object resulting from the evaluation of E.
For example,
if E is a simple variable y,
then the assignment x`:=`y causes x to denote the object denoted by y.
The object is 2not* copied;
after the assignment is performed,
the object will be 2shared* by x and y.
Assignment does not affect the state of any object.
.para
.sr assign_fig Figure`current_figure
assign_fig illustrates these notions of object, variable, and assignment.
Here we show variables in a stack,
and objects in a heap (free storage area),
an obvious way to implement CLU.
assign_fig!a contains three objects:
alpha, beta, and gamma.
alpha is an integer (in fact, 3) and is denoted by variable x,
while beta and gamma are of type
set[int] and are denoted by variables y and z,
respectively.
assign_fig!b shows the result of executing
.show
y := z
.eshow
Now y and z both refer to,
or share,
the same object,
gamma;
beta is no longer accessible,
and so can be garbage collected.
.begin_figure "figure_font!Assignment*"
.sp 2
	x		circle(alpha 3 int)
.sp 2
	y				circle(beta {9} set[int])
.sp 2
	z						circle(gamma {} set[int])
.sp 2
1assign_fig!a.*
.sp 2
	x		circle(alpha 3 int)
.sp 2
	y				circle(beta {9} set[int])
.sp 2
	z						circle(gamma {} set[int])
.sp 2
1assign_fig!b.*
.finish_figure
.para
.para
Invocation involves passing argument objects from the caller to the called routine and
returning result objects from the routine to the caller.
The objects returned by the procedure,
or yielded by an iterator,
may be assigned to variables in the caller.
Argument passing is defined in terms of assignment;
the formal arguments of a routine are considered to be local variables of the routine
and are initialized,
by assignment,
to the objects resulting from the evaluation of the argument expressions.
We call the argument passing technique 2call by sharing*,
because the argument objects are shared between the caller and the called routine.
The technique does not correspond to most traditional argument passing techniques
(it is similar to argument passing in LISP).
In particular it is not call by value because mutations of arguments
performed by the called routine will be visible to the caller.
And it is not call by reference because access is not given to the
variables of the caller,
but merely to certain objects.
.sr invoc_fig Figure`current_figure
.para
invoc_fig illustrates invocation and object mutation.
invoc_fig!a continues from the situation shown in assign_fig!b,
and illustrates the situation immediately after invocation of
.show
set[int]$insert (y, x).
.eshow
(but before executing the body of 2insert*),
where 2insert* has two formal arguments.
The first,
s,
denotes the set,
and the second,
v,
denotes the integer to be inserted into s.
Note that the variables of the caller (x, y and, z)
are not accessible to 2insert*.
invoc_fig!b illustrates the situation after 2insert* returns.
Note that object gamma has been modified and now refers to alpha
(the set gamma now contains 3),
and since gamma is shared by both y and z,
the modification of gamma is visible through both these variables.
.begin_figure "figure_font!Invocation and object mutation*".
.sp 2
	x			circle(alpha 3 int)
.sp .5
	y
.sp .5
	z
.sp 2
	s				circle(gamma {} set[int])
.sp .5
	v
.sp 2
1invoc_fig!a.*
.sp 2
	x			circle(alpha 3 int)
.sp .5
	y
.sp .5
	z
.sp 2
					circle(gamma {`} set[int])
.sp 2
1invoc_fig!b.*
.finish_figure
.para
Procedure invocations may be used directly as statements;
those that return exactly one object may also be used as expressions.
Iterators may be invoked only through the for statement.
Arbitrary recursion among procedures and iterators is permitted.
.section "Type Correctness"
.para
The declaration of a variable specifies the type of the objects
which the variable may denote.
In an assignment,
the object denoted by the right-hand side must have the same type as
the variable on the left-hand side:
there are no implicit type conversions.
(The type of object denoted by an expression is
the return type of the outermost procedure invoked in that expression,
or,
if the expression is a variable or literal,
the type of that variable or literal.)
There is one special case;
a variable declared to be of type any may be assigned the value of any expression.
.para
Argument passing is defined in terms of assignment;
for an invocation to be legal,
it must be possible to assign the actual arguments (the objects) to the formal arguments
(the variables) listed in the heading of the routine to be invoked.
Furthermore,
a return (or yield) statement is legal only if the result objects could be
legally assigned to variables having the types stated in the routine heading.
.para
CLU is a 2type-safe* language,
in that it is not possible to treat an object of type T as if it were an object of
some other type S;
in particular,
one cannot assign an object of type T to a variable of type S (unless S is any).
The type any provides an escape from compile-time type determination,
and a built-in procedure generator force
can be used query the type of an object at run-time.
However,
any and force are defined in such a way that
the type-safety of the language is not undermined.
The type-safety of CLU,
plus the restriction that only the code in a cluster may convert between
the abstract type and the concrete representation,
insure that the behavior of an object is indeed characterized completely
by the operations of its type.
.chapter "The CLU Library"
.para
As was mentioned earlier,
it is intended that the modules making up a CLU program all be
separate compilation units.
A fundamental requirement of any CLU implementation is that it support
separate compilation,
with type checking of inter-module references.
This checking can be done either at compile time or at load time
(when a group of separately compiled modules are combined together to form a program).
A second fundamental requirement is that the implementation support top down programming.
The definition of CLU does not specify how an implementation should meet
these requirements.
However,
in this section we describe the current CLU implementation,
which may serve as a model for others.
.para
Our implementation makes use of the CLU library,
which plays a central role in supporting inter-module references.
The library contains information about all abstractions.
It supports incremental program development,
one abstraction at a time,
and,
in addition,
makes abstractions that are defined during the construction of one program available
as a basis for subsequent program development.
The information in the library permits the separate compilation of single modules,
with complete type checking at compile time of all external references
(such as procedure names).
.para
The library provides a hierarchical name space for retrieving information about
abstractions.
.sr lib_fig Figure`current_figure
The leaf nodes of the library are 2description units* (DUs),
one for each abstraction.
lib_fig illustrates the structure of the library.
.begin_figure "figure_font!A sketch of the library structure showing a DU with pathname B.Y*"
.sp 3
			A       B
.sp 2
			        X       Y
.sp 1.5
				                DU
.finish_figure
.para
A DU contains all system-maintained information about its abstraction.
.sr struc_fig Figure`current_figure
A sketch of the structure of a DU is shown in struc_fig.
For purposes of program development and module compilation,
two pieces of information must be included in the DU:
implementation information,
describing zero or more modules that implement the abstraction,
and the interface specification.
.begin_figure "0A sketch showing the structure of a DU*"
.sp 2
.nr master_center (ll-indent-rindent)/2
.hx center_spacing 5
.setup_centers	DU
.center_all	DU
.sp 2
.setup_centers	specification	abstractions	implementations	information
.center_all	interface	abstractions	implementations	other
.center_all	specification	"used in"	`		information
.center_all	`		interface
.sp 2
.nr master_center center_stop2
.hx center_spacing 1i
.setup_centers	1	"1. . .*	n
.center_all	1	"1. . .*	n
.sp 2
.nr master_center center_stop0
.hx center_spacing 3
.setup_centers	source	object	implementation	information
.center_all	source	object	abstractions	other
.center_all	code	code	"used in"	information
.center_all	`	`	implementation
.sp 1
.finish_figure
The 2interface specification* is that information needed to type-check
uses of the abstraction.
For procedural and control abstractions,
this information consists of the number and types of parameters, arguments, and results,
the names of exceptional conditions and the number and types of results returned
in each case,
plus any constraints on type parameters
(i.e., the where clause, as described in sect_parms).
For data abstractions,
it includes the number and types of parameters,
constraints on type parameters,
and the name and interface specification of each operation.
.para
An abstraction is entered in the library by submitting the interface specification;
no implementations are required.
In fact,
a module can be compiled before any implementations have been provided for
the abstractions that it uses;
it is necessary only that interface specifications have been given for
those abstractions.
Ultimately,
there can be many implementations of an abstraction;
each implementation is required to satisfy the interface specification of
the abstraction.
Because all uses and implementations of an abstraction are checked against
the interface specification,
the actual selection of an implementation can be delayed until just before
(or perhaps during) execution.
We imagine a process of binding together modules into programs,
prior to execution,
at which time this selection would be made.
.para
An important detail is the method by which modules refer to abstractions.
To avoid the problems of name conflicts that can arise in large systems,
the names used by a module to refer to abstractions can be chosen to suit
the programmer's convenience.
When a module is submitted for compilation,
its external references must be bound to DUs so that type-checking can be performed.
The binding is accomplished by constructing a 2compilation environment* (CE),
mapping names to DUs and constants,
which is passed to the compiler along with the source code when compiling the module.
A copy of the CE is stored by the compiler in the library as part of the module.
A similar process is involved in entering interface specifications of abstractions,
as these will include references to other (data) abstractions.
.para
When the compiler type checks a module,
it uses the compilation environment to map the external names in the module
to description units,
and then uses the interface specifications in those description units
to check that the abstractions are used correctly.
The type-correctness of the module thus depends upon the binding of names to DUs
and the interface specifications in those DUs,
and could be invalidated if changes to the binding or the interface specifications were
subsequently made.
For this reason,
the process of compilation permanently binds a module to the abstractions it uses,
and the interface description of an abstraction,
once defined,
is not allowed to change.
Of course,
a new description unit can be created to describe a modified abstraction.
Furthermore,
during design (before any implementing modules have been entered into the system)
it is reasonable to permit abstraction interfaces to change.
.para
The library and DU structure described above can be used for purposes other than
compiling and loading programs.
In each case,
additional information can be stored in the DU;
the "other" fields shown in struc_fig are intended
to illustrate such additional information.
For example,
the library provides a good basis for program verification.
Here the "other" information in the DU would contain a formal specification of
the abstraction,
and possibly some theorems that had been proved about the abstraction,
while for each implementation that had been verified, an outline of the correctness proof
might be retained.
Additional uses of the library include retention of
debugging and optimization information.
