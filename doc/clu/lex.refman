.am table_of_contents
.  rs
.  bp
.  sp
3Detailed Description*
.  sp
.  em
.ec e	 epsilon
.sr syntax_pdx Appendix`I
.chapter "Notation"
.para
We use an extended BNF grammar to define the syntax.
The general form of a production is:
.show 4
.def nonterminal alternative
.or alternative
.or ```...
.or alternative
.eshow
.para
The following extensions are used:
.nr fff fheight/4
.if
. width "a , etc   "
. sv list_left_margin 800m
. sv list_right_margin
. sv list_indent width!m
. sv list_space
. sv list_spacing 1.5
. ilist
a , etc	stands for a list of one or more 2a*'s separated by commas;
i.e., "a" or "a, a" or "a, a, a" etc.
. next
lcurly!arcurly	stands for a sequence of zero or more 2a*'s;
i.e., " " or "a" or "a a" etc.
. next
lbkt!arbkt	stands for an optional 2a*;
i.e., " " or "a".
. end_list
. en
.para
All semicolons are optional in CLU,
but for simplicity they appear in the syntax as ";" rather than "lbkt!;rbkt".
Nonterminal symbols appear in normal face.
Reserved words appear in bold face.
All other terminal symbols are non-alphabetic,
and appear in normal face.
.para
Full productions are not always shown in the body of this document;
often alternatives are presented and explained individually.
syntax_pdx contains the complete syntax.
.
.
.so rws;column rmac
.sr scope_sec 10.1
.sr lit_sec 9
.
.chapter "Lexical Considerations"
.para
A module is written as a sequence of tokens and separators.
A 2token* is a sequence of "printing" ASCII characters
(octal 40 thru octal 176) representing
a reserved word,
an identifier,
a literal,
an operator, or
a punctuation symbol.
A 2separator* is
a "blank" character
(space, vertical tab, horizontal tab, carriage return, newline, form feed)
or a comment.
In general,
any number of separators may appear between tokens.
Tokens and separators are described in more detail in the sections below.
.section "Reserved Words"
.para
The following character sequences are reserved words:
.elements any array
.elements begin bool break
.elements cand char cluster continue cor cvt
.elements do down
.elements else elseif end except exit
.elements false for force
.elements has
.elements if in int is iter itertype
.elements nil null
.elements oneof others
.elements proc proctype
.elements real record rep return returns
.elements signal signals string
.elements tag tagcase then true type
.elements up
.elements when where while
.elements yield yields
.show
.columns 6 3 0 0 1
.nr trace 0
.eshow
Upper and lower case letters are not distinguished in reserved words.
For example, 'end', 'END', and 'eNd' are all the same reserved word.
Reserved words appear in bold face in this document.
.section "Identifiers"
.para
An 2identifier* is a sequence of
letters,
digits,
and underscores that begins with a letter or underscore,
and that is not a reserved word.
As in reserved words,
upper and lower case letters are not distinguished in identifiers.
.para
In the syntax there are two different nonterminals for identifiers.
The nonterminal 2idn* is used when the identifier has scope
(see Section`scope_sec);
idns are used for variables, parameters, module names,
and as abbreviations for constants.
The nonterminal 2name* is used when the identifier has no scope;
names are used for record selectors,
oneof tags,
operation names,
and exceptional condition names.
.section "Literals"
.para
There are literals for naming all objects of the basic types
(null, bool, int, real, char, string).
Their forms are discussed in Section`lit_sec.
.section "Operators and Punctuation Symbols"
.para
The following character sequences are used as operators and punctuation symbols:
.elements ( ) { } [ ]
.elements : ; , . $ :=
.elements < <= = >= > ""
.elements ~< ~<= ~= ~>= ~> ""
.elements + - * / "" ""
.elements || ** // & | ~
.show
.columns 6 3 0 0 1
.eshow
.section "Comments and Other Separators"
.para
A 2comment* is a sequence of characters that
begins with a percent sign,
ends with a newline character,
and contains only printing ASCII characters and horizontal tabs in between.
For example:
.show 2
z := a[i] + s(1)% a comment in an expression
t(1)b[i];
.eshow
.para
A 2separator* is a blank character or a comment.
Zero or more separators may appear between any two tokens,
except that at least one separator is required between any two adjacent
non-self-terminating tokens:
reserved words,
identifiers,
integer literals,
and real literals.
This rule is necessary to avoid lexical ambiguities.
