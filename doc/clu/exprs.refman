.sr syntype Section`?.?
.sr store Section`11.2.1
.sr set Section`11.2.2
.sr typeapndx Appendix`II
.sr literals Sections 7.1 to 7.6
.sr constants Section`8.3
.sr procstmt Section`11.1
.sr forstmt Section`11.5.2
.sr updown Section`13.4
.sr signalling Section`12
.sr invoke Section`9.3
.
.sr s1 1
.sr s2 2
.
.am table_of_contents
.  bp
.  em
.chapter Expressions
.sr self Section`chapter
.para
An expression evaluates to an object in the CLU universe.
This object is said to be the 2result* or 2value* of the expression.
Expressions are used to name the object to which they evaluate.
The simplest forms of expressions are literals, variables, and routine names.
These forms directly name their result object.
More complex expressions are generally built up out of nested procedure invocations.
The result of such an expression is the value returned by the outermost invocation.
.para
Like many other languages,
CLU has prefix and infix operators for the common arithmetic and comparison operations,
and uses the familiar syntax for array indexing and record component selection
(e.g., 2a*[2i*] and 2r*.2s*).
However,
in CLU these notations are considered to be abbreviations for procedure calls.
This allows built-in types and user-defined types to be treated as uniformly as possible,
and also allows the programmer to use familiar notation when appropriate.
.para
In addition to invocation,
four other forms are used to build complex expressions out of simpler ones.
These are the conditional operators cand and cor (see self.8),
and the type conversion operations up and down (see self.10).
.para
There is a syntactically restricted form of expression called a 2primary*.
A primary is any expression that does not have a prefix or infix operator,
or parentheses,
at the top level.
In certain places,
the syntax requires a primary rather than a general expression.
This has been done to increase the readability of the resulting programs.
.para
As a general rule,
procedures with side effects should not be used in expressions,
and programs should not depend on the order in which expressions are evaluated.
However,
to avoid surprises,
the subexpressions of any expression are evaluated in strict left-to-right order.
.para
The various forms of expressions are explained below.
.
.section Literals
.
.para
Integer, real, character, string, boolean and null literals are expressions.
The syntax for literals is given in literals.
The type of a literal expression is the type of the object named by the literal.
For example,
true is of type bool,
"abc" is of type string,
etc.
.
.section Variables
.
.para
Variables are identifiers that name objects of a given type.
The syntactic type of a variable is the type given in the declaration of that variable,
and determines which objects may be named by the variable.
.
.section "Procedure and Iterator Names"
.
.para
Procedures and iterators may be defined as separate modules,
or in a cluster as operations of the type.
Those defined as separate modules are named by expressions of the form:
.show
idn lbkt [constant, etc ] rbkt
.eshow
The optional constants are the parameters of the procedure or iterator abstraction.
(Constants were discussed in constants.)
.para
When a procedure or iterator is defined as an operation of a type,
that type must be part of the name of the routine.
The form for naming an operation of a type is:
.show
type_spec $ name lbkt [constant, etc ] rbkt
.eshow
.para
The type of a procedure or iterator name is just the type of the named routine.
Some examples of procedure and iterator names are:
.show 4
primes
sort[int]
int$add
array [bool]$elements
.eshow
.
.section "Procedure Invocations"
.
.para
Procedure invocations have the form
.show
primary ( lbkt expression, etc rbkt )
.eshow
The primary is evaluated to obtain a procedure object,
and then the expressions are evaluated left-to-right to obtain the argument objects.
The procedure is invoked with these arguments,
and the object returned is the result of the entire expression.
For more discussion see invoke.
.para
The following expressions are invocations:
.show 3
p (x)
int$add (a, b)
within [3.2] (7.1, .003e7)
.eshow
.para
Any procedure invocation P(Es1, ... En) must satisfy two constraints:`
the type of P must be of the form
.show
proctype (Ts1, ... Tn) returns (R) signals (...)
.eshow
and the type of each expression Ei must be included in the corresponding type Ti.
The syntactic type of the entire invocation expression is given by R.
.para
Procedures can also be invoked as statements (see procstmt).
Iterators can only be invoked by a for statement (see forstmt).
.
.section "Selection Operations"
.
.para
Arrays and records are collections of objects.
Selection operations provide access to the individual elements or
components of the collection.
Simple notations are provided for invoking
the 2fetch* and 2store* operations of array types,
and the 2get* and 2set* operations of record types.
In addition,
these "syntactic sugarings" for selection operations may be used for
user-defined types with the appropriate properties.
.
.subsection "Element Selection"
.
.para
An element selection expression has the form:
.show
primary [ expression ]
.eshow
This form is just syntactic sugar for an invocation of a 2fetch* operation,
and is completely equivalent to:
.show
T$fetch (primary, expression)
.eshow
where T is the type of 2primary*.
.para
For example,
if a is an array of integers,
then
.show
a[27]
.eshow
is completely equivalent to the invocation
.show
array[int]$fetch (a, 27)
.eshow
.para
The element selection expression is not restricted to arrays.
The expression is legal whenever the corresponding invocation is legal.
In other words,
T (the type of 2primary*) must provide a procedure operation named 2fetch*,
which takes two arguments whose types include
the types of 2primary* and 2expression*,
and which returns a single result.
When 2primary* is an array[S] for some type S,
2expression* must be an int,
and the result has type S.
.para
The use of 2fetch* for user-defined types should be
restricted to types with array-like behavior.
Objects of such types will contain (along with other information)
a collection of objects,
where the collection can be indexed in some way.
For example,
it might make sense for an associative_memory type to provide
a 2fetch* operation to access the value associated with a key.
2Fetch* operations are for use in expressions;
thus they should never have side-effects.
.para
Array-like types may also provide a 2store* operation;
see store.
.
.subsection "Component Selection"
.
.para
The component selection expression has the form:
.show
primary 1.* name
.eshow
This form is just syntactic sugar for an invocation of a 2get_name*
operation, and is completely equivalent to:
.show
T$get_2name* (primary)
.eshow
where T is the type of 2primary*.
.para
For example, if x has type record [first: int, second: real], then
.show
x1.*first
.eshow
is completely equivalent to
.show
record[first: int, second: real] $ get_first (x)
.eshow
.para
The component selection expression is not restricted to records.
The statement is legal whenever the corresponding invocation is legal.
In other words,
T (the type of 2primary*) must provide a procedure operation named 2get_name*,
which takes one argument whose type includes the type of 2primary*,
and which returns a single result.
When T is a record type,
then T must have a selector called 2name*,
and the type of the result will be the type of the component named by that selector.
.para
The use of 2get* operations for user-defined types should be restricted to
types with record-like behavior.
Objects of such types will contain (along with other information)
one or more named objects.
For example,
it might make sense for a file type to provide a get_author operation,
which returns the name of a file's creator.
2Get* operations are intended for use in expressions;
thus they should never have side-effects.
.para
Types with named components may also provide 2set* operations;
see set.
.
.section "Array and Record Constructors"
.
.para
Constructors are expressions that enable users to create and initialize
arrays and records.
Constructors are not provided for user-defined types.
.
.subsection "Array Constructors"
.
.para
An array constructor has the form:
.show
type_spec $ [ lbkt expression: rbkt lbkt expression, etc rbkt ]
.eshow
The type specification must name an array type: array[T].
This is the type of the constructed array.
The expression preceding the ":" must evaluate to an integer,
and bcomes the low bound of the constructed array.
If this expression is omitted,
the low bound is 1.
The expressions following the ":" are evaluated to obtain the elements of the array.
They correspond (left-to-right) to the indices
2low_bound*, 2low_bound*+1, 2low_bound*+2, ...
.para
For example,
the expression
.show
array[bool] $ [79: true, false]
.eshow
constructs a new boolean array with two elements:
true (at index 79),
and false (at index 80).
The expression
.show
array[ai] $ [ai$[], ai$[]]
.eshow
(where 2ai* is equated to array[int])
creates two distinct integer arrays,
both empty,
and creates a third array to hold them.
The low bound of each array is 1.
.para
For any array constructor with type_spec array[T],
the type of each element expression in the constructor must be included in T.
An array constructor is computationally equivalent to an array create operation,
followed by a number of addh operations.
However,
such a sequence of operations cannot be written as an expression.
.
.subsection "Record Constructors"
.
.para
A record constructor has the form:
.show
type_spec $ { field, etc }
.eshow
where
.show
.def field "name, etc : expression"
.eshow
Whenever a field has more than one name, it is equivalent to a sequence of
fields, one for each name.  Thus, the following two constructors are
equivalent:
.show 3
R = record [ a: int, b: int, c: int ]
R $ { a, b: 7, c: 9 }
R $ { a: 7, b: 7, c: 9 }
.eshow
.para
In a record constructor, the type specification
must name a record type: record`[Ss1:Ts1,`...,`Sn:Tn].
This will be the type of the constructed record.  The component names
in the field list must be exactly the names Ss1,`...,`Sn,
although these names may appear in any order.
The expressions are evaluated left-to-right, and there is one evaluation per
component name even if component names are "factored."  The results of these
evaluations form the components of a newly constructed record.  This record is
the value of the entire constructor expression.
.para
As an example, consider the following record constructor:
.show 3
AS = array [string]
RT = record [list1, list2: AS, item: int]
RT $ {item: 2,  list1, list2: AS$["Susan", "George", "Jan"]}
.eshow
This produces a record that contains an integer and two distinct arrays.
The arrays are distinct because the array constructor expression is evaluated
twice, once for 2list1* and once for 2list2*.
.para
The type of the expression for component Si must be included in Ti.
This constructor is computationally equivalent to a record create operation
(see typeapndx),
but that operation is not available to the user.
.
.section "Prefix and Infix Operators"
.
.para
CLU allows infix and prefix notation to be used as a shorthand for
the following operations.
The table shows the shorthand form and the equivalent expanded form for each operation.
For each operation,
the type T is the type of the first operand.
.show 23
.sp .5
.ta 1i 2.3i
Shorthand form	Expansion
.sp .5
exprs1 ** exprs2	T$power (exprs1, exprs2)
exprs1 // exprs2	T$mod (exprs1, exprs2)
exprs1 / exprs2	T$div (exprs1, exprs2)
exprs1 * exprs2	T$mul (exprs1, exprs2)
exprs1 || exprs2	T$concat (exprs1, exprs2)
exprs1 + exprs2	T$add (exprs1, exprs2)
exprs1 - exprs2	T$sub (exprs1, exprs2)
exprs1 < exprs2	T$lt (exprs1, exprs2)
exprs1 <= exprs2	T$le (exprs1, exprs2)
exprs1 = exprs2	T$equal (exprs1, exprs2)
exprs1 >= exprs2	T$ge (exprs1, exprs2)
exprs1 > exprs2	T$gt (exprs1, exprs2)
exprs1 ~< exprs2	~ (exprs1 < exprs2)
exprs1 ~<= exprs2	~ (exprs1 <= exprs2)
exprs1 ~= exprs2	~ (exprs1 = exprs2)
exprs1 ~>= exprs2	~ (exprs1 >= exprs2)
exprs1 ~> exprs2	~ (exprs1 > exprs2)
exprs1 & exprs2	T$and (exprs1, exprs2)
exprs1 | exprs2	T$or (exprs1, exprs2)
-`	expr	T$minus (expr)
~`	expr	T$not (expr)
.rtabs
.eshow
.para
Operator notation is used most heavily for the built-in types,
but may be used for user-defined types as well.
When these operations are provided for user-defined types,
they should always be side-effect-free,
and they should mean roughly the same thing as they do for the built-in types.
For example,
the comparison operations should only be used for types that have
a natural partial order.
Usually,
the comparison operations (lt, le, equal, ge, gt) will be of type
.show
proctype (T, T) returns (bool)
.eshow
the other binary operations (e.g., add, sub) will be of type
.show
proctype (T, T) returns (T) signals (...)
.eshow
and the unary operations will be of type
.show
proctype (T) returns (T) signals (...)
.eshow
.
.section "Cand and Cor"
.
.para
Two additional binary operators are provided.
These are the conditional and operator,
cand,
and the conditional or operator,
cor.
.show
expressions1 cand expressions2
.eshow
is the boolean 2and* of expressions1 and expressions2.
However,
if expressions1 is false,
expressions2 is never evaluated.
.show
expressions1 cor expressions2
.eshow
is the boolean 2or* of expressions1 and expressions2,
but expressions2 is not evaluated unless expressions1 is false.
.para
Conditional expressions can be used to avoid run-time errors.
For example,
the following boolean expressions can be used without fear of "bounds"
or "zero_divide" errors:
.show 2
(low_bound <= i) cand (i <= high_bound) cand (A[i] ~= 0)
(n = 0) cor (1000//n = 0)
.eshow
.para
For both cand and cor,
expressions1 and expressions2 must have syntactic type bool.
Uses of cand and cor are not equivalent to any procedure invocation.
.
.section Precedence
.
.para
When an expression is not fully parenthesized,
the proper nesting of subexpressions might be ambiguous.
The following precedence rules are used to resolve such ambiguity.
The precedence of each infix operator is given in the table below.
Higher precedence operations are performed first.
Prefix operators always have precedence over binary operators.
.ne 8
.para
The precedence for infix operators is as follows:
.show 12
.ta 1.5i 2i 2.5i 3i 3.5i 4i
.sp .5
Precedence	Operators
.sp .5
5	**
.sp .5
4	*	/	//
.sp .5
3	+	-	||
.sp .5
2	<	<=	=	>=	>
	~<	~<=	~=	~>=	~>
.sp .5
1	&	cand
.sp .5
0	|	cor
.rtabs
.eshow
.para
The order of evaluation for operators of the same precedence is left-to-right,
except for **,
which is right-to-left.
.para
The following examples illustrate the precedence rules.
.show 9
.sp .5
.ta 3i
Expression	Equivalent Form
.sp .5
a + b // c	a + (b // c)
.sp .5
a + b - c	(a + b) - c
.sp .5
a + b ** c ** d	a + (b ** (c ** d))
.sp .5
a = b | c = d	(a = b) | (c = d)
.sp .5
- a * b	(-a) * b
.rtabs
.eshow
.
.section "Up and Down"
.
.para
There are no implicit type conversions in CLU.
Two forms of expression exist for explicit conversions.
These are:
.show 2
up (expression)
down (expression)
.eshow
.para
1Up* and 1down* may be used only within the body of a cluster operation.
1Up* changes the type of the expression from the representation type
of the cluster to the abstract type.
1Down* converts the type of the expression from the abstract type
to the representation type.
These conversions will be explained further in updown.
.section Force
.para
CLU has a single built-in procedure generator called force.
1Force* takes one type parameter,
and is written
.show
force [ type_spec ]
.eshow
The procedure force[T] has type
.show
proctype (any) returns (T) signals (wrong_type)
.eshow
If force[T] is applied to an object that is included in type T,
then it returns that object.
If force[T] is applied to an object that is not in type T,
then it signals "wrong_type" (see signalling).
.para
1Force* is a necessary companion to the type any.
The type any allows programs to pass around objects of arbitrary type.
However, to do anything substantive with an object,
one must use the basic operations of that object's type.
This raises a conflict with compile-time type-checking,
since an operation can only be applied when the arguments are known to be
of the correct types.
This conflict is resolved by using force.
1Force*[T] allows a program to check,
at run-time,
that a particular object is actually of type T.
If this check succeeds,
then the object can be used in all the ways appropriate for objects of type T.
.para
For example,
the procedure force[T] allows us to legally write the following code:
.show 2
x: any := 3
y: int := force [int] (x)
.eshow
while the following is illegal:
.show 2
x: any := 3
y: int := x
.eshow
because the type of 2y* (int) does not include the type of the expression 2x*
(any).
