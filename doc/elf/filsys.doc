




                






                           ELF FILE SYSTEM MANUAL



                              January 12, 1976











                               B. W. Schafer
                                D. L. Retz
                               J. R. Miller
                               J. L. McClurg










                Speech Communications Research Laboratory, Inc.
                           800-A Miramonte Drive
                      Santa Barbara, California 93109
                               (805) 965-3011






        This work  was  supported  by  the  Advanced  Research  Projects
        Agency,  through Contract No.  N00014-73-C-0221, administered by
        the Office of Naval Research.

        ELF FILE SYSTEM MANUAL                      Page   2
	   Introduction


                                INTRODUCTION




             The ELF File System was designed to provide for  a  variety
        of classes of devices.  The present version includes support for
        three classes of devices:
              (1) The logical device that is associated with the job  as
                  the  control terminal.  This logical device is denoted
                  "CTL".
              (2) Character-at-a-time devices such as  terminals,  paper
                  tape readers and punches, and line printers.
              (3) RSX file  structured  devices.   The  file  structured
                  device  that  is  considered  the system device can be
                  addressed with the logical name  "SYS".   The  current
                  support   for  file  structured  devices  has  several
                  restrictions:
                        (a) The ELF System does  not  currently  provide
                            for  initializing  file  structured devices.
                            This must  be  done  by  using  one  of  the
                            versions of DEC's RSX Systems.
                        (b) Only  one  file  structured  device  can  be
                            supported  at  a  time.   This device can be
                            addressed with the logical device name "SYS"
                            or its physical device name.
                        (c) No provision is currently made for  creating
                            or   deleting   files.    Files   should  be
                            pre-created by  using  RSX.   Likewise,  RSX
                            should be used for deleting files.
                        (d) No support  is  available  for  accessing  a
                            record  at  a  time.   The  current  set  of
                            primitives provides for reading and  writing
                            RSX physical blocks directly to and from the
                            user address space containing the  primitive
                            call.   Provisions  have  been  made for the
                            later addition  of  record  access  routines
                            that  would  be linked to the user-developed
                            code.  This method is recommended because of
                            the  relatively  high overhead that would be
                            associated with moving blocks  to  and  from
                            the   File   System's   address   space  and
                            transfering  records  between  that  address
                            space  and  the address space containing the
                            user-developed code.

             A concept that is associated with the use of the  ELF  File
        System  is  the  concept of a set of processes forming a job.  A
        job in the ELF System is a subtree of the system's process tree.
        The process at the root of this subtree is the Exec process that
        is created when a user logs in at a terminal.   In  response  to
        various  Exec  commands a process can be created.  Whenever this
        process creates a process (and recursively) the new  process  is

        ELF FILE SYSTEM MANUAL                      Page   3
	   Introduction


        marked  as  belonging  to  the same job as the creating process.
        All file system requests by processes that belong to a  job  are
        associated  with  a set of files that are dynamically associated
        and dis-associated with the job by any of its processes.

             Another concept that is integral to the use of the ELF File
        System is the concept of File Handle.  A File Handle is a 16-bit
        value that is allocated by the File  System  in  response  to  a
        primitive  call  that  specifies  a path to a file.  Once a File
        Handle has been allocated and returned to the calling process it
        can  be  used  by  any  process  in the job to which the calling
        process  belongs.   A  file  handle  is   used   to   open   the
        corresponding  file,  obtain information about the file, perform
        input and output to and from the file, and close the file.

             The  reason  that  the  assignment  of  a  File  Handle  is
        separated  from the open operation is that it is often necessary
        to open and close a file  several  times.   Separating  the  two
        functions increases the efficiency of the open operation.  As an
        option, the request for a file handle will also open the file.  

             When the file associated with a particular file  handle  is
        no  longer  to  be  used by a job, it can be released by another
        primitive call.  This release function is automatically  carried
        out  for all File Handles associated with a job when it is reset
        by the controlling terminal.

             A third concept associated with the use of the File  System
        is  the  concept of virtual block number.  In the description of
        the ELF File System below,  "virtual  block  number"  means  the
        relative  block  number  within  a  file where each block is 512
        bytes long and the numbering starts at one.

        ELF FILE SYSTEM MANUAL                      Page   4
	   Chapter One -- File System Primitives


                    CHAPTER ONE -- FILE SYSTEM PRIMITIVES




             This chapter contains a specification  for  each  presently
        implemented  file  system  primitive.  Calls to these primitives
        are made by using the  EMT  instruction.   Normally,  these  EMT
        calls  should  be  coded  by using the corresponding File System
        macro.  The file ESC.SML should be  included  in  the  assembler
        command  string  somewhere before the file(s) that contain calls
        to these macros.

             Included in the specification of each File System primitive
        is  a  list  of the return codes that can result from the use of
        the primitive.  The current value  assigned  to  each  of  these
        symbolic  return codes is generated by the macro $DFFRC which is
        found in the file ETBL.SML.  This macro file also  contains  the
        macros  that  generate the values for the symbolic block offsets
        for the various blocks  that  are  used  with  the  File  System
        primitives.  The name of the appropriate macro is given with the
        description of the block.

        ELF FILE SYSTEM MANUAL                      Page   5
	   Chapter One -- File System Primitives


        Title: .BIN

        Function: Byte INput

            .BIN <source File Handles>:
                       R1
                 <return code>,<source File Handles>,
                       R0              R1
                 <input byte (right justified)>
                              R2

        Return codes:
              0   - Successful
           E.INFH - Invalid File Handle
           E.DERR - Device error
           E.FNOP - Specified file not open
           E.IA   - Invalid access (Specified file not open for input)
           E.EOF  - End of file
           E.PERR - Parity error on byte

        Description:

                If the operation is successful the next sequential  byte
           in the specified file is returned.  

        ELF FILE SYSTEM MANUAL                      Page   6
	   Chapter One -- File System Primitives


        Title: .BOUT

        Function: Byte OUT

            .BOUT <destination file handle>
                      R1
                  <byte to be output (right justified)>:
                            R2
                  <return code>,<destination file handle>,
                    R0                  R1
                  <byte that was to be output>
                            R2

        Return codes:
              0   - Successful
           E.INFH - Invalid file handle
           E.DERR - Device error
           E.FNOP - Specified file not open
           E.IA   - Invalid access (Specified file not open for output)
           E.EOF  - End of file

        Description:

                If the operation is successful the given byte is  output
           to the specified file.  

        ELF FILE SYSTEM MANUAL                      Page   7
	   Chapter One -- File System Primitives


        Title: .CLOSF

        Function: CLOSe the specified File

            .CLOSF <File Handle>:<return code>,<File Handle>
                        R1            R0            R1

        Return codes:
              0   - File closed successfully
           E.INFH - Invalid File Handle
           E.DERR - Device error

        Description:

                The file associated with the specified  file  handle  is
           closed.  

        ELF FILE SYSTEM MANUAL                      Page   8
	   Chapter One -- File System Primitives


        Title: .COSB

        Function: COnvert String to Binary

            .COSB <conversion parameters>,<byte count>,
                       LSB(R0)              MSB(R0)
                  <source address>:
                       R1
                  <return code>,<updated source address>,
                      R0                 R1
                  <binary value>
                       R2

           Conversion parameters (in LSB(R0))

           O.RD10 - Radix 10
           O.RD50 - Radix 50 (DEC RAD50 encoding)
           O.RD2  - Radix 2
           O.RD4  - Radix 4
           O.RD8  - Radix 8
           O.RD16 - Radix 16
           O.RD6  - Radix 6
           O.RD12 - Radix 12

           Note: The above symbolics are generated by the $DFCOP macro.

           Return codes (in R0):
              0   - Successful
           E.INM  - Invalid Number

        Description:

                The string at the specified source address is  converted
           to  a  binary  value  according  to  the  radix specified.  A
           non-digit or a digit not valid in the  radix  specified  will
           terminate  the  conversion.   The  value accumulated when the
           terminater is encountered or the byte count is  exhausted  is
           returned.   The actual byte count used is the value specified
           modulo 16.  The source address is incremented by  the  number
           of  characters  used in the conversion.  That is, if the byte
           count is exhausted the source address will be incremented  by
           the  byte count but if a terminator is encountered before the
           byte count is exhausted the source address returned  will  be
           the address of the terminating character.  

        ELF FILE SYSTEM MANUAL                      Page   9
	   Chapter One -- File System Primitives


        Title: .DIN

        Function: Date INput

            .DIN <source File Handle>:
                       R1
                 <return code>,<source File Handle>,
                     R0              R1
                 <date in internal form>
                         R2

        Return codes:
              0   - Successful
           E.INFH - Invalid File Handle
           E.DERR - Device Error
           E.FNOP - File Not Open
           E.IA   - Invalid Access (file not open for input)
           E.EOF  - End of file
           E.PERR - Parity error
           E.IDT  - Invalid Date

        Description:

                Nine  bytes  are  input  from  the  specified  file  and
           converted  to  internal  form.   The  external  form for date
           specification is DD-MMM-YY where DD represents a one  or  two
           digit  specification  of  the  date, MMM represents the first
           three letters of the month and YY  represents  the  last  two
           digits of the year.  The internal form for date specification
           is the number of years since 1970 times 1000 plus the day  of
           the year.  

        ELF FILE SYSTEM MANUAL                      Page  10
	   Chapter One -- File System Primitives


        Title: .DOUT

        Function: Date OUTput

            .DOUT <destination File Handle>,
                          R1
                  <internal date>:
                       R2
                  <return code>,<destination File Handle>,
                      R0                R1
                  <internal date>
                       R2

        Return codes:
              0   - Successful
           E.INFH - Invalid File Handle
           E.DERR - Device Error
           E.FNOP - File Not Open
           E.IA   - Invalid Access (File Not open for output)
           E.EOF  - End-of-file
           E.IDT  - Invalid date (too large)

           Description:

                The internal date  is  converted  to  a  nine  character
           string   and   moved   to  the  destination  file.   See  the
           description of .DIN for a description  of  the  internal  and
           external forms for dates.  

        ELF FILE SYSTEM MANUAL                      Page  11
	   Chapter One -- File System Primitives


        Title: .GATTR

        Function: Get ATTRibutes of a file

            .GATTR <File Handle>,<A(buffer of size S.FATT)>:
                       R1                  R2
                   <return code>,<File Handle>,
                       R0            R1
                   <A(buffer)>,<File Characteristics Word>
                      R2                R3

        Return codes:
              0   - Successful
           E.INFH - Invalid File Handle
           E.FNOP - File Not Open

        Description:

                If this primitive is provided with a valid  file  handle
           of  a  file  that  is  currently  open the provided buffer is
           updated with the File Attributes Block of the specified  file
           and  the  File  Characteristics  Word  is  returned.  See the
           following pages for descriptions of the file attributes block
           and characteristics word.

        ELF FILE SYSTEM MANUAL                      Page  12
	   Chapter One -- File System Primitives


                           File Attributes Block
                     +--------------------------------+
               F.RATT!  Record Attr. ! Record Type    !  F.RTYP
                     +--------------------------------+
                     !          Record Size           !  F.RSIZ
                     +--------------------------------+
                     !           High Block           !  F.HIBK
                     +--                            --+
                     ! (VBN of last block allocated)  !
                     +--------------------------------+
                     !           EOF Block            !  F.EFBK
                     +--                            --+
                     !(VBN of first block with "room")!
                     +--------------------------------+
                     !  First free byte in EOF block  !  F.FFBY
                     +--------------------------------+
                                                         S.FATT


           F.RTYP bit mask equates
             R.FIX - Fixed Length Records
             R.VAR - Variable Length Records
           F.RATT bit mask equates
             FD.FTN  - Fortran Carriage Control
             FD.CR   - Line feed before lines, carriage return
            afterwards
             FD.BCK  - Records cannot cross block boundaries

        Note: Use $DFFAB to obtain the above symbolics.

        ELF FILE SYSTEM MANUAL                      Page  13
	   Chapter One -- File System Primitives


                             File Characteristics Word
                     +-------------------------------------+
                     ! System Controlled ! User Controlled !
                     !  Characteristics  ! Characteristics !
                     +-------------------------------------+

           Masks for User Controlled Characteristics
              Byte:
           UC.CON - File is contiguous
           UC.DLK - Improperly closed file

           Masks for System Controlled Characteristics
              Byte:
           SC.MRL - Marked for Delete
           SC.BAD - Bad Data Block

        Note: Use $DFFCW to obtain the above symbolics.

        ELF FILE SYSTEM MANUAL                      Page  14
	   Chapter One -- File System Primitives


        Title:  .GETFH

        Function:  GET File Handle

            .GETFH <option word>,<A(File Init Block)>:
                      R1                R2
                  <return code>,
                      R0
                  <File Handle assigned>,
                         R1
                  <A(File Init Block)>
                          R2

        Definition for bits in option word:

           G.NVER---New version (i.e.  go to next version # if  one  not
                    specified) (currently not supported)
           G.NFON---New file only (error if file exists) (currently  not
                    supported)
           G.OFON---Old  file  only  (error  if  file   doesn't   exist)
                    (currently assumed)
           G.OPIM---Open file immediately.  If this option is  specified
                    additional  options  should  be  specified.  See the
                    description of .OPENF for a list of these options.

        Note:  The symbolic names for the bits in the option word  given
           above are generated by the macro $DFGOP.

        Return codes:
              0   - File Handle Allocated Successfully
           E.NFHA - No File Handles Available
           E.DERR - Device Error
           E.INSF - Insufficient storage
           E.IFSO - Invalid File Specification Option
           E.IFSS - Invalid File Specification String
           E.UAFS - Unallowed File Specification Field
           E.NDEV - No such Device
           E.NUNT - No such Unit
           E.NDIR - No such Directory
           E.NNAM - No such Name
           E.NTYP - No such Type (extension)
           E.NVER - No such Version

        Description:

                If the operation is successful, a File  Handle  will  be
           returned that can be used to refer to the specified file.  As
           an option, an attempt to open  the  file  is  made  based  on
           additional  options specified.  See the description of .OPENF
           for a list of the possible return codes in this case.

        Note:  If open immediately is specified as  an  option  and  the
           resultant  attempt  to  open  the file fails, the .GETFH will

        ELF FILE SYSTEM MANUAL                      Page  15
	   Chapter One -- File System Primitives


           release the file handle before returning.



                              File Init Block
                     +---------------------------------+
                     !                                 !
                     !     Block Buffer Address        ! FIBBBA
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !      Bytes Requested            ! FIBBRQ
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !                                 ! FIBVBN
                     !          Virtual Block          !
                     +--           Number            --+
                     !                                 !
                     !                                 !
                     !                                 !
                     +---------------+-----------------+
                     !               !                 !
                     !               ! User Event Code ! FIBUEC
                     !               !                 !
                     +---------------+-----------------+
                     !                                 !
                     !  Option word for parsing        ! FIBOPT
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !  A(File Specification String)   ! FIBFSA
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !  L(File Specification String)   ! FIBFSL
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !      Device Name                ! FIBDNM
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !      Device Unit Number         ! FIBDUN
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !     Directory Number            ! FIBDIR
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !                                 ! FIBFNM
                     !                                 !

        ELF FILE SYSTEM MANUAL                      Page  16
	   Chapter One -- File System Primitives


                     +--                             --+
                     !                                 !
                     !        File Name                !
                     !                                 !
                     +--                             --+
                     !                                 !
                     !                                 !
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !        File Type                ! FIBTYP
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !        Version Number           ! FIBVER
                     !                                 !
                     +---------------------------------+
                                                         FIBLEN

               Following are the options that can be or'd together to
                form the FIB option word:

               FIBDSA -- Device Name and Number in string Allowed
               FIBDFA -- Device Name and Number in File Init Block
                          Allowed
               FIBDJA -- Device Name and Number associated with Job
                          Allowed
               FIBUSA -- UIC (Directory Number) in string Allowed
               FIBUFA -- UIC (Directory Number) in File Init Block
                          Allowed
               FIBUJA -- UIC (Directory Number) associated with Job
                          Allowed
               FIBNSA -- File Name in string Allowed
               FIBNFA -- File Name in File Init Block Allowed
               FIBTSA -- File Type (extension) in string Allowed
               FIBTFA -- File Type (extension) in File Init Block
                          Allowed
               FIBVSA -- File Version in string Allowed
               FIBVFA -- File Version in File Init Block Allowed

               Note: In general if more than one option is specified for
                a particular field, .GETFH will use the first one it
                finds.  For example if both FIBDSA and FIBDFA are
                specified, the device specification in the file
                specification string will be used if one is found,
                otherwise the device specification in the File Init
                Block will be used.

               Note: The above symbolics are generated by the $DFFIB
                macro.


        ELF FILE SYSTEM MANUAL                      Page  17
	   Chapter One -- File System Primitives


        Title: .NIN

        Function: Numeric INput

            .NIN <conversion parameters>,<byte count>,
                    LSB(R0)                MSB(R0)
                  <source File Handle>:<return code>,
                           R1               R0
                  <source File Handle>,<binary input value>
                           R1                  R2

        Conversion parameters (in LSB(R0)):
           O.RD10 - Radix 10
           O.RD50 - Radix 50 (DEC RAD50 encoding)
           O.RD2  - Radix 2
           O.RD4  - Radix 4
           O.RD8  - Radix 8
           O.RD16 - Radix 16
           O.RD6  - Radix 6
           O.RD12 - Radix 12

           Note: The above symbolics are generated by the $DFCOP macro.

        Return codes (in R0):
              0   - Successful
           E.INFH - Invalid File Handle
           E.DERR - Device Error
           E.FNOP - File Not Open
           E.IA   - Invalid Access
           E.EOF  - End of file
           E.PERR - Parity error
           E.INM  - Invalid Number

        Description:

                The  requested  number  of  bytes  are  input  from  the
           specified  file  and converted to a binary value according to
           the radix specified.  A non-digit or a digit not valid in the
           radix  specified  will  terminate  the conversion.  The value
           accumulated when the terminator is encountered  or  the  byte
           count  is  exhausted is returned.  The actual byte count used
           is the value specified modulo 16.  

        ELF FILE SYSTEM MANUAL                      Page  18
	   Chapter One -- File System Primitives


        Title: .NOUT

        Function: Numeric OUTput

            .NOUT <conversion parameters>,<byte count>,
                         LSB(R0)              MSB(R0)
                  <destination File Handle>,
                             R1
                  <binary output value>
                          R2
                  <return code>,<destination File Handle>,
                        R0                   R1
                  <binary output value>
                          R2

           Conversion parameters (in LSB(R0)):
             (any combination of the last four may be "or"ed
             with one of the eight radix options)
           O.RD10 - Radix 10
           O.RD50 - Radix 50 (DEC RAD50 encoding)
           O.RD2  - Radix 2
           O.RD4  - Radix 4
           O.RD8  - Radix 8
           O.RD16 - Radix 16
           O.RD6  - Radix 6
           O.RD12 - Radix 12
           O.FZRO - Fill with Zeros
           O.LFLL - Left Fill
           O.PLSS - Plus sign on positive numbers
           O.UNSN - Treat value as 16-bit unsigned value

           Note: The above symbolics are generated by the $DFCOP macro.

        Return codes (in R0):
              0   - Successful
           E.INFH - Invalid File Handle
           E.DERR - Device Error
           E.FNOP - File Not Open
           E.IA   - Invalid Access (file not open for output)
           E.EOF  - End-of-file
           E.TRNC - Value was truncated because it was
                    too large for the output field.

        Description:

                The given binary output value is converted to  an  ASCII
           string  according  to  the options specified and moved to the
           specified output file.  The specified  number  of  bytes  are
           moved  to  the  output file with the restriction that no more
           than fifteen bytes are moved.  The  actual  number  of  bytes
           moved will be the specified byte count Modulo 16.  

        ELF FILE SYSTEM MANUAL                      Page  19
	   Chapter One -- File System Primitives


        Title: .OPENF

        Function: OPEN the specified File

            .OPENF <option word>,<file handle>
                       R0             R1
                  [,<A(File Access Request Block>]:
                                R2
                  <return code>,<File Handle>
                      R0             R1
                  [,<A(File Access Request Block>]

        Option bits:
           O.FARB - File Access Request Block provided  in  R2  (if  not
                    provided the values given in FIB when $GETFH will be
                    retained)
           O.INPT - Access will include input
           O.OUPT - Access will include output
           O.ABGN - Initialize current VBN to beginning of file
           O.AEOF - Initialize current VBN to  end-of-file.   If  O.ABGN
                    also specified reset active EOF VBN to beginning
           O.PPRC - Parity processing on stream mode  access,  i.e.   on
                    .BIN  &  .SIN requests remove parity bit and .BOUT &
                    .SOUT requests add parity bit.
           O.PCHK - Parity checking on stream mode input, i.e.  on  .BIN
                    & .SIN requests check parity bit of each byte.
           O.QFAC  -  Queue  for  access  if  immediate  access  is  not
                    possible.   Immediate read access is not possible if
                    the file is open for output by this or another  job.
                    Immediate  write  access  is not possible if file is
                    open by another job or this job  with  another  file
                    handle.
        Note:  The symbolic names for the bits in the option word  given
           above are generated by the macro $DFOOP.

        Return codes (in R0):

              0   - successful
           E.INFH - Invalid File Handle
           E.DERR - Device Error
           E.FAOP - File Already Open
           E.FBSY - File busy (File access request is not immediately
                     possible and O.QFAC not specified)
           E.NSF  - No such file
           E.UNSF - Unsupported Format
           E.NRA  - No Read Access Allowed
           E.NWA  - No Write Access Allowed

        Description:

                If the operation is successful the file associated  with
           given file handle is opened.

        ELF FILE SYSTEM MANUAL                      Page  20
	   Chapter One -- File System Primitives


                          File Access Request Block
                     +---------------------------------+
                     !                                 !
                     !     Block Buffer Address        ! FRBBBA
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !      Bytes Requested            ! FRBBRQ
                     !                                 !
                     +---------------------------------+
                     !                                 !
                     !                                 ! FRBVBN
                     !          Virtual Block          !
                     +--           Number            --+
                     !                                 !
                     !                                 !
                     !                                 !
                     +---------------+-----------------+
                                     !                 !
                                     ! User Event Code ! FRBUEC
                                     !                 !
                                     +-----------------+

               Note: The above symbolics are generated by the $DFFRB
                macro.


        ELF FILE SYSTEM MANUAL                      Page  21
	   Chapter One -- File System Primitives


        Title: .READ

        Function: READ virtual block

            .READ  <option>,<source File Handle>,<variable parameters>:
                      R0               R1                  R2
                  <return code>,       <source File Handle>,
                      R0                   R1
                  <variable parameter>
                        R2

           <option>
           R.FARB - If specified the variable parameter is taken to be
                     the address of a File Access Request Block. 
                     Otherwise the variable parameter is taken to be the
                     address of the buffer into which the block is to be
                     read.
           Note:   The above symbolic is generated by the $DFROD macro.

           <source FH> File Handle of source file

           <variable parameter>
           Defined according to R.FARB 

           <return code>
              0   - File access initiated
           E.INFH - Invalid File Handle
           E.DERR - Device error
           E.NOP  - Specified file not open
           E.IA   - Invalid access (Specified file not open for read)
           E.EOF  - End of file (requested first block is beyond end of 
                    file)
           E.NTSP - Access not supported for device type

           *The bytes requested and event op-code default to that
            specified when file was opened.  The block accessed is the
            next sequential block.

        ELF FILE SYSTEM MANUAL                      Page  22
	   Chapter One -- File System Primitives


        Title:  .RELFH

        Function:  RELease File Handle

            .RELFH <File Handle>:<return code>,0
                       R1           R0         R1

        Return code:

              0  -File Handle released
           E.INFH-Invalid File Handle

        Description:

                This primitive releases the given file handle.   If  the
           file  handle  given is zero, all file handles associated with
           the job are freed.  If the file associated with a file handle
           being  freed  is  open it is closed before the file handle is
           freed.  

        ELF FILE SYSTEM MANUAL                      Page  23
	   Chapter One -- File System Primitives


        Title: .SIN

        Function: String INput

            .SIN <byte count>,<source file handle>,
                      R0              R1
                 <destination address>
                          R2
                 <return code>,<source file handle>,
                     R0                 R1
                 <destination address + bytes input>
                                   R2

        Return codes:
              0   - Successful
           E.INFH - Invalid file handle
           E.DERR - Device error
           E.FNOP - Specified file not open
           E.IA   - Invalid access (specified file not open for input)
           E.EOF  - End of file
           E.PERR - Parity error on last byte input (input was
            terminated)

        Description:

                The requested number of bytes  is  moved  the  specified
           file  to  the  given  destination  address.   The destination
           address is incremented by the number of bytes input.  

        ELF FILE SYSTEM MANUAL                      Page  24
	   Chapter One -- File System Primitives


        Title: .SOUT

        Function: String OUTput

            .SOUT <byte count>,<destination file handle>,
                    R0                   R1
                  <source address>:
                        R2
                  <return code>,<destination file handle>,
                        R0                R1
                  <source address + bytes output>
                                R2

        Return codes:
              0   - Successful
           E.INFH - Invalid file handle
           E.DERR - Device error
           E.FNOP - Specified file not open
           E.IA   - Invalid Access (Specified file not open for output)
           E.EOF  - End of file

        Description

                The requested number of bytes are moved to the specified
           file  from  the  given source address.  The source address is
           incremented by the number of bytes output.  

        ELF FILE SYSTEM MANUAL                      Page  25
	   Chapter One -- File System Primitives


        Title: .STATS

        Function:  return STATus of last file access request on
                      Specified file

            .STATS <File Handle>:<return code>,
                       R1             R0
                   <File Handle>,<conditional information>
                       R1             R2
           <return code>
              0   - Last file access request was completed successfully
           E.INFH - Invalid File Handle
           E.DERR - Device error on last request
           E.NTDN - Last file access request has not completed.

           <conditional information>
           presently the number of bytes transferred if the request is
            complete

        Description:

                The status of  the  last  file  access  request  on  the
           specified  file  is  returned.  Normally this primitive would
           not be called until the process that  initiated  the  request
           has been signalled that the access is complete.  

        ELF FILE SYSTEM MANUAL                      Page  26
	   Chapter One -- File System Primitives


        Title: .TIN

        Function: Time INput

            .TIN <source File Handle>:<return code>,
                       R1                 R0
                 <source File Handle>,
                         R1
                 <MSW of internal time>,<LSW of internal time>
                         R2                     R3

        Return codes (in R0):
              0   - Successful
           E.INFH - Invalid File Handle
           E.DERR - Device Error
           E.FNOP - File Not Open
           E.IA   - Invalid Access (File not open for input)
           E.EOF  - End of File
           E.PERR - Parity Error
           E.ITM  - Invalid Time

        Description:

                Eight bytes are input  from  the  specified  device  and
           treated   as  a  time  specification  in  external  form  and
           converted to the equivalent 32-bit internal time value.   The
           external  form  for  time  specification is HH:MM:SS where HH
           represents a one or two  digit  specification  of  hours,  MM
           represents  minutes, and SS represents seconds.  The internal
           form for time specification is  in  "clock ticks"  where  one
           clock tick is 1/25000 of a second.  

        ELF FILE SYSTEM MANUAL                      Page  27
	   Chapter One -- File System Primitives


        Title: .TOUT

        Function: Time OUTput

            .TOUT <destination File Handle>,
                           R1
                  <MSW of internal time>,<LSW of internal time>:
                           R2                  R3
                  <return code>,<destination File Handle>
                      R0                 R1
                  <MSW of internal time>,<LSW of internal time>
                         R2                     R3

        Return codes (in R0):
              0   - Successful
           E.INFH - Invalid File Handle
           E.DERR - Device Error
           E.FNOP - File Not Open
           E.IA   - Invalid Access (File not open for output)
           E.EOF  - End-of-file

        Description:

                The provided 32-bit internal time value is converted  to
           an  eight  byte  string  which  represents  the given time in
           external form and the eight byte  string  is  output  to  the
           specified  file.   See the description of .TIN for details on
           the internal and external forms used for time representation.

        ELF FILE SYSTEM MANUAL                      Page  28
	   Chapter One -- File System Primitives


        Title: .WRITE

        Function: WRITE virtual block

            .WRITE <option>,<destination File Handle>,<variable 
                   parameter>:
                      R0             R1                     R2
                   <return code>,      <destination File Handle>,
                        R0                       R1
                   <variable parameter>
                          R2

           <option>
           W.FARB - If specified the variable parameter is taken to be
                     the address of a File Access Request Block. 
                     Otherwise the variable parameter is then taken to
                     be the address of the block that is to be written.
           Note:    The above symbolic is generated by the $DFWOP macro.

           <destination File Handle> File Handle of destination file,

           <variable parameter> Defined according to W.FARB

           <return code>
              0   - File access initiated
           E.INFH - Invalid File Handle
           E.DERR - Device error
           E.NOP  - Specified file not open
           E.IA   - Invalid access (Specified file not open for write)
           E.EOF  - End of file (requested block is beyond end of file
                    and file cannot be extended)
           E.NTSP - Access not supported for device type

        ELF FILE SYSTEM MANUAL                      Page  29
	   Chapter Two -- File System Routines


                     CHAPTER TWO -- FILE SYSTEM ROUTINES




                This chapter  contains  descriptions  for  most  of  the
           routines internal to the File System.  Each of them is called
           by an instruction of the form:
                JSR   PC,<subroutine name>

                Included  in  the  specification  of  each  File  System
           routine  is a list of the return codes that can result from a
           call to the routine.  The current value assigned to  each  of
           these  symbolic return codes is generated by the macro $DFFRC
           which is found in the file ETBL.SML.  This  macro  file  also
           contains the macros that generate the values for the symbolic
           offsets for the various blocks and tables that are used  with
           the  File System routines.  The name of the appropriate macro
           is given with the description of the block or table.

        ELF FILE SYSTEM MANUAL                      Page  30
	   Chapter Two -- File System Routines


        Title: $AHCT

        Function: Add HCT

        Input parameters:
           R2=A(File Control Table)

        Return values:
           R1=A(new Header Control Table)
           R2=A(FCT)

        Description:

                A new Header Control Table is added.  It is  initialized
           with the File Number specified in the given FCT.  The rest of
           the HCT fields are zeroed.

        ELF FILE SYSTEM MANUAL                      Page  31
	   Chapter Two -- File System Routines


        Title: $APBLK

        Function: Allocate Primary storage BLocK

        Input parameters:
           None

        Returned values:
           R1=A(Primary Storage Block)

        Description:

                If successful the address of a block (with length VBLEN)
           of  storage (in the File System's address space) is returned.
           If a block is not currently available the calling process  is
           suspended  until  one becomes available.  This routine should
           only be called by File System routines that  free  the  block
           before returning to the user.

        ELF FILE SYSTEM MANUAL                      Page  32
	   Chapter Two -- File System Routines


        Title: $CHKSM

        Function: compute CHecK SuM

        Input parameters:
           R0=Number of words
           R1=A(First Word)

        Returned values
           R0=Sum of words specified
           R1=A(First Word)

        ELF FILE SYSTEM MANUAL                      Page  33
	   Chapter Two -- File System Routines


        Title: $CLHDR

        Function: CLose HeaDeR

        Input parameters:
           R2=A(File Control Table)

        Return values
           R0=Return code
           R2=A(File Control Table)

        Return codes:
              0   - Successful
           E.FNOP - File Not Open under this File Control Table

        Description:

                The  Header  corresponding  to  the  FID  field  of  the
           specified  FCT  is  closed.  This effectively de-accesses the
           corresponding Header relative to the specified  File  Control
           Table.

        ELF FILE SYSTEM MANUAL                      Page  34
	   Chapter Two -- File System Routines


        Title: $CPFRB

        Function: CoPy FaRB to FCT

        Input parameters:
           R1=A(FARB)
           R2=A(FCT)

        Returned values:
           R1=A(FARB)
           R2=A(FCT)

        Description:

                The specified File Access Request Block is copied to the
           specified File Control Table.

        ELF FILE SYSTEM MANUAL                      Page  35
	   Chapter Two -- File System Routines


        Title: $DHCT

        Function: Release Header Control Table

        Input parameters:
           R1=A(Header Control Table)

        Return values:
           R1=0

        Description:

                The given HCT is deleted.

        ELF FILE SYSTEM MANUAL                      Page  36
	   Chapter Two -- File System Routines


        Title: $DSBCC

        Function: DiSaBle Control-C

        Input parameters:

           None

        Return values:

           None

        Description:

                Control-C is disabled for the calling job.   Normally  a
           control-C  from  the  control (CTL) device will cause (1) the
           output from a sub-system to be suspended and  (2)  subsequent
           input  from the control device to be interpretted as commands
           by the EXEC rather than be passed on to the  sub-system  when
           it  requests  input  from  the CTL pseudo-device via a BIN or
           SIN.  When control-C is  disabled,  any  control-C  from  the
           control device is deferred until the control-C is re-enabled.

        ELF FILE SYSTEM MANUAL                      Page  37
	   Chapter Two -- File System Routines


        Title: $ENBCC

        Function: ENaBle Control-C

        Input parameters:

           None

        Return values:

           None

        Description:

                Control-C  is  enabled  for  the  calling  job.   For  a
           description  of  the  difference  between  what  occurs  when
           control-C  is  enabled  and  when  it  is  enabled,  see  the
           description of $DSBCC.

        ELF FILE SYSTEM MANUAL                      Page  38
	   Chapter Two -- File System Routines


        Title: $ERINC

        Function: Executive RINg buffer Check

        Input parameters:
           None

        Returned values:
           R0=Number of characters in the ring buffer

        Description:

                The routine returns the current number of characters  in
           the  ring  buffer.  If this number is positive the caller can
           obtain the characters with the  assurance  that  the  calling
           process  will  not  be  put  to  sleep as long as there is no
           possibility  that  another   process   is   also   requesting
           characters from the buffer.

        ELF FILE SYSTEM MANUAL                      Page  39
	   Chapter Two -- File System Routines


        Title: $ERING

        Function: Executive RING buffer update

        Input parameters:
           R0=Character to be added to ring buffer
              (right justified)
           R1=Address of Job Control Table

        Returned values:
           R0=Return code
           R1=Address of Job Control Table

        Return codes (in R0):
           0 - Character added to successfully
           2 - Character was not added to ring
               buffer because there was no room

        Description:

                Routine adds specified character to ring buffer if there
           is  room.  Once in the ring buffer the character is available
           to any process in the job requesting a input from the special
           device "CTL".

        ELF FILE SYSTEM MANUAL                      Page  40
	   Chapter Two -- File System Routines


        Title: $ERINI

        Function: Executive RINg buffer Initialize

        Input parameters:
           R1=A(of Job Control Table)

        Returned values:
           R1=A(of Job Control Table

        Description:

                Semaphores for ring buffer and output  mutual  exclusion
           is  allocated and several fields in the Job Control Table are
           initialized.

        ELF FILE SYSTEM MANUAL                      Page  41
	   Chapter Two -- File System Routines


        Title: $ERINR

        Function: Executive RINg buffer Reset

        Input parameters:
           None

        Returned values:
           None

        Description:

                The ring buffer is reset.   Any  characters  in  it  are
           effectively  thrown  away.  Note that this routine should not
           be called unless it is known that  no  process  is  currently
           requesting input from the ring buffer.

        ELF FILE SYSTEM MANUAL                      Page  42
	   Chapter Two -- File System Routines


        Title: $ERINT

        Function: Executive RINg buffer Terminate

        Input parameters:
           R1=Address of Job Control Table

        Returned values:
           R1=Address of Job Control Table

        Description:

                The semaphores used to control "CTL"  input  and  output
           are freed.

        ELF FILE SYSTEM MANUAL                      Page  43
	   Chapter Two -- File System Routines


        Title: $FPBLK

        Function: Free Primary storage BLocK

        Input parameters:
           R1=A(Block)

        Returned values:
           R1=0

        Description:

                If the operation is successful, the block is returned to
           the pool of blocks used by the file system.

        ELF FILE SYSTEM MANUAL                      Page  44
	   Chapter Two -- File System Routines


        Title: $GBLK

        Function: Get logical BLocK

        Input parameters:
           R2=A(File Control Table)

        Returned values:
           R2=A(File Control Table)

        Description:

                A $SIO is initiated from the logical block specified  by
           FCTLBN  into  the  buffer  specified by FCTBBA in the address
           space specified by FCTVID.  The requested byte count is  that
           specified  by  FCTBRQ and the op-code is the one specified by
           FCTUEC.  No checking is done to insure that the LBN requested
           is within the file specified by the FLB of the FCT.

        ELF FILE SYSTEM MANUAL                      Page  45
	   Chapter Two -- File System Routines


        Title: $GDR

        Function: Get Directory Record

        Input parameters:
           R1=A(Directory Record to match)
           R2=A(File Control Table for Directory File)

        Returned values:
           R0=Return code
           R1=A(Directory Record)
           R2=A(FCT for Directory File)

        Return codes (in R0):
              0   - Successful
           E.DERR - Device error
           E.NDIR - No such directory file
           E.NNAM - No such name
           E.NTYP - No such type (extension)
           E.NVER - No such version

        Description:

                If the operation is successful, the File  Identification
           field of the matching directory record in the given directory
           file is copied to the FID  of  the  given  directory  record.
           Note  that  the  Directory  File  should  be opened for input
           before $GDR is called.

        ELF FILE SYSTEM MANUAL                      Page  46
	   Chapter Two -- File System Routines


        Title: $GETF

        Function: GET File

        Input parameters:
           R2=A(File Control Table for file to be "gotten")

        Returned values:
           R0=Return code
           R2=A(File Control Table)

        Return codes (in R0):
              0   - Successful
           E.DERR - Device error
           E.NDIR - No such directory
           E.NNAM - No such name
           E.NTYP - No such type (extension)
           E.NVER - No such version

        Description:

                If  the  operation  is   successful,   the   FID   (File
           Identification)  field  of  the  given  File Control Table is
           updated based on the directory  record  (in  the  appropriate
           directory  file) that matches the file name designated in the
           File Control Table.  More completely,  the  directory  number
           (UIC)  in the File Control Table is used to build a directory
           record that  is  looked  up  in  the  Master  Directory  File
           (000000.DIR).  If the directory record is found it is used to
           specify the  File  Identification  of  the  appropriate  User
           Directory  File.   This  User Directory File is then searched
           for a directory record that matches the file name, type,  and
           version  specified  in  the  File  Control  Table.  If such a
           directory  record  is  found  the  operation  is   considered
           successful  and the File Identification value in the matching
           directory record is moved to the FID field in the given  File
           Control Table.

        ELF FILE SYSTEM MANUAL                      Page  47
	   Chapter Two -- File System Routines


        Title: $GHDR

        Function: Get HeaDeR

        Input parameters:
           R1=A(Buffer where the Header Block should be placed)
           R2=A(File Control Table)

        Returned values:
           R0=Return code
           R1=A(Header block)
           R2=A(File Control Table)

        Return codes (in R0):
              0   - Successful
           E.DERR - Device Error
           E.NSF  - No Such File

        Description:

                The header for the file specified  by  the  file  number
           part  of  the  File  Identification (FID) field of the FCT is
           retrieved if it exists.

        ELF FILE SYSTEM MANUAL                      Page  48
	   Chapter Two -- File System Routines


        Title: $INTER

        Function: INTER-address space set-up

        Input parameters:
           R1=File Handle

        Return values:
           If operation successful
              R0=unchanged
              R1=File Handle

           If operation unsuccessful
              R0=Return Code
              R1=File Handle

        Return Codes (in R0 if operation unsuccessful):
           E.INFH - Invalid File Handle

        Description:

                The given File Handle is verified, exclusive use of  the
           corresponding  File  Control  Table  is obtained, and the VID
           field of this File  Control  Table  is  set  to  the  virtual
           address  space  ID  of  the  callers  address  space.  If the
           operation is successful the routine returns +2, otherwise  it
           returns +0 with an appropriate return code.

        ELF FILE SYSTEM MANUAL                      Page  49
	   Chapter Two -- File System Routines


        Title: $INTRA

        Function: INTRA-address space set-up

        Input parameters:
           R1=File Handle

        Return values:
           R1=File Handle

        Description:

                Exclusive access of the File Control Table corresponding
           to  the  given File Handle is obtained.  The VID field in the
           File Control Table is then zeroed and the routine returns  to
           the calling routine.

        ELF FILE SYSTEM MANUAL                      Page  50
	   Chapter Two -- File System Routines


        Title: $MAPVB

        Function: MAP Virtual Block

        Input parameters:
           R1=A(Block Parameter Block)
           R2=A(File Control Table)

        Returned values
           R0=Return code
           R1=A(Block Parameter Block)
           R2=A(FCT)

        Return codes (in R0):
              0   - Successful
           E.DERR - Device error
           E.EOF  - No such virtual block in file

        Description:

                If the operation is successful the virtual block  number
           specified   in   the   parameter   block  is  mapped  to  the
           corresponding logical block number which is returned  in  the
           parameter block.

        Block Parameter Block
                    +---------------+
                    ! Virtual Block !  BPBVBN
                    +-             -+
                    !    Number     !
                    +---------------+
                    ! Logical Block !  BPBLBN
                    +-             -+
                    !    Number     !
                    +---------------+

           Note: The above symbolics for the Block Parameter  Block  are
           generated by the $DFBPB macro.

        ELF FILE SYSTEM MANUAL                      Page  51
	   Chapter Two -- File System Routines


        Title: $OPCHK

        Function: OPen CHecK

        Input parameters:

           R0=Open Option Mask
           R2=A(File Control Table)

        Return values:

           R0=Return code
           R2=A(File Control Table)

        Return codes (in R0):

              0   - Successful (File is open for the access requested)
           E.FNOP - File Not OPen
           E.IA   - Invalid Access (the file is not open for the access
                     requested)

        Description:

                The current state of the file associated with the  given
           File  Control Table is checked to determine if it is open for
           the access requested.  The given open option mask  should  be
           O.INPT or O.OUPT (generated by the $DFOOP macro).

        ELF FILE SYSTEM MANUAL                      Page  52
	   Chapter Two -- File System Routines


        Title: $OPHDR

        Function: OPen HeaDeR

        Input parameters:
           R0=Option word
           R2=A(File Control Table)

        Return values:
           R0=Return code
           R2=A(File Control Table)

        Option word masks (generated by $DFHOP macro)
           O.HWRT - Open Header for Write Access (otherwise read is
            assumed)
           O.HSUS - Suspend process if immediate access not possible

        Return code (in R0):
              0   - Successful
           E.FAOP - File Already Open under this File Control Table)
           E.FBSY - File Busy (File open under another File Control
                    Table combination)

        Description:

                The  Header  corresponding  to  the  FID  field  of  the
           specified  File  Control  Table  is  opened  for  the  access
           specified.  As an option the calling process may be suspended
           until  the  requested  access  can  be  granted.  File access
           requests are granted based on what  is  often  called  strong
           reader  preference.   Input  access is granted if the file is
           currently not open by any job or is currently open by one  or
           more jobs for input.  Output access is granted if the file is
           currently not open by any job.  When a file is  closed  after
           being  open  for input access, access is granted to a process
           waiting for output access if the file is open under no  other
           File  Control Tables.  When a file is closed after being open
           for output access, access is granted to all processes waiting
           for  input  access.   If  no  processes are waiting for input
           access, the next process waiting for output access is granted
           said access.

        ELF FILE SYSTEM MANUAL                      Page  53
	   Chapter Two -- File System Routines


        Title: $PBLK

        Function: Put logical BLocK

        Input parameters:
           R2=A(File Control Table)

        Returned values:
           R2=A(File Control Table)

        Description:

                A $SIO is initiated to the logical  block  specified  by
           the FCTLBN from the buffer specified by FCTBBA in the address
           space specified by FCTVID.  The requested byte count is  that
           specified  by  FCTBRQ and the op-code is the one specified by
           FCTUEC.  No checking is done to insure that the Logical Block
           Number  requested  is  within  the file specified by the File
           Location Block of the File Control Table.

        ELF FILE SYSTEM MANUAL                      Page  54
	   Chapter Two -- File System Routines


        Title: $PHDR

        Function: Put HeaDeR

        Input parameters:
           R1=A(Header Block)
           R2=A(File Control Table)

        Returned values:
           R0=Return code
           R1=A(Header Block)
           R2=A(File Control Table)

        Return codes (in R0):
              0   - Successful
           E.DERR - Device error
           E.NSF  - No such header

        Description:

                The given header block is updated  in  the  index  file.
           This includes re-computing the check sum.

        ELF FILE SYSTEM MANUAL                      Page  55
	   Chapter Two -- File System Routines


        Title: $PRFSS

        Function: PaRse File Specification String

        Input parameters:
           R1=A(File Init Block)
           R2=A(File Control Table)

        Returned values:
           R0=Return code
           R1=A(File Init Block)
           R2=A(File Control Table)

        Return code (in R0):
              0   - Successful
           E.INSF - Insufficient Storage
           E.IFSO - Invalid File String Option
           E.IFSS - Invalid File Specification String
           E.UAFS - Unallowed File String field

        Description:

                The File Location Block of the given File Control  Table
           is  updated  with the values specified in the given File Init
           Block  merged  with  the  values   parsed   from   the   File
           Specification String (pointed to by the FIBFLA field).

        ELF FILE SYSTEM MANUAL                      Page  56
	   Chapter Two -- File System Routines


        Title: $SCRLW

        Function: SCRoLl Window

        Input parameters:
           R1=A(Virtual Block Number)
           R2=A(FCT)

        Return values:
           R0=Return codes
           R1=A(Virtual Block Number)
           R2=A(FCT)

        Return codes:
              0   - Successful
           E.DERR - Device error
           E.EOF  - No such virtual block in file

        Description:

                If the operation is successful the window in the FCT  is
           adjusted to include the specified virtual block number.

        ELF FILE SYSTEM MANUAL                      Page  57
	   Chapter Two -- File System Routines


        Title: $SDDR

        Function: Set Directory Directory Record

        Input parameters:
           R2=A(File Control Table)

        Returned values:
           R2=A(FCT)

        Description:

                The Directory directory-record of the given FCT  is  set
           up  on  the  basis  of the directory (UIC) field of the given
           FCT.

        ELF FILE SYSTEM MANUAL                      Page  58
	   Chapter Two -- File System Routines


        Title: $SDDR

        Function: Set Directory Directory Record

        Input parameters:
           R2=A(File Control Table)

        Returned values:
           R2=A(FCT)

        Description:

                The Directory directory-record of the given FCT  is  set
           up  on  the  basis  of the directory (UIC) field of the given
           FCT.

        ELF FILE SYSTEM MANUAL                      Page  59
	   Chapter Two -- File System Routines


        Title: $SDIRF

        Function: Search DIRectory File

        Input parameters:
           R1=A(Buffer (of length VBLEN))
           R2=A(File Control Table for Directory file)
           R3=A(Directory Record to match)

        Returned values:
           R0=Return code
           R1=A(Directory Block)
           R2=A(File Control Table)
           R3=Offset to matching Directory Record

        Return codes:
              0   - Successful
           E.DERR - Device error
           E.NDIR - No such directory file
           E.NNAM - No such name
           E.NTYP - No such type (extension)
           E.NVER - No such version

        Description:

                If the search is successful the address of the directory
           block  containing  the  matching  Directory  Record  (DR)  is
           returned along with the offset in that block to the  matching
           record.   The  virtual block number of the directory block is
           returned in the FCT.  If the  search  fails  the  appropriate
           return code is returned and R1 and R3 are not effected by the
           operation.

        ELF FILE SYSTEM MANUAL                      Page  60
	   Chapter Two -- File System Routines


        Title: $SHCT

        Function: Search for Header Control Table

        Input parameters:
           R2=A(File Control Table)

        Return values:
           R2=A(File Control Table)
           R1=A(Matching HCT) if found
             =0 if not found

        Description:

                A search is performed for an HCT that matches  the  File
           Number field of the given FCT.

        ELF FILE SYSTEM MANUAL                      Page  61
	   Chapter Two -- File System Routines


        Title: $SRPV

        Function: Search Retrieval Pointer Vector

        Input parameters:
           R1=A(Block Parameter Block)
           R2=A(Retrieval pointer vector)

        Returned values:
           R0=Offset from beginning of RPV to retrieval
              pointer that maps given VBN
           R1=A(Block Parameter Block)
           R2=A(Retrieval Pointer Vector)

        Block Parameter Block:

                    +-----------------------------+
                    !       Target Virtual        !  BPBUBN
                    +-                           -+
                    !        Block Number         !  
                    +-----------------------------!
                    ! In: VBN of 1st RP in Vector !  BPBFVB/BPBMVB
                    +-                           -+
                    !   Out: VBN of matching RP   !  
                    +-----------------------------+
                                                     BPBLEN


           Note: The above symbolics for the Bl9ck Parameter  Block  are
           generated by the $DFBPB macro.

        Description:

                The offset to the retrieval pointer that maps the  given
           virtual  block  number  is returned.  The second parameter in
           parameter block is updated to correspond  to  this  retrieval
           pointer.

        Note: It is the caller's  responsibility  to  determine  if  the
           Retrival  Pointer  Vector  contains  such a retrieval pointer
           before calling.

        ELF FILE SYSTEM MANUAL                      Page  62
	   Chapter Two -- File System Routines


        Title: $STIRB

        Function: SeT IoRB

        Input parameters:
           R2=A(File Control Table)

        Returned values:
           R2=A(File Control Table)

        Description:

                The OPC, BR, BHA, BLA, UVI, and UVA fields of  the  IORB
           in the FCT are set.

        ELF FILE SYSTEM MANUAL                      Page  63
	   Chapter Two -- File System Routines


        Title: $VERFH

        Function: VERify File Handle

        Input parameters:
           R0=A(Job Control Table)
           R1=File Handle

        Returned values:
           R0=A(Job Control Table)
           R1=File Handle

        Description:

                The routine returns +2  if  the  specified  File  Handle
           corresponds  to  a  file  currently  associated  with the job
           described by the given  Job  Control  Table.   Otherwise,  it
           returns +0.

        ELF FILE SYSTEM MANUAL                      Page  64
	   Chapter Two -- File System Routines


        Title: $VFCT

        Function: V File Control Table

        Input parameters
           R1=File Handle

        Return values:
           R1=File Handle

        Description:

                Exclusive access of the File Control Table corresponding
           to  the given File Handle is released and control is returned
           to the calling routine.
