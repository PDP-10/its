-*-Text-*-
Last update Sunday, 18 July 1982

File: SENSOR,  Node: Top,  Up: (DIR),  Next: Summary


SENSOR is a program that takes over the sends handling that is normally
done by DDT, giving you all sorts of random options of how to print in-
coming messages, and what to do with the text, and so on.

How can it intercept your messages before DDT gets them?  Very simply.
Messages are NOT sent explicitly to your DDT, but to the job whose name
is HACTRN.  So all SENSOR does is rename your DDT to something else
('*EXEC*') by default, and name itself HACTRN.

Basically, all that SENSOR does is inhale the message, parse it all up
to determine who it came from, and type it at you in a nice, brief
format.  For example, a message that DDT would print as

		[MESSAGE FROM ZIPPY at MIT-AI  10:53pm]
		ARE WE WORKING FOR SYMBOLICS YET?  YOW!!

SENSOR would print as

		[ZIPPY@AI: ARE WE...]

The entire, original text, however, is saved in your sends file, so
nothing is lost.  Note that this message is TYPED on your terminal,
and isn't "sent" per se.  The advantage of doing this is that it does
not cause any interrupts; in EMACS when a normal send is received, it
clears the screen and refreshes the page.  With SENSOR, EMACS doesn't
pick up on the intrusion, and it is very easy to clear up the line
(there is an option to restrict the printed message to one line only,
so that a simply C-U C-L will get your page back to the state it was
in before)


The basic features are as such:

	o  Varying number of bells preceding message (0-n)

	o  Varying verbosity of typed message:
	   1. Just beep.
	   2. Beep and print name@site only.
	   3. Beep, print name, and one screen width of text.
	   4. Show the entire message.

	o  Option of forwarding messages to other programs (if you
	   write your own CLI sends handler in Lisp, you may have
	   incoming messages forwarded directly, with no editing)

	o  Your choice of where to save the sends, if not in your
	   default sends file.  You may also choice to NOT save them
	   at all.

	o  Verbosity and number-of-bells may be specified for any program
	   in particular.  I.e. you may want reduced verbosity in EMACS
	   only, or more bells when in MACSYMA, than you get normally.

	o  And for that truly obnoxious person, you may have the SENSOR
	   ignore messages from certain people.  Message coming from such
	   nasty people are never printed, but what is done with them is
	   up to you.  (They will either be saved in your file, lost, or
	   returned to sender with an appropriate message)



* Menu:

* Summary::	Summary of JCL format and commands
* Commands::	Long winded breakdown of commands


File: SENSOR,  Node: Summary,  Next: Commands,  Up: Top

The basic format for JCL is

:SENSOR /Keyword1=Value1 /Keyword2=Value2 ... /KeywordN=ValueN

The keywords are:

	BELLS: Number of bells preceeding messages

	FORWARD: List of jnames - If you receive a message while
		 running one of these jobs, it's forwarded to it.

	IGNORE: Just of unames of people you want to ignore.

	PROGRAMS: List of jnames with special verbosity/bells considerations.

	SENDSAVE: File where your sends should be saved.

	VERBOSITY: How verbose to be when typing message.

Only the first letter of the keyword is actually signifigant, so saying
/HEMOGLOBIN is just as meaningful as saying /HACTRN.

The special keyword /NO preceeding any of the other keywords means
usually what you thought it would, but check out the next node to
be sure.

File: SENSOR,  Node: Commands,  Previous: Summary,  Up: Top

Breakdown of commands keywords, what args they take, what What
They Do, in the big sense.



/BELLS n

	Specifies that n beeps are to be done before a message appears.
	Default is 1.  /NO means the same as /BELLS=0

	Example:	/BELLS 5
			/NO /BWANA!!DON'T_DO_IT!!IT'S_SUICIDE!



/FORWARD jname1 jname2 ... jnamen

	When given a list of 6bit jobnames, tells SENSOR to forward
a message upon reception to that job (if it has the TTY at the time)
instead of just printing it on the terminal.  Good if you have LISP
or EMACS or whatnot with a built-in CLI handler.
	Default is don't forward.  /NO zeroes all jnames already given.

	Example:	/FORWARD EMACS GUPPY
			/NO/F



/IGNORE uname1 i1 uname2 i2 ... unamen in

	Allows you to ignore, with varying intensity, particularly
obnoxious or unwanted people.  There are three ways to ignore folk:
	i=0 means ignore them totally.  If you get a message
	    from them, lose it.
	i=1 means don't print sends from nasty people, but save
	    the text for evidence (iff you ARE saving that is.)
	i=2 means return messages from these lusers with a note
	    saying "Returned unread".
	Default for i is 1.  /NO says not to ignore this person
anymore.

	Example:	/IGNORE GUINEA 2 TRURL
			/NO/IGUANAS_TODAY_THANK_YOU



/PROGRAMS jname1 b1v1 jname2 b2v2 ... jnamen bnvn

	This facility allows you to have variable Verbosity and Bells
options when in specific programs.  For example, you might want two
bells instead of 1 in EMACS and no text.  bv is a single number, of
which the ones digits is v, and everything else is b, i.e. "101" means
b=10, v=1.  Both are optional and default to 0 and 2 respectively.
	Default is no special programs.  /NO means don't treat the
given programs specially.

	Example:	/PROGRAMS EMACS 32 CRTSTY
			/NO/PEEKING



/SENDSAVE=Filename

	You may choose another file to have your sends save in, if
you don't want them to go in the .TEMP. one.
	Default is your standard sends file.  /NO means don't save sends
at all.

	Example:	/SENDSAVE=FOO;MY SENDS
			/NO/SAVING_SENDS



/VERBOSITY n

	The single digit n specifies how verbose to be when displaying
an incoming message: 0 means just do Bells, 1 means Bells and name,
2 means bells, name, and one line of text (enough to fill, but not go
over, one screen width), 3 and up means the whole message.
	Default is 3.  /NO means the same as /Verbosity=0

	Example:	/VERBOSITY 1
			/NO/VACUUMING_IS_NECESSARY

