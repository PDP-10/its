			BASIC DATACOMPUTER USE
			     V. R. Pratt
				M.I.T.
				5/9/77

			  BRIEF DESCRIPTION

	The Datacomputer (DC) is a slow computer in 575 Technology
Square, at the CCA (Computer Corporation of America) node of the ARPA
network.  Its interesting feature is that it has 3 terabits
(3,000,000,000,000 bits) of memory.  It serves as an archive device
for the entire ARPA network.  The purpose of this note is to tell you
just enough about it so you can use it to store files you don't use
regularly but don't want to dump onto magnetic tape.  This document
presents a simplified model of what is going on in DC, to avoid
first-encounter confusion; for more sophisticated use, see the more
complete manual residing on .INFO.;DFTP ORDER.  Hopefully DC will
alleviate the present space crunch on the AI computer.  I have been
using DC myself for the past five months and have found it an
excellent way of uncluttering my directory.

		  TERMINOLOGY, CONVENTIONS, COMMANDS

	The following section is near the front of this note for handy
reference.  Skip it on your first reading.

Terminology
LOCAL		The ITS computer you are using
REMOTE		The Datacomputer (DC)
USER		Your own node on DC
TERSE		A minimum of usable information
VERBOSE		Much information

Conventions
RUBOUT		Within a name: rubs out one character
		Between names: rubs out whole command
^U		Rubs out whole line
^R		Retypes line
Filenames	Must be given in TENEX format whether you are naming
		local or remote files (thus FOO 27 on your
		local directory would be typed FOO.27)
		Remote files appear as FOO.27;2 or more
		generally as fn1.fn2;vers where fn1 and fn2
		(filename 1 and filename 2)
		are arbitrary strings and vers is the
		DC-generated  version number (which you
		can generally ignore - it plays the same
		role essentially as ">" in ITS file names).
		When it makes sense to talk about sets of
		files (as opposed to one file), you can
		name a set by typing * for any or all of
		fn1, fn2, and vers.  Thus you can PUT or
		GET several files at once.
Abbreviations	You need only type the first two or three
		characters of any COMMAND (but not filename)
		and DC will know what you mean.  Thus
		DE FOO will delete file FOO, CO LABOR will
		connect you to your LABOR subnode, etc.
End-of-word	Type a space between words
End-of-command	Type a carriage-return

Commands   (For a complete list, see .INFO.;DFTP ORDER)
CONNECT		connects you to the subnode you want to work on.
		(e.g. "CONNECT WIDGETS" followed by carriage return).
DIRECTORY	prints directory of your files on current node
		(follow it with three spaces).
PUT		puts a file of yours on DC
		(e.g. PUT FOO.25 FOO.XYZ) (local first).
GET		gets a DC file (goes in your ITS directory)
		(e.g. GET FOO.XYZ FOO.25) (remote first).
DELETE		deletes a file (e.g. DELETE FOO.XYZ).
UNDELETE	undoes DELETE (e.g. UNDELETE FOO.XYZ).
LIST		lists your nodes.  "LIST <<  " (2 spaces at end)
		will show you your subdirectories.
QUIT		kill the DFTP job (say "QUIT Y").
LOCAL-CONNECT	connects you to an ITS directory other
		than your own (e.g. LOCAL-CONNECT LIBLSP).

			       USING DC

	The first thing is to get DC to know about you. Send a message
to BEE@MC asking for an account on it.

	To use DC, just type
:DFTP
at DDT.  This will log you in to DC using your local login name.  DC
will type [Attaching] and then prompt you with a *.  DC is a slow
computer, so be patient about this and other operations.  Sometimes DC
is completely loaded, in which case you will have to wait your turn. 
Thus after typing :DFTP do ^Z^P and work on something else while
waiting.  When you get the message "Job DFTP wants the TTY", go back
to DFTP.

	To find out the status of DC (useful when you are not getting
attended to with :DFTP and want to know what's up), type
:DCSTAT
at DDT.  You will be given lots of statistics; keep an eye out for
a line stating whether DC-203 (the Datacomputer you use) is listening,
not listening, or dead.  Ignore information about DC-303, which is the
old Datacomputer.

	Before you start storing files on DC you should decide whether
or not you want your directory structured.  In an unstructured
directory, you only have one node, the one representing you, called
your USER node (terminology local to this guide), where all your files
accumulate.  In a structured directory you have various subnodes of
your USER node, in each of which you can accumulate files.  The
advantages of an unstructured directory are that you don't need to
remember where you put your files, and you can get a directory listing
of all your files with only one command.  The advantages of a
structured directory are that you have a better idea of what your
holdings are on any given topic, you have one more means of talking to
DC about a given subset of your holdings (e.g. you can ask for all the
files in a given node to be copied from DC to AI, or just those in
that node with a given second file name, etc), you run less risk of
giving the same name to two files (unlike ITS, this is not
catastrophic on DC, which keeps track of same-named-files using
version numbers), and you don't have to print out your whole directory
just to locate a file whose name you have forgotten but whose
classification you remember (a common occurrence).  My own directory
is structured.

	If you decide to have a structured directory, you should now
connect yourself to whatever subnode you want to work on.  Type
CONNECT WIDGETS (end all commands with carriage return) to work on
your WIDGETS directory.  With an unstructured directory, you are
already connected to your USER node when you log in, so that no
explicit CONNECTion on your part is necessary.

	To see the directory of the node you are connected to, say
DIR
followed by three spaces.  (DC will type some stuff whose meaning you
can dig out of .INFO.;DFTP ORDER if you want to use DIR in fancier
ways.)

	To put FOO > (already on your local directory) on DC, simply
say
PUT FOO
(carriage return) and a copy of FOO > will be put in the node you are
are connected to. The copied file will be named FOO.;1 where the item
following the "." (nothing in this case) is the remote filename 2 and
the item following the ";" is the version number as perceived by DC,
which you can ignore.  If you want a non-null filename 2 (not
essential, but helpful when you want to talk to DC about a class of
files in a directory, e.g. if you want later on to get all XYZ files)
then say
PUT FOO FOO.XYZ
and the copied file will be named FOO.XYZ;1.  When typing the local
and remote filenames in the PUT command, DC will prompt with [As]
between the two filenames, so in fact it will appear as though you
typed
PUT FOO [As] FOO.XYZ
If you want to also specify the local filename 2, say it is 27, then
type
PUT FOO.27 FOO.XYZ
or just
PUT FOO.27
if you want the remote copy to be called FOO.27 rather than FOO.XYZ. 
(My preference is to always give a filename 2 which specifies what
sort of a file it is, e.g. LSP, PRO (proposal), DOC (documentation),
etc.)

	To get a file from DC, say
GET FOO
or
GET FOO.XYZ
(depending on whether the remote copy has a filename 2) and your local
directory will end up with a copy of FOO, with a filename 2 of either
> if none was specified or XYZ (or whatever) otherwise.  
As with PUT, you can name both the local and remote files, as in
GET FOO.ABC BAZ.XYZ
which will get the most recent version of the remote file FOO.BAZ (the
one with the highest version number) and name it BAZ XYZ.  If you want
to get, say, all files with filename 2 LSP, type
GET *.LSP
where the * indicates that anything will do.  Then all LSP files in
your remote directory will get copied into your local directory.

	To delete a file, say
DELETE FOO
or
DELETE FOO.XYZ
If you want to revive a deleted file, say
UNDELETE FOO
which will revive FOO unless your directory has been EXPUNGEd
(presumably by you - see .INFO.;DFTP ORDER).

	To see what nodes you have attached to your USER node, type
LIST <<
followed by two spaces, which will produce something like

    ITS
	JONES
            REPUBLICANS
		<FILES>
	    DEMOCRATS
		<FILES>
	    LIBERTARIANS
		<FILES>

indicating that your USER node (JONES) is a subnode of the ITS node
(which is itself a subnode of the DC's root node) and you have three
subnodes of your own, each containing files.

	When you are done, type
QUIT Y
(the Y is in response to the question [Confirm]).  This logs you out
of DC and closes the network connection.  Even this simple task is
done slowly by DC, so you may as well do ^Z^P when you've confirmed.

	The above represents a minimum of what you need to know to use
the Datacomputer.  For fancier use of DC than this, read
.INFO.;DFTP ORDER.

