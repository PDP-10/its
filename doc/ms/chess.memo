ALG=0 INPUT
ALLT DEBUG
AWKS=-1 TOURN
BCS=1 PARAM
BD OUTPUT
BOOK=1 PARAM
CASSW=0 PARAM
CBOOK INPUT
CLEAR INPUT
CLKKLU=-1 TIME
CSQSW=1 ?
DBDIS=1 DISPLAY
DFDSW=0 PARAM
DRAW MOVE
EGSW=1 PARAM
FANCY=-2 DISPLAY
FASTER PARAM
FCSW=1 PARAM
FILE OUTPUT
HASH=1 PARAM
HBPT DEBUG
HOPEN DEBUG
HPV OUTPUT
HRCSW=1 INTERN
HREAD DEBUG
HSSW=1 DEBUG
ICLOCK=0 TIME
ICSW=-2 DEBUG
KINGSA=1 PARAM
LIST OUTPUT
M MOVE
MVAN=1 ?
MVNSW=1 ?
PARCSW=1 ?
PARSW=0 TOURN
PB CONTROL
PCGSW=2 PARAM
PG OUTPUT
PMGDB=0 DEBUG
PMSASW=1 PARAM
PN CONTROL
PNT=0 OUTPUT
PS CONTROL
PSVD=0 DISPLAY
PUT INPUT
PW CONTROL
RBOOK INPUT
RBOOKB INPUT
RENDG INPUT
REPLAY DEBUG
RESET INPUT
RHDSK DEBUG
RPOS INPUT
RS INPUT
SASW=0 PARAM
SAVE OUTPUT
SDS=0 DEBUG
SE=1 TOURN
SETC=2 PARAM
SETCL TIME
SETD=4 PARAM
SETEST DEBUG
SETF=2 PARAM
SETFD=2 PARAM
SETP=6 6 3 3 2 PARAM
SETPVD=6 PARAM
SETSD=2 PARAM
SETSSD=0 PARAM
SETW=6 PARAM
SFS=1 PARAM
SIDE INPUT
SKIP INPUT
SLASW=0 PARAM
SLOWER PARAM
SLS=0 DEBUG
SMSS=1 PARAM
SMVD=0 DEBUG
SPARM TOURN-PARAM
SPOT INPUT
SPVS=0 DEBUG
SQCTSW PARAM
SSSW=1 PARAM
STOP TIME
STOPIN ?
SVHDSK DEBUG
T DEBUG
TP DEBUG
TPC DEBUG
TPDV DEBUG
TRACE DEBUG
TSW=1 OUTPUT
TTIME TIME
TWOGTS=0 TOURN-CONTROL
U MOVE
UREAD INPUT
UWRITE OUTPUT
WALLP=-1 OUTPUT
WBOOKB OUTPUT
WHDSK DEBUG
WPOS OUTPUT

	?
CSQSW=1
MVAN=1
MVNSW=1
PARCSW=1
STOPIN


	CONTROL
	Quit.  Returns control to the top level and does a PN.
	Same as M, but needs no delimiter.
	Same as U, but needs no delimiter.
M	This instruction tells the program to make a move.
U	This instruction takes back the last move.  It includes a
	PN (play neither) to prevent the program from trying to make a move
	it just took back.  Therefore, after using this instruction it is
	necessary to feed in another PW or PB if you wish the program to continue playing.
PW	Play white.  The program makes moves for white, awaits input when black is to move.
PB	Play black.  The program makes moves for black, awaits input when white is to move.
PS	Play self.  The program moves for both sides.
PN	Play neither.  The program awaits input.
TWOGTS=0	If 1, think while other guy thinks.
	While in this mode, commands must be preceded by a colon.
	Before a move has been typed in,
	a rubout will cause all buffered commands to be aborted so that
	a move can immediately be typed in.  If the move is terminated by
	"DRAW?" instead of a carriage return, the program will eventually
	type its move followed by "ACCEPT" or "DECLINE".  If the move
	is terminated by ":", the program will eventually wait for a command
	before continuing to TWOGT.
	After a move is typed in (the input format for normal moves is
	piece/square-square  or  piece/square*piece/square,
	but anything redundant may be omitted), the move will be typed
	back in full format followed by a question mark.  If it is correct,
	type a period to have it inputted.  Any other character will cause
	the program to request a move again.  Illegal moves will be so
	commented.  Ambiguous moves will cause the program
	to make its best guess of what you meant, and will type
	this move in full format together
	with the warning "AMBIGUOUS".  Special moves:
	O-O  or  O O  for king-side castling;
	O-O-O  or  O O O  for queen-side castling;
	PxP EP  or  PxG  etc. for en passant capture;
	P-K8=Q  etc. for promotion.

	DEBUG
ALLT	Trace all plausible moves.
HBPT	Hash BreakPoinT.  Set a breakpoint which breaks
	if current position is reached in search.
HOPEN	Takes file specification as argument.  Opens file for
HREAD	Searches forward in HOPEN'ed file for hash table
	relevant to current position and reads it in.
HSSW=1	Hash Save SWitch.
	-1	Open file CHASHT > for writing and save hash table in it after each move
	0	Don't save hash table
	1	Save hash table in core after each move
ICSW=-2	Incremental Cat (calculate attack) SWitch.
	-2	Spot check
	-1	Always check
	0	Don't use IC
	1	Use IC
PMGDB=0	When positive, displays pins, threats and constraints
	after move typed in.
REPLAY	Takes file specification as argument.  Types "PLAY WHITE?"  Answer
	"Y" or "N".  Then asks "PLAY BLACK?"  Again answer
	"Y" or "N".  If not playing side to move, program reads a move
	from the file.  If playing side to move, program makes a move to
	compare with move from file, but uses move from file.  Normally
	this feature is used with WALLP=-1.
RHDSK	Takes file specification as argument.  Read hash table from
	specified file, saving it in core.
SDS=0	Set Display Switch.
SLS=0	Set look switch.
	0,0	Normal mode of operation
	1,0	Gives PMG display for current position when given a
		make move command (no move is made)
	1,1	Does a normal search but makes display and pauses at each node.
		Type a space to continue to the next node
		or type an integer to continue to the next node at that ply
	2,0	Does a normal search and displays feedover conditions.
		Type a space to continue
SETEST	Takes numeric argument.  Set estimate of value of position.
SMVD=0	When positive, gives analysis of principal variations
	stemming from each playsible move.
SPVS=0	When positive, prints static evaluator and development values
	after move typed in.
SVHDSK	Takes file specification as argument.  Save hash table
	as the specified file.
T	Trace.  With no argument, traces static board evaluator
	evaluation of current position.  With a move for argument,
	traces PMG evaluation of that move.
TP	Trace Positional.
TPC	Types plausible captures and their values.
TPDV	Types development values.
TRACE	Same as "T".
WHDSK	Takes file specification as argument.  Write hash table
	which is stored in core as the specified file.

	DISPLAY
DBDIS=1
FANCY=-2	-2	No display
		-1	Whose move
		0	Board position in characters
		1	Board
		2	Board with game so far
	Does FANCY -2, but at interrupt level.
	Turns off display until input is requested by program.
	(Done at interrupt level.)
PSVD=0	When positive, displays principal variation and its value after
	program makes a move.

	INPUT
ALG=0	1	Set preferred input to algebraic notation.  Output is also algebraic.
	-1	Output is in both notations.
CBOOK	Continue reading book after an error in an RBOOK.
CLEAR	Removes all pieces from board.
PUT piece square	Puts specified piece
	(same format as is outputted by BD) on specified square
	(same format as is outputted in a move by the
	program, but always with respect to white).
RBOOK	Read book of openings.  (See description of book format.)
RBOOKB	Takes file specification as argument.  Reads a file
	outputted by the WBOOKB command.
RENDG	Read endgame program.  (See CHEG description.)
RESET	Restore initial position.  Does a PN.  RESET n restores to move n,
	e.g. RESET 5 backs up the game to the point at which
	white is about to make his 6th move.
RPOS	Takes next eight lines
	to be a board as outputted by the BD command, and sets up the
	specified position.
RS	Takes file specification as argument.  Reads in commands from file.
	(Note that moves are commands,
	so this command can be used to restore SAVE'd games.)
SIDE=W	Side to move.
SKIP	Takes numeric argument.  Skips to the next occurrence of "["
	followed by its argument in the file being read.
SPOT	Give handicap, e.g. SPOT QVBR removes white's
	queen and black's queen bishop and queen
	rook, also moving black's queen rook pawn to R3.  In
	general, "P", "N", "B", "R", and "Q" removes the KBP, the QN, the QB, the QR, and
	the Q respectively for the appropiate side (the side is initially white,
	and is switched by "V");  in addition, removal of the QR moves
	the QRP to R3.
UREAD	Takes file specification as argument.  Select auxiliary device input.
	Initiates readin from auxiliary device.

	INTERN
HRCSW=1

	OUTPUT
	Turns on teletype output.  (Done at interrupt level.)
	Turns off teletype output.  (Done at interrupt level.)
ALG=0	See under input.
DRAW	Asks if machine wants a draw.
BD	Prints out the board.
PG	Prints out the game.
FILE	Closes output file.
HPV	Prints out principal variation from current position
	as gotten from hash table.
LIST	List program commands and parameters with their current values.
PNT=0	1	Output to printer
	0	Output to TTY
	-1	Output to secondary output device
SAVE	Takes file specification as argument.  Writes file
	consisting of the moves made, similar to the output of a PG command.
TSW=1	Type lines after typing out move.
UWRITE	Takes file specification as argument.  Opens auxiliary
	output file.
WALLP=-1	1	Send debugging information (wallpaper) to printer
		0	Don't output wallpaper
		-1	Send wallpaper to file WALLP >
WBOOKB	Takes file specification as argument.  Writes binary
	file specifying the book of openings.  This file can be read in by
	the RBOOKB command.
WPOS	Takes file specification as argument.  Writes file consisting of
	"RPOS", followed by output of BD, followed by "SIDE W" 
	or "SIDE B" depending on whether white or black is to move.

	PARAM
BCS=1		If positive, use board control option in static evaluator.
BOOK=1		If positive, use opening book.
CASSW=0
DFDSW=0		Delayed FeeDover SWitch.
EGSW=1		End Game SWitch.  If positive, use endgame program.
FASTER		Go to next lower (faster) parameter set.
FCSW=1		Forward Cutoff SWitch.  If positive, use forward cutoff heurisitic.
HASH=1		-1	Don't use hash feature
		0	Use hash for draw detection only
		1	Use hash for detecting duplication of search.  Obtain
		value from table instead of continuing search.
KINGSA=1	KING SAfety.  If positive, use king safety term in static board evaluator.
PCGSW=2		Additional depth (after SETD) for PMG in PCG mode.
PMSASW=1	Poor Man's Surprise Analysis SWitch. (# of ply)
SASW=0		Surpurise Analysis SWitch.
SETC=2		Set plies to look at all captures.
SETD=2		Basic search depth for PMG.
SETF=2		Maximum number of ply to look for feedovers.
SETFD=2		Maximum number of extra ply for feedovers
	(only those due to possibility of value being worse for
	side to move are allowed).
SETP=6 6 3 3 2	Maximum number of positional (only) moves to look at
	at each ply.  [See SETW.]  [Not implemented.]
SETPVD=6	Using new PCG, sets depth to look at good moves.
SETSD=2		Set Secondary Search Depth.
SETSSD=0	Set Secondary Search Starting Depth.
SETW=6		Basic search width.  Takes a list of numbers separated by spaces,
	applying to plies 1,2,3,...; the last number applies to all higher plies.
SFS=1		Set Feedover Stop.  If positive,
	stop feedover in case a feedover is obviously not called for (i.e.
	in resulting position one side has lost a piece and is not
	threatening anything of equal value).
SLASW=0		Set Line Analysis SWitch.
SLOWER		Go to next higher (slower) parameter set.
SMSS=1		Set Multiple Search Switch.
SQCTSW
SSSW=1		Search Strategy SWitch.

	TIME
CLKKLU=-1	-1	Run time according to side to move
		0	Don't run time.
		1	Run time according to clock kludge
ICLOCK=0	1 inverts sense of clock kludge.
SETCL	"B" or "W" followed by time to set clock.
STOP	Stop clock.
TTIME	Type out times used by white and black.

	TOURN
AWKS=-1	When non-negative, send all TTY output to T!AWKS (e.g. T27 if AWKS=23)
	as well as to TTY.
PARSW=0	When positive, machine sets parameters.
SPARM	Takes numeric argument between 0 and 6.
	Stores current parameters as specified parameter set
SE=1	Sets an echo to cut off local people
	if tournament console being used.
