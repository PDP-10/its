     On the A.I. machine, a reasonably fluent
and debuged version of SHRDLU is alway availlable as
SHRDLU > DSK SHRDLU and can be run as a job
by typing SHRDLU<cntrl. k> at DDT. This version is
in interpreted with
all its options including a grind and trace. Consequently
it occupies arround 200k of core (caution: indiscriminately
running a job that big in the middle of the day is a 
good way to make enemies!!!!! Alway check the level
of system usage befoere loading.
.sp 1
     The first sign of life from SHRDLU looks
like this:
          SHRDLU version 101   created on 4-27-73
           type <space> to go to "ready" state, type "?" for help
          >>>
.sp 1
     The version number has certain accessable 
information associated with it describing the actual
files used in this version and any phenomena peculiar to it.
the prompt characters ">>>" are produced by the system's
handcrafted real-eval-print loop. When this has
been printed you are boht talking to LISP where you can do any
of the normal things (check values of bound variables, evaluate functions.
etc.) and you can use the SHOW-TELL mechanism which is designed
as a convenient way to fiddle with SHRDLU's knobs & switches,
define new wiords, examine sturctures as they are set up, etc.
More about it later.
     SHRDLU is dumped with all its display options turned
off so that the initial command state is a reasionable place to
set the parameters the way you want them before running any 
sentences. All the options will be described in the next
section. 
.sp 1
     Moving from this state to the one where
SHRDLU accepts sentences is doen by typing
"t " (the letter "t" followed by a space). The responce
will be:
          READY <cr>
     At this point you can type in a sentence and
it will be interpreted and responded to. Mistyped
letters within a word can bve erased
by typing a <rubout> in the usua; manner and unintended
words can be removed by typing a <rubout> agter an 
intervening break character (comma or space usualy). As soon
as the sentence terminating punctuation (. ? !) has been
typed, the sentence is automaticly processed and unless
some display options have been turned on, (or you stumbled across a bug !!)
the next thing that you see will be the 
responce to what you typed in from SHRDLU.A switch can be set (see the next section)
to cause a break at this point (immediately
after a response) and
permit the examination of the various structures that were added to the program's
memory for example. Without the break (or after it has been dismissed 
we get another "READY" and can continue as before.
     The break-loop (otherwise known as "command state")
can be entered fron the "ready state" by typing <altmode><altmode>
instead of stsrting a sentence. Exiting from it will result
in another "READY".
