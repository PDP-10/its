


WRITE(2V)                 SYSTEM CALLS                  WRITE(2V)



NAME
     write, writev - write output

SYNOPSIS
     cc = write(d, buf, nbytes)
     int cc, d;
     char *buf;
     int nbytes;

     #include <sys/types.h>
     #include <sys/uio.h>

     cc = writev(d, iov, iovcnt)
     int cc, d;
     struct iovec *iov;
     int iovcnt;

DESCRIPTION
     _w_r_i_t_e attempts to write _n_b_y_t_e_s of data to the object  refer-
     enced by the descriptor _d from the buffer pointed to by _b_u_f.
     _w_r_i_t_e_v performs the same action, but gathers the output data
     from  the _i_o_v_c_n_t buffers specified by the members of the _i_o_v
     array: iov[0], iov[1], ..., iov[iovcnt-1].

     For _w_r_i_t_e_v, the _i_o_v_e_c structure is defined as

          struct iovec {
               caddr_t   iov_base;
               int  iov_len;
          };

     Each _i_o_v_e_c entry specifies the base address and length of an
     area  in  memory  from which data should be written.  _w_r_i_t_e_v
     will always write a complete area before proceeding  to  the
     next.

     On objects capable of seeking, the _w_r_i_t_e starts at  a  posi-
     tion  given  by the pointer associated with _d, see _l_s_e_e_k(2).
     Upon return from _w_r_i_t_e, the pointer is  incremented  by  the
     number of bytes actually written.

     Objects that are not capable of seeking  always  write  from
     the  current  position.  The value of the pointer associated
     with such an object is undefined.

     If the O_APPEND flag of the file status flags  is  set,  the
     file  pointer  will  be  set to the end of the file prior to
     each write.

     If the real user is not the super-user,  then  _w_r_i_t_e  clears
     the set-user-id bit on a file.  This prevents penetration of
     system security by a user who  "captures"  a  writable  set-



Sun Release 3.2     Last change: 16 July 1986                   1






WRITE(2V)                 SYSTEM CALLS                  WRITE(2V)



     user-id file owned by the super-user.

     When using non-blocking I/O on objects that are  subject  to
     flow  control,  such as sockets, pipes (or FIFOs), or termi-
     nals, _w_r_i_t_e and _w_r_i_t_e_v may write fewer bytes than requested;
     the  return  value  must  be noted, and the remainder of the
     operation should be  retried  when  possible.   If  such  an
     object's  buffers  are  full,  so  that it cannot accept any
     data, then _w_r_i_t_e and _w_r_i_t_e_v will return -1 and set _e_r_r_n_o  to
     EWOULDBLOCK.  Otherwise, they will block until space becomes
     available.

SYSTEM V DESCRIPTION
     A _w_r_i_t_e (but not a _w_r_i_t_e_v) on an object that  cannot  accept
     any  data  will return a count of 0, rather than returning-1
     and setting _e_r_r_n_o to EWOULDBLOCK.

RETURN VALUE
     Upon successful completion the number of bytes actually wri-
     ten  is returned.  Otherwise a -1 is returned and the global
     variable _e_r_r_n_o is set to indicate the error.

ERRORS
     _w_r_i_t_e and _w_r_i_t_e_v will fail and the file pointer will  remain
     unchanged if one or more of the following are true:

     EBADF          _d is not a valid descriptor open for writing.

     EPIPE          An attempt is made to write to a pipe that is
                    not  open for reading by any process (or to a
                    socket of type SOCK_STREAM that is  connected
                    to  a peer socket.)  Note: an attempted write
                    of this kind will also cause you to recieve a
                    SIGPIPE  signal  from  the kernel.  If you've
                    not made a  special  provision  to  catch  or
                    ignore this signal, your process will die.

     EFBIG          An attempt was made  to  write  a  file  that
                    exceeds  the process's file size limit or the
                    maximum file size.

     EFAULT         Part of _i_o_v or data to be written to the file
                    points   outside   the   process's  allocated
                    address space.

a signal whose.SM SV_INTERRUPT
     The call is forced to terminate prematurely due to the arrival of
                    bit  in  sv_flags  is  set   (see _s_i_g_v_e_c(2)).
                    _s_i_g_n_a_l(3V), in  the  System  V  compatibility
                    library,  sets  this  bit  for  any signal it
                    catches.




Sun Release 3.2     Last change: 16 July 1986                   2






WRITE(2V)                 SYSTEM CALLS                  WRITE(2V)



     EINVAL         The pointer associated with _d was negative.

     ENOSPC         There is no free space remaining on the  file
                    system containing the file.

     EDQUOT         The user's quota of disk blocks on  the  file
                    system   containing   the   file   has   been
                    exhausted.

     EIO            An I/O error occurred while reading  from  or
                    writing to the file system.

     EWOULDBLOCK    The file was marked for non-blocking I/O, and
                    no data could be written immediately.

     In addition, _w_r_i_t_e_v may return one of the following errors:

     EINVAL         _I_o_v_c_n_t was  less  than  or  equal  to  0,  or
                    greater than 16.

     EINVAL         One of the _i_o_v__l_e_n values in  the  _i_o_v  array
                    was negative.

     EINVAL         The sum of the  _i_o_v__l_e_n  values  in  the  _i_o_v
                    array overflowed a 32-bit integer.

SEE ALSO
     fcntl(2), lseek(2), open(2V), pipe(2), select(2)



























Sun Release 3.2     Last change: 16 July 1986                   3



