


STAT(2)                   SYSTEM CALLS                    STAT(2)



NAME
     stat, lstat, fstat - get file status

SYNOPSIS
     #include <sys/types.h>
     #include <sys/stat.h>

     stat(path, buf)
     char *path;
     struct stat *buf;

     lstat(path, buf)
     char *path;
     struct stat *buf;

     fstat(fd, buf)
     int fd;
     struct stat *buf;

DESCRIPTION
     _s_t_a_t obtains information  about  the  file  named  by  _p_a_t_h.
     Read,  write  or execute permission of the named file is not
     required, but all directories listed in the path name  lead-
     ing to the file must be searchable.

     _l_s_t_a_t is like _s_t_a_t except in the case where the  named  file
     is  a symbolic link, in which case _l_s_t_a_t returns information
     about the link, while _s_t_a_t  returns  information  about  the
     file the link references.

     _f_s_t_a_t obtains the same information about an open file refer-
     enced  by the argument descriptor, such as would be obtained
     by an _o_p_e_n call.

     _b_u_f is a pointer to a _s_t_a_t structure into which  information
     is  placed  concerning the file.  The contents of the struc-
     ture pointed to by _b_u_f include the following members:

               dev_t  st_dev; /* device inode resides on */
               ino_t  st_ino; /* this inode's number */
               u_short        st_mode;/* protection */
               short  st_nlink;/* number of hard links to the file */
               short  st_uid; /* user ID of owner */
               short  st_gid; /* group ID of owner */
               dev_t  st_rdev;/* the device type, for inode that is device */
               off_t  st_size;/* total size of file, in bytes */
               time_t st_atime;/* file last access time */
               time_t st_mtime;/* file last modify time */
               time_t st_ctime;/* file last status change time */
               long   st_blksize;/* optimal blocksize for file system i/o ops */
               long   st_blocks;/* actual number of blocks allocated */




Sun Release 3.2     Last change: 16 July 1986                   1






STAT(2)                   SYSTEM CALLS                    STAT(2)



     st_atime    Time when file data was last read  or  modified.
                 Changed by the following system calls: _m_k_n_o_d(2),
                 _u_t_i_m_e_s(2), _r_e_a_d(2V), _w_r_i_t_e(2V), and _t_r_u_n_c_a_t_e(2).
                 For  reasons  of efficiency, st_atime is not set
                 when a  directory  is  searched,  although  this
                 would be more logical.

     st_mtime    Time when data was last modified.  It is not set
                 by changes of owner, group, link count, or mode.
                 Changed by the following system calls: _m_k_n_o_d(2),
                 _u_t_i_m_e_s(2), _w_r_i_t_e(2V).

     st_ctime    Time when file status was last changed.   It  is
                 set  both  both  by  writing and changing the i-
                 node.  Changed by the  following  system  calls:
                 _c_h_m_o_d(2) _c_h_o_w_n(2), _l_i_n_k(2), _m_k_n_o_d(2), _r_e_n_a_m_e(2),
                 _u_n_l_i_n_k(2), _u_t_i_m_e_s(2), _w_r_i_t_e(2V), _t_r_u_n_c_a_t_e(2).

     The status information word _s_t__m_o_d_e has bits:
          #define    S_IFMT        0170000/* type of file */
          #define    S_IFIFO       0010000/* fifo special */
          #define    S_IFCHR       0020000/* character special */
          #define    S_IFDIR       0040000/* directory */
          #define    S_IFBLK       0060000/* block special */
          #define    S_IFREG       0100000/* regular file */
          #define    S_IFLNK       0120000/* symbolic link */
          #define    S_IFSOCK      0140000/* socket */
          #define    S_ISUID       0004000/* set user id on execution */
          #define    S_ISGID       0002000/* set group id on execution */
          #define    S_ISVTX       0001000/* save swapped text even after use */
          #define    S_IREAD       0000400/* read permission, owner */
          #define    S_IWRITE      0000200/* write permission, owner */
          #define    S_IEXEC       0000100/* execute/search permission, owner */

     The mode bits 0000070 and 0000007 encode  group  and  others
     permissions (see _c_h_m_o_d(2)).

RETURN VALUE
     Upon successful completion a value of 0 is returned.  Other-
     wise, a value of -1 is returned and _e_r_r_n_o is set to indicate
     the error.

ERRORS
     _s_t_a_t and _l_s_t_a_t will fail if one or more of the following are
     true:

     ENOTDIR        A component of the path prefix of _p_a_t_h is not
                    a directory.

     EINVAL         _p_a_t_h contains a character with the high-order
                    bit set.




Sun Release 3.2     Last change: 16 July 1986                   2






STAT(2)                   SYSTEM CALLS                    STAT(2)



     ENAMETOOLONG   The length of a component of _p_a_t_h exceeds 255
                    characters,  or  the  length  of _p_a_t_h exceeds
                    1023 characters.

     ENOENT         The file referred to by _p_a_t_h does not exist.

     EACCES         Search permission is denied for  a  component
                    of the path prefix of _p_a_t_h.

     ELOOP          Too many symbolic links were  encountered  in
                    translating _p_a_t_h.

     EFAULT         _b_u_f or _p_a_t_h points to an invalid address.

     EIO            An I/O error occurred while reading  from  or
                    writing to the file system.

     _f_s_t_a_t will fail if one or both of the following are true:

     EBADF          _f_d is not a valid open file descriptor.

     EFAULT         _b_u_f points to an invalid address.

     EIO            An I/O error occurred while reading  from  or
                    writing to the file system.

CAVEAT
     The fields in the stat structure currently marked _s_t__s_p_a_r_e_1,
     _s_t__s_p_a_r_e_2,  and  _s_t__s_p_a_r_e_3  are  present  in preparation for
     inode time stamps expanding to 64 bits.  This, however,  can
     break certain programs which depend on the time stamps being
     contiguous (in calls to _u_t_i_m_e_s(2)).

SEE ALSO
     chmod(2), chown(2), readlink(2), utimes(2)




















Sun Release 3.2     Last change: 16 July 1986                   3



