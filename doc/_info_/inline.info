INLINE -- 1:47am  Monday, 2 January 1978 -- RWK

Often in writing a DDT init, you want to read a single line of input,
and do something based on that.

:INLINE <initial JCL>
Will read from the TTY one line (or up to a ^C, for JCL lines that want to
end with ^C, like :SEND's).  This line is added to the end of the JCL and fed
to DDT.

A couple of examples will make this clear.
in a init file:

:Where Are You?  :INLINE :TTYLOC<CR>
will type out
"Where Are You?  "
and the user may then type "836A Hacker's Haven<CR>"
and it will do a
:TTYLOC 836A Hacker's Haven

Note that the space is inserted between the ":TTYLOC" and the
"836A Hacker's Haven".  This can be overcome by ending in a rubout.

using the :X program:
:X :INLINE :DELETE FOO;BAR
will save away the :INLINE :Delete FOO;BAR
in a file _X <uname> (see the documentation on the X program)
and run it.
:INLINE will let you add second file-names onto the end of the :Delete FOO;BAR
Thus, after typing the line above beginning with ":X", you can type
BUZZ
and it will do
:DELETE FOO;BAR BUZZ
After the first time, you can type X^K
BAZ
and it will do
:DELETE FOO;BAR BAZ

There are a few characters that are special in typein:
^D flushes the input line, allowing you to re-type it.
^L re-displays
^Z quits out of it, doesn't end the init file, but doesn't run anything either.
rubout rubs out the last character.  It does EMACS style rubout on printing
terminals.  On displays it erases.  On printing terminals without backspace
(ugh) it will echo as it rubs out.
