;<PDP-11>NETBOT.P11;26    25-SEP-74 17:20:39	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;25    25-SEP-74 14:31:55	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;24    23-SEP-74 22:29:04	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;23    23-SEP-74 15:03:54	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;22    22-SEP-74 22:19:24	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;21    22-SEP-74 20:21:15	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;20    22-SEP-74 18:08:08	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;19    22-SEP-74 16:51:32	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;18    22-SEP-74 16:49:30	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;17    22-SEP-74 15:42:20	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;16    22-SEP-74 14:57:36	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;15    22-SEP-74 00:41:20	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;14    21-SEP-74 23:48:27	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;13    21-SEP-74 22:21:14	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;12     5-SEP-74 20:45:48	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;11     5-SEP-74 16:13:47	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;10     4-SEP-74 17:13:07	EDIT BY KREMERS
;GET RID OF THE SOB'S ...
;<PDP-11>NETBOT.P11;9     4-SEP-74 16:46:57	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;8     4-SEP-74 15:59:33	EDIT BY KREMERS
;MODIFY FOR 16K MEMORY
;<PDP-11>NETBOT.P11;7     4-SEP-74 15:31:05	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;6     4-SEP-74 15:27:54	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;5     4-SEP-74 15:22:13	EDIT BY KREMERS
;MODIFY FOR ABS LOADER FORMAT
;<PDP-11>NETBOT.P11;4    30-AUG-74 15:30:35	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;3    30-AUG-74 15:26:57	EDIT BY KREMERS
;<PDP-11>NETBOT.P11;2    30-AUG-74 04:29:26	EDIT BY KREMERS


	.TITLE NETBOT -- PDP-11 NETWORK BOOTSTRAP
	.SBTTL J. H. KREMERS 30 AUG. 1974

;	THIS VERSION OF NETBOT IS ADAPTED FROM THE BBN VERSION OF THE SAME
;PROGRAM.  ONLY MAJOR CHANGE HAS BEEN TO MODIFY IT FOR THE MCCONNEL IMP
;INTERFACE USED AT SRI-AI.  ORIGINAL VERSION WAS DESIGNED TO USE THE
;UNIV. OF ILL. ANTS INTERFACE.



; REGISTER DEFINITIONS

	R0=%0
	R1=%1
	R2=%2
	R3=%3
	R4=%4
	R5=%5
	SP=%6
	PC=%7
	PS=177776

;
;	MCCONNELL IMPE INTERFACE REGISTERS
;

	ODR=166000	;OUTPUT DATA REGISTER
	OSR=166002	;OUTPUT STATUS REGISTER
	IDR=166004	;INPUT DATA REGISTER
	ISR=166006	;INPUT STATUS REGISTER

;
;	STATUS BITS
;
	IMPNR=100000	;IMP NOT READY (OSR AND ISR)
	READY=40000	;DATA REGISTER EMPTY (OSR) OR FULL (ISR)
	LAST=20000	;LAST WORD (OSR OR ISR)
	XMT=4000	;TRANSMIT (OSR)
	RECV=XMT	;RECIEVE (ISR)
	HSTRDY=40	;HOST READY (OSR)
	RQNBIT=1000	;REQUIST NEXT BIT (ISR)
	SRMT=20		;SHIFT REGISTER EMPTY (OSR)

	RINIT=RECV+RQNBIT	;INITIAL ISR STATE
	XINIT=HSTRDY+READY+XMT+SRMT	;DITTO OSR


;
; ASSEMBLY PARAMATERS
;

	LINK=377			; BOOTSTRAP LINK
	MEM=76000		; LOAD HERE SO DON'T INTERFIERE WITH ABS LOADER
	ODTFWA=51672		; FWA OF STANDALONE ODT (FOR DEBUGGING THIS)





;
;    INIT THE INTERFACE, SET ERROR TRAPS TO HALT, AND SEND NOP'S
;  TO THE IMP TO TELL HIM WE'RE ALIVE AND KICKIN'.
;

	.=MEM				;SET ORIGIN
NETBOT:	CLR	HOST			; NOT BEING DEBUGED
RESTRT:	MOV	#STACK,SP		; SET UP THE STACK
	MOV #HSTRDY,@#OSR		;ASSERT "HOST READY"
	MOV	#RINIT,@#ISR			;SET READ STATUS
	JSR	PC,WATRDY			;WAIT FOR "IMP READY"
	MOV @#IDR,R0			;CLEAR IDR BY READING IT
	MOV @#OSR,R0			;NOW DO THE OUTPUT SIDE
	MOV #XINIT,@#OSR		;SETUP OUTPUT SIDE

	MOV	#NXM,@#4		; SET BUS ERROR TRAP
	CLR	@#6			; AND PRIORITY
	MOV #16,R3			;NUMBER OF NOP'S TO SEND
	MOV	#CNOP,R1		; ADDRESS OF --
	MOV	#CNOP+2,R2		; -- NOP COMMAND
SNDNOP:	JSR	PC,SNDMSG		; SEND A NOP
	DEC	R3			; DECREASE CONNTER
	BGE	SNDNOP			;BRANCH IF MORE TO DO



;
;    RECEIVE A MESSAGE FROM THE IMP, SEE IF ITS FROM THE REMOTE
;  HOST ON THE PROPER LINK, IFSO SEE IF ITS A PROPER DEBUGGER
;  MESSAGE, IF ALL THIS IS SO EXECUTE THE COMMAND, OTHERWISE THROW
; THE MESSAGE ON THE FLOOR.
;

GETCMD:	CLR	R4			; SAY NOT TIME TO START
	MOV	#BUF,R1			; ADDRESS THE --
	MOV	#BUF+12,R2		; -- COMMAND BUFFER
	JSR	PC,RECMSG		; RECEIVE A MESSAGE FROM THE IMP
	MOV	R1,R0			; ADDRESS THE MESSAGE
	TSTB	(R0)			; REGULAR MESSAGE?
	BNE	IGNORE			; NO - IGNORE IT
	MOV	(R0)+,(SP)		; SAVE HOST ID FOR LATER
	CMP	(PC)+,(R0)+		; YES - RIGHT LINK?
	.BYTE	LINK,0		; FORMAT OF TWO BYTE LINK WORD
	BNE	IGNORE			; NO - IGNORE IT
	TSTB	(R0)+			;SKIO THE PID FIELD
	MOVB	(R0)+,R3		;GET THE COMMAND TO R3
	CMP	R3,#MXCMD		; IS IT IN RANGE?
	BHI	IGNORE			; NO - IGNORE IT
	MOV	(R0)+,R1		; YES - GET ARG1 IN R1
	MOV	(R0)+,R2		; AND ARG2 IN R2
	MOV	#HOST,R0		; SETUP R0 FOR WHAT FOLLOWS
	MOVB	DISPAT(R3),DISBR	; SET BRANCH TO HANDLER
DISBR:	BR	.			; DISPATCH TO HANDLER



;
;    HERE TO IGNORE MESSAGE CURRENTLY BEING READ.
;

IGNORE:	BIT	#LAST,INPSTA		;END OF MESSAGE ?
	BNE	GETCMD			; YES - GET ANOTHER ONE
	JSR	PC,RECMSG		; NO - READ ANOTHER BUFFER FULL
	BR	IGNORE			; AND IGNORE THAT TOO




;
;    HERE FOR THE RESUME AND END DEBUG COMMANDS. SINCE THE
;  BOOTSTRAP LOOSES CONTROL ONCE THE PROGRAM IS STARTED THEY'RE
;  TREATED THE SAME -- BOTH END DEBUGGING AND RESUME.
;

RESUME:	CMP	(R0),(SP)		; THIS GUY DEBUGGING?
	BNE	CANT			; NO - TELL HIM HE CAN'T
	CLR	(R0)			; YES - SAY HE JUST FINISHED
	INC	R4			; SAY TIME TO START
	BR	REPLY			; AND REPLY

;
;    HERE FOR THE DEBUG COMMAND. ONLY LET HOST DO IT IF
;  NO CURRENT DEBUGGER
;

DEBUG:	CMP	(R0),(SP)		; THIS GUY ALREADY DEBUGGING?
	BEQ	REPLY			; YES - TELL HIM ITS STILL OK
	TST	(R0)			; BEING DEBUGGED?
	BNE	CANT			; YES - SAY HE CAN'T
	MOV	(SP),(R0)		; YES - REMEMBER HIM
	BR	REPLY			; AND REPLY


;
;    HERE FOR DEPOSIT STATE VECTOR COMMAND.
;

DEPSTA:	ADD	#STATE,R1		; CHANGE INDEX TO ADDRESS


;
;    HERE FOR THE DEPOSIT COMMAND, THE HEART OF THE BOOTSTRAP.
;

DEPBLK:	CMP	(R0),(SP)		; THIS GUY DEBUGGING?
	BNE	CANT			; NO - TELL HIM HE CAN'T DEPOSIT
	ADD	R1,R2			; COMPUTE END
	JSR	PC,RECMSG		; DEPOSIT THE BLOCK
	BR	REPLY			; AND SEND THE REPLY


;
;    TRAP TO HERE IF STARTING OR END ADDRESS OF BLOCK NON-EXISTANT,
;  REMOVE TRAP FROM STACK, AND RESPOND WITH A "CAN'T COMPLY"
;

NXM:	MOV	#STACK,SP		; RESTORE STACK
					; FALL THROUGH TO CANT




;
;    HERE TO SEND A "CAN'T COMPLY" RESPONSE TO A COMMAND.
;

CANT:	BISB	#200,BUF+5		; SET THE "CAN'T COMPLY" BIT


;
;    HERE TO SEND THE COMMAND BUFFER BACK TO THE REMOTE HOST.
;

REPLY:	MOV	#BUF,R1			; ADDRESS THE --
	MOV	#BUF+10,R2		; -- COMMAND BUFFER
	JSR	PC,SNDMSG		; SEND IT OFF
	DEC	R4			; TIME TO START ?
	BNE	IGNORE		; BRANCH IF NOT
	JMP	@SVPC			; START PROGRAM





;
;    ROUTINE TO SEND A MESSAGE TO THE IMP.
;	TAKES FWA IN R1 AND LWA IN R2
;

SNDMSG:	MOV 	R1,R0		;SAVE FWA IN R0
	JSR	PC,WATRDY		;WAIT FOR "IMP READY"
	MOV #XINIT,@#OSR		;BE SURE IT'S READY
OUTLOP:	MOV	@#OSR,OUTSTA		;READ OUTPUT STATUS
	BIT	#READY,OUTSTA		;READY FOR NEXT WORD ?
	BEQ	OUTLOP			;NO, WAIT
	MOV	(R0)+,R5		; GET THE WORD TO GO OUT
	SWAB	R5			;SWAP IT AROUND FOR THE INTERFACE
	CMP	R0,R2			;ARE WE DONE ?
	BHI	LSTWRD			;BRANCH IF DOING LAST WORD ...
	MOV	R5,@#ODR		;ELSE SEND THE NEXT ONE ...
	BR	OUTLOP			;AND GO FOR MORE.

LSTWRD:	BIS	#LAST,@#OSR		;LAST WORD, TELL THE IMP
	MOV	R5,@#ODR		;AND SEND IT ...
	RTS	PC			;THEN RETURN
OUTSTA:	0			;STORAGE FOR OSR


;
;    ROUTINE TO RECEIVE A MESSAGE FROM THE IMP
;	REGS SAME AS ABOVE
;

RECMSG:	MOV	R1,R0			;SAVE POINTER
INPLOP:	MOV	@#ISR,INPSTA		;GET INPUT STATUS
	BIT	#READY,INPSTA		;ARE WE READY ?
	BEQ	INPLOP			;BRANCH IF NOT
	MOV	@#IDR,(R0)		;GET NEXT WORD FROM INTERFACE
	SWAB	(R0)+			;SWAP IT AROUND IN CORE
	BIT	#LAST,INPSTA		;WAS THS THE LAST ONE ?
	BNE	INPDON			;BRANCH IF SO
	CMP	R0,R2			;SEE IF MORE WANTED
	BLO	INPLOP			;BRANCH IF SO
INPDON:	RTS	PC			;ELSE EXIT
INPSTA:	0			;STORAGE FOR INPUT STATUS


;
;	ROUTINE TO WAIT FOR "IMP READY" TO SET
;

WATRDY:	MOV	@#ISR,R5		;USE THE READY BIT IN ISR
	BMI	WATSET			;BRANCH IF NOT READY
	RTS	PC			;ELSE RETURN (MOV SETS COND CODE)
WATSET:	BIC	#IMPNR,R5		;TRY TO MAKE IT READY
	SWAB	R5			;SET HIGH BYTE ONLY
	MOVB	R5,@#ISR+1		;SET IT
	BR	WATRDY			;KEEP TRYING





;
;    COMMAND DISPATCH TABLE
;



	.MACRO CC NAME
	.BYTE <<NAME-<DISBR+2>> _ -1> & 377
	.ENDM

DISPAT:	CC REPLY
	CC DEBUG
	CC RESUME
	CC CANT
	CC DEPBLK
	CC RESUME
	CC CANT
	CC DEPSTA
	CC CANT
	CC CANT
	CC CANT
	CC CANT

MXCMD=.-DISPAT -1
	.EVEN




CNOP:	.BYTE 4,0



;
;    DATA BUFFERS
;

BUF=MEM-56		; 5 WORD DATA BUFFER
HOST=MEM-40		; ID OF DEBUGGING HOST
STACK=MEM-24		; 6 WORD STACK
STATE=MEM-22		; SEVEN WORDS FOR SAVING AC'S
SVPC=MEM-4		; ONE WORD FOR PC
SVPS=MEM-2		; AND ONE FOR PS




	.END	NETBOTî
