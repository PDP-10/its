;<VOICE>ELFCLK.M11;5    13-FEB-74 20:04:40	EDIT BY RAVELING
;<VOICE>ELFCLK.M11;4    10-FEB-74 01:30:05	EDIT BY RAVELING
;<VOICE>ELFCLK.M11;3    10-FEB-74 00:57:34	EDIT BY RAVELING
;<VOICE>ELFCLK.M11;2     6-FEB-74 18:14:39	EDIT BY RAVELING


	.title	elfclk
	.enabl	lc
	.sbttl	KW-11P programmable clock interface definitions


;	   ---------  Interface Register Addresses  ----------

PCCSR	= 172540	; Control and Status Register
PCCSB	= 172542	; Count Set Buffer
PCCNT	= 172544	; Counter

PCIVEC	= 104		; Interrupt vector


;	   ----------  CSR Bit Assignments  ------------

Error	= 100000	; Error:  In repeat interrupt mode,
			;   CPU didn't service an interrupt
			;   before clock needed another
Done	= 000200	; Done with last interval
Intena	= 000100	; Interrupt enable
Fix	= 000040	; Fix:  single-clock the counter
			;   for maintenance mode.
Up	= 000020	; 1 => count up, 0 => count down
Mode1	= 000010	; Mode 1:  repeat interrupt mode
Rate	= 000006	; Clock rate selection
	Rate0 = 0	;   -- 100 kHz
	Rate1 = 2	;   --  10 kHz
	Rate2 = 4	;   --  60  Hz
	Rate3 = 6	;   -- External clocking
Run	= 1		; Run the clock



	.SBTTL	i/o routines to read/write the programmable clock

	.globl	$TGET,$TSET,$CLKIN
	.globl	$SVST,$IEXIT,$PCTIM

	.mcall	$dfreg,$cnfig

	$cnfig

	$dfreg

Rdy	= 200			; PCT ready flag
Tim	= 100			; Timer interrupt signal


;			----------

;			$TGET gets current timer setting in
;			milliseconds.  Time value is assumed in R0

;			----------

$TGET:
	.if eq pmdv!peae	; neither EAE nor MUL/DIV?
	mov	@#pccnt,r1	; current timer value to r1
	clr	$AC		; Set left half dividend
	mov	r1,$MQ		; Set right half dividend
	mov	#100.,$XDVSR	; Set divisor = 100.
	jsr	pc,$DIV		; Time in ms = (clock ticks)/100
	mov	$MQ,r0		; Place result in R0.

;		::: R0 is time-to-go in milliseconds :::
	.ENDC
	.IF EQ	 P1105!P1110!P1120&PEAE-1
	mov	@#PCCNT,@#MQ	; move time-to-go
	clr	@#AC		; clear hi order dividend half
	mov	#100.,@#XDVSR	; Divide by 100.
	mov	@#MQ,r0		; Obtain result in r0 - millisecs
	.ENDC
	.IF EQ	P1140!P1145&PMDV-1	;MUL/DIV OPTION ON 40/45 ?
	clr	r0			; Initialize dividend
	mov	@#pccnt,r1		; with clock value
	div	#100.,r0		; Divide by 100. to get millisecs
	.ENDC
	RTS	PC			;AND RETURN


;			----------

;			$TSET sets the time to a number of
;			milliseconds specified in R0.  If
;			R0 contains 0, the timer is turned off.

;			----------

$TSET:	tst	R0		; R0 = 0?
	beq	tclrt		; Yup, turn off timer
	.IF EQ	PMDV!PEAE	;NO EAE OR MULDIV?
	mov	r0,$MQ		; Prepare to multiply millisecs
	mov	#100.,$XMUL	;   by 100. to get microsecs*10
	jsr	pc,$MUL		; Multiply.
	.ENDC
	.IF EQ	PEAE-1		;EAE?
	mov	#MQ,r4
	mov	r0,(r4)+	; MQ = time in millisecs
	mov	#100.,(r4)	; Multiply by 100.
	mov	-(r4),r1	; MQ to reg 1
	.ENDC
	.IF EQ	P1140!P1145&PMDV-1
	mul	#100.,r0	; Multiply by 100. to get clock ticks
	.ENDC
	mov	#pccnt+2,r3	; set pointer to clock regs
	mov	r1,-(r3)	; Set count register
	mov	r1,-(r3)	; Set count set buffer
	mov	#intena+run,-(r3)	; Set CSR,
	rts	pc		; and return.

TCLRT:	bic	#run,@#PCCSR	; Disable timer
	rts	pc		; and return.



;		----  Clock Initialization  ----

$CLKIN:	mov	#clkint,@#pcivec	; Set loc of interrupt routine
	mov	#340,@#pcivec+2		;   and new PS value
	rts	pc			;   in clock interrupt vector.


;		----  Clock Interrupt Processing  ----

clkint:	jsr	r5,$SVST		; Save status of current process
	$POST	#$PCTIM+2,#RDY+TIM	; Post the timer process.
	jmp	$IEXIT			; Exit to dispatcher.


	.endî