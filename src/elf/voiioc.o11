;<VOICE>ELFIOC.M11;5    19-MAR-74 17:15:25	EDIT BY RAVELING

;	Modified DCT address list to include 2nd DL-11.

;<VOICE>ELFIOC.M11;4    20-FEB-74 22:11:52	EDIT BY RAVELING
;<VOICE>ELFIOC.M11;2    20-FEB-74 21:38:35	EDIT BY RAVELING
	.TITLE	NETIOC -- SCRL NETWORK SYSTEM I/O CONTROL

	.MCALL	$CNFIG,$DFREG,$DISCC,$DFDCT,$GDCT
	.MCALL	$GDCT,$DFDCT,$DFTCA
	.MCALL	$PUSH,$POP,$WAIT,$POST

	.GLOBL	$IOC,$TCI,$OPRO,$OPRI
	.GLOBL	$LGPCT
	.GLOBL	$APCT,$SVST,$IEXIT
	.GLOBL	$DCTL,$OPRO,$OPRI	;PTR TO DCT LISTS

	$CNFIG
	$DFREG
	$DISCC
	$DFDCT
	$DFTCA


$IOC:	TSTB	DCTFCN(R0)	;ASSUMES DCT PTR IN R0
	BNE	TININ		;NOT OPEN, OPEN IT
	JSR	PC,@DCTOPN(R0)	;OPEN (INIT) DEVICE
TININ:	JSR	PC,@DCTRDW(R0)	;READ OR WRITE
$TINUL:	RTI			;AND RETURN

$TTOPN:	MOV	R0,R1		;INIT TTY
	ADD	#DCTIPR,R1	;DCT ADDR IN R0
	MOV	DCTIV(R0),R2	;GET INT VEC ADDR
	MOV	R1,(R2)+	;INIT INTERRUPT VEC
	MOV	#340,(R2)	;AT PRIO 7
	BISB	#100,DCTFCN(R0)		;INDICATE OPEN
	MOV	DCTCSR(R0),R3		;GET ADDR OF CSR
	BIS	#100,-(R3)	;SET INTRPT ENAB IN STAT WD
$TTNUL:	RTS	PC		;AND RETURN

	.PAGE
	.SBTTL	TERMINAL OUTPUT DRIVER

;			ASSUME DCT ADDRESS IN R0

;			SETUP TO FAKE AN INTERRUPT....
;			THEN FALL THRU TO INTERRUPT
;			PROCESSING ROUTINE.

$TTOUT:	MOV	$APCT,DCTPCT(R0)	;PCT ADDRX TO DCT
	MOV	(SP),-(SP)	;FAKE THE INT
	MOV	#340,2(SP)	;LOOK LIKE PS WAS 340
	$PUSH	R0		;SAVE DCT POINTER ON STACK
	BR	TOIE2		;ENTER INTERRUPT PROCEDURE

	.SBTTL	TERMINAL OUTPUT INTERRUPT PROCESSOR

$TOI:	SUB	#DCTEND,R0	;OBTAIN BASE OF DCT IN R0
TOIE2:	$PUSH	R1		;USE R1 AS SCRATCH
	TSTB	DCTFIL(R0)	;OUTPUT FILL NECESSARY
	BNE	TOIEL		;YES, SEND NULS TILL ZERO
	TST	DCTCNT(R0)	;ANY CHARS TO SEND?
	BLE	TNXTE		;IF NO, DECR AND FLAG COMPLETE
	MOVB	@DCTA(R0),R1	;FETCH CHARACTER CODE TO BE SENT
	CMPB	#11,R1		;IS CHARACTER A TAB?
	BEQ	TOTAB		;YES, PROCESS TAB
TNXTE:	DEC	DCTCNT(R0)	;DECREMENT BYTE COUNT
	BMI	TIR		;SIGNAL USER IF COUNT NEG
	MOVB	R1,@DCTCSR(R0)	;NO, MOVE DIRECTLY TO BUF
	CMPB	#15,R1		;WAS IT CARR RTN?
	BNE	TNSF		;NO, DONT SET FILL COUNT
;;;;;	MOVB	#2,DCTFIL(R0)	;CAUSE FILLS TO BE SENT LATER
	BR	TTTBR		;RESET TABS
TNSF:	CMPB	#177,R1		;IS IT RUB-OUT?
	BEQ	TNCTB		;NO COUNT AS TAB CNT
	CMPB	#40,R1		;CODE LESS THAN SPACE CODE?
	BGT	TNCTB		;ITS A CONTROL CHAR
	DECB	DCTTCT(R0)	;DECREMENT TAB COUNT
	BGT	TNCTB		;IF HASN'T GONE 0, DON'T RESET
TTTBR:	MOVB	#8.,DCTTCT(R0)	;ELSE SET TABS AGAIN
TNCTB:	INC	DCTA(R0)	;INCREMENT CHARACTER POINTER
TRT:	$POP	R1		;RESTORE REGS
TRPOP:	$POP	R0
	RTI			;AND DO THE OBVIOUS.
TTTBR2:	DEC	DCTCNT(R0)	;INDICATE THRU WITH TAB CHAR
	BR	TTTBR		;BUMP POINTERS, RESET TABS

TOTAB:	CMP	#177562,DCTCSR(R0)	;only expand tabs for console tty
	BNE	TOTAB1
	MOVB	#40,@DCTCSR(R0)	;ELSE MOVE A SPACE OUT
	DECB	DCTTCT(R0)	;DECREMENT TAB COUNT
	BLE	TTTBR2		;RESET IF GONE ZERO
	BR	TRT		;AND WAIT FOR INTERRUPT
TOTAB1:	MOVB	R1,@DCTCSR(R0)	;put out real tab
	BR	TTTBR2

TOIEL:	CLRB	@DCTCSR(R0)	;SEND A NUL
	DECB	DCTFIL(R0)	;DECREMENT FILL COUNT
	BR	TRT		;RETURN FROM THIS INTERRUPT

TIR:	MOV	DCTPCT(R0),T1	;TEMP SAVE PCT
	$POP	R1,R0		;RESTORE REG1,REG0
	JSR	R5,$SVST	;NOW SAVE THEM ALL
	TST	T1		;IS PCT ASSOC.
	BEQ	TRTI		;IF NOT, ENTER DISPCH
	$POST	T1,#RDY+IO	;POST WAITING PROCESS
TRTI:	JMP	$IEXIT		;AND ENTER DISPATCHER
	.PAGE
	.SBTTL	INPUT INTERRUPT PROCESSOR

;			CHECK FOR ESCAPE CHARACTERS


;		INTERRUPT ROUTINE IS ENTERED WITH
;		R0 POINTING TO DCTEND,
;		AND PREVIOUS R0 SAVED ON STACK.

$TII:	SUB	#DCTEND,R0	;POINT TO ACTUAL DCT
	DEC	DCTCNT(R0)
	BMI	TIPLOG		;SAME CASE AS OUTPUT
TIIRS:	MOVB	@DCTCSR(R0),@DCTA(R0)
	BICB	#177600,@DCTA(R0)	;7-BIT ASCII
	$PUSH	R1		;SAVE CALLER'S R1
	MOV	DCTTCA(R0),R1	;GET ASSOC TCA, IF ANY
	BEQ	TIPOP		;NONE
	CMPB	TCAESC(R1),@DCTA(R0)	;ESCAPE?
	BNE	TIPOP
	BISB	#200,TCAMOD(R1)	;SET ESCAPE BIT IN TCA
TIPOP:	INC	DCTA(R0)
	BR	TIR		;POST FOR EACH CHAR

$TCI:	MOV	#$DCTL,R4
	MOV	(R4)+,R3	;GET NR ENTS IN LIST
TCINI:	MOV	(R4)+,R0	;GET PTR TO DCT
	CLR	DCTPCT(R0)
	$PUSH	R3,R4		;SAVE COUNTER AND ADDRX
	JSR	PC,@DCTOPN(R0)	;INIT DEVICE
	$POP	R4,R3
	DEC	R3
	BGT	TCINI		;INIT TERMINALS
	RTS	PC

TIPLOG:	TSTB	@DCTCSR(R0)	;DUMP CHARACTER
	BIT	#1,DCTPCT(R0)	;IS HE ALREADY SETUP FOR LGR?
	BNE	TRPOP		;YES, IGNORE INTERRUPT
	TST	DCTPCT(R0)	;IS THERE NO PCT ASSOC?
	BNE	TRPOP		;PCT EXISTS, IGNORE INTR
	INC	DCTPCT(R0)	;FLAG HIM FOR LOGGER
	$POP	R0		;RESTORE REG0
	JSR	R5,$SVST	;RESAVE ALL REGS
	$POST	#$LGPCT+2,#RDY+ACK	;POST LOGGER FOR WORK
	JMP	$IEXIT		;AND ENTER DISPATCHER

$TTIN:
$TTCLS:	RTS	PC		;NULL

	.PAGE
	.SBTTL	PDP8 I/O CONTROLLERS


T8ISIM:	$PUSH	R0		;FAKE AN INTERRUPT
	ADD	#DCTEND,R0	;SET R0 = A(DCTEND)
;				FALL THRU TO INT ROUTINE

TI8INT:	DEC	DCTCNT-DCTEND(R0)	;DECREMENT BUFFER CNT
	BGE	TIIRS		;CONTINUE IF NO BUF OFLO
	TST	DCTPCT-DCTEND(R0)	;SEE IF PCT DEFINED
	BEQ	TIPLOG		;GIVE TO LOGGER
	BIC	#400,@#167774	;CLEAR INTERRUPT ENABLE

;			IF INPUT BUFFER FROM 8 IS FULL,
;			LEAVE CHARACTER PENDING IN
;			ACB.

	$POP	R0		;RESTORE REG0
	RTI			;AND RETURN

TT8IN:	BIS	#400,@#167774	;RE-ENABLE 8-11 INTERRUPTS
	TSTB	@#167774	;8 READY?
	BPL	TT8I2		;NO, SIMPLY RETURN
	MOV	#340,-(SP)	;FAKE AN INTERRUPT
	JSR	PC,T8ISIM	;ENTER INTRPT SIM
TT8I2:	RTS	PC		


$TT8OP:	MOV	#1400,@#167774	;ENABLE INTERRUPTS FROM PDP8
	MOV	R0,R1		;GET DCT ADDRX
	ADD	#DCTIPR,R1	;BASE OF INTERRRUPT ROUTINE
	MOV	DCTIV(R0),R2	;INTERRUPT VECTOR ADDRX
	MOV	R1,(R2)+	;BASE I. PROC ROUTINE
	MOV	#340,(R2)+	;AND ITS PRIO
	BISB	#100,DCTFCN(R0)	;SET OPEN STATUS
	RTS	PC		;RETURN

	.PAGE
	.SBTTL	DEVICE CONTROL TABLE DEFINITIONS


$DCTL:	.WORD	NDCT		;NR ENTRIES IN LIST
	.WORD	DCT0
	.WORD	DCT1
	dct4,dct5		; First DL-11
	dct2,dct3		; Second DL-11
NDCT = .-$DCTL-2/2		;NR ENTS

	dcthsr			; Paper tape reader
	dctdsk			; RK-11

	.list	meb
DCT0:	$GDCT	DCT1,177562,60,1,$TTOPN,$TTIN,$TTCLS,$TII
	.nlist	meb
DCT1:	$GDCT	DCT0,177566,64,1,$TTOPN,$TTOUT,$TTCLS,$TOI
dct2:	$GDCT	dct3,176512,310,2,$TTOPN,$TTIN,$TTCLS,$TII
dct3:	$GDCT	dct2,176516,314,2,$TTOPN,$TTOUT,$TTCLS,$TOI

dct4:	$GDCT	dct5,176502,300,3,$ttopn,$ttin,$ttcls,$tii
dct5:	$GDCT	dct4,176506,304,3,$ttopn,$ttout,$ttcls,$toi

dcthsr:	0	; /////// temp ////////
dctdsk:	0	; /////// temp ////////


$OPRO:	.WORD	DCT1		;OUTPUT OPR TTY
$OPRI:	.WORD	DCT0		;INPUT OPR TTY
T1:	.WORD	0		;TEMP STORAGE FOR PCT

	.END

