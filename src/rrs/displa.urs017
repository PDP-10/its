<PACKAGE "DISPLA">
<ENTRY SETCLIP CALL DISP  ROTX ROTY ROTZ SCALE XLATE 
       MV DR PT LN PV HC PG STPJ DSH STRG PICT>

<USE "SMCELLS">
<USE "MIGSMN">

<BLOCK (<GET MIGS OBLIST> <ROOT>)>
MCELL TRMTYP PROJX PROJY PROJZ XORG YORG
<ENDBLOCK>

<BLOCK (<GET DISPCOM OBLIST> <ROOT>)>
P1 P2 CHN RST BLKSTK 3DSTK INSTK OUTSTK NAMSTK XFRSTK INSTRSTK
TXFRSTRK CLIPCON COMSWITCH 
<ENDBLOCK>

<BLOCK (!.OBLIST <GET MIGS OBLIST> <GET MCELLS OBLIST> <GET DISPCOM OBLIST>)>



<COND (<GASSIGNED? TRMTYP> "OK")
      (TOO.BAD <ERROR START.OVER>)>
<COND (<=? <SET FOO ,TRMTYP> !\T> <USE "MTPRIM">)
      (<=? .FOO !\G> <USE "MGPRIM">)
      (<=? .FOO !\A> <USE "MAPRIM">)
      (<=? .FOO !\I> <USE "MAPRIM">)
      (<=? .FOO !\V> <USE "MVPRIM">)
      (T <ERROR YOU.LOSE>)>

<SET REDEFINE T>

<SET CHN T>

<SET RST T>



<DEFINE PICT (ATOM ML "ARGS" BODY) 
	#DECL ((ATOM VALUE) ATOM (ML) <LIST [REST STRING]> (BODY) LIST)
	<SET BODY
	     (<COND (<MEMBER "INV" .ML> INV)
		    (<MEMBER "VIS" .ML> '#FALSE ())
		    (T '#FALSE ())>
	      !.BODY)>
	<SET BODY
	     (<COND (<MEMBER "2D" .ML> '#FALSE ())
		    (<MEMBER "3D" .ML> '3D)
		    (T '3D)>
	      !.BODY)>
	<SET BODY (() !.BODY)>
	<SET BODY (() !.BODY)>
	<SET BODY (.ATOM !.BODY)>
	<SET BODY ('MCELL !.BODY)>
	<EVAL <CHTYPE .BODY FORM>>
	.ATOM>

<DEFINE MCELL (NAME
	       "OPTIONAL" (XYZD (0 0 0))
			  (SCL (1024 1024 1024))
			  (3D #FALSE ())
			  (BLK #FALSE ())
	       "ARGS" INSTR)
	#DECL ((NAME) ATOM
	       (XYZD SCL INSTR) LIST
	       (3D BLK) <SPECIAL <OR ATOM FALSE>>)
	<SET <PARSE <STRING <PNAME .NAME> "!-MCELLS">>
	     <CHTYPE (.XYZD .SCL .3D .BLK !<DISPCOM .INSTR!>) MCELL>>
	"DONE">

<DEFINE DISPCOM (INSTR
		 "AUX" (OUTSTK ())
		       (INSTK ())
		       COMSWITCH)
	#DECL ((INSTR) LIST
	       (OUTSTK)
	       <SPECIAL <LIST [REST
			       <LIST FIX [REST <OR FIX FLOAT FORM ATOM>]>]>>
	       (INSTK) <SPECIAL LIST>
	       (COMSWITCH) <SPECIAL ANY>)
	<MAPF <> ,EVAL .INSTR>
	<MAPF <>
	      #FUNCTION ((OP)
			 #DECL ((OP) <LIST FIX [REST <OR FIX FLOAT FORM ATOM>]>
				(OUTSTK)
				<SPECIAL <LIST [REST
						<LIST FIX
						      [REST
						       <OR FIX
							   FLOAT
							   FORM
							   ATOM>]>]>>)
			 <SET OUTSTK (.OP !.OUTSTK)>)
	      .INSTK>
	.OUTSTK>

<DEFINE MV (X Y "OPTIONAL" (Z 0))
	#DECL ((X Y Z) <OR FIX FLOAT>
	       (INSTK) <SPECIAL LIST>
	       (3D) <SPECIAL <OR ATOM FALSE>>)
	<SET INSTK
	     (<COND (.3D (0 .X .Y .Z)) (ELSE (0 .X .Y))>
	      !.INSTK)>>

<DEFINE DR (X Y "OPTIONAL" (Z 0))
	#DECL ((X Y Z) <OR FIX FLOAT>
	       (INSTK) <SPECIAL LIST>
	       (3D) <SPECIAL <OR ATOM FALSE>>)
	<SET INSTK
	     (<COND (.3D (1 .X .Y .Z)) (ELSE (1 .X .Y))>
	      !.INSTK)>>

<DEFINE PT (X Y "OPTIONAL" (Z 0))
	#DECL ((X Y Z) <OR FIX FLOAT>
	       (INSTK) <SPECIAL LIST>
	       (3D) <SPECIAL <OR ATOM FALSE>>
	       (Z1) <LIST [REST FIX]>)
	<SET Z1 <COND (.3D (.X .Y .Z)) (ELSE (.X .Y))>>
	<SET INSTK
	     ((1 !.Z1) (0 !<PUT .Z1 2 <+ <2 .Z1> 1>!>) !.INSTK)>>

<DEFINE LN (X Y "OPTIONAL" Z X1 Y1 Z1 "AUX" Q Q1)
	#DECL ((X Y Z X1 Y1 Z1) <OR FIX FLOAT>
	       (Q Q1) <LIST FIX [REST <OR FIX FLOAT>]>
	       (3D) <SPECIAL <OR ATOM FALSE>>
	       (INSTK) <SPECIAL LIST>)
	<COND (.3D
	       <COND (<ASSIGNED? Y1>
		      <SET Q (0 .X .Y .Z)>
		      <SET Q1 (1 .X1 .Y1 .Z1)>)
		     (T <SET Q (0 .X .Y 0)> <SET Q1 (1 .Z .X1 0)>)>)
	      (T <SET Q (0 .X .Y)> <SET Q1 (1 .Z .X1)>)>
	<SET INSTK (.Q1 .Q !.INSTK)>>

<DEFINE PV (X Y "OPTIONAL" (Z <IUVECTOR <LENGTH .Y> 0>))
	#DECL ((X Y Z) <OR LIST VECTOR UVECTOR>
	       (3D) <SPECIAL <OR ATOM FALSE>>
	       (INSTK) <SPECIAL LIST>)
	<COND (<AND <==? <LENGTH .X> <LENGTH .Y>>
		    <COND (.3D <==? <LENGTH .Y> <LENGTH .Z>>) (ELSE T)>>
	       <COND (.3D
		      <SET INSTK
			   ((0 <1 .X> <1 .Y> <1 .Z>) !.INSTK)>
		      <MAPF <>
			    #FUNCTION ((X Y Z)
				       #DECL ((X Y Z) <OR FIX FLOAT>
					      (INSTK) <SPECIAL LIST>)
				       <SET INSTK
					    ((1 .X .Y .Z) !.INSTK)>)
			    <REST .X>
			    <REST .Y>
			    <REST .Z>>)
		     (ELSE
		      <SET INSTK ((0 <1 .X> <1 .Y>) !.INSTK)>
		      <MAPF <>
			    #FUNCTION ((X Y)
				       #DECL ((X Y) <OR FIX FLOAT>
					      (INSTK) <SPECIAL LIST>)
				       <SET INSTK
					    ((1 .X .Y) !.INSTK)>)
			    <REST .X>
			    <REST .Y>>)>)
	      (ELSE <ERROR "LENGHTS NOT EQUAL" "PV">)>>

<DEFINE CALL (NAME "ARGS" XFORMS)
	#DECL ((NAME) ATOM
	       (XFORMS) <LIST [REST FORM]>
	       (INSTK) <SPECIAL LIST>)
	<SET INSTK
	     ((-1
	       <PARSE <STRING <PNAME .NAME> "!-MCELLS">>
	       !<FIXFRM .XFORMS!>)
	      !.INSTK)>>

<DEFINE FIXFRM (XFORMS)
	#DECL ((XFORMS) <LIST [REST FORM]>)
	<MAPF ,LIST
	      #FUNCTION ((XFR)
			 #DECL ((XFR VALUE) FORM)
			 <FORM <1 .XFR> !<MAPF ,LIST ,EVAL <REST .XFR>!>>)
	      .XFORMS>>

<DEFINE HC ()
	#DECL ((INSTK) <SPECIAL LIST> (VALUE) ATOM)
	<SET INSTK ((6) !.INSTK)>
	,NULL>

<DEFINE PG ()
	#DECL ((INSTK) <SPECIAL LIST> (VALUE) ATOM)
	<SET INSTK ((5) !.INSTK)>
	,NULL>

<DEFINE STPJ (X Y Z)
	#DECL ((X Y Z) <OR FIX FLOAT>
	       (INSTK) <SPECIAL LIST>
	       (VALUE) ATOM)
	<SET INSTK ((2 .X .Y .Z) !.INSTK)>
	,NULL>

<DEFINE STRG (X Y)
	#DECL ((X Y) <OR FIX FLOAT>
	       (INSTK) <SPECIAL LIST>
	       (VALUE) ATOM)
	<SET INSTK ((3 .X .Y) !.INSTK)>
	,NULL>

<DEFINE STCP (XL XR YB YT)
	#DECL ((XL XR YB YT) <OR FIX FLOAT>
	       (INSTK) <SPECIAL LIST>
	       (VALUE) ATOM)
	<SET INSTK ((4 .XL .XR .YB .YT) !.INSTK)>
	,NULL>

<DEFINE DSH (A)
	#DECL ((A) <OR ATOM FALSE>
	       (INSTK) <SPECIAL LIST>
	       (VALUE) ATOM)
	<SET INSTK ((<COND (.A 7) (T 8)>) !.INSTK)>
	,NULL>

<SETG CLIPCON
      (0.0000000 1023.0000 0.0000000 1023.0000)>

<SETG KLUDGE!-DISPCOM []> ;"?????????"

<DEFINE SETCLIP ("OPTIONAL" (XL 0.0000000)
			    (XR 1023.0000)
			    (YB 0.0000000)
			    (YT 1023.0000))
	#DECL ((XL XR YB YT) <OR FIX FLOAT>
	       (VALUE) <LIST [REST FLOAT]>
	       (COMSWITCH) <SPECIAL ANY>)
	<COND (<BOUND? COMSWITCH>
	       <APPLY ,STCP .XL .XR .YB .YT>
	       ())
	      (ELSE
	       <SETG CLIPCON
		     (<FLOAT .XL> <FLOAT .XR> <FLOAT .YB> <FLOAT .YT>)>)>>

<DEFINE DISP (NAME
	      "ARGS" XFORMS
	      "AUX" (3DSTK ())
		    (BLKSTK ())
		    (NAMSTK ())
		    (XFRSTK ())
		    (INSTRSTK ())
		    (TXFRSTK ())
		    (SPJX ,PROJX)
		    (SPJY ,PROJY)
		    (SPJZ ,PROJZ)
		    (SRGX ,XORG)
		    (SRGY ,YORG)
		    (SCLP ,CLIPCON))
	#DECL ((3DSTK BLKSTK)
	       <SPECIAL <LIST [REST <OR ATOM FALSE>]>>
	       (NAMSTK) <SPECIAL <LIST [REST ATOM]>>
	       (XFRSTK TXFRSTK)
	       <SPECIAL <LIST [REST <OR FIX VECTOR>]>>
	       (INSTRSTK) <SPECIAL <LIST [REST LIST]>>
	       (NAME) ATOM
	       (XFORMS) <LIST [REST FORM]>
	       (SPJX SPJY SPJZ) FLOAT
	       (SRGX SRGY) FIX
	       (SCLP) <LIST [REST FLOAT]>)
	<SET NAME <PARSE <STRING <PNAME .NAME> "!-MCELLS">>>
	<DSPLY .NAME <FIXFRM .XFORMS>>
	<SETG CLIPCON .SCLP>
	<SETG PROJX .SPJX>
	<SETG PROJY .SPJY>
	<SETG PROJZ .SPJZ>
	<SETG XORG .SRGX>
	<SETG YORG .SRGY>
	,NULL>

<DEFINE DSPLY (NAME XFORMS)
	#DECL ((3DSTK BLKSTK)
	       <SPECIAL <LIST [REST <OR ATOM FALSE>]>>
	       (NAMSTK) <SPECIAL <LIST [REST ATOM]>>
	       (XFRSTK TXFRSTK)
	       <SPECIAL <LIST [REST <OR FIX VECTOR>]>>
	       (INSTRSTK) <SPECIAL <LIST [REST LIST]>>
	       (NAME) ATOM
	       (XFORMS) <LIST [REST FORM]>)
	<COND (<NOT <==? MCELL <TYPE ..NAME>>>
	       <ERROR .NAME "NOT A MCELL" "DSPLY">)>
	<PUSH .NAME NAMSTK>
	<PUSH <3 ..NAME> 3DSTK>
	<PUSH <4 ..NAME> BLKSTK>
	<PUSH <REST ..NAME 4> INSTRSTK>
	<PUSH <CONCAT .XFORMS> XFRSTK>
	<PUSH <TCAT .XFRSTK> TXFRSTK>
	<REPEAT (INST OP)
		#DECL ((INST) <LIST FIX [REST <OR FIX FLOAT ATOM FORM>]>
		       (VALUE) STRING
		       (OP) FIX)
		<SET INST <1 <1 .INSTRSTK>>>
		<PUT .INSTRSTK 1 <REST <1 .INSTRSTK>>>
		<COND (<==? <1 .INST> -1>
		       <COND (<MEMQ <2 .INST> .NAMSTK>
			      <ERROR "INFINITE RECURSION  FOUND IN"
				     <1 .NAMSTK>
				     .INST
				     "DSPLY">)>
		       <DSPLY <2 .INST> <REST .INST 2>>)
		      (T
		       <SET OP <1 .INST>>
		       <COND (<L? .OP 2>
			      <DVAL <XFORM .INST <1 .TXFRSTK>>
				    <1 .3DSTK>
				    <1 .BLKSTK>>)
			     (<==? 2 .OP> <APPLY ,SETPROJ !<REST .INST!>>)
			     (<==? 3 .OP> <APPLY ,SETORG !<REST .INST!>>)
			     (<==? 4 .OP> <SETCLIP !<REST .INST!>>)
			     (<==? 5 .OP> <APPLY ,PAGE>)
			     (<==? 6 .OP> <APPLY ,HCOPY>)
			     (<==? 7 .OP> <APPLY ,DASH T>)
			     (<==? 8 .OP> <APPLY ,DASH <>>)
			     (ELSE <ERROR "INVALID OP CODE" "DSPLY">)>)>
		<COND (<EMPTY? <1 .INSTRSTK>>
		       <POP NAMSTK>
		       <POP 3DSTK>
		       <POP BLKSTK>
		       <POP INSTRSTK>
		       <POP XFRSTK>
		       <POP TXFRSTK>
		       <RETURN "DONE">)>>>

<DEFINE PUSH (THING STACK)
	#DECL ((THING) ANY (STACK) ATOM (VALUE) LIST)
	<SET .STACK (.THING !..STACK)>>

<DEFINE POP (STACK)
	#DECL ((STACK) ATOM (VALUE) LIST)
	<SET .STACK <REST ..STACK>>>

<DEFINE CONCAT (XFRLIST "AUX" XFRMAT (TEMP ()))
	#DECL ((XFRLIST) <LIST [REST FORM]>
	       (XFRMAT) <SPECIAL <VECTOR FIX FIX <VECTOR [REST FLOAT]>>>
	       (TEMP)
	       <SPECIAL <LIST [REST <VECTOR FIX FIX <VECTOR [REST FLOAT]>>]>>
	       (VALUE) <OR FIX VECTOR>)
	<COND (<EMPTY? .XFRLIST> 1)
	      (<COND (<1 .3DSTK>
		      <SET XFRMAT
			   [4
			    4
			    [1.0000000
			     0.0000000
			     0.0000000
			     0.0000000
			     0.0000000
			     1.0000000
			     0.0000000
			     0.0000000
			     0.0000000
			     0.0000000
			     1.0000000
			     0.0000000
			     0.0000000
			     0.0000000
			     0.0000000
			     1.0000000
			     ]]>)
		     (T
		      <SET XFRMAT
			   [3
			    3
			    [1.0000000
			     0.0000000
			     0.0000000
			     0.0000000
			     1.0000000
			     0.0000000
			     0.0000000
			     0.0000000
			     1.0000000]]>)>
	       <MAPF <>
		     #FUNCTION ((X)
				#DECL ((X) FORM
				       (VALUE)
				       <LIST <VECTOR FIX
						     FIX
						     <VECTOR [REST FLOAT]>>>)
				<SET TEMP (<EVAL .X> !.TEMP)>)
		     .XFRLIST>
	       <MAPF <>
		     #FUNCTION ((XFR)
				#DECL ((XFR VALUE)
				       <VECTOR FIX FIX <VECTOR [REST FLOAT]>>)
				<SET XFRMAT <M*32S .XFR .XFRMAT>>)
		     .TEMP>
	       .XFRMAT)>>

<DEFINE DVAL (INST 3D BLK)
	#DECL ((INST) <LIST FIX [REST <OR FIX FLOAT>]>
	       (3D BLK) <OR ATOM FALSE>
	       (VALUE) STRING
	       (P1 P2) <SPECIAL <LIST [2 <OR FIX FLOAT>]>>)
	<COND (<NOT .BLK>
	       <COND (.3D
		      <COND (<0? <1 .INST>>
			     <SET P1 <APPLY ,PROJ !<REST .INST!>>>)
			    (<1? <1 .INST>>
			     <SET P2 <APPLY ,PROJ !<REST .INST!>>>
			     <CLIP .P1 .P2 !,CLIPCON>
			     <SET P1 .P2>)
			    (T <ERROR "INVALID OP CODE" "DVAL">)>)
		     (ELSE
		      <COND (<0? <1 .INST>> <SET P1 <REST .INST>>)
			    (<1? <1 .INST>>
			     <SET P2 <REST .INST>>
			     <CLIP .P1 .P2 !,CLIPCON>
			     <SET P1 .P2>)
			    (T <ERROR "INVALID OP CODE" "DVAL">)>)>)>
	"DONE">

<DEFINE TCAT (XFRSTK "AUX" XFR (TEMP ()))
	#DECL ((XFRSTK) <LIST [REST <OR FIX VECTOR>]>
	       (XFR) <SPECIAL <VECTOR FIX FIX <VECTOR [REST FLOAT]>>>
	       (TX) <VECTOR FIX FIX <VECTOR [REST FLOAT]>>
	       (VALUE) <OR FIX VECTOR>
	       (TEMP)
	       <SPECIAL <LIST [REST <VECTOR FIX FIX <VECTOR [REST FLOAT]>>]>>
	       (3DSTK) <SPECIAL <LIST [REST <OR ATOM FALSE>]>>)
	<COND (<1 .3DSTK>
	       <SET XFR
		    [4
		     4
		     [1.0000000
		      0.0000000
		      0.0000000
		      0.0000000
		      0.0000000
		      1.0000000
		      0.0000000
		      0.0000000
		      0.0000000
		      0.0000000
		      1.0000000
		      0.0000000
		      0.0000000
		      0.0000000
		      0.0000000
		      1.0000000
		      ]]>
	       <SET TX .XFR>)
	      (T
	       <SET XFR
		    [3
		     3
		     [1.0000000
		      0.0000000
		      0.0000000
		      0.0000000
		      1.0000000
		      0.0000000
		      0.0000000
		      0.0000000
		      1.0000000]]>
	       <SET TX .XFR>)>
	<MAPF <>
	      #FUNCTION ((T1)
			 #DECL ((TI)
				<0R FIX <VECTOR FIX FIX <VECTOR [REST FLOAT]>>>
				(VALUE) STRING)
			 <COND (<OR <==? FIX <TYPE .T1>> <==? FLOAT <TYPE .T1>>>
				"SKIP")
			       (T <SET TEMP (.T1 !.TEMP)>)>
			 "FOO")
	      .XFRSTK>
	<MAPF <>
	      #FUNCTION ((XFR1)
			 #DECL ((XFR1 VALUE)
				<VECTOR FIX FIX <VECTOR [REST FLOAT]>>)
			 <SET XFR <M*32S .XFR1 .XFR>>)
	      .TEMP>
	<COND (<=? .XFR .TX> 1) (T .XFR)>>

<DEFINE XFORM (INST TXFR)
	#DECL ((INST VALUE) <LIST FIX [REST <OR FIX FLOAT>]>
	       (TXFR) <OR FIX VECTOR>)
	<COND (<==? <TYPE .TXFR> FIX> .INST)
	      (T (<1 .INST> !<M*V32 .TXFR <REST .INST>!>))>>

<DEFINE CLIP (PTA PTB
	      "OPTIONAL" (XL 0.0000000)
			 (XR 1023.0000)
			 (YB 0.0000000)
			 (YT 1023.0000)
	      "AUX" (PT1 <TUPLE <FIX <1 .PTA>> <FIX <2 .PTA>>>)
		    (PT2 <TUPLE <FIX <1 .PTB>> <FIX <2 .PTB>>>)
		    (B0 #WORD *000000000000*)
		    (B1 #WORD *000000000001*)
		    (B10 #WORD *000000000002*)
		    (B100 #WORD *000000000004*)
		    (B1000 #WORD *000000000010*)
		    (C1 <CODE .PT1 .XL .XR .YB .YT>)
		    (C2 <CODE .PT2 .XL .XR .YB .YT>))
	#DECL ((PTA PTB) <LIST [2 <OR FIX FLOAT>]>
	       (PT1 PT2) <TUPLE FIX FIX>
	       (XL XR YT YB) FLOAT
	       (B0 B1 B10 B100 B1000 C1 C2) WORD
	       (VALUE) STRING)
	<REPEAT (T1 (T2 <TUPLE 0 0>))
		#DECL ((T1) WORD (T2) <TUPLE FIX FIX> (VALUE) STRING)
		<COND (<AND <==? .B0 .C1> <==? .B0 .C2>>
		       <APPLY ,LINE <1 .PT1> <2 .PT1> <1 .PT2> <2 .PT2>>
		       <RETURN "DONE">)
		      (<NOT <==? .B0 <ANDB .C1 .C2>>> <RETURN "DONE">)>
		<COND (<==? .B0 .C1>
		       <SET T1 .C1>
		       <SET C1 .C2>
		       <SET C2 .T1>
		       <PUT .T2 1 <1 .PT1>>
		       <PUT .T2 2 <2 .PT1>>
		       <PUT .PT1 1 <1 .PT2>>
		       <PUT .PT1 2 <2 .PT2>>
		       <PUT .PT2 1 <1 .T2>>
		       <PUT .PT2 2 <2 .T2>>)>
		<COND (<==? .B1 <ANDB .B1 .C1>>
		       <PUT .PT1
			    2
			     <FIX <+ <2 .PT1>
				     </ <* <- <2 .PT2> <2 .PT1>>
					   <- .XL <1 .PT1>>>
					<- <1 .PT2> <1 .PT1>>>>>>
		       <PUT .PT1 1 <FIX .XL>>)
		      (<==? .B10 <ANDB .B10 .C1>>
		       <PUT .PT1
			    2
			     <FIX <+ <2 .PT1>
				     </ <* <- <2 .PT2> <2 .PT1>>
					   <- .XR <1 .PT1>>>
					<- <1 .PT2> <1 .PT1>>>>>>
		       <PUT .PT1 1 <FIX .XR>>)
		      (<==? .B100 <ANDB .B100 .C1>>
		       <PUT .PT1
			    1
			    <FIX <+ <1 .PT1>
				     </ <* <- <1 .PT2> <1 .PT1>>
					   <- .YB <2 .PT1>>>
					<- <2 .PT2> <2 .PT1>>>>>
			     >
			<PUT .PT1 2 <FIX .YB>>)
		      (<==? .B1000 <ANDB .B1000 .C1>>
		       <PUT .PT1
			    1
			    <FIX <+ <1 .PT1>
				     </ <* <- <1 .PT2> <1 .PT1>>
					   <- .YT <2 .PT1>>>
					<- <2 .PT2> <2 .PT1>>>>>
			     >
		       <PUT .PT1 2 <FIX .YT>>)>
		<SET C1 <CODE .PT1 .XL .XR .YB .YT>>>>

<DEFINE CODE (PT XL XR YB YT "AUX" (CODE1 #WORD *000000000000*))
	#DECL ((PT) <TUPLE FIX FIX>
	       (CODE1 VALUE) WORD
	       (XL XR YB YT) FLOAT)
	<COND (<L? <1 .PT> .XL>
	       <SET CODE1 <ORB .CODE1 #WORD *000000000001*>>)
	      (<G? <1 .PT> .XR>
	       <SET CODE1 <ORB .CODE1 #WORD *000000000002*>>)>
	<COND (<L? <2 .PT> .YB>
	       <SET CODE1 <ORB .CODE1 #WORD *000000000004*>>)
	      (<G? <2 .PT> .YT>
	       <SET CODE1 <ORB .CODE1 #WORD *000000000010*>>)>
	.CODE1>

<DEFINE M*32S (A1 B1 "AUX" A B)
	#DECL ((A1 B1 VALUE) <VECTOR FIX FIX <VECTOR [REST FLOAT]>>
	       (A B) <VECTOR [REST FLOAT]>)
	<COND (<==? 4 <1 .A1>>
	       <SET A <3 .A1>>
	       <SET B <3 .B1>>
	       [4
		4
		[<+ <* <1 .A> <1 .B>>
		    <* <2 .A> <5 .B>>
		    <* <3 .A> <9 .B>>
		    <* <4 .A> <13 .B>>>
		 <+ <* <1 .A> <2 .B>>
		    <* <2 .A> <6 .B>>
		    <* <3 .A> <10 .B>>
		    <* <4 .A> <14 .B>>>
		 <+ <* <1 .A> <3 .B>>
		    <* <2 .A> <7 .B>>
		    <* <3 .A> <11 .B>>
		    <* <4 .A> <15 .B>>>
		 <+ <* <1 .A> <4 .B>>
		    <* <2 .A> <8 .B>>
		    <* <3 .A> <12 .B>>
		    <* <4 .A> <16 .B>>>
		 <+ <* <5 .A> <1 .B>>
		    <* <6 .A> <5 .B>>
		    <* <7 .A> <9 .B>>
		    <* <8 .A> <13 .B>>>
		 <+ <* <5 .A> <2 .B>>
		    <* <6 .A> <6 .B>>
		    <* <7 .A> <10 .B>>
		    <* <8 .A> <14 .B>>>
		 <+ <* <5 .A> <3 .B>>
		    <* <6 .A> <7 .B>>
		    <* <7 .A> <11 .B>>
		    <* <8 .A> <15 .B>>>
		 <+ <* <5 .A> <4 .B>>
		    <* <6 .A> <8 .B>>
		    <* <7 .A> <12 .B>>
		    <* <8 .A> <16 .B>>>
		 <+ <* <9 .A> <1 .B>>
		    <* <10 .A> <5 .B>>
		    <* <11 .A> <9 .B>>
		    <* <12 .A> <13 .B>>>
		 <+ <* <9 .A> <2 .B>>
		    <* <10 .A> <6 .B>>
		    <* <11 .A> <10 .B>>
		    <* <12 .A> <14 .B>>>
		 <+ <* <9 .A> <3 .B>>
		    <* <10 .A> <7 .B>>
		    <* <11 .A> <11 .B>>
		    <* <12 .A> <15 .B>>>
		 <+ <* <9 .A> <4 .B>>
		    <* <10 .A> <8 .B>>
		    <* <11 .A> <12 .B>>
		    <* <12 .A> <16 .B>>>
		 <+ <* <13 .A> <1 .B>>
		    <* <14 .A> <5 .B>>
		    <* <15 .A> <9 .B>>
		    <* <16 .A> <13 .B>>>
		 <+ <* <13 .A> <2 .B>>
		    <* <14 .A> <6 .B>>
		    <* <15 .A> <10 .B>>
		    <* <16 .A> <14 .B>>>
		 <+ <* <13 .A> <3 .B>>
		    <* <14 .A> <7 .B>>
		    <* <15 .A> <11 .B>>
		    <* <16 .A> <15 .B>>>
		 <+ <* <13 .A> <4 .B>>
		    <* <14 .A> <8 .B>>
		    <* <15 .A> <12 .B>>
		    <* <16 .A> <16 .B>>>
		 ]])
	      (T
	       <SET A <3 .A1>>
	       <SET B <3 .B1>>
	       [3
		3
		[<+ <* <1 .A> <1 .B>> <* <2 .A> <4 .B>> <* <3 .A> <7 .B>>>
		 <+ <* <1 .A> <2 .B>> <* <2 .A> <5 .B>> <* <3 .A> <8 .B>>>
		 <+ <* <1 .A> <3 .B>> <* <2 .A> <6 .B>> <* <3 .A> <9 .B>>>
		 <+ <* <4 .A> <1 .B>> <* <5 .A> <4 .B>> <* <6 .A> <7 .B>>>
		 <+ <* <4 .A> <2 .B>> <* <5 .A> <5 .B>> <* <6 .A> <8 .B>>>
		 <+ <* <4 .A> <3 .B>> <* <5 .A> <6 .B>> <* <6 .A> <9 .B>>>
		 <+ <* <7 .A> <1 .B>> <* <8 .A> <4 .B>> <* <9 .A> <7 .B>>>
		 <+ <* <7 .A> <2 .B>> <* <8 .A> <5 .B>> <* <9 .A> <8 .B>>>
		 <+ <* <7 .A> <3 .B>> <* <8 .A> <6 .B>> <* <9 .A> <9 .B>>>]])>>

<DEFINE M*V32 (M1 V "AUX" M VX VY VZ)
	#DECL ((M1) <VECTOR FIX FIX <VECTOR [REST FLOAT]>>
	       (M) <VECTOR [REST FLOAT]>
	       (V) <LIST [REST <OR FIX FLOAT>]>
	       (VALUE) <LIST [REST FLOAT]>
	       (VX VY VZ) FLOAT)
	<COND (<NOT <==? <+ 1 <LENGTH .V>> <2 .M1>>>
	       <ERROR "YOU BLEW IT" "M*V32">)>
	<COND (<==? 4 <1 .M1>>
	       <SET VX <FLOAT <1 .V>>>
	       <SET VY <FLOAT <2 .V>>>
	       <SET VZ <FLOAT <3 .V>>>
	       <SET M <3 .M1>>
	       (<+ <* <1 .M> .VX>
		   <* <5 .M> .VY>
		   <* <9 .M> .VZ>
		   <13 .M>>
		<+ <* <2 .M> .VX>
		   <* <6 .M> .VY>
		   <* <10 .M> .VZ>
		   <14 .M>>
		<+ <* <3 .M> .VX>
		   <* <7 .M> .VY>
		   <* <11 .M> .VZ>
		   <15 .M>>))
	      (T
	       <SET VX <FLOAT <1 .V>>>
	       <SET VY <FLOAT <2 .V>>>
	       <SET M <3 .M1>>
	       (<+ <* <1 .M> .VX> <* <4 .M> .VY> <7 .M>>
		<+ <* <2 .M> .VX> <* <5 .M> .VY> <8 .M>>))>>

<DEFINE SCALE (X1
	       "OPTIONAL" (Y1 .X1) (Z1 .X1)
	       "AUX" (X <FLOAT .X1>) (Y <FLOAT .Y1>) (Z <FLOAT .Z1>))
	#DECL ((X1 Y1 Z1) <OR FIX FLOAT>
	       (X Y Z) FLOAT
	       (VALUE) <VECTOR FIX FIX <VECTOR [REST FLOAT]>>)
	<COND (<1 .3DSTK>
	       [4
		4
		[.X
		 0.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 .Y
		 0.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 .Z
		 0.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 1.0000000
		 ]])
	      (T
	       [3
		3
		[.X
		 0.0000000
		 0.0000000
		 0.0000000
		 .Y
		 0.0000000
		 0.0000000
		 0.0000000
		 1.0000000]])>>

<DEFINE XLATE (X1 Y1
	       "OPTIONAL" (Z1 0.0000000)
	       "AUX" (X <FLOAT .X1>) (Y <FLOAT .Y1>) (Z <FLOAT .Z1>))
	#DECL ((X1 Y1 Z1) <OR FIX FLOAT>
	       (X Y Z) FLOAT
	       (VALUE) <VECTOR FIX FIX <VECTOR [REST FLOAT]>>)
	<COND (<1 .3DSTK>
	       [4
		4
		[1.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 1.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 1.0000000
		 0.0000000
		 .X
		 .Y
		 .Z
		 1.0000000
		 ]])
	      (T
	       [3
		3
		[1.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 1.0000000
		 0.0000000
		 .X
		 .Y
		 1.0000000]])>>

<DEFINE ROTZ (T)
	#DECL ((T) FLOAT
	       (VALUE) <VECTOR FIX FIX <VECTOR [REST FLOAT]>>)
	<COND (<1 .3DSTK>
	       [4
		4
		[<COS .T>
		 <- 0.0000000 <SIN .T>>
		 0.0000000
		 0.0000000
		 <SIN .T>
		 <COS .T>
		 0.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 1.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 0.0000000
		 1.0000000
		 ]])
	      (T
	       [3
		3
		[<COS .T>
		 <- 0.0000000 <SIN .T>>
		 0.0000000
		 <SIN .T>
		 <COS .T>
		 0.0000000
		 0.0000000
		 0.0000000
		 1.0000000]])>>

<DEFINE ROTX (T)
	#DECL ((T) FLOAT
	       (VALUE) <VECTOR FIX FIX <VECTOR [REST FLOAT]>>)
	[4
	 4
	 [1.0000000
	  0.0000000
	  0.0000000
	  0.0000000
	  0.0000000
	  <COS .T>
	  <- 0.0000000 <SIN .T>>
	  0.0000000
	  0.0000000
	  <SIN .T>
	  <COS .T>
	  0.0000000
	  0.0000000
	  0.0000000
	  0.0000000
	  1.0000000
	  ]]>

<DEFINE ROTY (T)
	#DECL ((T) FLOAT
	       (VALUE) <VECTOR FIX FIX <VECTOR [REST FLOAT]>>)
	[4
	 4
	 [<COS .T>
	  0.0000000
	  <SIN .T>
	  0.0000000
	  0.0000000
	  1.0000000
	  0.0000000
	  0.0000000
	  <- 0.0000000 <SIN .T>>
	  0.0000000
	  <COS .T>
	  0.0000000
	  0.0000000
	  0.0000000
	  0.0000000
	  1.0000000
	  ]]>

<ENDBLOCK>

<ENDPACKAGE>
