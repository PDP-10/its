;<DRAW>SET.FAI.14, 12-NOV-75 20:47:12, EDIT BY HELLIWELL
VERSION(SET,2)
COMMENT 
                    Set
          ___________________________
          |            |            |
        |            |            | next SET
         ---------------------------
         |                         |
         |    X,Y OF SET CENTER    |
         ---------------------------
       
               Member element
         ___________________________
         |            |            |
        |            |            | NEXT MEMBER
          ---------------------------
          |            |            |
          |   BODY?    |  POINT?    |
          ---------------------------


STRTBX:	GETFS(B)		;GET FIRST BLOCK FOR BOX
	EXCH B,SETBOX		;POINT TO IT
	JUMPE B,.+2
	PUSHJ P,PUTFS		;GIVE BACK OLD LIST
	MOVE T,CURSE		;GET CURSOR POSITION
	MOVE A,SETBOX
	MOVEM T,1(A)		;SAVE HERE
	SETZM (A)		;CLEAR LINK
	MOVEM A,ENDBOX		;POINTER TO END OF BOX
	TRO STBOX		;NOW WE ARE DRAWING A BOX
	TRZ ZIGZAG		;ZIG THIS WAY FIRST
	MOVEI T,BIGPG		;FLUSH BIG PHRAMUSES
	JRST HYDPOG

SETALT:	TRZE INMOV		;TURN OFF MOVING
	TRO NEEDCL
	TRZN STBOX		;ARE WE DOING A BOX?
	POPJ P,			;NO
	SKIPE B,SETBOX
	PUSHJ P,PUTFS
	SETZM SETBOX
	TRO NEEDCL
	MOVEI T,ANGLPG
	JRST HYDPOG

SPLUS:	TRZE INMOV
	TRO NEEDCL
	TRNN STBOX		;ARE WE DRAWING A SET BOX
	JRST STRTBX		;NO
	MOVE T,CURSE
FINBOX:	MOVE A,ENDBOX
	CAMN T,1(A)	;ON TOP OF THE PREVIOS CORNER>
	POPJ P,		;YES, IGNORE EXTRA "+"
	TRNE ZIGZAG	;UP THEN OVER?
	HLL T,1(A)	;USE X OF END POINT
	TRCN ZIGZAG	;OVER THEN UP?
	HRR T,1(A)	;USE Y OF END POINT
	GETFS(B)	;GET A BLOCK FOR END
	MOVEM T,1(B)
	SETZM (B)
	MOVEM B,(A)
	MOVEM B,ENDBOX
	POPJ P,

SSPACE:	TRNE STBOX		;DRAWING A BOX?
	TRC ZIGZAG		;YES, COMPLIMENT SENSE OF ZIG
	TRZE INMOV		;MOVING?
	TRO NEEDCL		;YES, FIND CLOSEST AGAIN
	POPJ P,			;NO, JUST RETURN
;SROT, STTFND, STBFND
MPC,<
SROT:	PUSHJ P,GETCLS
	JRST PERRET
	TRO MCHG
	PUSH P,A
	PUSH P,1(A)	;CENTER OF SET
	HLRZ A,(A)	;POINTER TO SET LIST
SROT1:	HRRZ B,1(A)	;GET A POINT
	JUMPE B,NOROTP	;NONE
	FETCH(T,B,PXY)
	ADJUST(SUB,T,<(P)>)	;OFFSET FROM CENTER OF SET
	XCT XTB1+1		;ROTATE T, 90o CCW
	XCT XTB2+1
	XCT XTB3+1
	TLZ T,1
	ADJUST(ADD,T,<(P)>)	;PUT BACK OFFSET
	STORE(T,B,PXY)
NOROTP:	HLRZ B,1(A)	;BODY
	JUMPE B,NOROTB	;NONE
	FETCH(T,B,BXY)
	ADJUST(SUB,T,<(P)>)
	XCT XTB1+1
	XCT XTB2+1
	XCT XTB3+1
	TLZ T,1
	ADJUST(ADD,T,<(P)>)
	STORE(T,B,PXY)
	FETCH(T,B,BORI)
	ADDI T,1		;90 DEGREES LEFT
	ANDI T,3		;ONLY 4 STATES
	STORE(T,B,BORI)
	PUSH P,A
	HLRZ A,1(A)		;GET POINTER TO BODY AGAIN
	PUSHJ P,BODFIX		;FIX POINTS
	POP P,A
NOROTB:	HRRZ A,(A)
	JUMPN A,SROT1
	POP P,(P)	;DON'T NEED TO REMEMBER WHERE SET IS ANY MORE
	POP P,A
;	JRST FEDFIX	;FIX FEED THROUGH'S

FEDFIX:	HLRZ A,(A)
FEDFX1:	HRRZ B,1(A)		;POINT?
	JUMPE B,FEDFX2
	FETCHL(TT,B,PBIT)
	TLNN TT,FEEDTH	;FEED THROUGH?
	 JRST FEDFX2	;NO
	FETCH(T,B,PFEED)
	FETCH(TT,B,PXY)
	STORE(TT,T,PXY)
FEDFX2:	HRRZ A,(A)
	JUMPN A,FEDFX1
	POPJ P,
>;MPC

STBFND:
STTFND:	OUTSTR[ASCIZ/NOT YET BOSS!
/]
	POPJ P,
STMNS:	TRZN STBOX		;DRAWING A BOX?
	POPJ P,
	MOVE T,SETBOX
	MOVE T,1(T)		;X,Y OF START OF BOX
	PUSHJ P,FINBOX		;FINISH BOX AT END
	MOVE T,SETBOX
	MOVE T,1(T)
	PUSHJ P,FINBOX		;IT TAKES TWO
	MOVEI A,CLOSES		;START SET HERE
	SETZB H,CLOSES		;COLLECT SET IN CLOSES, X IN H
	SETZB F,E		;COLLECT Y IN F
	SKIPE B,PONPNT		;ON SCREEN POINTS
	PUSHJ P,CHKPNT
MPC,<
	TRNN BTHSDS
	JRST ONESID		;ONE SIDED SET
	SKIPE B,PONPN2
	PUSHJ P,CHKPNT
ONESID:
>;MPC
	JRST ENDPNT

CHKPNT:	FETCHL(T,B,PBIT)
	TLNE T,MPC,<CPIN!>ISPIN
	 JRST NOTINP		;IT'S A PIN IT GOES WITH THE BODY
	FETCH(T,B,PXY)
	PUSHJ P,INBOX		;IS IT IN SET
	 JRST NOTINP		;NO
	GETFS(T)		;GET A BLOCK FOR POINT
	HRRZM B,1(T)		;PUT POINT IN SET
	SETZM (T)		;CLEAR LINK
	HRRZM T,(A)		;LINK ONTO END OF SET
	MOVE A,T		;NEW END
	FETCH(T,B,PY)
	ADD F,T
	FETCH(T,B,PX)
	ADD H,T
	ADDI E,1
NOTINP:	HRRZ B,(B)		;NEXT POINT
	JUMPN B,CHKPNT		;CHECK IT
	POPJ P,
;END NEW SET
ENDPNT:	MOVEI A,CLOSES		;BACK TO THE BEGINNING
	MOVEI B,DBODPN		;NOW CHECK BODIES
	JRST NOTINB
CHKBOD:	FETCH(T,B,BXY)
	PUSHJ P,INBOX		;IN BOX?
	 JRST NOTINB		;NO
	HRRZ T,(A)		;NEED ANOTHER BLOCK?
	JUMPN T,NONEED		;NO
	GETFS(T)
	SETZM (T)
	SETZM 1(T)
	HRRZM T,(A)		;LINK ON END
NONEED:	HRRZ A,T		;NEW END
	HRLM B,1(A)		;PUT BODY IN SET
	FETCH(T,B,BY)
	ADD F,T
	FETCH(T,B,BX)
	ADD H,T
	ADDI E,1
NOTINB:	HRRZ B,(B)
	JUMPN B,CHKBOD
	SKIPE B,SETBOX
	PUSHJ P,PUTFS		;DON'T NEED BOX ANY MORE
	SETZM SETBOX
	MOVEI T,ANGLPG
	PUSHJ P,HYDPOG		;OR DRAWING OF IT
	SKIPN A,CLOSES		;DID WE MAKE A SET?
	POPJ P,			;NO
	GETFS(B)
	HRLZM A,(B)		;GIVE NEW SET A LIST POINTER AND X,Y
	MOVE A,SETPNT
	MOVEM B,SETPNT
	HRRM A,(B)		;LINK IN NEW SET
	MOVE T,F
	IDIV T,E		;AVERAGE OF Y VALUES
MD,<	TRZ T,1			;CLEAR LOW ORDER BIT
	HRRM T,1(B)
	MOVE T,H
	IDIV T,E		;AVERAGE OF X VALUES
	TRZ T,1			;CLEAR LOW ORDER BIT
>;MD
MPC,<
	ASH T,-1
	IDIV T,STPSIZ
	IMUL T,STPSIZ
	ASH T,1
	HRRM T,1(B)
	MOVE T,H
	IDIV T,E		;AVERAGE OF X VALUES
	ASH T,-1
	IDIV T,STPSIZ
	IMUL T,STPSIZ
	ASH T,1
>;MPC
	HRLM T,1(B)
	MOVE T,B
	JRST SCLOSP		;SET AS CLOSEST AND MOVE THERE
;KILL ALL SETS -- CALLED FROM CLEAR
SBLAST:	TRZ STBOX!INMOV
	TRO NEEDCL
SBLST1:	MOVEI B,SETPNT
	SKIPN A,SETPNT
	POPJ P,			;ALL GONE, DONE
	PUSHJ P,SCLEAR
	JRST SBLST1

;KILL ALL TEXT IN CLOSEST SET
STKILT:	TRNN STBOX
	PUSHJ P,GETCLS
	JRST PERRET
	HLRZ A,(A)
STKIL1:	HLRZ D,1(A)		;BODY
	JUMPE D,STKIL4
	FETCH(D,D,BLNK)
	JUMPE D,STKIL4
STKIL3:	FETCH(B,D,BPTXT)
	JUMPE B,STKIL2
	CLEAR(D,BPTXT)
	TRO MCHG
	PUSHJ P,PUTFS
STKIL2:	FETCH(D,D,BPLNK)
	JUMPN D,STKIL3
STKIL4:	HRRZ C,1(A)		;POINT?
	JUMPE C,NSTPNT
	FETCH(B,C,PTXT)
	JUMPE B,NSTPNT
	CLEAR(C,PTXT)
	TRO MCHG
	PUSHJ P,PUTFS
NSTPNT:	HRRZ A,(A)
	JUMPN A,STKIL1
	POPJ P,

;FLUSH THIS SET (LEAVE CONTENTS ALONE)
SETDEL:	TRNN STBOX	;DRAWING A BOX OR MOVEING
	PUSHJ P,GETCLS
	JRST PERRET
	TRZ INMOV
	TRO NEEDCL
	MOVE B,CLAST
SCLEAR:	HRRZ T,(A)
	HRRM T,(B)	;LINK SET OUT
	HLRZS (A)	;LINK UP SET FOR DELETION
	MOVE B,A
	PUSHJ P,PUTFS	;GIVE BACK SET
	CAME A,CURSET
	POPJ P,
	SETZM CURSET
	TRO MCHG
	POPJ P,
;DELETE CONTENTS OF CLOSEST SET
SETKIL:	TRNN STBOX		;MOVING OR DRAWING BOX?
	PUSHJ P,GETCLS
	JRST PERRET		;YES
	TRZ INMOV
	TRO MCHG!NEEDCL
	PUSH P,CLAST
	PUSH P,A		;SAVE SET POINTER FOR DELETION
	MOVSI D,(<ANDCAM>)
	PUSHJ P,STBITA
	MOVSI D,(<IORM>)
	MOVE A,(P)
	PUSHJ P,STBITB
	POP P,A			;THIS SET
	POP P,B			;AND LAST
	PUSHJ P,SCLEAR		;NOW FLUSH SET
	JRST DOSDEL		;NOW DELETE ALL MARKED POINTS AND BODIES

;DELETE COMPLIMENT OF SET
DCOMPL:	TRNN STBOX
	PUSHJ P,GETCLS
	JRST PERRET
	MOVE B,CLAST
	HRRZ C,(A)
	HRRM C,(B)
	PUSH P,A
	MOVSI D,(<IORM>)
	PUSHJ P,STBITA		;MARK ALL POINTS AND BODIES
	MOVE A,(P)
	MOVSI D,(<ANDCAM>)
	PUSHJ P,STBITB		;NOW UNMARK OUR SET
	PUSHJ P,SBLST1		;FLUSH ALL OTHER SETS
	PUSHJ P,DOSDEL
	SETZM LSTNAM		;DISABLE TEXISTS
LAY,<	SETZM SAVNAM	>
	PUSHJ P,FILEUP		;UPDATE ON SCREEN
	TRO MCHG
	POP P,SETPNT		;THIS IS NOW ONLY SET
	HLLZS @SETPNT		;CLEAR ITS NEXT POINTE
	POPJ P,

DOSDEL:	MOVEI B,PONPNT
	PUSHJ P,PNTSET
MPC,<	MOVEI B,PONPN2
	PUSHJ P,PNTSET
>;MPC
	MOVEI A,DBODPN
	JRST BODSET

BODST1:	FETCHL(T,A,BBIT)
	TLNN T,BTMP1		;NEED TO BE DELETED?
	 JRST BODSET
	PUSH P,B		;SAVE POINTER TO LAST
	PUSHJ P,BDELETE		;YES
	POP P,A
BODSET:	MOVE B,A
	HRRZ A,(A)
	JUMPN A,BODST1
	POPJ P,

PNTST1:	FETCHL(T,B,PBIT)
	TLNN T,MPC,<CPIN!>ISPIN	;THESE GO WITH BODY
	TLNN T,1
	JRST PNTSET		;TRY NEXT
	PUSH P,A		;SAVE LAST
	PUSHJ P,DELPNT
	POP P,B			;BACK UP TO LAST SO FORWARD GET NEW POINT
PNTSET:	MOVE A,B
	HRRZ B,(B)
	JUMPN B,PNTST1
	POPJ P,

;MARK ALL POINTS+BODIES
;D = SET/CLR INSTRUCTION
STBITA:	MOVSI C,1
	MOVE T,[IORM C,ADDR(A,PBIT)]
	DPB T,[3300,,D]
	SKIPE A,PONPNT
	PUSHJ P,PNTBST
MPC,<	SKIPE A,PONPN2
	PUSHJ P,PNTBST
>;MPC
	MOVE T,[IORM C,ADDR(A,BBIT)]
	DPB T,[3300,,D]
	SKIPN A,DBODPN
	POPJ P,
	MOVSI C,BTMP1
BODBST:	XCT D
	HRRZ A,(A)
	JUMPN A,BODBST
	POPJ P,

PNTBST:	XCT D
	HRRZ A,(A)
	JUMPN A,PNTBST
	POPJ P,

;MARK ALL BODIES/POINTS IN SET
;D = ANDCAM/IORM INSTRUCTION
STBITB:	MOVSI C,1
	MOVE T,[IORM C,ADDR(T,PBIT)]
	DPB T,[3300,,D]
	PUSH P,A
	HLRZ A,(A)
SETBT1:	HRRZ T,1(A)
	JUMPE T,SETBT2
	XCT D
SETBT2:	HRRZ A,(A)
	JUMPN A,SETBT1
	POP P,A
	MOVSI C,BTMP1
	MOVE T,[IORM C,ADDR(T,BBIT)]
	DPB T,[3300,,D]
	HLRZ A,(A)
SETBT3:	HLRZ T,1(A)
	JUMPE T,SETBT4
	XCT D
SETBT4:	HRRZ A,(A)
	JUMPN A,SETBT3
	POPJ P,
;APPEND STUFF TO "CURRENT" SET

;APPEND BODY TO CURRENT SET
APPBOD:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE B,A
	SETZ E,
	PUSHJ P,APPPB
RECNTC:	SKIPA A,CURSET
RECNTR:	CAMN A,CURSET
	TRO MCHG		;MUST UPDATE CURSET
	HRLM A,(P)
	TRO NEEDCL		;MAY CHANGE CLOSEST
	SETZ TT,
	SETZB B,C
	HLRZ A,(A)
RCNTR1:	HRRZ D,1(A)
	PUSHJ P,ADCNTR
	HLRZ D,1(A)
	PUSHJ P,ADCNTR
	HRRZ A,(A)
	JUMPN A,RCNTR1
	JUMPE TT,CPOPJ
	HLRZ A,(P)
	IDIV C,TT
MD,<	TRZ C,1			;CLEAR LOW ORDER BIT
	HRRM C,1(A)
	IDIV B,TT
	TRZ B,1
>;MD
MPC,<
	ASH C,-1
	IDIV C,STPSIZ
	IMUL C,STPSIZ
	ASH C,1
	HRRM C,1(A)
	IDIV B,TT
	ASH B,-1
	IDIV B,STPSIZ
	IMUL B,STPSIZ
	ASH B,1
>;MPC
	HRLM B,1(A)
	POPJ P,

ADCNTR:	JUMPE D,CPOPJ
	FETCH(T,D,QY)
	ADD C,T
	FETCH(T,D,QX)
	ADD B,T
	AOJA TT,CPOPJ

CENALL:	SKIPN A,SETPNT
	POPJ P,
CENAL1:	HRLM A,(P)
	PUSHJ P,RECNTR
	HLRZ A,(P)
	HRRZ A,(A)
	JUMPN A,CENAL1
	POPJ P,

;APPEND POINT TO CURRENT SET
APPPNT:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE B,A
	FETCHL(T,B,PBIT)
	TLNE T,MPC,<CPIN!>ISPIN
	 JRST PERRET
	MOVEI E,1
	PUSHJ P,APPPB
	JRST RECNTC

;E= 0 APPEND BODY, =1 APPEND POINT
;B = THING TO ADD
APPPB:	SKIPN A,CURSET		;AND A CURRENT SET?
	JRST [	GETFS (A)
		GETFS (T)
		HRLM T,(A)
		SETZM 1(A)
		SETZM (T)
		SETZM 1(T)
		EXCH A,SETPNT
		HRRM A,@SETPNT
		MOVE A,SETPNT
		MOVEM A,CURSET
		JRST .+1]
	HLRZ A,(A)
	SETZ C,			;THIS WILL POINT TO A PLACE TO PUT HIM
APPPN1:	XCT (E)[HLRZ T,1(A)
		HRRZ T,1(A)]
	CAMN T,B		;ALREADY IN SET?
	POPJ P,			;YES, NOOP
	SKIPN T
	MOVE C,A
	MOVE D,A
	HRRZ A,(A)
	JUMPN A,APPPN1
	JUMPN C,APPPN2
	GETFS(C)
	HRRM C,(D)
	SETZM (C)
	SETZM 1(C)
APPPN2:	XCT (E)[HRLM B,1(C)
		HRRM B,1(C)]
	POPJ P,

;MAKE CLOSEST SET THE CURRENT SET
SETSET:	PUSHJ P,GETCLS
	JRST PERRET
	TRO MCHG
	MOVEM A,CURSET
	POPJ P,

;APPEND CLOSEST SET TO CURRENT SET
APPSET:	SKIPN CURSET		;AND CURRENT ONE?
	JRST SETSET		;NO, DO <META>&
	PUSHJ P,GETCLS		;CLOSEST SET?
	JRST PERRET
	CAMN A,CURSET		;APPENDING TO HIMSELF?
	POPJ P,			;YES, NOOP
	MOVEI E,1		;START WITH POINTS
APPST1:	MOVE F,A
	HLRZ F,(F)
APPST2:	XCT (E)[HLRZ B,1(F)
		HRRZ B,1(F)]
	JUMPE B,APPSKP
	PUSH P,A
	PUSHJ P,APPPB
	POP P,A
APPSKP:	HRRZ F,(F)
	JUMPN F,APPST2
	SOJGE E,APPST1		;LOOP FOR BODIES
	JRST RECNTC		;NOW RE-CENTER SET
;REMOVE POINT FROM CURRENT SET
XPNT:	SKIPE B,CURSET
	PUSHJ P,GETCLS
	JRST PERRET
	EXCH A,B
	MOVEI E,1
	PUSHJ P,XPNBD
	JRST RECNTC

;REMOVE BODY FROM CURRENT SET
XBOD:	SKIPE B,CURSET
	PUSHJ P,GETCLS
	JRST PERRET
	EXCH A,B
	SETZ E,
	PUSHJ P,XPNBD
	JRST RECNTC

XPNBD:	HLRZ A,(A)
XPNBD1:	XCT (E)[HLRZ T,1(A)
		HRRZ T,1(A)]
	CAMN T,B
	XCT (E)[HRRZS 1(A)
		HLLZS 1(A)]
	HRRZ A,(A)
	JUMPN A,XPNBD1
	POPJ P,

;REMOVE MEMBERS OF CLOSEST SET FROM CURRENT SET
XSET:	TRNN STBOX
	SKIPN C,CURSET
	JRST PERRET
	MOVEI E,1
	PUSHJ P,GETCLS
	JRST PERRET
	CAMN C,CLOSES
	JRST PERRET
	TRZ INMOV
	EXCH C,A
XSET2:	PUSH P,C
	HLRZ C,(C)
XSET1:	XCT (E)[HLRZ B,1(C)
		HRRZ B,1(C)]
	JUMPE B,.+3
	MOVE A,CURSET
	PUSHJ P,XPNBD
	HRRZ C,(C)
	JUMPN C,XSET1
	POP P,C
	SOJGE E,XSET2
	JRST RECNTC

;CLEAR CURRENT SET
CLRCUR:	SETZM CURSET
	TRO MCHG		;MUST CHANGE WHOLE THING
	POPJ P,

;REMOVE POINT FROM ALL SETS
XPNTA:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE B,A
	PUSHJ P,REMPNT
	JRST ALCNTR

;REMOVE BODY FROM ALL SETS
XBODA:	PUSHJ P,GETCLS
	JRST PERRET
	PUSHJ P,REMBOD
	JRST ALCNTR

;REMOVE MEMBERS OF THIS SET FROM ALL SETS
;AND DELETE SET
XSETA:	TRNN STBOX
	PUSHJ P,GETCLS
	JRST PERRET
	TRZ INMOV
	TRO NEEDCL
	PUSH P,CLAST
	PUSH P,A
	HLRZ A,(A)
XSETA1:	PUSH P,A
	HLRZ A,1(A)
	JUMPE A,.+2
	PUSHJ P,REMBOD
	MOVE A,(P)
	HRRZ B,1(A)
	JUMPE B,.+2
	PUSHJ P,REMPNT
	POP P,A
	HRRZ A,(A)
	JUMPN A,XSETA1
	POP P,A
	POP P,B
	PUSHJ P,SCLEAR
ALCNTR:	SKIPN E,SETPNT
	POPJ P,
ALCNT1:	MOVE A,E
	PUSHJ P,RECNTR
	HRRZ E,(E)
	JUMPN E,ALCNT1
	POPJ P,

SETJMP:	SKIPN T,CURSET
	JRST PERRET
	TRZ STBOX!INMOV
	JRST SCLOSP
;WRITE CLOSEST SET INTO FILE
SWRITE:	MOVE T,MODE
	TRNN STBOX		;NOT DRAWING BOX, AND
	CAIE T,SETM		;SET MODE ONLY
	JRST PERRET
	PUSHJ P,GETCLS
	JRST PERRET
	PUSH P,A		;SAVE SET POINTER
	MOVSI D,(<ANDCAM>)
	PUSHJ P,STBITA		;CLEAR ALL BITS
	MOVE A,(P)		;GET SET POINTER
	MOVSI D,(<IORM>)
	PUSHJ P,STBITB		;NOW MARK THIS SET
	POP P,SETFLG		;SETUP FLAG TO THIS SET
	JRST DWRITS		;AND WRITE FILE
;ASSOCIATIVE SET
ASSETP:	PUSHJ P,GETCLS
	JRST PERRET
	TRZ INMOV!INLIN
	PUSHJ P,ASSCLR
	PUSHJ P,ASSPTP
ASSFIN:	MOVEI T,SETM
	PUSHJ P,CHNGMD		;GO INTO SET MODE
	MOVE A,SETPNT
	PUSHJ P,RECNTR		;CALC CENTER
	MOVE A,SETPNT
	MOVE T,1(A)		;LOC OF CENTER
	JRST CHKON

;ASSOCIATE POINT
ASSPTP:	FETCHL(D,A,PBIT)
	TLOE D,1
	 POPJ P,
	STOREL(D,A,PBIT)
	PUSH P,A
	TLNN D,MPC,<CPIN!>ISPIN	;THESE DON'T GO INTO SET
	 PUSHJ P,ASPUTP
MPC,<	TRNE BTHSDS		;ONLY IN BOTH SIDES MODE
	TLNN D,FEEDTH
	 JRST NOFOLF
	FETCH(A,A,PFEED)	;FOLLOW FEEDTHROUGH
	PUSHJ P,ASSPTP
	JRST NOBODF

NOFOLF:
>;MPC
	TLNN D,ISPIN
	 JRST NOBODF
	FETCH(A,A,BBODY)
	PUSHJ P,ASSPTB
NOBODF:
MD,<	MOVE B,(P)
	FETCH(A,B,PND)
	SKIPE A
	 PUSHJ P,ASSPTP
	MOVE B,(P)
	FETCH(A,B,PNU)
	SKIPE A
	 PUSHJ P,ASSPTP
	MOVE B,(P)
	FETCH(A,B,PNL)
	SKIPE A
	 PUSHJ P,ASSPTP
	POP P,A
	FETCH(A,A,PNR)
	JUMPN A,ASSPTP
	POPJ P,
>;MD
MPC,<	POP P,A			;PICKUP DATA BLOCK POINTER AGAIN
	FETCH(B,A,PNEB)
	JUMPE B,CPOPJ
ASSL1:	MOVEI C,2
ASSL2:	XCT (C)[HLRZ A,(B)
		HRRZ A,1(B)
		HLRZ A,1(B)]
	JUMPE A,ASSL3
	HRLM C,B
	PUSH P,B
	PUSHJ P,ASSPTP
	POP P,B
	HLRZ C,B
ASSL3:	SOJGE C,ASSL2
	HRRZ B,(B)
	JUMPN B,ASSL1
	POPJ P,
>;MPC

ASSETB:	PUSHJ P,GETCLS
	JRST PERRET
	TRZ INMOV
	PUSHJ P,ASSCLR
	PUSHJ P,ASSPTB
	JRST ASSFIN

ASSPTB:	FETCHL(T,A,BBIT)
	TLOE T,BTMP1		;DONE ALREADY?
	 POPJ P,
	STOREL(T,A,BBIT)
	PUSHJ P,ASPUTB		;PUT BODY
	FETCH(A,A,BLNK)		;NOW ALL ITS PINS
	JUMPE A,CPOPJ
ASSBP2:
MPC,<	TRNE BTHSDS		;DOING BOTH SIDES?
	 JRST ASSBTH		;YES
	FETCHL(T,A,BPBIT)
	EQV T,SID
	JUMPGE T,ASSBP1		;JUMP IF ON OTHER SIDE
ASSBTH:
>;MPC
	PUSH P,A
	PUSHJ P,ASSPTP
	POP P,A
ASSBP1:	FETCH(A,A,BPLNK)
	JUMPN A,ASSBP2
	POPJ P,

ASPUTP:	MOVE T,H
ASPTP1:	HRRZ TT,1(T)		;FIND MEMBER BLOCK WITH EMPTY POINT SLOT
	JUMPE TT,ASPTP2
	MOVE TT,T
	HRRZ T,(T)
	JUMPN T,ASPTP1
	GETFS(T)		;NONE, ADD EXTRA
	HRRM T,(TT)
	SETZM (T)
	SETZM 1(T)
ASPTP2:	HRRM A,1(T)
	POPJ P,

ASPUTB:	MOVE T,H
ASPTB1:	HLRZ TT,1(T)		;FIND EMPTY SLOT FOR BODY
	JUMPE TT,ASPTB2
	MOVE TT,T
	HRRZ T,(T)
	JUMPN T,ASPTB1
	GETFS(T)
	HRRM T,(TT)
	SETZM (T)
	SETZM 1(T)
ASPTB2:	HRLM A,1(T)
	POPJ P,

ASSCLR:	PUSH P,A
	MOVSI D,(<ANDCAM>)
	PUSHJ P,STBITA
	POP P,A
	GETFS(T)
	SETZM 1(T)
	EXCH T,SETPNT
	GETFS(H)
	HRL T,H
	MOVEM T,@SETPNT
	SETZM (H)
	SETZM 1(H)
	POPJ P,
;REMPNT, REMBOD, INBOX
;REMPNT - REMOVE POINT FROM ALL SETS, LISTS, ETC.
;B = POINT
REMPNT:	CAMN B,MOVED		;DON'T CHECK LATER IF GOING AWAY
	SETZM MOVED
UML,<	MOVEI D,WIRLST
	JRST ISWL

ISWL1:	HRRZ C,1(D)
ISWL3:	HLRZ T,(C)
	CAMN T,B
	HRRZS (C)
	HRRZ C,(C)
	JUMPN C,ISWL3
ISWL:	HRRZ D,(D)
	JUMPN D,ISWL1
>;UML
	MOVEI D,BLPNTR
	JRST ISBL

ISBL1:	HRRZ T,1(D)
	CAME T,B
	 JRST ISBL
	HRRZ T,(D)
	HRRM T,(C)
	FSTRET(D)
	MOVE D,C
ISBL:	MOVE C,D
	HRRZ D,(D)
	JUMPN D,ISBL1
MPC,<
ROUTE,<	CAMN B,RCL1
	 SETZM RCL1
	CAMN B,RCL2
	 SETZM RCL2
>;ROUTE
>;MPC
SHORT,<	MOVEI D,SHRTER
	JRST SHRTR1

SHRTR2:	HLRZ A,(D)
	HRRZ T,1(D)
	CAMN T,B
	JRST SHRTR3
	HLRZ T,1(D)
	CAMN T,B
	JRST SHRTR3
	HRRZ T,1(A)
	CAMN T,B
	JRST SHRTR3
	HLRZ T,1(A)
	CAME T,B
	JRST SHRTR1
SHRTR3:	FSTRET(A)
	HRRZ T,(D)
	HRRM T,(C)
	FSTRET(D)
	MOVE D,C
SHRTR1:	MOVE C,D
	HRRZ D,(D)
	JUMPN D,SHRTR2
	HLRZ T,SERR1
	HRRZ D,SERR1
	CAME T,B
	CAMN D,B
	JRST SHRTR4
	HLRZ T,SERR2
	HRRZ D,SERR2
	CAME T,B
	CAMN D,B
	JRST SHRTR4
	JRST SHRTR5

SHRTR4:	SETZM SERR1
	SETZM SERR2
SHRTR5:
>;SHORT
	SKIPN C,SETPNT
	 POPJ P,
REMP1:	HLRZ D,(C)		;GO DOWN SET
REMP2:	HRRZ E,1(D)		;A POINT
	CAMN E,B		;IS THIS IT?
	HLLZS 1(D)		;YES, CLEAR POINTER
	HRRZ D,(D)		;NEXT MEMBERS
	JUMPN D,REMP2
	HRRZ C,(C)		;NEXT SET
	JUMPN C,REMP1
	POPJ P,

REMBOD:	SKIPN C,SETPNT
	POPJ P,
REMB1:	HLRZ B,(C)		;GO DOWN SET......
REMB2:	HLRZ D,1(B)		;A BODY
	CAMN D,A		;IS THIS IT
	HRRZS 1(B)		;CLEAR POINTER
	HRRZ B,(B)
	JUMPN B,REMB2
	HRRZ C,(C)
	JUMPN C,REMB1
	POPJ P,

INBOX:	MOVE C,SETBOX
	SETZ G,
INBOX1:	HRRZ TT,(C)
	JUMPE TT,INDONE		;FINI
	HLLZ TT,1(TT)		;X,Y OF NEXT POINT
	HLLZ TTT,1(C)		;X,Y OF THIS POINT
	HLLZ D,T		;GET X PART OF T
	CAMN TT,TTT		;SAME X VALUES FOR LINE?
	JRST CKVERT		;YES, SPECIAL CHECK
	CAMG TT,TTT		;WHICH IS GREATER?
	EXCH TT,TTT		;REVERSE
	CAML D,TTT		;NOT IN RANGE?
	CAML D,TT		;	"
	JRST VERT		;DOESN'T MAKE IT
	HRRE TT,1(C)		;Y ONLY
	HRRE D,T		;Y OF POINT IN QUESTION
	CAMN TT,D		;IF ON LINE, IMMEDIATE WIN!
	JRST CPOPJ1
	CAML TT,D		;CHECK IF Y VALUE OF LINE IS GREATER THAN THAT OF POINT
	ADDI G,1		;ANOTHER CROSSING
	JRST VERT

VERT:	HRRZ C,(C)
	JRST INBOX1

CKVERT:	CAME D,TT		;POINT ALSO ON VERTICAL LINE?
	JRST VERT		;NO, SKIP IT
	HRRZ TT,(C)
	HRRE TTT,1(TT)		;GET Y VALUES
	HRRE TT,1(C)		;	"
	HRRE D,T		;Y PART OF T
	CAMG TT,TTT		;WHICH IS GREATER?
	EXCH TT,TTT		;REVERSE
	CAMG D,TT
	CAMGE D,TTT
	JRST VERT		;NOT ON LINE, IGNORE
	JRST CPOPJ1		;IMMEDIATE WIN IF ON VERT LINE

INDONE:	TRNE G,1		;ODD NUMBER OF CROSSINGS?
	AOS(P)			;YES, SKIP RETURN, IT WAS IN THE BOX
	POPJ P,
MD,<
SETCOP:	TRNN STBOX		;ARE WE MOVING OR DRAWING A BOX?
	PUSHJ P,GETCLS		;CURRENT SET
	JRST PERRET		;NOT NOW BROTHER
	TRZ INMOV
	MOVE G,A
	MOVEI T,BIGPG
	PUSHJ P,HYDPOG
	PUSH P,CURSET
	MOVEM A,CURSET
	PUSH P,CURSE
	MOVE T,CURSE
	ADJUST(SUB,T,<1(G)>)	;GET OFFSET TO NEW SET
	MOVEM T,NOFFST		;REMEMBER IT
	MOVE T,PID
	MOVEM T,OLDPID
	MOVE T,BID
	MOVEM T,OLDBID
	HLRZ G,(G)		;START OF OLD SET
	SETZM NEWSET		;COLLECT NEW SET HERE
	MOVEI H,NEWSET		;POINTER TO END OF NEW SET
BODNEW:	GETFS(T)		;NEW BLOCK FOR NEW SET
	SETZM (T)
	SETZM 1(T)		;CLEAR IT
	HRRM T,(H)		;LINK IT IN
	MOVE H,T		;POINT TO IT
	HLRZ B,1(G)		;BODY OF THIS BLOCK
	JUMPE B,NNWBOD		;NONE HERE
;Create copy of BODY
	FETCH(C,B,BXY)
	ADJUST(ADD,C,NOFFST)	;ADD OFFSET
	MOVEM C,CURSE		;WHERE TO PUT NEW BODY
	FETCH(C,B,BTYP)
	MOVEM C,CURBOD		;SAVE HERE FOR BPYES
	PUSH P,B
	FETCH(C,B,BORI)
	MOVEM C,CURORT		;SAVE HERE FOR BPYES
	PUSHJ P,BPYES		;PLANT THE BODY
	MOVE T,DBODPN		;NEWEST BODY
	HRLM T,1(H)		;TO NEW SET
	POP P,A
	FETCH(C,A,BID)		;OLD BID
	ADD C,OLDBID		;NEW BODY ID
	STORE(C,T,BID)
	MOVE B,[FIXLOC!FIXBLO,,0]
	AND B,ADDR(A,BBIT)	;GET THESE OLD BITS
	IORM B,ADDR(T,BBIT)	;COPY TO NEW
	FETCH(B,A,BLOC)
	JUMPE B,NCPLOC		;SKIP IF NONE
	MOVEI B,-1+ADDR(T,BLXY)
	STORE(B,T,BLOC)
	FOR I IN (BLXY,BRSLOX,BLO,BPAK,BDEF)
<	FETCH(B,A,I)
	STORE(B,T,I)
>
NCPLOC:	FETCH(B,A,BTXT)		;OLD BODY TEXT/PROPERTY LIST
	JUMPE B,NNWBOD
	MOVE A,T		;MERGE ONTO A'S BTXT LIST (NULL)
	PUSHJ P,MERGEP
NNWBOD:	HRRZ B,1(G)		;POINT FIELD
	JUMPE B,NNWPNT		;NONE
;Now create copies of all points
	FETCH(TTT,B,PID)
	PUSH P,TTT
	FETCH(T,B,PXY)
	ADJUST(ADD,T,NOFFST)	;OFFSET
	PUSHJ P,PNTPUT		;MAKE A POINT(ALWAYS)
	HRRM D,1(H)		;PUT IN NEW SET
	POP P,TTT
	ADD TTT,OLDPID		;NEW POINT ID
	STORE(TTT,D,PID)
NNWPNT:	HRRZ G,(G)		;NEXT SET BLOCK
	JUMPN G,BODNEW		;LOOP
;NOW COPY STUFF ONTO NEW POINTS AND PINS
	MOVE G,CURSET
	HLRZ G,(G)		;POINTER TO SET
	MOVE H,NEWSET		;AND NEW ONE
BODPNS:	HLRZ A,1(G)		;OLD BODY
	JUMPE A,NTPINS
;******************** PINS ***********************
	FETCH(A,A,BLNK)		;ANY PINS ON OLD BODY?
	JUMPE A,NTPINS
NXTPIN:	FETCH(B,A,BPLOC)
	HLRZ C,1(H)		;NEW BODY
	FETCH(C,C,BLNK)
PINNUM:	JUMPE C,PINDON
	MOVEM C,NEWPNT
	FETCH(E,C,BPLOC)
	CAME E,B		;IS THIS THE ONE
	 JRST [	FETCH(C,C,BPLNK)
		JRST PINNUM]
THSPIN:	PUSHJ P,PCOPY		;COPY TEXT AND TEXT BITS
NNWTXT:	FETCH(T,A,BPPN)		;COPY PIN #
	STORE(T,C,BPPN)
	PUSHJ P,SEGCOP		;MAKE SEGMENTS (USE POINTER IN NEWPNT)
PINDON:	FETCH(A,A,BPLNK)
	JUMPN A,NXTPIN		;NEXT PIN OF THIS BODY
;********************* POINT ********************
NTPINS:	HRRZ A,1(G)		;OLD POINT
	JUMPE A,NNOPNT		;NO POINT HERE
	HRRZ C,1(H)		;NEW POINT
	MOVEM C,NEWPNT
	FETCHL(TT,C,PBIT)
	TLNN TT,CPIN		;CONNECTOR PIN HERE?
	 JRST NOCCPN		;NO
	FETCH(TT,A,PLOC)
	GETFS (TTT)		;GETBLK(,LOCO) or CPYLOC
	MOVE B,(TT)
	MOVEM B,(TTT)
	MOVE B,1(TT)
	MOVEM B,1(TTT)
	STORE(TTT,C,PLOC)
	MOVSI TTT,CPIN!FIXCON
	AND TTT,ADDR(A,PBIT)	;PICKUP FIXCON BIT AS WELL AS CPIN
	IORM TTT,ADDR(C,PBIT)	;AND MARK IT
NOCCPN:	PUSHJ P,PCOPY		;COPY TEXT AND TEXT BITS
NNOTXT:	PUSHJ P,SEGCOP		;MAKE SEGMENTS
NNOPNT:	HRRZ H,(H)
	HRRZ G,(G)		;NEXT OF NEW AND OLD
	JUMPN G,BODPNS		;NEXT BLOCK
;END FINISH UP
	GETFS(A)		;NEW BLOCK
	MOVE B,SETPNT		;LINK HIM IN
	HRL B,NEWSET		;POINT TO SET
	MOVEM B,(A)		;TO NEW BLOCK
	MOVEM A,SETPNT		;DONE
	MOVE T,A
	HRLI T,SETPNT
	PUSHJ P,SCLOSE
	POP P,CURSE		;RESTORE CURSOR POSITION
	POP P,CURSET
	MOVE T,CURSE
	MOVEM T,1(A)		;PUT SET AT CURSOR
	MOVEI T,SETM
	PUSHJ P,CHNGMD
	PUSHJ P,DOSMOV
	TRO MCHG		;START MOVING AND MARK AS CHANGED
	MOVE T,OLDBID
	MOVEM T,BID
	MOVE T,OLDPID
	MOVEM T,PID
	JRST REEID		;SPREAD NEW ID'S OVER RANGE OLDBID-

;SEGCOP - COPY LINKS TOPOLOGY FROM OLD POINT
;A = SOURCE POINT
;C = DEST POINT

DEFINE FOO $ (PND,PNU)
<	FETCH(T,C,PND)		;ALREADY LINK THERE?
	JUMPN T,LOS$PND
	FETCH(T,A,PND)		;OLD POINT HAVE LINK HERE?
	JUMPE T,LOS$PND		; NO, DO NOTHING
	MOVE TTT,T
	PUSHJ P,GETID		;GET ID OF POINT IN OLD TOPO
	PUSHJ P,FNDID		;AND FIND CORRESPONDING POINT IN NEW
	 JRST LOS$PND
	FETCH(T,D,PNU)		;HIS BACK LINK ALREADY USED??
	JUMPN T,LOS$PND
	STORE(D,C,PND)		;US TO HIM
	STORE(C,D,PNU)		;HIM BACK TO US
LOS$PND:
>

SEGCOP:	FOO(PND,PNU)		;COPY ALL FOUR POSSIBLE SEGMENTS
	FOO(PNU,PND)
	FOO(PNL,PNR)
	FOO(PNR,PNL)
	POPJ P,

>;MD
MPC,<
SETCOP:	TRNN STBOX		;ARE WE MOVING OR DRAWING A BOX?
	 PUSHJ P,GETCLS		;CURRENT
	 JRST PERRET		;NOT NOW BROTHER
	TRO MCHG
	TRZ INMOV
	MOVEI T,BIGPG
	PUSHJ P,HYDPOG
	PUSH P,CURSET
	MOVEM A,CURSET
	PUSH P,SID		;SAVE WHICH SIDE WE ARE ON
	PUSH P,CURSE		;SAVE CURSOR POSITION
	MOVE T,PID
	MOVEM T,OLDPID
	MOVE T,BID
	MOVEM T,OLDBID
	MOVE T,CURSE
	ADJUST(SUB,T,<1(A)>)
	MOVEM T,NOFFST		;OFFSET FOR NEW SET
	SETZM NEWSET		;COLLECT NEW SET HERE
	MOVEI G,NEWSET
	HLRZ A,(A)
BODNEW:	PUSH P,A
	GETFS (B)
	HRRM B,(G)
	SETZM (B)
	SETZM 1(B)
	HRRZ G,B
	HLRZ B,1(A)		;POINTER TO BODY FIELD OF THIS SET
	JUMPE B,NNWBOD		;NONE
;Copy a BODY
	MOVE C,1(B)		;LOC
	ADJUST(ADD,C,NOFFST)	;ADD OFFSET
	MOVEM C,CURSE		;SAVE HERE
	FETCH(TTT,B,BID)
	PUSH P,TTT
	FETCH(C,B,BTYP)		;TYPE
	MOVEM C,CURBOD
	FETCH(C,B,BORI)		;ORIENTATION
	MOVEM C,CURORT
	PUSHJ P,BPYES		;Make body, and its pins
	MOVE C,DBODPN		;THIS POINTS TO NEW BODY
	HRLM C,1(G)		;PUT IN NEW SET
	POP P,TTT		;OLD BODY ID
	ADD TTT,OLDBID		;NEW BODY ID
	STORE(TTT,C,BID)
NNWBOD:	MOVE A,(P)		;SET POINTER
	HRRZ B,1(A)		;POINT FROM OLD SET
	JUMPE B,NNWPNT		;MAYBE NONE
;Copy a POINT
	FETCH(TTT,B,PID)
	PUSH P,TTT		;SAVE POINT ID
	FETCHL(T,B,PBIT)
	EQV T,SID
	JUMPL T,PNTNEW		;RIGHT SIDE?
	SWITCH			;NO
PNTNEW:	FETCH(T,B,PXY)
	ADJUST(ADD,T,NOFFST)	;NEW POS
	PUSHJ P,PNTPUT		;MAKE THE NEW POINT
	HRRM D,1(G)		;STORE NEW POINT IN NEW SET
	POP P,TTT
	ADD TTT,OLDPID		;NEW POINT ID
	STORE(TTT,D,PID)
NNWPNT:	POP P,A
	HRRZ A,(A)
	JUMPN A,BODNEW

;Now copy pin's topologies
	MOVE H,NEWSET		;NEW SET IN H
	MOVE G,CURSET
	HLRZ G,(G)		;OLD IN G
SEGCP1:	HLRZ A,1(G)		;BODY
	JUMPE A,SEGCP2		;ANY?
	FETCH(A,A,BLNK)		;any pins?
	JUMPE A,SEGCP2
SEGCP4:	HLRZ C,1(H)		;Corresponding body in new set
	FETCH(C,C,BLNK)
	JUMPE C,SEGCP3
SEGCP6:	FETCHL(TT,A,BPBIT)
	FETCHL(TTT,C,BPBIT)
	EQV TTT,TT
	JUMPGE TTT,SEGCP5	;SAME SIDE?
	FETCH(T,A,BPLOC)
	FETCH(TT,C,BPLOC)
	CAIE TT,(T)		;SAME PIN #
	 JRST SEGCP5		;NO
	PUSHJ P,COPPNT		;COPY POINT STUFF
	JRST SEGCP3

SEGCP5:	FETCH(C,C,BPLNK)
	JUMPN C,SEGCP6
SEGCP3:	FETCH(A,A,BPLNK)
	JUMPN A,SEGCP4
;Copy point's topology
SEGCP2:	HRRZ A,1(G)		;POINT FROM OLD SET
	JUMPE A,SEGCP7		;NO POINT
	HRRZ C,1(H)		;AND FROM NEW ONE
	PUSHJ P,COPPNT		;DO POINT STUFF
SEGCP7:	HRRZ H,(H)
	HRRZ G,(G)
	JUMPN G,SEGCP1
;Copied everything, finish defining new set.
COPSDN:	GETFS(A)		;POINTER BLOCK FOR SET
	MOVE B,SETPNT		;LINK HIM IN
	HRL B,NEWSET		;POINT TO SET
	MOVEM B,(A)		;TO NEW BLOCK
	MOVEM A,SETPNT		;DONE
	MOVE T,A
	HRLI T,SETPNT
	PUSHJ P,SCLOSE
	POP P,CURSE		;RESTORE CURSOR POSITION
	MOVE T,CURSE
	MOVEM T,1(A)		;NEW SET CENTER
	MOVEI T,SETM
	PUSHJ P,CHNGMD		;BACK TO SET MODE
	PUSHJ P,DOSMOV
	TRO MCHG		;AND NOW MOVE IT(THIS CHANGES PIC).
	MOVE T,OLDPID
	MOVEM T,PID
	MOVE T,OLDBID
	MOVEM T,BID
	PUSHJ P,REEID		;SPREAD NEW ID'S OVER RANGE OLDBID-
	POP P,T
	POP P,CURSET
	EQV T,SID
	JUMPL T,CPOPJ
	SWITCH
	POPJ P,

;COPPNT - COPY POINTS TEXT,LINK ONTO NEW VERSION
;A = SOURCE POINT
;C = DEST POINT

COPPNT:	MOVEM C,NEWPNT		;STORE NEW POINT POINTER HERE
	MOVE TTT,[PLANES,,-1]	;COPY PLANES AND PAD TYPE!
	ANDCAM TTT,ADDR(C,PBIT)	;CLEAR IN NEW POINT
	AND TTT,ADDR(A,PBIT)	;GET FROM OLD
	IORB TTT,ADDR(C,PBIT)	;SET IN NEW (AND GET FRONT BIT)
	EQV TTT,SID
	JUMPL TTT,COPSID	;RIGHT SIDE?
	SWITCH			;NO, CHANGE
COPSID:	FETCH(T,A,PTXT)
	JUMPE T,NNOTXT
	PUSHJ P,STRCOP
	STORE(B,C,PTXT)
NNOTXT:	FETCH(F,A,PNEB)
	PUSH P,H		;SAVE H
	JUMPE F,NOSEGS		;NONE AT ALL?
	PUSH P,A
SEGCOP:	MOVEI H,2
NNTXT1:	XCT (H)[HLRZ T,(F)
		HRRZ T,1(F)
		HLRZ T,1(F)]
	JUMPE T,NOSEG
	MOVEI TTT,(T)
	PUSHJ P,GETID		;GETID OF EXEMPLAR
	PUSHJ P,FNDID		;FIND ITS DOPPELGANGER
	 JRST NOSEG
	FETCH(B,D,PNEB)
	MOVE A,NEWPNT
	PUSHJ P,FNDLNK		;ALREADY THERE?
	 CAIA			;NO, LETS MAKE ONE
	 JRST NOSEG		;YES, DON'T MAKE 2 LINES
	MOVE T,C		;NEW P1
	PUSHJ P,FRLINK
	XCT (T)PUTAB		;NEW P1 to P2
	MOVE T,D
	PUSHJ P,FRLINK		;NEW P2 to P1
	MOVE D,NEWPNT
	XCT (T)PUTAB
NOSEG:	SOJGE H,NNTXT1
	HRRZ F,(F)
	JUMPN F,SEGCOP
	POP P,A			;GET BACK SOURCE POINT
;Also copy point on other side!
NOSEGS:	FETCHL(T,A,PBIT)
	TLNN T,FEEDTH		;FEED THROUGH HERE?
	 JRST NNPFED		;NO
	SWITCH			;GET TO OTHER SIDE
	FETCH(TTT,A,PFEED)
	PUSHJ P,GETID		;ID OF OTHER POINT
	PUSHJ P,FNDID		;FIND NEW POINT
	 JRST NOFEDY		;NOT YET, CLEAR PLANE BITS, NO ONE ON OTHER SIDE
	FETCHL(TT,D,PBIT)
	TLNE TT,FEEDTH!CPIN!ISPIN	;IS IT FED THROUGH?
	 JRST NOFEDX		;YES, DONE ALREADY
	HRRZ T,NEWPNT
	STORE(T,D,PFEED)	;POINT BACK TO US
	TLO TT,FEEDTH
	STOREL(TT,D,PBIT)
	STORE(D,T,PFEED)
	SETBIT(FEEDTH,TT,T,PBIT)
NOFEDX:	SWITCH
NNPFED:	POP P,H
	POPJ P,

NOFEDY:	SWITCH
	MOVE T,NEWPNT
	CLRBIT(PLANES,TT,T,PBIT)
	POP P,H
	POPJ P,
>;MPC
;STRCOP - COPY STRING WITH OFFSET BLOCK
;T = STRING
;RETURNS
;B = STRING

STRCOP:	SETZ B,
	JUMPE T,CPOPJ
	GETBLK(B,TEXCOF)	;RETURN POINTER IN B
	FETCH(TT,T,TCXY)	;COPY OFFSET
	STORE(TT,B,TCXY)
	FETCH(T,T,TCSTR)
	GETBLK(TTT,TEXSTR)
	STORE(TTT,B,TCSTR)	;GET FIRST BLOCK FOR TEXT
LSTCP1:	FETCH(TT,T,TSSIZ)
	STORE(TT,TTT,TSSIZ)	;COPY SIZE
	FETCH(TT,T,TSASC)
	STORE(TT,TTT,TSASC)	;COPY FIRST 5 CHARS
LPTXTC:	FETCH(T,T,TSNXT)
	JUMPE T,[	CLEAR(TTT,TSNXT)	;TERMINATE LIST
			POPJ P,]
	GETBLK(TT,TEXSTR)
	STORE(TT,TTT,TSNXT)
	MOVE TTT,TT
	FETCH(TT,T,TSASC)
	STORE(TT,TTT,TSASC)
	JRST LPTXTC		;LOOP

;LSTCOP - COPY BARE TEXT STRING
;T = STRING
;RETURNS
;B = NEW STRING

LSTCOP:	SETZ B,
	JUMPE T,CPOPJ
	GETBLK(B,TEXSTR)
	MOVE TTT,B
	JRST LSTCP1

MD,<
;PCOPY - COPY TEXT FROM ONE POINT TO ANOTHER
;A = SOURCE POINT
;C = DESTINATION POINT

PCOPY:	FETCH(TT,A,PTXT)
	JUMPE TT,CPOPJ		;DON'T BOTHER IF NO TEXT
	MOVSI TTT,FIXTXT!FIXRHT
	AND TTT,ADDR(A,PBIT)	;GET BITS FROM OLD
	IORM TTT,ADDR(C,PBIT)	;STORE IN NEW
	FETCH(T,A,PTXT)
	PUSHJ P,STRCOP
	STORE(B,C,PTXT)
	POPJ P,
>;MD
