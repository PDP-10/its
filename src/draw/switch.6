;;[FIRST] - assemble with D and BOARDS

;DEFINE ALL CONDITIONAL ASSEMBLY - SET TITLE

XALL  NOLIT

DEFINE MWL,<IFN 0>	;WE AREN'T THE WIRELISTER
DEFINE MDPC,<IFE 0>	;WE ARE THE DRAWING PROG
DEFINE NIL,<IFN 0>	;VESTIGIAL OR INCIPIENT CODE THAT NEEDS EDITING

DEFINE SETSW $ (NAME,DEFVAL)
<	IFNDEF NAME$SW,<NAME$SW__IFIDN <DEFVAL> <> <0;> DEFVAL
>
	NAME$SW__NAME$SW
>

DEFINE ONOFSW $ (NAME,DEFVAL)
<	SETSW(NAME,DEFVAL)
	IFN NAME$SW,<NAME$SW__-1>	;MAKE IT NICE FOR  AND 
>
DEFINE DEFSW $ (NAME)
<	DEFINE NAME,<IFN NAME$SW>
	DEFINE NO$NAME,<IFE NAME$SW>
>
DEFINE MAKESW(NAME,VAL)
<	ONOFSW(NAME,VAL)
	DEFSW(NAME)
>

MAKESW(STAN)
MAKESW(DEC)
MAKESW(CMU)
MAKESW(ITS)
MAKESW(III)
MAKESW(DBG)

DEFINE STANFO,<STAN>		;LONG FORM FOR HYSTERICAL RAISINS

DEFINE CHECK $ (SITE,VAR) <IFDEF VAR,<SITE$SW__-1;>>
IFE STANSW!DECSW!CMUSW!ITSSW!IIISW,<
;IF NO SITE SET MANUALLY ABOVE, WE MUST DECIDE FOR OURSELVES WHERE WE ARE
CHECK(ITS,.IOT) CHECK(CMU,CMUDEC) CHECK(STAN,SPWBUT) DECSW__-1
>

;CONDITIONAL FOR STANDARD OR SPECIAL KEYBOARD
;STANDARD (SKEYSW=-1) IS REGULAR ASCII KEYBOARD WITH NO EXTRA BUTTONS
MAKESW(SKEY,IIISW!DECSW)

DEFINE MOR (A)
<TMPSW__0
FOR B IN (A)
<	B,<TMPSW__-1>
>
IFN TMPSW>


;;Make selections from TTY

DEFINE PC<PCSW__-1
PRINTS /PC VERSION SELECTED
/>
DEFINE GT<GT40SW__-1

DEFINE GTBIG<GTSMAL__0
PRINTS /LARGE SCREEN SELECTED
/>
PRINTS /GT40 SELECTED
	TYPE	TO GET
	GTBIG	LARGE SCREEN GT40 (SQUARE)
/>
DEFINE NOVIROS<VIROSSW__0
PRINTS /NON-VIROS VERSION SELECTED
/>
DEFINE ROUTE<ROUTES__-1
PRINTS /RPH ROUTING VERSION SELECTED
/>
DEFINE NODLX<DLXSW__0
PRINTS /DL10 DESELECTED
/>
DEFINE PGP<PGPSW__-1
PRINTS /PGP SELECTED
/>
DEFINE LIB<LIBSW__-1
PRINTS /LIBRASCOPE LAYOUT VERSION SELECTED
/>
DEFINE TWO<TWOSW__-1
PRINTS /TWO SEGMENT LAYOUT VERSION SELECTED
/>
DEFINE ONE<ONESW__-1
PRINTS /ONE SEGMENT LAYOUT VERSION SELECTED
/>
DEFINE DEBUG<DBGSW__-1>
NOIII,<		;III sets switches with CCL files
PRINTS /	TYPE	TO GET
	PC	PC PROGRAM
	ROUTE	RPH ROUTER
	DEBUG	DEBUGGING FEATURES (such as they are)
/
DEC,<	PRINTS /	GT	GT40 VERSION
	NOVIROS	NOT VIROS
	NODLX	NON-DL10 VERSION
	PGP	PGP VERSION
/>
STANFO,<	PRINTS /	LIB	LIBRASCOPE LAYOUT VERSION
	TWO	TWO SEGMENT LAYOUT VERSION
/>
ITS,<	PRINTS /	ONE	One segment layout version (also select D or PC)
	END WITH ;^C
/>;ITS

NOITS,<	PRINTS /	END WITH ;^Z
/>;NOITS

.INSERT TTY:
>;NOIII

DBG,<PRINTS /Debugging features on
/>;DBG

DEFINE VERSION ' (PROG,VN)
<SUBTTL PROG V'VN
^^VERSUM__VERSUM+VN
>
VERSUM__0
VMAJOR__11	;MAJOR VERSION #
VMINOR__0	;MINOR VERSION LETTER
VGROUP__1	;MODIFYING GROUP

VERSION(FIRST,12)
;;Define various Layout versions

MAKESW(TWO)
MAKESW(ONE)
MAKESW(LIB)
MAKESW(LAY,LIBSW!TWOSW!ONESW)

ONE,<LIBSW__0  TWOSW__0>
TWO,<LIBSW__0  ONESW__0>
LIB,<ONESW__0  TWOSW__0>

LAY,<
PASSNM__-1			;INITIALIZE TO PASS1
DEFINE PASS1<IFN PASSNM>
DEFINE PASS2<IFE PASSNM>
>;LAY

comment 
;;Where to find stuff re. Layout version

[SWITCH]
	Select assembly mode
	Define mode macros
	TWO: Define PASS1, PASS2
[FIRST]
	TWO: Set D or PC from pass switch
	TWO: Setup core allocation to high seg
	Setup location counters for PURE, IMPURE
[SECOND]
	Variables shared between D, PC
	Swapped dispatch vector
	Low core code
	SAVE code
[LOWCOR]
	Setup block structure for D, PC
	Setup location counter
	Dispatch vector into D or PC
	Vars swapped with D or PC (see NAMES)
[COM]
	Call layout initialization
	Communication between sides
	c-m-V
	x-.
[SUB]
	DOCORE - core allocation



ONOFSW(PC,0)
DEFINE MD,<IFE PCSW>
DEFINE MPC,<IFN PCSW>

MAKESW(BACK)		;BACKPANEL VERSION

MAKESW(GT40)
DEFINE GT<GT40>
DEFINE NOGT<NOGT40>

MAKESW(PGP)

MAKESW(VB10,<DECSW&<GT40SW>&<PGPSW>>)

DEC,<
ENTRY TODDT
IFNDEF GTSMAL,<GTSMAL__-1>		;FOR SMALL SCREEN GT40
GTSMAL__GTSMAL

MAKESW(VIROS,-1)	;ASSUME VIROS FOR NOW (WILL ALWAYS BE INSIDE DEC)

MAKESW(DLX,GT40SW)	;ASSUME DL10 FOR NOW IF GT40

>;DEC

MAKESW(VIROS)	;0 IF NOT DEFINED
MAKESW(DLX)	;0 IF NOT DEFINED

MAKESW(WAG,-1)	;WAGNERS PC ROUTER STUFF

MAKESW(UML,-1)	;ENABLE USE OF WDR FILES FOR FLASHING, ETC.

MAKESW(PART,-1)	;WAGNER PARTITIONER

MAKESW(SHORT,-1)	;FIND SHORTS

MAKESW(ROUTE)		;RPH ROUTING STUFF

SETSW(WW)		;ENABLES WIRE WRAP BOARD KNOWLEDGE
DEFSW(WW)		;CURRENT LEGAL VALUES ARE:

MAKESW(RHG,0)	;SPECIAL HACKS FOR RHG (RICHARD H. GUMPERTZ AT CMU)

MAKESW(CMUF,CMUSW!RHGSW)	;CMU FORMAT -- INDEPENDENT OF WHERE THE PROGRAM IS RUN
			;I.E. JUST THE STUFF CMU LIKES, NOT THAT IT NEEDS.

;TITLES

IFNDEF BOARDS,<		;NO TITLE IF ASSEMBLING WITH BOARDS
IFN TWOSW!LIBSW,<
	ROUTE,<
		LIB,<TITLE LR
			DEFINE %PNAME<SIXBIT/LR/>>
		TWO,<TITLE TR
			DEFINE %PNAME<SIXBIT/TR/>>
	>;ROUTE
	NOROUTE,<
		LIB,<TITLE L
			DEFINE %PNAME<SIXBIT/L/>>
		TWO,<TITLE T
			DEFINE %PNAME<SIXBIT/T/>>
	>;NOROUTE
>;IFN TWOSW!LIBSW
IFE TWOSW!LIBSW,<
	MD,<
		NODEC,<TITLE D>
		DEC,<VB10,<TITLE D VB10 VERSION>
		       GT,<TITLE D GT40 VERSION>
		      PGP,<TITLE D PGP VERSION>
			>;DEC
			DEFINE %PNAME<SIXBIT/D/>
	>;MD
	MPC,<
		ROUTE,<TITLE RPC
			DEFINE %PNAME<SIXBIT/RPC/>>
		NOROUTE,<TITLE PC
			DEFINE %PNAME<SIXBIT/PC/>>
	>;MPC
>;IFE TWOSW!LIBSW
>;IFNDEF BOARDS
