!* -*- TECO -*- !
!~FILENAME~:! !LISPDOC command similar to TECDOC!
DOCLISP

!DOCLISP:! !C Print out LISP documentation
Takes string arg of command to find.  If string is null, it will
prompt for one.!

f[ B Bind			    !* Get our own buffer!
f[ D File			    !* Don't modify defaults!
FN EC FS RGETTY "EFT
'				    !* Be sure to close on exit, and look nice!
				    !* on losing terminals!
er DSK:macind;MACLSP_MANDOC 1:A    !* Get the pointer to the directory!
\ FS IF Access			    !* Access the directory!
^Y				    !* read it in!
ER				    !* re-open it!
s'(l 0,.k			    !* Flush superfluous header!
1,FLISP_Command?__ [1	   !* Get the argument!
FQ1 "E				   !* if null!
    :F"G			   !* and we were called via MM or whatever!
       1, m(m.m &_Read_Line)LISP_Command?__ f(u1)"E'''  !* try from TTY!
FQ1 "E				   !* Still null? !
    0FO..Q DOCLISP_Last_Argument u1'  !* try our previous arg!
q1"E @FT_[No_Previous_LISP_command]
				   !* nope, just give up on him!
   0fs echo active w'	   !* don't flush typeout!
q1 m.v DOCLISP_Last_Argument	   !* remember for next time!
QLISPDOC_Readtable[..D	   !* Get our very own readtable!
FS B Cons[ 0			   !* Get a buffer to read things into!
[2[3 
J F<!NUFF!			   !* For each thing he gives!
  <3+.-z;			   !* For each entry in table!
      .+1,(fWl .):FB 1  "N	   !* If it is a match!
          s			   !* make sure at end of word!
          s r \U2		   !* Get the location!
	  s r \U3		   !* Get the size!
	  Q0 [..O		   !* Use our temporary buffer!
	  Q2 FS IF ACCESS	   !* Find the item!
	  hk			   !* flush the old contents!
	  Q3 FY			    !* Read in the item!
	  :FT			   !* go to top of screen!
	  FS RGETTY "N HT'"#	    !* If it is not printing, just display it!
	     0j t l FT--MORE--	   !* Give him a taste!
	     :fi f(u3)-40. "E	   !* If he want more!
	        .,zt fiw'"#	   !* Give it to him!
		q3-177. "E	   !* Else if he wants to flush!
		   fiw'		   !* Gobble!
		   FTFlushed.
''
	  FT

				   !* Terpri a bit!
	  ]..O			   !* Restore the directory buffer!
	  l			   !* move on to next entry for re-try!
	  0;'			   !* Stop and ask for more!
      l>			   !* Nope, try next entry!
  Q2 "E FTNot_Found?
'				   !* if no entry was found, point that out!
  FTMore?__			   !* ask the question!
  FI u2				   !* get the answer!
  <q2-27"E j 1,m(m.m&_Read_Line)LISP_Command?__u1 0u2 0;' !* ALT -- read new!
   Q2-"E 0u2 0;'		   !* If LF just use same one again, flush Q2!
				   !* so that failure will be detected!
   q2-_ "E 0u2 :i1 0;'	   !*  string will find next entry!
   q2-177."E F;NUFF'		   !* rubout exits!
   q2-15. "E -1fsreread F;NUFF'  !* CR flushes LF and exits!
   q2-140."G Q2-40.u2 '		   !* uppercasify!
   Q2-N "E F;NUFF'		   !* N exits!
   Q2-Q "E F;NUFF'		   !* Q exits!
   Q2-X "E F;NUFF'		   !* X Exits!
   Q2-14. "E :ft0		   !* ^L retypes!
   '"#FT			   !* Anything else documents!
Responses_at_this_point_are:
<space>		Print_next_entry
<LF>		Search_for_same_item_again
<altmode>	Read_a_new_item_to_search_for
<Control-L>	Redisplays
N,Q,X,<rubout>	exit.
'
   ft
More?__
   FIU2>			   !* Get his new command!
>				   !* Done?  OK, see you later!
0u..h				   !* don't inhibit re-display!


!& Setup DOCLISP Library:! !S Initialze, create ..D, etc.!

:i*..D[0			    !* 0 gets a copy of ..D
!*5:f0AA			   !* Modify our copy!
-*5:F0AA
+*5:F0AA
=*5:F0AA
>*5:F0AA
<*5:F0AA
**5:F0AA
\*5:F0AA
/*5:F0A/			    !* / does not terminate words etc.!
|*5:F0A|			    !* | doesn't either!
95 *5:F0AA			   !* Can't say ^^_ or ^^^Q_ or ^^^]^Q_!
Q0 m.vLISPDOC_Readtable	   !* and save it for future scan!

