<PACKAGE "EDIT">

<RENTRY DEADIT 
	EDIT 
	FREDIT
	ZNZN 
	|
	E-OVERPRINT
	E-VERBOSE
	E-PKG
	E-?FILE
	E-??FILE
	EDIT-TABLE 
	MACSET
	MAC
	BREAK 
	SHORT-PRINT> 

<USE "PP" "FR&">

<GDECL (E-?FILE E-??FILE) STRING>

<SETG CURSORS? <>>

<COND (<G=? ,MUDDLE 100>
       <SETG E-OVERPRINT <>>
       <SETG E-?FILE "<MDLLIB>EDIT?.DOC">
       <SETG E-??FILE "<MDLLIB>EDIT??.DOC">)
      (<SETG E-OVERPRINT T>
       <SETG E-?FILE "MUDBUG;EDIT? >">
       <SETG E-??FILE "MUDBUG;EDIT?? >">)>

<SETG E-VERBOSE <>>

<SETG E-PKG T>

<SETG CURL1 (ZNZN)>

<SETG CURL2 (|)>

<DEFINE EDIT ("OPTIONAL" JUNK
	      "AUX" (INCHAN ,INCHAN) (EDIT-ITEM '()) (TOP-ITEM ())
		    (COMSTR ,COMSTR) (JUNKSTR ,JUNKSTR) (GO-UP-LEVEL 0)
		    (GO-UP-RIGHT 0) (HANDLE (1)) (HANDLE2 (2)) SEARCH+ SEARCH-
		    (LAST-SEARCH ()) (FINISH <>) (PATH ()) (POS 0)
		    (WHERE <LLOC EDIT-ITEM>) (LOC-LOSER <>) (GETPATH <>) SPATH
		    P-ON MAC SPOS ITER ITCOM (CURCHAN .INCHAN) PATHLOC GOTO
		    (LAST-FRAME <FRAME>) SAVOBL TEMP LP)
   #DECL ((INCHAN CURCHAN) <SPECIAL CHANNEL>
	  (EDIT-ITEM) <SPECIAL <PRIMTYPE LIST>> 
	  (SAVOBL HANDLE HANDLE2 PATH SPATH) <SPECIAL LIST>
	  (LOC-LOSER P-ON) <SPECIAL <OR 'T FALSE>> (GOTO) <SPECIAL CURSOR>
	  (GETPATH) <SPECIAL <OR ATOM FALSE>> (WHERE) LOCATIVE
	  (JUNK TOP-ITEM SEARCH- SEARCH+ LAST-SEARCH FINISH SPOS ITER) <SPECIAL ANY>
	  (GO-UP-LEVEL GO-UP-RIGHT POS ITCOM) <SPECIAL FIX>
	  (COMSTR JUNKSTR) STRING (MAC) <SPECIAL ANY> (PATHLOC) <SPECIAL ANY>
	  (LAST-FRAME) <SPECIAL FRAME> (LAST-PATH LP) LIST)
   <COND (<NOT <GASSIGNED? CFHAND>>
	  <SETG CFHAND <ON "CHAR" ,CTRL-F-HANDLER 2 0 ,INCHAN>>)>
   <UNWIND
    <REPEAT NEW-ITEM ()
      #DECL ((NEW-ITEM) <SPECIAL ANY>)
      <COND (<AND <NOT <ASSIGNED? JUNK>>
		  <ASSIGNED? LAST-PATH>
		  <LEGAL? <1 <SET LP .LAST-PATH>>>
		  <==? LIST <PRIMTYPE <IN <1 .LP>>>>>
	     <SET WHERE <1 .LP>>
	     <AND <2 .LP> <SET OBLIST <2 .LP>>>
	     <SET PATH <REST .LP 2>>
	     <UNASSIGN LAST-PATH>)
	    (<ASSIGNED? JUNK>
	     <COND (<TYPE? .JUNK ATOM>
		    <COND (,E-PKG
			   <SET TEMP .JUNK>
			   <REPEAT (TMP)
				   <COND (<==? <ROOT> <SET TMP <OBLIST? .TEMP>>>
					  <SET TEMP <>>
					  <RETURN>)
					 (<==? .TMP <GETPROP PACKAGE OBLIST>>
					  <COND (<AND <GASSIGNED? .TEMP>
						      <TYPE? <SET TEMP ,.TEMP> LIST>>
						 <SET SAVOBL .OBLIST>
						 <SET OBLIST (!.TEMP !.SAVOBL)>)>
					  <RETURN>)
					 (<SET TEMP <GETPROP .TMP OBLIST>>)
					 (ELSE
					  <RETURN>)>>)>
		    <SET WHERE
			 <COND (<GASSIGNED? .JUNK> <GLOC .JUNK>)
			       (<ASSIGNED? .JUNK> <LLOC .JUNK>)
			       (T
				<SET EDIT-ITEM '#FALSE ("NO-VALUE")>
				<LLOC EDIT-ITEM>)>>)
		   (<==? <PRIMTYPE .JUNK> LIST>
		    <SET LOC-LOSER T>
		    <SET WHERE <LLOC JUNK>>)
		   (<AND <LOCATIVE? .JUNK>
			 <LEGAL? .JUNK>
			 <==? LIST <PRIMTYPE <IN .JUNK>>>>
		    <SET WHERE .JUNK>)
		   (<AND <TYPE? .JUNK RSUBR RSUBR-ENTRY>
			 <SET JUNK <3 .JUNK>>
			 <SET LOC-LOSER T>
			 <SET WHERE <LLOC JUNK>>>)
		   (<AND <TYPE? .JUNK FIX> <NOT <SET JUNK <FRM .JUNK>>>>)
		   (<AND <TYPE? .JUNK FRAME>
			 <LEGAL? .JUNK>
			 <NOT <EMPTY? <ARGS .JUNK>>>
			 <==? <PRIMTYPE <1 <ARGS .JUNK>>> LIST>>
		    <REPEAT ((FR .JUNK) (OB <1 <ARGS .FR>>) TUP TMP)
			    #DECL ((FR) FRAME
				   (OB) <PRIMTYPE LIST>
				   (TUP) TUPLE
				   (TMP) FORM)
			    <AND <MEMQ .OB <SET TUP <ARGS <SET FR <FRAME .FR>>>>>
				 <AGAIN>>
			    <AND <MEMQ <FUNCT .FR>
				       '[TOPLEVEL CALLER LISTEN ERROR MAPF MAPR]>
				 <RETURN>>
			    <AND <==? <FUNCT .FR> EVAL>
				 <TYPE? <1 .TUP> FORM>
				 <TYPE? <1 <SET TMP <1 .TUP>>> ATOM>
				 <OR <GASSIGNED? <1 .TMP>> <RETURN>>
				 <COND (<AND <==? <1 .TMP> APPLY>
					     <OR <NOT <TYPE? <2 .TMP> FUNCTION>>
						 <RETURN>>
					     <TYPE? <2 .TMP> FORM>
					     <NOT <EMPTY? <2 .TMP>>>
					     <OR <N==? <1 <2 .TMP>> LVAL> <RETURN>>
					     <==? <1 <2 .TMP>> GVAL>
					     <GASSIGNED? <2 <2 .TMP>>>>
					<PUTPROP <GLOC <2 <2 .TMP>>> DEFINE>)
				       (T)>
				 <TYPE? ,<1 .TMP> FUNCTION RSUBR RSUBR-ENTRY>
				 <PROG () <PUTPROP <GLOC <1 .TMP>> DEFINE>
					  <RETURN>>>>
		    <SET WHERE <AT <ARGS .JUNK> 1>>)>)>
      <SET EDIT-ITEM <IN .WHERE>>
      <COND (<N==? <GET .WHERE CURSOR>
		   <GET <CHTYPE .EDIT-ITEM LIST> CURSOR>>
	     <PUTPROP .WHERE CURSOR>
	     <AND .CURSORS? <ATTACH .WHERE .EDIT-ITEM>>)>
      <PUTPROP .WHERE DEFINE>
      <SET TOP-ITEM .WHERE>
      <COND (<==? LIST <PRIMTYPE .EDIT-ITEM>>
	     <REPEAT TOP-LEVEL ()
		     #DECL ((TOP-LEVEL) <SPECIAL ANY>)
		     <COND (.FINISH
			    <OR .LOC-LOSER
				<SET LAST-PATH
				     (.WHERE
				      <>
				      !.PATH)>>
			    <COND (<ASSIGNED? SAVOBL>
				   <PUT .LAST-PATH 2 .OBLIST>
				   <SET OBLIST .SAVOBL>)>
			    <RETURN T .NEW-ITEM>)
			   (.GETPATH
			    <SET GETPATH <>>
			    <SET SPATH .PATH>
			    <COND (<ASSIGNED? GOTO>
				   <COND (<==? .SEARCH+ .TOP-ITEM>
					  <UNASSIGN SEARCH+>)>
				   <SET PATH ()>)>)
			   (T
			    <UNASSIGN SEARCH+>
			    <UNASSIGN SEARCH->
			    <SET GO-UP-LEVEL 0>
			    <SET GO-UP-RIGHT 0>)>
		     <SCANNER .WHERE 0 .TOP-LEVEL .COMSTR .JUNKSTR>
		     <COND (<ASSIGNED? GOTO>
			    <ERR "ERROR, ILLEGAL CURSOR">
			    <UNASSIGN GOTO>)
			   (<ASSIGNED? ITER>
			    <ERR "ITERATION ENDED, SEARCH FAILED" <>>
			    <UNASSIGN ITER>)
			   (<ERR "ERROR, SEARCH FAILED">)>
		     <AND <ASSIGNED? SPATH>
			  <SET PATH .SPATH>
			  <UNASSIGN SPATH>
			  <AGAIN .TOP-LEVEL>>>)>
      <PRINC "
ATTEMPT TO EDIT ILLEGAL ITEM
">
      <SET EDIT-ITEM '#FALSE ("NO-VALUE")>
      <SET WHERE <LLOC EDIT-ITEM>>
      <SET JUNK 0>>
    <PROG ()
	  <AND ,CURSORS? <PUTPROP <IN .TOP-ITEM> CURSOR <GET .TOP-ITEM CURSOR>>>
	  <AND <ASSIGNED? SAVOBL> <SET OBLIST .SAVOBL>>
	  <INTFLUSH>
	  <UNASSIGN GOTO>
	  <UNASSIGN ITER>
	  <UNASSIGN ITCOM>>>>

<DEFINE FREDIT ()
	<REPEAT ((FR <FRAME>))
		#DECL ((FR) FRAME)
		<AND <==? <FUNCT .FR> TOPLEVEL> <RETURN <EDIT #FALSE ("NO FORMS")>>>
		<AND <==? <FUNCT .FR> EVAL>
		     <NOT <EMPTY? <ARGS .FR>>>
		     <TYPE? <1 <ARGS .FR>> FORM>
		     <RETURN <EDIT .FR>>>
		<SET FR <FRAME .FR>>>>

<NEWTYPE CURSOR VECTOR '<VECTOR ANY FIX ATOM>>

<NEWTYPE BREAK FORM>

<EVALTYPE BREAK FORM>

<DEFINE BREAKPRINT (OBJ "OPTIONAL" (AMP? <>) (OUTCHAN .OUTCHAN))
    #DECL ((OBJ) BREAK)
    <COND (<AND <ASSIGNED? SHORT-PRINT> <NOT .SHORT-PRINT>>
	   <PRIN1 <CHTYPE .OBJ FORM>>)
	  (<==? <1 .OBJ> BREAKA>
	   <COND (.AMP? <PRINC "<&>">)
		 (<PRIN1 <2 .OBJ>>)>
	   <PRINC <COND (,E-OVERPRINT "B|") ("||")>>)
	  (<==? <1 .OBJ> BREAKR>
	   <PRINC <COND (,E-OVERPRINT "B|") ("||")>>
	   <COND (.AMP? <PRINC "<&>">)
		 (<PRIN1 <2 .OBJ>>)>)
	  (ELSE
	   <PRINC <COND (,E-OVERPRINT "M|[") ("|M[")>>
	   <COND (.AMP?
		  <PRINC <COND (<FLATSIZE <4 .OBJ> 1> <4 .OBJ>)
			       (ELSE !\&)>>)
		 (<PRIN1 <4 .OBJ>>)>
	   <PRINC !\]>
	   <COND (.AMP? <PRINC "<&>">)
		 (<PRIN1 <2 .OBJ>>)>)>>

<PRINTTYPE BREAK ,BREAKPRINT>

<DEFINE BREAK-PPRINT (OBJ OUTCHAN M "AUX" (START <LINPOS .OUTCHAN>))
  #DECL ((OBJ) BREAK (OUTCHAN) CHANNEL (M) FIX (START) FIX)
  <COND (<==? <1 .OBJ> BREAKA>
	 <FORMS <2 .OBJ> .OUTCHAN .M>
	 <COND (<G=? <- <LINLNT .OUTCHAN> <LINPOS .OUTCHAN>> 2>
		<PRINC "||">)
	       (<CRLF>
		<INDENT-TO .START .OUTCHAN>
		<PRINC "||">)>)
	(<==? <1 .OBJ> BREAKR>
	 <PRINC "||">
	 <FORMS <2 .OBJ> .OUTCHAN <+ .M 2>>)
	(T
	 <PRINC "|M[">
	 <FORMS <4 .OBJ> .OUTCHAN <+ .M 3>>
	 <PRINC !\]>
	 <CRLF>
	 <INDENT-TO .START .OUTCHAN>
	 <FORMS <2 .OBJ> .OUTCHAN .M>)>>

<PUT BREAK PPRINT ,BREAK-PPRINT>

<SETG JUNKSTR <ISTRING 200 !\ >>

<SETG COMSTR <ISTRING 2 !\ >>

<SETG ALTSTRING "">

<SETG GOOD-CHRS
      
"!\"#$%&'(*+,-./0123456789:;<=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\^_`abcdefghijklmnopqrstuvwxyz{|}"
>

<SETG BREAK-CHRS "1234567890-\".,!(<[#         
">

<GDECL (JUNKSTR COMSTR ALTSTRING GOOD-CHRS BREAK-CHRS)
       STRING>

<DEFINE GET-COM (COMSTR JUNKSTR "AUX" NCHAR (INCHAN .CURCHAN)
		 (OUTCHAN .OUTCHAN)) 
	#DECL ((OUTCHAN) CHANNEL (NCHAR) CHARACTER
	       (COMSTR JUNKSTR VALUE) STRING)
	<REPEAT ()
		<PUT .COMSTR 1 !\ >
		<PUT .COMSTR 2 !\ >
		<READSTRING .JUNKSTR .INCHAN ,GOOD-CHRS>
		<SET NCHAR <NEXTCHR .INCHAN>>
		<COND (<==? .NCHAR !\>
		       <READCHR .INCHAN>
		       <RETURN <PUT .COMSTR 1 .NCHAR>>)
		      (<OR <AND <L=? 65 <CHTYPE .NCHAR FIX>>
				<G=? 90 <CHTYPE .NCHAR FIX>>>
			   <==? .NCHAR !\?>>
		       <READSTRING .COMSTR .INCHAN ,BREAK-CHRS>
		       <RETURN .COMSTR>)
		      (<AND <L=? 97 <CHTYPE .NCHAR FIX>>
			    <G=? 122 <CHTYPE .NCHAR FIX>>>
		       <READSTRING .COMSTR .INCHAN ,BREAK-CHRS>
		       <PUT .COMSTR 1 <ASCII <- <ASCII <1 .COMSTR>> 32>>>
		       <AND <L=? 97 <CHTYPE <2 .COMSTR> FIX>>
			    <G=? 122 <CHTYPE <2 .COMSTR> FIX>>
			    <PUT .COMSTR 2 <ASCII <- <ASCII <2 .COMSTR>> 32>>>>
		       <RETURN .COMSTR>)
		      (T
		       <PRINT <SET LAST-OUT <EVAL <READ .INCHAN>>>>
		       <TERPRI>)>>>

<DEFINE GET-NUM (JUNKSTR DFL "AUX" NCHAR TEMP (INCHAN .CURCHAN)
		 (OUTCHAN .OUTCHAN)) 
	#DECL ((JUNKSTR) STRING (NCHAR) CHARACTER (DFL VALUE) FIX
	       (INCHAN OUTCHAN) CHANNEL)
	<READSTRING .JUNKSTR .INCHAN ,GOOD-CHRS>
	<SET NCHAR <NEXTCHR .INCHAN>>
	<COND (<==? .NCHAR !\*> <READCHR .INCHAN> 100000)
	      (<OR <=? .NCHAR !\->
		   <AND <L=? 48 <CHTYPE .NCHAR FIX>>
			<G=? 57 <CHTYPE .NCHAR FIX>>>>
	       <SET TEMP <READ .INCHAN>>
	       <COND (<TYPE? .TEMP FIX> .TEMP)
		     (T
		      <PRINC "
ILLEGAL NUMBER ">
		      <PRIN1 .TEMP>
		      <TERPRI>
		      <READSTRING .JUNKSTR .INCHAN ,ALTSTRING>
		      0)>)
	      (T .DFL)>>

<DEFINE SCANNER THIS-LEVEL1 (WHERE POS UP-LEVEL COMSTR JUNKSTR
			    "AUX" EDIT-ITEM ITEM-LNTH TYP FROM TO HOLD HOLDANY
				  TEMP TEMP2 AMOUNT NEW-POS TF LST GLYPH
				  (CURSORS? ,CURSORS?) THIS-LEVEL
				  (OUTCHAN .OUTCHAN))
   #DECL ((WHERE) LOCATIVE (EDIT-ITEM LST) <PRIMTYPE LIST> (TYP GLYPH) ATOM
	  (HOLDANY TEMP TEMP2) ANY (OUTCHAN) CHANNEL
	  (ITEM-LNTH AMOUNT NEW-POS GO-UP-LEVEL GO-UP-RIGHT FROM TO TF) FIX
	  (HANDLE HANDLE2 HOLD PATH LST) <PRIMTYPE LIST> (POS) <SPECIAL FIX>
	  (THIS-LEVEL) <SPECIAL ACTIVATION> (UP-LEVEL) ACTIVATION
	  (COMSTR JUNKSTR) STRING (CURSORS?) <OR 'T FALSE>)
   <SET THIS-LEVEL .THIS-LEVEL1>
			; "This gets around an obscene interpreter bug....(clr)"
   <SET EDIT-ITEM <IN .WHERE>>
   <SET ITEM-LNTH <LENGTH .EDIT-ITEM>>
   <SET POS <MIN .POS .ITEM-LNTH>>
   <REPEAT ()
     <COND
      (<OR .FINISH .GETPATH>
       <SET PATH (.POS !.PATH)>
       <AGAIN .UP-LEVEL>)
      (<NOT <EMPTY? .PATH>>
       <SET POS <1 .PATH>>
       <COND (<NOT <EMPTY? <SET PATH <REST .PATH>>>>
	      <SCANNER <AT .EDIT-ITEM <+ .POS 1>>
		       0
		       .THIS-LEVEL
		       .COMSTR
		       .JUNKSTR>
	      <COND (<ASSIGNED? SEARCH+> <SET POS <+ .POS 1>>)>)>)
      (<ASSIGNED? SEARCH+>
       <COND (<==? .POS .ITEM-LNTH> <RETURN>)
	     (<COND (<AND <ASSIGNED? GOTO>
			  <==? .SEARCH+ <AT .EDIT-ITEM <+ .POS 1>>>>)
		    (<=? .SEARCH+ <NTH .EDIT-ITEM <+ .POS 1>>>)>
	      <UNASSIGN SEARCH+>
	      <COND (<ASSIGNED? GOTO>
		     <SCANNER <AT .EDIT-ITEM <+ .POS 1>>
			      0
			      .THIS-LEVEL
			      .COMSTR
			      .JUNKSTR>)
		    (<SET POS <+ .POS 1>>)>)
	     (<==? LIST <PRIMTYPE <NTH .EDIT-ITEM <+ .POS 1>>>>
	      <SCANNER <AT .EDIT-ITEM <+ .POS 1>>
		       0
		       .THIS-LEVEL
		       .COMSTR
		       .JUNKSTR>
	      <COND (<ASSIGNED? SEARCH+> <SET POS <+ .POS 1>>)>)
	     (<SET POS <+ .POS 1>>)>)
      (<ASSIGNED? GOTO>
       <COND (<AND <L=? <SET TEMP <2 .GOTO>> .ITEM-LNTH> <G=? .TEMP 0>>
	      <SET POS .TEMP>
	      <UNASSIGN GOTO>)
	     (<UNASSIGN GOTO>
	      <ERR "ERROR, ILLEGAL CURSOR">
	      <SET PATH .SPATH>
	      <UNASSIGN SPATH>
	      <AGAIN .TOP-LEVEL>)>)
      (<ASSIGNED? SEARCH->
       <COND (<0? .POS> <RETURN>)
	     (<=? .SEARCH- <NTH .EDIT-ITEM .POS>>
	      <UNASSIGN SEARCH->
	      <SET POS <- .POS 1>>)
	     (<==? LIST <PRIMTYPE <NTH .EDIT-ITEM .POS>>>
	      <SET POS <- .POS 1>>
	      <SCANNER <AT .EDIT-ITEM <+ 1 .POS>>
		       <LENGTH <NTH .EDIT-ITEM <+ 1 .POS>>>
		       .THIS-LEVEL
		       .COMSTR
		       .JUNKSTR>
	      <COND (<ASSIGNED? SEARCH+> <SET POS <+ .POS 1>>)>)
	     (<SET POS <- .POS 1>>)>)
      (<G? .GO-UP-LEVEL 0>
       <SET GO-UP-LEVEL <- .GO-UP-LEVEL 1>>
       <AGAIN .UP-LEVEL>)
      (<G? .GO-UP-RIGHT 0>
       <SET POS <+ .POS 1>>
       <COND (<G? <SET GO-UP-RIGHT <- .GO-UP-RIGHT 1>> 0>
	      <AGAIN .UP-LEVEL>)>)
      (<AND <GET-COM .COMSTR .JUNKSTR> <>>)
      (<OR <AND <ASSIGNED? EDIT-TABLE>
		<SET TEMP <MEMBER .COMSTR .EDIT-TABLE>>
		<APPLY <2 .TEMP> .COMSTR .WHERE .POS>>
	   <AND <GASSIGNED? EDIT-TABLE>
		<SET TEMP <MEMBER .COMSTR ,EDIT-TABLE>>
		<APPLY <2 .TEMP> .COMSTR .WHERE .POS>>>)
      (<=? .COMSTR "UC"> <USE "CURSOR">)
      (<=? .COMSTR "UM"> <USE "EMONIT" "MONITOR">)
      (<=? .COMSTR "R ">
       <SET NEW-POS <+ .POS <SET AMOUNT <GET-NUM .JUNKSTR 1>>>>
       <COND (<==? .AMOUNT 100000> <SET POS .ITEM-LNTH>)
	     (<OR <G? .NEW-POS .ITEM-LNTH> <L? .NEW-POS 0>>
	      <ERR "ERROR, ARG TO R OUT OF RANGE">)
	     (<SET POS .NEW-POS>)>)
      (<=? .COMSTR "SW">
       <SET NEW-POS <+ .POS 1>>
       <COND (<G? <+ .NEW-POS 1> .ITEM-LNTH>
	      <ERR "ERROR, CAN'T SWAP AT RIGHT EDGE">)
	     (ELSE
	      <SET POS .NEW-POS>
	      <SET TEMP <NTH .EDIT-ITEM .POS>>
	      <PUT .EDIT-ITEM .POS <NTH .EDIT-ITEM <+ .POS 1>>>
	      <PUT .EDIT-ITEM <+ .POS 1> .TEMP>)>)
      (<=? .COMSTR "L ">
       <SET NEW-POS <- .POS <SET AMOUNT <GET-NUM .JUNKSTR 1>>>>
       <COND (<==? .AMOUNT 100000> <SET POS 0>)
	     (<OR <G? .NEW-POS .ITEM-LNTH> <L? .NEW-POS 0>>
	      <ERR "ERROR, ARG TO L OUT OF RANGE">)
	     (<SET POS .NEW-POS>)>)
      (<AND <OR <=? .COMSTR "IT"> <=? .COMSTR "DO">>
	    <SET ITER <GET-NUM .JUNKSTR 1>>
	    <SET ITCOM 0>
	    <PUT .COMSTR 1 !\M>
	    <PUT .COMSTR 2 !\ >
	    <>>)
      (<=? .COMSTR "M ">
       <READSTRING .JUNKSTR .INCHAN ,GOOD-CHRS>
       <SET MAC <READ .INCHAN>>
       <AND <TYPE? .MAC FORM> <SET MAC <EVAL .MAC>>>
       <COND (<TYPE? .MAC STRING> <MACSET>)
	     (<ERR "ERROR, MACRO NOT A STRING">)>)
      (<=? .COMSTR "SU">
       <SET TEMP <INTREAD .INCHAN>>
       <SET TEMP2 <INTREAD .INCHAN>>
       <SET ITCOM 0>
       <SET ITER 100000>
       <SET MAC
	    <STRING "S " <UNPARSE .TEMP2> "LC " <UNPARSE .TEMP>>>
       <MACSET>)
      (<=? .COMSTR "QR">
       <COND (<G=? <SET AMOUNT <GET-NUM .JUNKSTR -1>> 0>
	      <SET JUNK <FRM .AMOUNT>>)>
       <CRLF>
       <COND (<AND <ASSIGNED? JUNK> <TYPE? .JUNK FRAME> <LEGAL? .JUNK>>
	      <RETRY .JUNK>)
	     (<RETRY <FRAME <FRAME>>>)>)
      (<OR <=? .COMSTR "U "> <=? .COMSTR "UL">>
       <SET GO-UP-LEVEL <SET AMOUNT <GET-NUM .JUNKSTR 1>>>
       <AND <==? .AMOUNT 100000> <AGAIN .TOP-LEVEL>>)
      (<OR <=? .COMSTR "D "> <=? .COMSTR "DR">>
       <COND (<OR <==? .POS .ITEM-LNTH>
		  <NOT <==? LIST <PRIMTYPE <NTH .EDIT-ITEM <+ .POS 1>>>>>>
	      <ERR "ERROR, CAN'T GO DOWN">)
	     (T
	      <SCANNER <AT .EDIT-ITEM <+ .POS 1>>
		       0
		       .THIS-LEVEL
		       .COMSTR
		       .JUNKSTR>
	      <COND (<ASSIGNED? SEARCH+> <SET POS <+ .POS 1>>)>)>)
      (<=? .COMSTR "F "> <SET POS 0>)
      (<=? .COMSTR "B "> <SET POS .ITEM-LNTH>)
      (<=? .COMSTR "UT"> <AGAIN .TOP-LEVEL>)
      (<=? .COMSTR "V "> <SETG E-VERBOSE <NOT ,E-VERBOSE>>)
      (<=? .COMSTR " ">
       <COND (<OR ,E-VERBOSE <==? !\ <NEXTCHR .INCHAN>>>
	      <SAMP .EDIT-ITEM .POS>)>)
      (<OR <=? .COMSTR "PU"> <=? .COMSTR "PT">>
       <UNWIND <PROG ()
		     <PUTREST .HANDLE .EDIT-ITEM>
		     <SET HOLD <REST .HANDLE .POS>>
		     <PUTREST .HOLD <PUTREST <COND (,E-OVERPRINT ,CURL1) (,CURL2)>
					     <SET HOLD <REST .HOLD>>>>
		     <SET EDIT-ITEM <CHTYPE <REST .HANDLE> <TYPE .EDIT-ITEM>>>
		     <SETLOC .WHERE .EDIT-ITEM>
		     <EPRINT <IN <COND (<=? .COMSTR "PU"> .WHERE) (.TOP-ITEM)>>>
		     <PUTREST .HANDLE .EDIT-ITEM>
		     <PUTREST <REST .HANDLE .POS> <REST .HANDLE <+ .POS 2>>>
		     <SET EDIT-ITEM <CHTYPE <REST .HANDLE> <TYPE .EDIT-ITEM>>>
		     <SETLOC .WHERE .EDIT-ITEM>>
	       <PROG ()
		     <PUTREST .HANDLE .EDIT-ITEM>
		     <PUTREST <REST .HANDLE .POS> <REST .HANDLE <+ .POS 2>>>
		     <SET EDIT-ITEM <CHTYPE <REST .HANDLE> <TYPE .EDIT-ITEM>>>
		     <SETLOC .WHERE .EDIT-ITEM>>>)
      (<=? .COMSTR "P ">
       <COND (<==? .POS .ITEM-LNTH> <ERR "CAN'T PRINT, AT RIGHT EDGE">)
	     (T <EPRINT <NTH .EDIT-ITEM <+ .POS 1>>>)>
       <TERPRI>)
      (<OR <=? .COMSTR "S "> <=? .COMSTR "SR">>
       <SET GETPATH T>
       <READSTRING .JUNKSTR .INCHAN ,GOOD-CHRS>
       <COND (<==? <NEXTCHR .INCHAN> !\> <SET SEARCH+ .LAST-SEARCH>)
	     (T <SET SEARCH+ <SET LAST-SEARCH <READ .INCHAN>>>)>)
      (<=? .COMSTR "SL">
       <SET GETPATH T>
       <READSTRING .JUNKSTR .INCHAN ,GOOD-CHRS>
       <COND (<==? <NEXTCHR .INCHAN> !\> <SET SEARCH- .LAST-SEARCH>)
	     (T <SET SEARCH- <SET LAST-SEARCH <READ .INCHAN>>>)>)
      (<=? .COMSTR "UR">
       <SET GO-UP-RIGHT <GET-NUM .JUNKSTR 1>>
       <AGAIN .UP-LEVEL>)
      (<=? .COMSTR "DL">
       <COND (<OR <0? .POS>
		  <NOT <==? LIST <PRIMTYPE <NTH .EDIT-ITEM .POS>>>>>
	      <ERR "ERROR, CAN'T GO DOWN">)
	     (T
	      <SET POS <- .POS 1>>
	      <SCANNER <AT .EDIT-ITEM <+ .POS 1>>
		       <LENGTH <NTH .EDIT-ITEM <+ 1 .POS>>>
		       .THIS-LEVEL
		       .COMSTR
		       .JUNKSTR>
	      <COND (<ASSIGNED? SEARCH+> <SET POS <+ .POS 1>>)>)>)
      (<=? .COMSTR "K ">
       <SET FROM
	    <MIN .POS <+ .POS <SET AMOUNT <GET-NUM .JUNKSTR 1>>>>>
       <SET TO <MAX .POS <+ .POS .AMOUNT>>>
       <AND <==? .AMOUNT 100000> <SET TO .ITEM-LNTH>>
       <COND (<OR <L? .FROM 0> <G? .TO .ITEM-LNTH>>
	      <ERR "ERROR, ARG OUT OF RANGE TO K">)
	     (T
	      <PUTREST .HANDLE .EDIT-ITEM>
	      <PUTREST <REST .HANDLE .FROM> <REST .HANDLE <+ .TO 1>>>
	      <SET EDIT-ITEM <CHTYPE <REST .HANDLE> <TYPE .EDIT-ITEM>>>
	      <SET POS <+ .POS <MIN 0 .AMOUNT>>>
	      <SETLOC .WHERE .EDIT-ITEM>
	      <SET ITEM-LNTH <LENGTH .EDIT-ITEM>>
	      <AND .CURSORS? <CUP- .WHERE .POS <- .TO .FROM>>>)>)
      (<COND (<=? .COMSTR "I "> <SET TF 0>)
	     (<=? .COMSTR "G "> <SET TF 1>)
	     (<=? .COMSTR "IG"> <SET TF -1>)>
       <PUTREST .HANDLE .EDIT-ITEM>
       <SET HOLD <REST .HANDLE .POS>>
       <REPEAT ((NUM 0))
	       <READSTRING .JUNKSTR .INCHAN ,GOOD-CHRS>
	       <COND (<==? !\ <NEXTCHR .INCHAN>>
		      <AND .CURSORS? <CUP+ .WHERE <- .POS .NUM> .NUM>>
		      <RETURN>)>
	       <SET TEMP <READ .INCHAN>>
	       <COND (<1? .TF> <SET TEMP <EVAL .TEMP>>)
		     (<L? .TF 0>
		      <COND (<TYPE? .TEMP ATOM>
			     <COND (<GASSIGNED? .TEMP>
				    <COND (<TYPE? ,.TEMP FUNCTION>
					   <SET TEMP
						<FORM DEFINE .TEMP !,.TEMP>>)
					  (<AND <TYPE? ,.TEMP MACRO>
						<TYPE? <1 ,.TEMP> FUNCTION>>
					   <SET TEMP
						<FORM DEFMAC .TEMP !<1 ,.TEMP>>>)
					  (ELSE
					   <SET TEMP
						<FORM SETG .TEMP ,.TEMP>>)>)
				   (<ASSIGNED? .TEMP>
				    <SET TEMP <FORM SET .TEMP ..TEMP>>)
				   (ELSE <ERR "WARNING, ATOM HAS NO VALUE">)>)
			    (ELSE <ERR "WARNING, ARG TO IG NOT AN ATOM">)>)>
	       <PUTREST <SET TEMP (.TEMP)> <REST .HOLD>>
	       <PUTREST .HOLD .TEMP>
	       <SET HOLD <REST .HOLD>>
	       <AND .CURSORS? <ATTACH <AT .HOLD> .TEMP>>
	       <SET NUM <+ .NUM 1>>
	       <SET POS <+ 1 .POS>>>
       <SET EDIT-ITEM <CHTYPE <REST .HANDLE> <TYPE .EDIT-ITEM>>>
       <SETLOC .WHERE .EDIT-ITEM>
       <SET ITEM-LNTH <LENGTH .EDIT-ITEM>>)
      (<=? .COMSTR "C ">
       <COND (<==? .POS .ITEM-LNTH>
	      <ERR "ERROR, CAN'T CHANGE, AT RIGHT EDGE">)
	     (T
	      <SET LST <REST .EDIT-ITEM .POS>>
	      <SET LAST-IN <INTREAD .INCHAN>>
	      <COND (<N==? <1 .LST> .LAST-IN>
		     <PUT .LST 1 .LAST-IN>
		     <PUTPROP <AT .LST> CURSOR>
		     <AND .CURSORS? <ATTACH <AT .LST> .LAST-IN>>)>)>)
      (<=? .COMSTR "C:">
       <COND (<==? .POS .ITEM-LNTH>
	      <ERR "ERROR, CAN'T CHANGE TYPE, AT RIGHT EDGE">)
	     (<AND <SET TEMP <INTREAD .INCHAN>>
		   <COND (<NOT <TYPE? .TEMP ATOM>> <ERR "ERROR, BAD ARG TO C:">)
			 (<NOT <VALID-TYPE? .TEMP>>
			  <ERR "ERROR, ARG TO C: NOT TYPE NAME">)>>)
	     (<==? <PRIMTYPE <NTH .EDIT-ITEM <+ 1 .POS>>>
		   <TYPEPRIM .TEMP>>
	      <PUT .EDIT-ITEM
		   <+ .POS 1>
		   <CHTYPE <NTH .EDIT-ITEM <+ .POS 1>> .TEMP>>)
	     (T
	      <PUT .EDIT-ITEM
		   <+ .POS 1>
		   <CHTYPE <APPLY ,<TYPEPRIM .TEMP>
				  !<NTH .EDIT-ITEM <+ .POS 1>>>
			   .TEMP>>
	      <PUTPROP <AT .EDIT-ITEM <+ .POS 1>> CURSOR>)>)
      (<=? .COMSTR "K*">
       <COND (<==? .POS .ITEM-LNTH>
	      <ERR "ERROR, CAN'T EXTRACT AT RIGHT EDGE">)
	     (T
	      <SET TEMP <INTREAD .INCHAN>>
	      <COND (<TYPE? .TEMP ATOM>
		     <SET GLYPH .TEMP>
		     <SET TEMP <INTREAD .INCHAN>>)
		    (<SET GLYPH *>)>
	      <COND (<OR <NOT <STRUCTURED? <NTH .EDIT-ITEM <+ .POS 1>>>>
			 <NOT <STRUCTURED? .TEMP>>>
		     <ERR "ERROR, NON-STRUCTURED ARG TO EXTRACT">)
		    (<NOT <SET TEMP
			       <GETKSTAR <NTH .EDIT-ITEM <+ .POS 1>>
					 .GLYPH
					 .TEMP>>>
		     <ERR "">)
		    (T
		     <PUTREST .HANDLE .EDIT-ITEM>
		     <PUTREST .HANDLE2 .TEMP>
		     <PUTREST <REST .HANDLE2 <- <LENGTH .HANDLE2> 1>>
			      <REST .EDIT-ITEM <+ .POS 1>>>
		     <PUTREST <REST .HANDLE .POS> <REST .HANDLE2>>
		     <SET EDIT-ITEM <CHTYPE <REST .HANDLE> <TYPE .EDIT-ITEM>>>
		     <SET ITEM-LNTH <LENGTH .EDIT-ITEM>>
		     <SETLOC .WHERE .EDIT-ITEM>)>)>)
      (<=? .COMSTR "K:">
       <COND (<OR <==? .POS .ITEM-LNTH>
		  <NOT <==? LIST <PRIMTYPE <NTH .EDIT-ITEM <+ .POS 1>>>>>>
	      <ERR "ERROR, BAD K:">)
	     (T
	      <AND .CURSORS?
		   <CUP+ .WHERE
			 .POS
			 <- <LENGTH <NTH .EDIT-ITEM <+ .POS 1>>> 1>>>
	      <AND .CURSORS? <CUP^ .WHERE .POS .EDIT-ITEM>>
	      <PUTREST .HANDLE .EDIT-ITEM>
	      <PUTREST .HANDLE2 <NTH .EDIT-ITEM <+ .POS 1>>>
	      <PUTREST <REST .HANDLE2 <- <LENGTH .HANDLE2> 1>>
		       <REST .EDIT-ITEM <+ .POS 1>>>
	      <PUTREST <REST .HANDLE .POS> <REST .HANDLE2>>
	      <SET EDIT-ITEM <CHTYPE <REST .HANDLE> <TYPE .EDIT-ITEM>>>
	      <SET ITEM-LNTH <LENGTH .EDIT-ITEM>>
	      <SETLOC .WHERE .EDIT-ITEM>)>)
      (<=? .COMSTR "I:">
       <READSTRING .JUNKSTR .INCHAN ,GOOD-CHRS>
       <COND (<NOT <OR <==? <NEXTCHR .INCHAN> !\>
		       <MEMQ <NEXTCHR .INCHAN> ,BREAK-CHRS>>>
	      <SET TYP <READ .INCHAN>>)
	     (T <SET TYP LIST>)>
       <SET AMOUNT <GET-NUM .JUNKSTR 1>>
       <AND <==? .AMOUNT 100000> <SET AMOUNT <- .ITEM-LNTH .POS>>>
       <COND (<OR <L? .AMOUNT 0> <G? <+ .POS .AMOUNT> .ITEM-LNTH>>
	      <ERR "ERROR, BAD ARG TO I:">)
	     (<NOT <VALID-TYPE? .TYP>>
	      <ERR "ERROR, ARG TO I: NOT TYPE NAME">)
	     (<NOT <==? <TYPEPRIM .TYP> LIST>>
	      <ERR "ERROR, TYPEPRIM OF ARG TO I: NOT LIST">)
	     (T
	      <SET HOLD <REST .EDIT-ITEM <+ .POS .AMOUNT>>>
	      <PUTREST .HANDLE .EDIT-ITEM>
	      <PUTREST <REST .HANDLE <+ .POS .AMOUNT>> ()>
	      <PUTREST <REST .HANDLE .POS>
		       <PUTREST <SET TEMP
				     <LIST <CHTYPE <REST .HANDLE <+ .POS 1>>
						   .TYP>>>
				.HOLD>>
	      <SET EDIT-ITEM <CHTYPE <REST .HANDLE> <TYPE .EDIT-ITEM>>>
	      <SET ITEM-LNTH <LENGTH .EDIT-ITEM>>
	      <SETLOC .WHERE .EDIT-ITEM>
	      <AND .CURSORS? <CUP* .WHERE .POS .AMOUNT .EDIT-ITEM <>>>)>)
      (<=? .COMSTR "I*">
       <COND
	(<==? .POS .ITEM-LNTH>
	 <ERR "ERROR, CAN'T IMBED AT RIGHT EDGE">)
	(T
	 <SET TEMP <INTREAD .INCHAN>>
	 <COND (<TYPE? .TEMP ATOM>
		<SET GLYPH .TEMP>
		<SET TEMP <INTREAD .INCHAN>>)
	       (<SET GLYPH *>)>
	 <REPEAT ((TF 0))
		 <COND (<NOT <0? .TF>>
			<SET POS <+ .POS 1>>
			<AND <==? <NEXTCHR .INCHAN> <ASCII 27>> <RETURN>>
			<AND <==? .POS .ITEM-LNTH>
			     <ERR "ERROR, CAN'T IMBED AT RIGHT EDGE">>
			<SET TEMP <READ .INCHAN>>)>
		 <SET TF 1>
		 <COND (<NOT <STRUCTURED? .TEMP>>
			<ERR "ERROR, ARGUMENT TO IMBED NOT STRUCTURED">)
		       (T
			<AND <L? <SET AMOUNT
				      <GETSTAR .TEMP
					       .GLYPH
					       <REST .EDIT-ITEM .POS>
					       0
					       T>>
				 0>
			     <SET AMOUNT <- .AMOUNT>>
			     <CRLF>
			     <PRINC "WARNING, IMBED NOT COMPLETED.  ">
			     <PRIN1 .AMOUNT>
			     <PRINC " OBJECTS INSERTED.">>
			<PUTREST .HANDLE .EDIT-ITEM>
			<PUTREST <REST .HANDLE .POS>
				 (.TEMP !<REST .HANDLE <+ .POS .AMOUNT 1>>)>
			<SET EDIT-ITEM
			     <CHTYPE <REST .HANDLE> <TYPE .EDIT-ITEM>>>
			<SET ITEM-LNTH <LENGTH .EDIT-ITEM>>
			<SETLOC .WHERE .EDIT-ITEM>
			<AND <0? .AMOUNT>
			     <CRLF>
			     <PRINC "WARNING, NO IMBED INDICATOR">>
			<AND .CURSORS?
			     <CUP* .WHERE .POS .AMOUNT .EDIT-ITEM T>>)>>)>)
      (<OR <AND <=? .COMSTR "BK"> <SET TEMP BREAKR>>
	   <AND <=? .COMSTR "BA"> <SET TEMP BREAKA>>>
       <COND (<==? .POS .ITEM-LNTH>
	      <ERR "ERROR, CAN'T PUT BREAK AT RIGHT EDGE">)
	     (T
	      <COND (<AND <TYPE? <SET TEMP2 <NTH .EDIT-ITEM <+ .POS 1>>> BREAK>
			  <==? <1 .TEMP> .TEMP>>
		     <SET HOLD .TEMP2>
		     <PUTREST <REST .HOLD> ()>)
		    (T 
	             <PUT .EDIT-ITEM
			  <+ .POS 1>
			  <SET HOLD
			       <CHTYPE (.TEMP .TEMP2) BREAK>>>
		     <PUTPROP .TOP-ITEM
			      BREAKS
			      <LIST <AT .EDIT-ITEM <+ .POS 1>>
				    !<GETPROP .TOP-ITEM BREAKS>>>)>
	      <REPEAT ()
		      <READSTRING .JUNKSTR .INCHAN ,GOOD-CHRS>
		      <SET HOLD <REST .HOLD>>
		      <COND (<==? <NEXTCHR .INCHAN> !\> <RETURN>)>
		      <PUTREST .HOLD (<READ .INCHAN>)>>)>)
      (<=? .COMSTR "KT">
       <COND (<==? .POS .ITEM-LNTH>
	      <ERR "ERROR, CAN'T KT, CURSOR AT RIGHT EDGE">)
	     (<TYPE? <SET HOLDANY <NTH .EDIT-ITEM <+ .POS 1>>> BREAK>
	      <PUT .EDIT-ITEM <+ .POS 1> <2 .HOLDANY>>)
	     (<ERR "ERROR, OBJECT NOT A BREAKPOINT">)>)
      (<=? .COMSTR "KB">
       <SET HOLD <GETPROP .TOP-ITEM BREAKS>>
       <PUTPROP .TOP-ITEM BREAKS>
       <REPEAT ()
	       <COND (<EMPTY? .HOLD> <RETURN>)>
	       <COND (<TYPE? <SET HOLDANY <IN <1 .HOLD>>> BREAK>
		      <SETLOC <1 .HOLD> <2 .HOLDANY>>)>
	       <SET HOLD <REST .HOLD>>>)
      (<COND (<=? .COMSTR "O ">
	      <SET JUNK <EVAL <INTREAD .INCHAN>>>
	      T)
	     (<=? .COMSTR "OT">
	      <PROG (E)
		    #DECL ((E) ANY)
		    <COND (<TYPE? <SET E <NTH .EDIT-ITEM <+ .POS 1>>> ATOM>
			   <SET JUNK .E>)
			  (<AND <TYPE? .E FORM> <NOT <EMPTY? .E>> <TYPE? <1 .E> ATOM>>
			   <SET JUNK <1 .E>>)
			  (ELSE <ERR "ERROR, CAN'T OPEN">)>>
	      T)>
       <PUTPROP <CHTYPE <IN .TOP-ITEM> LIST>
	    CURSOR
	    <GET .TOP-ITEM CURSOR>>
       <AGAIN .NEW-ITEM>)
      (<=? .COMSTR "X ">
       <COND (<==? .POS .ITEM-LNTH>
	      <ERR "ERROR, CAN'T X, CURSOR AT RIGHT EDGE">)
	     (<NOT <TYPE? <SET TEMP2 <INTREAD .INCHAN>> ATOM>>
	      <ERR "ERROR, ARGUMENT TO X NOT ATOM">)
	     (T
	      <SET LST <REST .EDIT-ITEM .POS>>
	      <COND (<SET TEMP <GET <AT .LST> CURSOR>>
		     <PUTPROP <CHTYPE <1 .LST> LIST> CURSOR .TEMP>)>
	      <SET .TEMP2 <1 .LST>>)>)
      (<=? .COMSTR "Q ">
       <PUTPROP <CHTYPE <IN .TOP-ITEM> LIST>
	    CURSOR
	    <GET .TOP-ITEM CURSOR>>
       <SET FINISH T>)
      (<OR <=? .COMSTR "? "> <=? .COMSTR "??">>
       <PROG (CHN)
	     #DECL ((CHN) <OR CHANNEL FALSE>)
	     <UNWIND <PROG ()
			   <COND (<SET CHN
				       <OPEN "READ"
					     <COND (<=? .COMSTR "? "> ,E-?FILE)
						   (,E-??FILE)>>>
				  <FILECOPY .CHN .OUTCHAN>
				  <CLOSE .CHN>)
				 (<CRLF>
				  <PRINC "Help file not found:  ">
				  <PRINC .CHN>
				  <CRLF>)>>
		     <COND (<AND .CHN <NOT <0? <1 .CHN>>>> <CLOSE .CHN>)>>>)
      (T
       <PRINC "
ERROR, UNRECOGNIZED COMMAND ">
       <PRINC .COMSTR>
       <TERPRI>
       <ERRFLUSH>)>>>

<DEFINE BREAKR ('TODO "OPTIONAL" ('TEST T) "ARGS" PO)
	#DECL ((PO) LIST)
	<PROG ((QUICK-RUN T)
	       (INCHAN ,INCHAN) (OUTCHAN ,OUTCHAN))
	      #DECL ((QUICK-RUN INCHAN OUTCHAN) <SPECIAL ANY>)
	      <COND (<NOT <EVAL .TEST>> <RETURN>)>
	      <PRINC "**BREAK**">
	      <P&EVAL .PO>
	      <LISTEN>>
	<EVAL .TODO>>

<DEFINE BREAKA ('TODO "OPTIONAL" ('TEST T) "ARGS" PO)
	#DECL ((PO) LIST)
	<PROG ((QUICK-RUN T) VALUE
	       (INCHAN ,INCHAN) (OUTCHAN ,OUTCHAN))
	      #DECL ((QUICK-RUN INCHAN OUTCHAN VALUE) <SPECIAL ANY>)
	      <SET VALUE <EVAL .TODO>>
	      <COND (<NOT <EVAL .TEST>> <RETURN .VALUE>)>
	      <PRINC "**BREAK-AFTER**">
	      <P&EVAL .PO>
	      <LISTEN>
	       .VALUE>>

<DEFINE P&EVAL (LST "AUX" (OUTCHAN .OUTCHAN))
   #DECL ((OUTCHAN) CHANNEL)
   <MAPF <>
	 <FUNCTION (X)
		   <PRINT .X>
		   <SET X <EVAL .X>>
		   <PRINC "= ">
		   <&1 .X>>
	 .LST>>

<DEFINE SAMP (OBJ POS
	      "OPTIONAL" (TERPRI? T)
	      "AUX" (LOBJ <REST .OBJ 0>) (CPOS 0) DIS IT (OBJL <LENGTH .OBJ>)
		    (OUTCHAN ,OUTCHAN) (AMT <- <13 .OUTCHAN> <14 .OUTCHAN>>))
	#DECL ((OBJ) <PRIMTYPE LIST> (IT) ANY (LOBJ) LIST
	       (POS CPOS DIS OBJL AMT) FIX
	       (OUTCHAN) <CHANNEL [12 ANY] FIX FIX>)
	<AND .TERPRI? <TERPRI>>
	<COND (<TYPE? .OBJ LIST> <PRINC "(">)
	      (<TYPE? .OBJ FORM> <PRINC "<">)
	      (<TYPE? .OBJ SEGMENT> <PRINC "!<">)
	      (<PRINC !\#> <PRIN1 <TYPE .OBJ>> <PRINC " (">)>
	<COND (<FLATSIZE .OBJ .AMT>
	       <REPEAT ()
		       <COND (<==? .CPOS .POS> <PRINC <COND (,E-OVERPRINT " XMZ ")
							    (" | ")>>)
			     (<NOT <OR <==? .CPOS .OBJL> <0? .CPOS>>>
			      <PRINC " ">)>
		       <COND (<==? .CPOS .OBJL> <RETURN>)>
		       <SET CPOS <+ .CPOS 1>>
		       <PRIN1 <1 .LOBJ>>
		       <SET LOBJ <REST .LOBJ>>>)
	      (T
	       <COND (<AND <G? .POS 3> <G? .OBJL 6>>
		      <PRINC "&..">
		      <SET LOBJ
			   <REST .OBJ
				 <SET CPOS <MIN <- .POS 3> <- .OBJL 6>>>>>)>
	       <REPEAT ((N <MIN <- .OBJL .CPOS> 6>))
		       #DECL ((N) FIX)
		       <COND (<==? .CPOS .POS> <PRINC <COND (,E-OVERPRINT " XMZ ")
							    (" | ")>>)
			     (<NOT <OR <==? .CPOS .OBJL> <0? .CPOS>>>
			      <PRINC " ">)>
		       <COND (<0? .N> <RETURN>)>
		       <SET DIS <MAX <- .CPOS .POS -1> <- .POS .CPOS>>>
		       <SET IT <1 .LOBJ>>
		       <COND (<OR <MONAD? .IT> <FLATSIZE .IT </ 40 .DIS>>>
			      <PRIN1 .IT>)
			     (T
			      <REPEAT ()
				      <COND (<TYPE? .IT LIST>
					     <PRINC "(&)">
					     <RETURN>)
					    (<TYPE? .IT BREAK>
					     <BREAKPRINT .IT T>
					     <RETURN>)
					    (<TYPE? .IT VECTOR TUPLE>
					     <PRINC "[&]">
					     <RETURN>)
					    (<TYPE? .IT UVECTOR>
					     <PRINC "![&!]">
					     <RETURN>)
					    (<TYPE? .IT STRING>
					     <PRINC "\"&\"">
					     <RETURN>)
					    (<TYPE? .IT FORM>
					     <PRINC "<&>">
					     <RETURN>)
					    (<TYPE? .IT SEGMENT>
					     <PRINC "!<&!>">
					     <RETURN>)
					    (T
					     <PRINC "#">
					     <PRIN1 <TYPE .IT>>
					     <PRINC " ">
					     <SET IT <REST .IT 0>>)>>)>
		       <SET CPOS <+ .CPOS 1>>
		       <SET LOBJ <REST .LOBJ>>
		       <SET N <- .N 1>>>
	       <COND (<NOT <EMPTY? .LOBJ>> <PRINC "&..">)>)>
	<COND (<TYPE? .OBJ FORM> <PRINC ">">)
	      (<TYPE? .OBJ SEGMENT> <PRINC "!>">)
	      (T <PRINC ")">)>
	<AND .TERPRI? <TERPRI>>
	T>

<DEFINE CTRL-F-HANDLER (CHAR CHAN) 
	#DECL ((CHAR) CHARACTER)
	<COND (<AND <NOT <ASSIGNED? THIS-LEVEL>>
		    <NOT <ASSIGNED? TOP-ITEM>>
		    <GASSIGNED? CFHAND>>
	       <OFF ,CFHAND>
	       <GUNASSIGN CFHAND>)
	      (<OR <==? .CHAR <ASCII 6>>
		   <AND <==? .CHAR <ASCII 19>> <==? .LAST-FRAME <FRAME>>>>
	       <INT-LEVEL 0>
	       <RESET .CHAN>
	       <UNASSIGN ITER>
	       <UNASSIGN ITCOM>
	       <UNASSIGN SEARCH+>
	       <UNASSIGN SEARCH->
	       <CRLF>
	       <AND <ASSIGNED? THIS-LEVEL>
		    <PUT .CHAN 14 17179869211>
		    <AGAIN .THIS-LEVEL>>)>>

<DEFINE DEADIT ("AUX" TMP)
	#DECL ((TMP) OBLIST) 
	<COND (<GASSIGNED? CFHAND>
	       <OFF ,CFHAND>
	       <GUNASSIGN CFHAND>)>
	<MAPF <>
	      <FUNCTION (L) #DECL ((L) <LIST [REST ATOM]>)
	        <MAPF <> ,GUNASSIGN .L>>
	      <SET TMP <GET IEDIT OBLIST>>>
	<UNASSIGN LAST-PATH>
	<UNASSIGN EDIT-TABLE>
	<GUNASSIGN DEADIT>
	<GUNASSIGN EDIT>
	<GUNASSIGN FREDIT>
	<MAPF <> ,REMOVE ![IEDIT
			   FREDIT
			   ZNZN
			   |
			   E-OVERPRINT
			   E-VERBOSE
			   E-?FILE
			   E-??FILE
			   EDIT
			   DEADIT
			   EDIT-TABLE
			   EXPFLOAD
			   BREAK
			   SHORT-PRINT!]>
	<L-UNUSE "EDIT">
	"It's a Foo--">

<DEFINE GETKSTAR KSTAR (OBJ GLYPH TEMP "AUX" VAL)
	#DECL ((OBJ TEMP) STRUCTURED (GLYPH) ATOM (KSTAR) <SPECIAL ACTIVATION>
	       (VAL VALUE) <OR FALSE LIST>)
	<SET VAL <GETKSTAR1 .OBJ .GLYPH .TEMP>>
	<COND (<AND .VAL <EMPTY? .VAL>>
	       <PRINC "
ERROR, EXTRACT INDICATOR UNMATCHED.">
	       <>)
	      (.VAL)>>

<DEFINE GETKSTAR1 (OBJ GLYPH TEMP)
	#DECL ((OBJ) ANY (TEMP) STRUCTURED (GLYPH) ATOM)
	<COND (<N==? <TYPE .OBJ> <TYPE .TEMP>>
	       <PRINC "
ERROR, TYPES DIFFER IN EXTRACT">
	       <RETURN <> .KSTAR>)
	      (<G? <LENGTH .TEMP> <LENGTH .OBJ>>
	       <PRINC "
ERROR, EXTRACT TEMPLATE LONGER THAN EXTRACT ITEM">
	       <RETURN <> .KSTAR>)
	      (<MAPF ,LIST
		     <FUNCTION (ITM1 ITM2)
			       #DECL ((ITM1 ITM2) ANY)
			       <COND (<==? .ITM2 .GLYPH>
				      <MAPRET .ITM1>)
				     (<STRUCTURED? .ITM2>
				      <MAPRET !<GETKSTAR1 .ITM1 .GLYPH .ITM2>>)
				     (<MAPRET>)>>
		     .OBJ
		     .TEMP>)>>

<DEFINE GETSTAR (OBJ GLYPH ETEM
		 "OPTIONAL" (AMOUNT 0) (HACK? T)
		 "AUX" NAMOUNT CURS LOC)
   #DECL ((OBJ) STRUCTURED (GLYPH) ATOM (VALUE AMOUNT NAMOUNT) FIX (ETEM) LIST
	  (LOC) LOCL (CURS) <<PRIMTYPE LIST> [REST CURSOR]>)
   <SET HACK? <AND .HACK? <==? <PRIMTYPE .OBJ> LIST>>>
   <MAPR <>
	 #FUNCTION ((STRUC "AUX" (STUFF <1 .STRUC>)) 
		    #DECL ((STRUC) STRUCTURED)
		    <COND (<==? .STUFF .GLYPH>
			   <COND (<EMPTY? .ETEM>
				  <SET AMOUNT <- .AMOUNT>>
				  <MAPLEAVE>)>
			   <SET AMOUNT <+ .AMOUNT 1>>
			   <PUT .STRUC 1 <1 .ETEM>>
			   <COND (<AND .HACK?
				       <SET CURS
					    <GET <SET LOC <AT .ETEM>> CURSOR>>>
				  <PUTPROP .LOC CURSOR>
				  <SET LOC <AT .STRUC>>
				  <PUTPROP .LOC CURSOR .CURS>
				  <MAPF <>
					#FUNCTION ((CUR) 
						   #DECL ((CUR) CURSOR)
						   <PUT .CUR 1 .LOC>)
					<REST .CURS>>)>
			   <SET ETEM <REST .ETEM>>)
			  (<MONAD? .STUFF>)
			  (T
			   <SET NAMOUNT
				<GETSTAR .STUFF .GLYPH .ETEM .AMOUNT .HACK?>>
			   <COND (<L? .NAMOUNT 0>
				  <SET AMOUNT .NAMOUNT>
				  <MAPLEAVE>)>
			   <SET ETEM <REST .ETEM <- .NAMOUNT .AMOUNT>>>
			   <SET AMOUNT .NAMOUNT>)>)
	 .OBJ>
   .AMOUNT>

;
"
  <GETSTAR <-obj>- <-glyph>- <-etem>->

     where

     <-obj>- is the new object to be imbedded.
   <-glyph>- is the indicator of imbedding in <-obj>-.
    <-etem>- is the list from which objects for imbedding are snarfed from. Normal
           it is the rest of the structure after the cursor.

  GETSTAR returns the number of imbedded objects. If there are more occurances of
  <-glyph>- inside <-obj>- than the number of available objects; it will return the
  negative of the number of objected that are actually imbedded. Note that <-obj>-
  is changed regardless whether imbedding is completed.

  The variables `AMOUNT' and `HACK?' are for internal recursive calls only. `AMOUNT'
  indicates the number of imbedded objects so far. `HACK?' is a flag stating whether
  cursors should be moved to the new object. It is initially T until it is inside
  a structured object which is not of primtype list.
"

<DEFINE RDR RDRACT ("TUPLE" T "AUX" (L <LENGTH .MAC>)) 
	#DECL ((VALUE) CHARACTER
	       (RDRACT) ACTIVATION
	       (L) FIX)
	<SET SPOS <+ .SPOS 1>>
	<COND (<G? .SPOS <+ .L 1>>
	       <COND (<ASSIGNED? ITER>
		      <COND (<1? .ITER>
			     <UNASSIGN ITER>
			     <UNASSIGN ITCOM>
			     <INTFLUSH>
			     !\ )
			    (<SET ITER <- .ITER 1>>
			     <SET ITCOM <+ .ITCOM 1>>
			     <SET SPOS 0>
			     <AGAIN .RDRACT>)>)
		     (T <INTFLUSH> !\ )>)
	      (<G? .SPOS .L> !\)
	      (<NTH .MAC .SPOS>)>>

<DEFINE INTFLUSH ()
		 <SET CURCHAN <SET INCHAN ,INCHAN>>
		 <COND (<ASSIGNED? P-ON> <SETG E-VERBOSE .P-ON> <UNASSIGN P-ON>)>>

<DEFINE ERR (STR "OPTIONAL" (FOO T) "AUX" (OUTCHAN .OUTCHAN)) 
	#DECL ((STR) STRING (OUTCHAN) CHANNEL)
	<CRLF>
	<PRINC .STR>
	<CRLF>
	<ERRFLUSH .FOO>>

<DEFINE ERRFLUSH ("OPTIONAL" (MF T) "AUX" (OUTCHAN .OUTCHAN))
	#DECL ((OUTCHAN) CHANNEL) 
	<COND (<==? .INCHAN ,INCHAN>)
	      (T
	       <COND (<ASSIGNED? ITCOM>
		      <PRINC " - ITERATION ENDED AFTER ">
		      <PRIN1 .ITCOM>
		      <PRINC " PASSES: ">
		      <UNASSIGN ITCOM>)
		     (<PRINC " - MACRO FLUSHED: ">)>
	       <COND (.MF
		      <PRINTSTRING .MAC .OUTCHAN <COND (<G? .SPOS <LENGTH .MAC>>
							<SET SPOS <LENGTH .MAC>>)
						       (.SPOS)>>
		      <PRINC <COND (,E-OVERPRINT " <--<-- ") (" <-- ")>>
		      <PRINTSTRING <REST .MAC .SPOS> .OUTCHAN>
		      <TERPRI>)
		     (T <TERPRI>)>
	       <INTFLUSH>)>
	<READSTRING ,JUNKSTR .INCHAN ,ALTSTRING>>

<DEFINE INTREAD (CHAN "EXTRA" TEMP) 
	<UNWIND <PROG ()
		      <HANDLER ,IREVENT ,IRHAND>
		      <SET TEMP <READ .CHAN>>
		      <OFF ,IRHAND>
		      .TEMP>
		<OFF ,IRHAND>>>

<DEFINE IRERROR (PROC "AUX" (OUTCHAN .OUTCHAN))
	#DECL ((OUTCHAN) CHANNEL) 
	<PRINC "
ERROR, TOO FEW ARGUMENTS TO ">
	<PRINC ,COMSTR>
	<TERPRI>
	<INT-LEVEL 0>
	<PUT .INCHAN 14 17179869211>
	<AGAIN .THIS-LEVEL>>

<DEFINE MACSET () 
	<OR <GASSIGNED? MACCHAN>
	    <SETG MACCHAN <OPEN "READ" "INT:EDIT;MACRO CHAN" ,RDR>>>
	<SET SPOS 0>
	<SET CURCHAN <SET INCHAN ,MACCHAN>>
	<SET P-ON ,E-VERBOSE>
	<SETG E-VERBOSE <>>>

<SETG IREVENT <EVENT "BLOCKED" 7>>

<SETG IRHAND <HANDLER ,IREVENT ,IRERROR>>

<OFF ,IRHAND>

<ENDPACKAGE>
