<PACKAGE "MEND">

<ENTRY MEND MINIT>

<USE "TTY" "EDIT">

<DEFINE MEND ("AUX" STAT-FILE) 
	#DECL ((VALUE) ANY (STAT-FILE) <OR CHANNEL FALSE>)
	<COND (<AND <GASSIGNED? MEND-PROCESS>
		    <BOUND? HALT ,MEND-PROCESS>
		    <NOT <LVAL HALT ,MEND-PROCESS>>>
	       #FALSE ("CANNOT START MEND FROM HERE"))
	      (<NOT <AND <REOPEN ,OUTCHAN #WORD *000401000000*>
			 <OR <GASSIGNED? NOUT>
			     <SETG NOUT
				   <REOPEN <OPEN "PRINT" "TTY:MEND AREA">
					   #WORD *004001000000*>>>>>
	       #FALSE ("TTY OPENS LOST"))
	      (<OR <GASSIGNED? MPBOTM>
		   <COND (<ASSIGNED? MINIT> <MINIT !.MINIT>) (<MINIT>)>>
	       <GOXY 0 ,MPLINES>
	       <PRINT-SEP-LINE T>
	       <CRLF>
	       <COND (<GASSIGNED? MEND-PROCESS>
		      <AND <BOUND? MEND-LOOP ,MEND-PROCESS>
			   <BREAK-SEQ '<RESUME "ENDING" .RES> ,MEND-PROCESS>
			   <BREAK-SEQ '<MEND1> ,MEND-PROCESS>>
		      <RESUME T ,MEND-PROCESS>)
		     (<AND <NOT <GASSIGNED? MDBG>>
			   <SET STAT-FILE
				<OPEN "PRINT" <STRING "JMB;^" <JNAME> " >">>>
			   <NOT <CLOSE .STAT-FILE>>>)
		     (<RESUME T <SETG MEND-PROCESS <PROCESS ,MEND2>>>)>)>>

<DEFINE MEND2 (T) 
	#DECL ((VALUE) ANY (T) 'T)
	<REPEAT ((RES <RESUMER>)
		 (HAND
		  <HANDLER <GET <LVAL INCHAN .RES> INTERRUPT> ,MINTS <ME>>)
		 (QUICKPRINT T) MPMON? REP (BREAKR ,BREAKR!-IEDIT))
		#DECL ((VALUE) ANY (RES) <SPECIAL PROCESS> (HAND) HANDLER
		       (QUICKPRINT MPMON?) <SPECIAL 'T> (REP) APPLICABLE)
		<AND <ASSIGNED? REP .RES> <SET REP <LVAL REP .RES>>>
		<SET REP ,MREP .RES>
		<SCML <- ,MPBOTM ,MPTOP> ,OUTCHAN>
		<PRINC "TL" ,OUTCHAN>
		<SETG BREAKR!-IEDIT ,BREAKR>
		<SET MPMON? T>
		<OR <ASSIGNED? THIS-LEVEL!-IEDIT .RES>
		    <SET THIS-LEVEL!-IEDIT <> .RES>>
		<MEND1>
		<OFF .HAND>
		<COND (<ASSIGNED? REP> <SET REP .REP .RES> <UNASSIGN REP>)
		      (<UNASSIGN REP .RES>)>
		<SCML 0 ,OUTCHAN>
		<SETG BREAKR!-IEDIT .BREAKR>
		<UNASSIGN MPMON?>
		<OR <LVAL THIS-LEVEL!-IEDIT .RES>
		    <UNASSIGN THIS-LEVEL!-IEDIT .RES>>
		<RESUME "ENDING" .RES>
		<HANDLER <GET <LVAL INCHAN .RES> INTERRUPT> .HAND>>>

<DEFINE PRINT-SEP-LINE ("OPTIONAL" (ALL? <>) "AUX" (OUTCHAN ,NOUT))
	#DECL ((VALUE) ANY (ALL?) <OR 'T FALSE> (OUTCHAN) CHANNEL)
	<OR .ALL? <GOXY ,SEP-LENGTH ,MPLINES>>
	<PRINC "L">
	<PUT .OUTCHAN 14 <- <14 .OUTCHAN> <COND (<G? ,MUDDLE 52> 3) (2)>>>
	<AND .ALL? <PRINC ,SEP-LINE>>
	<PRINC <COND (<ASSIGNED? DO-NEXT> "____") ("next")>>
	<PRINC "__">
	<PRINC <COND (<AND <ASSIGNED? INVISIBLE> .INVISIBLE> "no") ("__")>>
	<PRINC "print__">
	<PRINC <COND (<AND <ASSIGNED? HALT> .HALT> "no") ("__")>>
	<PRINC "auto__">>

<NEWTYPE MSTACK
	 LIST
	 '<<PRIMTYPE LIST> [REST
			    <VECTOR <OR FIX <FALSE FIX>>      ;"cursor position"
				    ANY			     ;"displayed object"
				    VECTOR	        ;"previous MSTACK level"
				    FIX	   ;"amount of original object replaced"
				    ANY	       ;"unused part of original object"
				    FRAME   ;"frame corresponding to this level"
				    ATOM	  ;"specially handled type name"
				    ANY			      ;"original object"
				    FIX			    ;"level number">]>>

<PRINTTYPE MSTACK
	   #FUNCTION ((MS) 
		      <SET MS <3 <1 .MS>>>
		      <CRLF>
		      <REPEAT ()
			      <PRINC !\<>
			      <COND (<NOT <1 .MS>> <PRINC "TOP">)
				    (<L=? <1 .MS> 0> <PRINC !\->)
				    (<PRINC <1 .MS>>)>
			      <PRINC !\	>
			      <&1 <2 .MS>>
			      <PRINC !\>>
			      <CRLF>
			      <OR <1 .MS> <RETURN>>
			      <SET MS <3 .MS>>>)>

<DEFINE MCREATE (MSATOM OB FRM "AUX" MSL) 
	#DECL ((VALUE) MSTACK (MSATOM) ATOM (OB) ANY (FRM) FRAME
	       (MSL) <LIST VECTOR>)
	<SET MSL ([#FALSE (0) .OB <> 0 .OB .FRM T .OB 0])>
	<AND <TYPE? .OB FORM>
	     <NOT <EMPTY? .OB>>
	     <MEMQ <1 .OB> '(REPEAT PROG)>
	     <PUT <1 .MSL> 7 <1 .OB>>>
	<PUT <1 .MSL> 3 <1 .MSL>>
	<MPRINT <SET .MSATOM <CHTYPE .MSL MSTACK>>>>

<DEFINE MPUSH (MSATOM OB FRM
	       "AUX" (MS ..MSATOM) OP OP1 OP2 (BOS <3 <1 .MS>>) (FIRST? T)
	       "NAME" MPUSH)
   #DECL ((VALUE MS) MSTACK (MSATOM) ATOM (OB) ANY (FRM) FRAME (OP OP1 OP2) FIX
	  (BOS) VECTOR (FIRST?) <OR 'T FALSE> (MPUSH) ACTIVATION)
   <SET MS
	<OR <MAPR <>
		  #FUNCTION ((RMS) 
			     <AND <LEGAL? <6 <1 .RMS>>>
				  <MAPLEAVE <CHTYPE .RMS MSTACK>>>
			     <SET FIRST? #FALSE ()>)
		  .MS>
	    <NOT <INTERRUPT "CHAR" !\ ,INCHAN>>
	    <INT-LEVEL 0>>>
   <SET .MSATOM .MS>
   <PUT <1 .MS> 3 .BOS>
   <SET OP <4 <1 .MS>>>
   <COND
    (<AND
      <MEMQ <7 <1 .MS>> '(T REPEAT PROG CLAUSE)>
      <==? <PRIMTYPE <2 <1 .MS>>> LIST>
      <MAPF <>
       #FUNCTION ((NOB) 
	 <SET OP <+ .OP 1>>
	 <AND <==? .NOB .OB> <MAPLEAVE>>
	 <AND
	  <==? <PRIMTYPE .NOB> LIST>
	  <SET OP1 0>
	  <MAPF <>
		#FUNCTION ((NOB1) 
			   <SET OP1 <+ .OP1 1>>
			   <AND <==? .NOB1 .OB> <MAPLEAVE>>
			   <AND <==? <PRIMTYPE .NOB1> LIST>
				<SET OP2 0>
				<MAPF <>
				      #FUNCTION ((NOB2) 
						 <SET OP2 <+ .OP2 1>>
						 <AND <==? .NOB2 .OB>
						      <MAPLEAVE>>)
				      .NOB1>
				<PUT <1 <SET MS
					     <MPUSH .MSATOM .NOB <6 <1 .MS>>>>>
				     7
				     CLAUSE>
				<SET OP1 .OP2>
				<SET NOB .NOB1>
				<MAPLEAVE>>)
		.NOB>
	  <PUT <1 <SET MS <MPUSH .MSATOM .NOB <6 <1 .MS>>>>>
	       7
	       CLAUSE>
	  <SET .MSATOM .MS>
	  <SET OP .OP1>
	  <MAPLEAVE>>)
       <5 <1 .MS>>>>)
    (<==? <7 <1 .MS>> CLAUSE>
     <SET MS <MPOP .MSATOM>>
     <AGAIN .MPUSH>)
    (<AND <MEMQ <7 <1 .MS>> '(REPEAT PROG)>
	  <SET OP 2>
	  <MAPF <>
		#FUNCTION ((NOB) 
			   <SET OP <+ .OP 1>>
			   <AND <==? .NOB .OB> <MAPLEAVE>>)
		<REST <8 <1 .MS>> 2>>>
     <PUT <1 .MS> 4 <- .OP 1>>
     <PUT <1 .MS> 5 <REST <8 <1 .MS>> <- .OP 1>>>
     <PUTREST <REST <2 <1 .MS>> <- .OP 2>> <5 <1 .MS>>>)
    (<SET OP 0>)>
   <PUT <1 .MS>
	1
	<COND (<0? .OP>
	       <COND (<NOT <1 <1 .MS>>> <1 <1 <1 .MS>>>)
		     (<L=? <1 <1 .MS>> 0> <1 <1 .MS>>)
		     (<- <1 <1 .MS>>>)>)
	      (.OP)>>
   <SET MS
	<CHTYPE
	 ([#FALSE (0) .OB .BOS 0 .OB .FRM T .OB <+ 1 <9 <1 .MS>>>]
	  !.MS)
	 MSTACK>>
   <AND <TYPE? .OB FORM>
	<NOT <EMPTY? .OB>>
	<MEMQ <1 .OB> '(REPEAT PROG)>
	<PUT <1 .MS> 7 <1 .OB>>>
   <PUT <2 .MS> 3 <1 .MS>>
   <SET .MSATOM .MS>
   <COND (.FIRST? <MPRINT .MS PUSH>) (<MPRINT .MS>)>>

<DEFINE MPOP (MSATOM "AUX" (MS ..MSATOM) ONUM) 
	#DECL ((VALUE) <OR FALSE MSTACK> (MS) MSTACK (MSATOM) ATOM (ONUM) FIX)
	<COND (<LENGTH? .MS 1> #FALSE ())
	      (T
	       <SET ONUM <1 <2 .MS>>>
	       <COND (<G? .ONUM 0> <SET ONUM <- .ONUM>>)
		     (<PUT <2 .MS> 1 0>)>
	       <OR <0? <1 <2 .MS>>>
		   <COND (<0? <4 <2 .MS>>>
			  <PUT <2 .MS>
			       2
			       <CHTYPE (!<SUBSTRUC <2 <2 .MS>>
						   0
						   <- <1 <2 .MS>> 1>>
					<2 <1 .MS>>
					!<REST <2 <2 .MS>> <1 <2 .MS>>>)
				       <TYPE <5 <2 .MS>>>>>
			  <PUT <2 .MS> 5 <REST <5 <2 .MS>> <1 <2 .MS>>>>
			  <PUT <2 .MS> 4 <1 <2 .MS>>>)
			 (T
			  <PUTREST <REST <2 <2 .MS>> <- <4 <2 .MS>> 1>>
				   (!<SUBSTRUC <5 <2 .MS>>
					       0
					       <- <1 <2 .MS>> <4 <2 .MS>> 1>>
				    <2 <1 .MS>>
				    !<REST <5 <2 .MS>>
					   <- <1 <2 .MS>> <4 <2 .MS>>>>)>
			  <PUT <2 .MS>
			       5
			       <REST <5 <2 .MS>> <- <1 <2 .MS>> <4 <2 .MS>>>>>
			  <PUT <2 .MS> 4 <1 <2 .MS>>>)>>
	       <PUT <2 .MS> 1 <CHTYPE (.ONUM) FALSE>>
	       <PUT <2 .MS> 3 <3 <1 .MS>>>
	       <MPRINT <SET .MSATOM <CHTYPE <REST .MS> MSTACK>> POP>)>>

<DEFINE MREPL (MSATOM OB "AUX" (MS ..MSATOM) (BOS <3 <1 .MS>>)) 
   #DECL ((VALUE MS) MSTACK (MSATOM) ATOM (OB) ANY (BOS) VECTOR)
   <COND (<LEGAL? <6 <1 .MS>>>
	  <REPEAT ()
		  <OR <==? <7 <1 .MS>> CLAUSE> <RETURN>>
		  <SET MS
		       <OR <MPOP .MSATOM>
			   <NOT <INTERRUPT "CHAR" !\ ,INCHAN>>
			   <INT-LEVEL 0>>>>
	  <PUT <1 .MS> 1 #FALSE (0)>
	  <PUT <1 .MS> 2 .OB>
	  <PUT <1 .MS> 4 0>
	  <PUT <1 .MS> 5 .OB>
	  <MPRINT .MS REPL>)
	 (<SET MS
	       <OR <MAPR <>
			 #FUNCTION ((RMS) 
				    <AND <LEGAL? <6 <1 .RMS>>>
					 <N==? <7 <1 .RMS>> CLAUSE>
					 <MAPLEAVE <CHTYPE .RMS MSTACK>>>)
			 <REST .MS>>
		   <ERROR ILLEGAL-MSTACK!-ERRORS MREPL>>>
	  <PUT <1 .MS> 1 #FALSE (0)>
	  <PUT <1 .MS> 2 .OB>
	  <PUT <1 .MS> 3 .BOS>
	  <PUT <1 .MS> 4 0>
	  <PUT <1 .MS> 5 .OB>
	  <MPRINT <SET .MSATOM .MS>>)>>

<DEFINE &2 (OB LN "AUX" (OUTCHAN ,NOUT)) 
	#DECL ((VALUE OB) ANY (LN) FIX (OUTCHAN) <SPECIAL CHANNEL>)
	<PRIN1 .LN>
	<PRINC !\	>
	<&1 .OB>>

<DEFINE M& (OB CP0 LN "AUX" (CP <OR .CP0 <1 .CP0>>) TEMP) 
	#DECL ((VALUE OB TEMP) ANY (CP0) <OR FIX <FALSE FIX>> (LN CP) FIX)
	<COND (<0? .CP> <&2 .OB .LN>)
	      (<L? .CP 0>
	       <SET CP <- .CP>>
	       <COND (<G? .CP 8>
		      <&2 <CHTYPE ('..& !<REST .OB <- <* 5 </ .CP 5>> 3>>)
				  <TYPE .OB>>
			  .LN>)
		     (<&2 .OB .LN>)>)
	      (T
	       <SET TEMP <NTH .OB .CP>>
	       <PUT .OB .CP |>
	       <COND (<G? .CP 8>
		      <&2 <CHTYPE ('..& !<REST .OB <- <* 5 </ .CP 5>> 3>>)
				  <TYPE .OB>>
			  .LN>)
		     (<&2 .OB .LN>)>
	       <PUT .OB .CP .TEMP>)>>

<DEFINE MPRINT (MS
		"OPTIONAL" (TYPE PRINT) (MSLEEP <COND (.INVISIBLE 0) (.MSLEEP)>)
		"AUX" CO (OUTCHAN ,NOUT) OINT)
	#DECL ((VALUE MS) MSTACK (TYPE) ATOM (MSLEEP) <OR FIX FLOAT> (CO) ANY
	       (OUTCHAN) CHANNEL (OINT) FIX)
	<COND (.INVISIBLE)
	      (T
	       <COND (<AND <==? .TYPE PUSH> <N==? .MPLNUM ,MPLINES>>
		      <SET MPLNUM <+ .MPLNUM 1>>
		      <GOXY 0 <- .MPLNUM 2>>
		      <PRINC "L">
		      <PUT .OUTCHAN 14 0>
		      <M& <2 <2 .MS>> <1 <2 .MS>> <9 <2 .MS>>>
		      <CRLF .OUTCHAN>
		      <M& <2 <1 .MS>> <1 <1 .MS>> <9 <1 .MS>>>)
		     (<AND <==? .TYPE POP>
			   <OR <L=? <- ,MPLINES .MPLNUM> 5>
			       <LENGTH? .MS <- .MPLNUM 1>>>>
		      <GOXY 0 <SET MPLNUM <- .MPLNUM 1>>>
		      <PRINC "LUL">
		      <PUT .OUTCHAN 14 0>
		      <M& <2 <1 .MS>> <1 <1 .MS>> <9 <1 .MS>>>)
		     (<==? .TYPE REPL>
		      <GOXY 0 <- .MPLNUM 1>>
		      <PRINC "L">
		      <PUT .OUTCHAN 14 0>
		      <&2 <2 <1 .MS>> <9 <1 .MS>>>)
		     (<PRINC "TL">
		      <SET MPLNUM 0>
		      <COND (<LENGTH? .MS <- ,MPLINES 3>> <SET CO <3 <1 .MS>>>)
			    (<SET CO <3 <NTH .MS <- ,MPLINES 2>>>>)>
		      <REPEAT ()
			      <SET MPLNUM <+ 1 .MPLNUM>>
			      <M& <2 .CO> <1 .CO> <9 .CO>>
			      <OR <1 .CO> <RETURN>>
			      <CRLF .OUTCHAN>
			      <SET CO <3 .CO>>>
		      <REPEAT ((N <- ,MPLINES .MPLNUM>))
			      <CRLF .OUTCHAN>
			      <AND <0? <SET N <- .N 1>>> <RETURN>>>)>
	       <AND <N==? ,MPTOP <+ ,MPLINES 1>>
		    <0? <SETG IPRINT-TIME <- ,IPRINT-TIME 1>>>
		    <SETG IPRINT-TIME ,IPRINT-TIMES>
		    <GOXY 0 <+ ,MPLINES 1>>
		    <PRINT-MONS>>)>
	<SET OINT <INT-LEVEL 0>>
	<SLEEP .MSLEEP>
	<INT-LEVEL .OINT>
	.MS>

<DEFINE GOXY (X Y) 
	#DECL ((X Y) FIX)
	<PUT ,NOUT 14 0>
	<PRINC <STRING "V" <ASCII <+ .Y 8>> "H" <ASCII <+ .X 8>>>
	       ,NOUT>
	<PUT ,NOUT 14 .X>>

<SETG REOPEN
      %<FIXUP!-RSUBRS '[
#CODE ![23851171840 23030136832 23751557124 23085677572 17199792126 17180393473 
21474836503 -30598234094 17208442899 -30573592576 23353884672 23088857103 
17859346454 25328615444 24150802432 17859346449 -33940307968 23088857101 
4429185027 216377 1048580 524292 7202209520 0 262146!]
			REOPEN
			#DECL ("VALUE" <OR FALSE CHANNEL>
			       CHANNEL <PRIMTYPE WORD>)]
		      '(52 FINIS!-MUDDLE 228356 (4))>>

<AND <ASSIGNED? GLUE>
     .GLUE
     <PUT ,REOPEN GLUE '![5370024193 0 524292!]>>

<DEFINE MEND1 ("AUX" (HALT <>) (SKIP-THIS <>) (INVISIBLE <>) TUP M MPLNUM
		     (MSLEEP ,MSLEEP) (NEXT-COUNT 0) (LAST-LEVEL ,LAST-LEVEL)
		     REP-LOOP FIRST-REP (QUICK-RUN <>) DO-NEXT)
   #DECL ((VALUE) FIX (HALT SKIP-THIS INVISIBLE) <SPECIAL <OR 'T FALSE>>
	  (TUP) <<OR TUPLE VECTOR> <OR 'EVLIN 'EVLOUT> ANY> (M) <SPECIAL
								 MSTACK>
	  (MPLNUM NEXT-COUNT LAST-LEVEL) <SPECIAL FIX>
	  (MSLEEP) <SPECIAL <OR FIX FLOAT>> (REP-LOOP) <SPECIAL ACTIVATION>
	  (FIRST-REP) <SPECIAL 'T> (QUICK-RUN) <OR 'T FALSE>
	  (DO-NEXT) <SPECIAL 'T>)
   <1STEP .RES>
   <AND <ASSIGNED? QUICK-RUN!-IEDIT .RES>
	<LVAL QUICK-RUN!-IEDIT .RES>
	<SET QUICK-RUN T>
	<SET QUICK-RUN <> .RES>>
   <RESUME "MENDING" .RES>
   <COND
    (<OR <REPEAT MEND-LOOP ()
		 #DECL ((VALUE) <OR 'T FALSE> (MEND-LOOP) <SPECIAL ACTIVATION>)
		 <SET TUP <RESUME T .RES>>
		 <INT-LEVEL 10>
		 <SET DO-NEXT T>
		 <PRINT-SEP-LINE>
		 <OR <==? ,MPTOP <+ ,MPLINES 1>> <PRINT-MONS T>>
		 <MCREATE M <1 <2 .TUP>> <FRAME .RES>>
		 <REPEAT ((EVAL-SELF <>))
			 #DECL ((VALUE) 'T (EVAL-SELF) <OR 'T FALSE>)
			 <COND (<AND <OR <NOT .EVAL-SELF> <SET EVAL-SELF <>>>
				     .HALT>
				<BREAK-SEQ <FORM MHALT .MEND-LOOP> .RES>
				<FREE-RUN .RES>
				<RESUME T .RES>
				<1STEP .RES>
				<SET TUP <RESUME T .RES>>
				<AND <TYPE? <2 .TUP> DISMISS>
				     <SET TUP <RESUME T .RES>>>)
			       (<PROG ((OINT <INT-LEVEL 0>))
				      #DECL ((VALUE OINT) FIX)
				      <SET TUP
					   <COND (<AND .SKIP-THIS
						       <==? <1 .TUP> EVLIN>>
						  <SET SKIP-THIS <>>
						  <RESUME #DISMISS T .RES>)
						 (<G=? <9 <1 .M>> .LAST-LEVEL>
						  <RESUME #DISMISS T .RES>)
						 (<RESUME T .RES>)>>
				      <AND <ASSIGNED? QUICK-RUN!-IEDIT .RES>
					   <LVAL QUICK-RUN!-IEDIT .RES>
					   <AGAIN>>
				      <INT-LEVEL .OINT>>)>
			 <COND (<==? <1 .TUP> EVLIN>
				<COND (<TYPE? <1 <2 .TUP>>
					      ACTIVATION
					      ASOC
					      ATOM
					      BITS
					      BYTES
					      CHANNEL
					      CHARACTER
					      CLOSURE
					      CODE
					      DECL
					      DISMISS
					      ENVIRONMENT
					      FALSE
					      FIX
					      FLOAT
					      FRAME
					      FSUBR
					      FUNCTION
					      HANDLER
					      IHEADER
					      ILLEGAL
					      LINK
					      LOCA
					      LOCAS
					      LOCB
					      LOCD
					      LOCL
					      LOCR
					      LOCS
					      LOCT
					      LOCU
					      LOCV
					      LOSE
					      MACRO
					      OBLIST
					      OFFSET
					      PCODE
					      PRIMTYPE-C
					      PROCESS
					      QUICK-ENTRY
					      QUICK-RSUBR
					      READA
					      RSUBR
					      RSUBR-ENTRY
					      SPLICE
					      STORAGE
					      STRING
					      SUBR
					      TAG
					      TEMPLATE
					      TIME
					      TUPLE
					      TYPE-C
					      TYPE-W
					      UNBOUND
					      WORD>
				       <SET EVAL-SELF T>
				       <RESUME #DISMISS T .RES>)
				      (<MPUSH M <1 <2 .TUP>> <FRAME .RES>>)>)
			       (<MREPL M <2 .TUP>> <OR <MPOP M> <RETURN>>)>>
		 <UNASSIGN DO-NEXT>
		 <PRINT-SEP-LINE>
		 <INT-LEVEL 0>>
	 <BOUND? MEND-LOOP>>
     <AND <BOUND? COMMAND-LOOP .RES>
	  <NOT <LEGAL? <LVAL MEND-LOOP .RES>>>
	  <COND (<AND <ASSIGNED? REP-LOOP>
		      <ASSIGNED? COMMAND-LOOP .REP-LOOP>
		      <==? <LVAL COMMAND-LOOP .RES>
			   <LVAL COMMAND-LOOP .REP-LOOP>>>
		 <BREAK-SEQ '<RETURN <> .COMMAND-LOOP> .RES>)
		(<SET FINISH!-IEDIT T .RES>
		 <PUT <CHTYPE <IN <LVAL TOP-ITEM!-IEDIT .RES>> LIST>
		      CURSOR!-IEDIT
		      <GET <LVAL TOP-ITEM!-IEDIT .RES> CURSOR!-IEDIT>>
		 <BREAK-SEQ '<AGAIN .THIS-LEVEL!-IEDIT> .RES>)>>)
    (<BREAK-SEQ '<QUITTER !\ .INCHAN> .RES>)>
   <AND .QUICK-RUN <SET QUICK-RUN T .RES>>
   <FREE-RUN .RES>
   <INT-LEVEL 0>>

<DEFINE MHALT (MEND-LOOP
	       "AUX" (OLERR .LERR\ !-INTERRUPTS) (RESVAL T)
		     (OINT <INT-LEVEL 0>))
   #DECL ((VALUE) DISMISS (MEND-LOOP) <SPECIAL ACTIVATION> (OLERR) FRAME
	  (LERR\ !-INTERRUPTS) <SPECIAL FRAME> (RESVAL) <OR 'T VECTOR>
	  (OINT) FIX)
   <COND (<0? <LVAL NEXT-COUNT ,MEND-PROCESS>>
	  <SET LERR\ !-INTERRUPTS <FRAME <FRAME <ME>>>>
	  <UNWIND <REPEAT (RETVAL)
			  <COND (<PROG COMMAND-LOOP ((EDIT-TABLE ,MEDIT-TABLE))
				       #DECL ((VALUE) <OR 'T FALSE>
					      (COMMAND-LOOP) <SPECIAL
							      ACTIVATION>
					      (EDIT-TABLE) <SPECIAL VECTOR>)
				       <NOT <EDIT>>>)
				(<AND <BOUND? SKIP-THIS ,MEND-PROCESS>
				      <LVAL SKIP-THIS ,MEND-PROCESS>
				      <LEGAL? .MEND-LOOP>>
				 <SET SKIP-THIS <> ,MEND-PROCESS>
				 <SET RESVAL
				      [EVLOUT
				       <SET RETVAL <EVAL !<ARGS <FRM 0>>>>]>
				 <RESUME T ,MEND-PROCESS>
				 <ERRET .RETVAL <FRM 0>>)
				(<RETURN>)>>
		  <AND <SET LERR\ !-INTERRUPTS .OLERR>
		       <LEGAL? .MEND-LOOP>
		       <INT-LEVEL .OINT>
		       <RESUME .RESVAL ,MEND-PROCESS>>>
	  <SET LERR\ !-INTERRUPTS .OLERR>)
	 (<SET NEXT-COUNT
	       <- <LVAL NEXT-COUNT ,MEND-PROCESS> 1>
	       ,MEND-PROCESS>
	  <SLEEP 0.30000000>)>
   <AND <LEGAL? .MEND-LOOP>
	<INT-LEVEL .OINT>
	<RESUME T ,MEND-PROCESS>>
   #DISMISS T>

<DEFINE INCLEAR (CHAN "AUX" (WORDS <1 <BACK .CHAN>>)) 
	#DECL ((VALUE WORDS) <UVECTOR [11 LOSE]> (CHAN) CHANNEL)
	<PUT .WORDS 11 #LOSE *440705000013*>
	<PUT .WORDS 3 #LOSE *000000000000*>>

<DEFINE MINTS (CHAR CHAN "AUX" (CHR <ASCII .CHAR>) (OUTCHAN ,OUTCHAN))
	#DECL ((VALUE) ANY (CHAR) CHARACTER (CHAN OUTCHAN) CHANNEL (CHR) FIX)
	<COND (<G=? .CHR 32>)			     ;"uninteresting characters"
	      (<AND <==? .CHR 2>	      ;"control-B, begin automatic mode"
		    <INCLEAR .CHAN> .HALT>
	       <SET MSLEEP ,MSLEEP>
	       <SET HALT <>>
	       <PRINT-SEP-LINE>
	       <AND <BOUND? COMMAND-LOOP .RES>
		    <==? .MEND-LOOP <LVAL MEND-LOOP .RES>>
		    <COND (<OR <AND <ASSIGNED? REP-LOOP>
				    <ASSIGNED? COMMAND-LOOP .REP-LOOP>
				    <==? <LVAL COMMAND-LOOP .RES>
					 <LVAL COMMAND-LOOP .REP-LOOP>>>
			       <NOT <ASSIGNED? THIS-LEVEL!-IEDIT .RES>>>
			   <DISMISS <> <LVAL COMMAND-LOOP .RES>>)
			  (<SET FINISH!-IEDIT T .RES>
			   <PUT <CHTYPE <IN <LVAL TOP-ITEM!-IEDIT .RES>> LIST>
				CURSOR!-IEDIT
				<GET <LVAL TOP-ITEM!-IEDIT .RES> CURSOR!-IEDIT>>
			   <BREAK-SEQ '<AGAIN .THIS-LEVEL!-IEDIT> .RES>
			   <DISMISS T>)>>)
	      (<==? .CHR 5>		        ;"control-E, end automatic mode"
	       <INCLEAR .CHAN>
	       <SET MSLEEP 0>
	       <SET HALT T>
	       <PRINT-SEP-LINE>
	       <CRLF>)
	      (<AND <OR <==? .CHR 6> <==? .CHR 19>>
					        ;"control-F or S, act like EDIT"
		    <BOUND? MEND-LOOP .RES>
		    <==? .MEND-LOOP <LVAL MEND-LOOP .RES>>>
	       <COND (<AND <==? .CHR 19>
			   <N==? <LVAL LERR\ !-IEDIT .RES>
				 <LVAL LERR\ !-INTERRUPTS .RES>>>
		      <BREAK-SEQ <FORM QUITTER !\ ,INCHAN> .RES>
		      <PRINC !\T>
		      <DISMISS T>)
		     (<INT-LEVEL 0>
		      <INCLEAR .CHAN>
		      <UNASSIGN ITER!-IEDIT .RES>
		      <UNASSIGN ITCOM!-IEDIT .RES>
		      <UNASSIGN SEARCH+!-IEDIT .RES>
		      <UNASSIGN SEARCH-!-IEDIT .RES>
		      <CRLF>
		      <AND <ASSIGNED? THIS-LEVEL!-IEDIT .RES>
			   <PUT .CHAN 14 17179869211>
			   <BREAK-SEQ '<AGAIN .THIS-LEVEL!-IEDIT> .RES>>
		      <DISMISS T>)>)
	      (<==? .CHR 12>	      ;"form-feed, clear screen & reprint stuff"
	       <REOPEN .OUTCHAN *000401000000*>
	       <AND <ASSIGNED? M> <MPRINT .M PRINT 0>>
	       <GOXY 0 ,MPLINES>
	       <PRINT-SEP-LINE T>
	       <AND <N==? ,MPTOP <+ ,MPLINES 1>>
		    <CRLF ,NOUT>
		    <PRINT-MONS>>)
	      (<==? .CHR 14>			    ;"control-N, do 1 more step"
	       <INCLEAR .CHAN>
	       <AND <BOUND? COMMAND-LOOP .RES>
		    <==? .MEND-LOOP <LVAL MEND-LOOP .RES>>
		    <COND (<OR <AND <ASSIGNED? REP-LOOP>
				    <ASSIGNED? COMMAND-LOOP .REP-LOOP>
				    <==? <LVAL COMMAND-LOOP .RES>
					 <LVAL COMMAND-LOOP .REP-LOOP>>>
			       <NOT <ASSIGNED? THIS-LEVEL!-IEDIT .RES>>>
			   <DISMISS <> <LVAL COMMAND-LOOP .RES>>)
			  (<SET FINISH!-IEDIT T .RES>
			   <PUT <CHTYPE <IN <LVAL TOP-ITEM!-IEDIT .RES>> LIST>
				CURSOR!-IEDIT
				<GET <LVAL TOP-ITEM!-IEDIT .RES> CURSOR!-IEDIT>>
			   <BREAK-SEQ '<AGAIN .THIS-LEVEL!-IEDIT> .RES>
			   <DISMISS T>)>>)
	      (<==? .CHR 15>    ;"control-O, completely evaluate current object"
	       <INCLEAR .CHAN> <SET SKIP-THIS T>)
	      (<AND <==? .CHR 16>		    ;"control-P, begin printing"
		    <INCLEAR .CHAN> .INVISIBLE>
	       <SET INVISIBLE <>>
	       <PRINT-SEP-LINE>
	       <AND <ASSIGNED? M> <MPRINT .M PRINT 0>>)
	      (<==? .CHR 17>				 ;"control-Q, quit MEND"
	       <INCLEAR .CHAN>
	       <AND <BOUND? MEND-LOOP> <CRLF> <DISMISS T .MEND-LOOP>>)
	      (<==? .CHR 19>		        ;"control-S not already handled"
	       <AND <ASSIGNED? REP-LOOP>
		    <PRINC !\T>
		    <INCLEAR .CHAN>
		    <DISMISS T .REP-LOOP>>
	       <DISMISS <> .MEND-LOOP>)
	      (<==? .CHR 21>			  ;"control-U, begin unprinting"
	       <INCLEAR .CHAN>
	       <SET INVISIBLE T>
	       <PRINT-SEP-LINE>)>>

<DEFINE MEDIT (COM "TUPLE" TUP "AUX" CHAN NUM VECT TMP TMP1) 
	#DECL ((VALUE) ANY (COM) STRING (TUP) TUPLE (CHAN) CHANNEL (NUM) FIX
	       (VECT) <VECTOR STRING CHARACTER> (TMP TMP1) ANY)
	<COND (<N==? .INCHAN ,INCHAN>
	       <ERR!-IEDIT "CANNOT USE MEND COMMANDS FROM A MACRO">)
	      (<=? .COM "? ">
	       <UNWIND <PROG ()
			     <SET CHAN <OPEN "READ" "MUDBUG;EDIT? MEND">>
			     <FILECOPY .CHAN .OUTCHAN>>
		       <CLOSE .CHAN>>)
	      (<=? .COM "??">
	       <UNWIND <PROG ()
			     <SET CHAN <OPEN "READ" "MUDBUG;EDIT?? MEND">>
			     <FILECOPY .CHAN .OUTCHAN>>
		       <CLOSE .CHAN>>)
	      (<=? .COM "N ">
	       <COND (<1? <SET NUM <GET-NUM!-IEDIT ,JUNKSTR!-IEDIT 1>>>
		      <INTERRUPT "CHAR" !\ ,INCHAN>)
		     (<L? .NUM 1>)
		     (<AND <SET NEXT-COUNT <- .NUM 1> ,MEND-PROCESS>
			   <ASSIGNED? REP-LOOP ,MEND-PROCESS>
			   <ASSIGNED? COMMAND-LOOP
				      <LVAL REP-LOOP ,MEND-PROCESS>>
			   <==? .COMMAND-LOOP
				<LVAL COMMAND-LOOP
				      <LVAL REP-LOOP ,MEND-PROCESS>>>>
		      <RETURN <> .COMMAND-LOOP>)
		     (<PUT <CHTYPE <IN .TOP-ITEM!-IEDIT> LIST>
			   CURSOR!-IEDIT
			   <GET .TOP-ITEM!-IEDIT CURSOR!-IEDIT>>
		      <SET FINISH!-IEDIT T>)>)
	      (<=? .COM "QT">
	       <PUT <CHTYPE <IN .TOP-ITEM!-IEDIT> LIST>
		    CURSOR!-IEDIT
		    <GET .TOP-ITEM!-IEDIT CURSOR!-IEDIT>>
	       <SET FINISH!-IEDIT T>)
	      (<=? .COM "SN">
	       <MINIT <> <GET-NUM!-IEDIT ,JUNKSTR!-IEDIT 1>>
	       <PRINC "C" ,OUTCHAN>
	       <INTERRUPT "CHAR" <ASCII 12> ,INCHAN>)
	      (<=? .COM "SV">
	       <SET LAST-LEVEL
		    <GET-NUM!-IEDIT ,JUNKSTR!-IEDIT 100000>
		    ,MEND-PROCESS>)
	      (<=? .COM "SD">
	       <READSTRING ,JUNKSTR!-IEDIT .INCHAN ,GOOD-CHRS!-IEDIT>
	       <COND (<==? <NEXTCHR> !\> <SETG MSLEEP 1>)
		     (<==? <NEXTCHR> !\*> <READCHR> <SETG MSLEEP 30>)
		     (<TYPE? <SET TMP <READ>> FIX FLOAT>
		      <SETG MSLEEP <COND (<L? .TMP 0> 0) (.TMP)>>)
		     (<FLUSH-COM "MUST BE FIX OR FLOAT">)>)
	      (<=? .COM "SF">
	       <OR <SET TMP <MINIT <> <> <> <GET-NUM!-IEDIT ,JUNKSTR!-IEDIT
							    100000>>>
		   <FLUSH-COM <1 .TMP>>>)
	      (<MEMBER .COM '["PD" "PO"]>
	       <SET NUM <GET-NUM!-IEDIT ,JUNKSTR!-IEDIT 100000>>
	       <COND (<AND <G=? .NUM 0>
			   <L=? .NUM <9 <1 <LVAL M ,MEND-PROCESS>>>>>
		      <SET TMP
			   <NTH <LVAL M ,MEND-PROCESS>
				<+ 1 <- <9 <1 <LVAL M ,MEND-PROCESS>>> .NUM>>>>
		      <COND (<=? .COM "PO"> <PPRINT <8 .TMP>>)
			    (<OR <NOT <1 .TMP>> <0? <1 .TMP>>>
			     <PPRINT <2 .TMP>>)
			    (T
			     <SET TMP1 <NTH <2 .TMP> <1 .TMP>>>
			     <PPRINT <PUT <2 .TMP> <1 .TMP> |>>
			     <PUT <2 .TMP> <1 .TMP> .TMP1>)>)
		     (<FLUSH-COM "BAD LEVEL NUMBER">)>)
	      (<MEMBER .COM '["PI" "DI"]>
	       <SET NUM <GET-NUM!-IEDIT ,JUNKSTR!-IEDIT 1>>
	       <COND (<OR <L? .NUM 1>
			  <G? .NUM 32>
			  <TYPE? <SET TMP <NTH ,MON-LIST .NUM>> LOSE>>
		      <FLUSH-COM "NON-EXISTENT ITEM">)
		     (<=? .COM "PI">
		      <PPRINT .TMP>
		      <PRINC "===>>">
		      <PPRINT <EVAL .TMP>>)
		     (<PUT ,MON-LIST .NUM #LOSE *000000000000*>
		      <SETG MPTOP
			    <- ,MPTOP
			       <COND (<==? ,MPTOP <+ ,MPLINES 3>>
				      <PRINT-MONS T T <>>
				      2)
				     (<PRINT-MONS T T> 1)>>>
		      <SCML <- ,MPBOTM ,MPTOP> ,OUTCHAN>)>)
	      (<=? .COM "AI">
	       <COND (<OR <==? ,MPBOTM <+ ,MPTOP 4>>
			  <AND <==? ,EMPTY-SLOT 33> <NOT <MON-LIST-GC>>>>
		      <FLUSH-COM "NO ROOM FOR ANOTHER ITEM">)
		     (T
		      <PUT ,MON-LIST ,EMPTY-SLOT <INTREAD!-IEDIT .INCHAN>>
		      <SETG MPTOP
			    <+ ,MPTOP
			       <COND (<==? ,MPTOP <+ ,MPLINES 1>> 2) (1)>>>
		      <SCML <- ,MPBOTM ,MPTOP> ,OUTCHAN>
		      <SETG EMPTY-SLOT <+ ,EMPTY-SLOT 1>>
		      <PRINT-MONS T>)>)
	      (<=? .COM "O ">
	       <SET JUNK!-IEDIT <EVAL <INTREAD!-IEDIT .INCHAN>>>
	       <PUT <CHTYPE <IN .TOP-ITEM!-IEDIT> LIST>
		    CURSOR!-IEDIT
		    <GET .TOP-ITEM!-IEDIT CURSOR!-IEDIT>>
	       <COND (<AND <TYPE? .JUNK!-IEDIT FIX>
			   <G=? .JUNK!-IEDIT 0>
			   <L=? .JUNK!-IEDIT <9 <1 <LVAL M ,MEND-PROCESS>>>>
			   <SET TMP
				<NTH <LVAL M ,MEND-PROCESS>
				     <+ 1
					<- <9 <1 <LVAL M ,MEND-PROCESS>>>
					   .JUNK!-IEDIT>>>>
			   <==? LIST <PRIMTYPE <8 .TMP>>>>
		      <SET JUNK!-IEDIT <AT .TMP 8>>)>
	       <AGAIN .NEW-ITEM!-IEDIT>)
	      (<SET VECT <MEMBER .COM '["Q " !\ "OV" !\ "QM" !\]>>
	       <INTERRUPT "CHAR" <2 .VECT> ,INCHAN>)>>

<DEFMAC FLUSH-COM ('STR) 
	#DECL ((VALUE) FORM (STR) ANY)
	<FORM AND
	      '<CRLF>
	      <FORM PRINC .STR>
	      '<CRLF>
	      '<READSTRING ,JUNKSTR!-IEDIT .INCHAN ,ALTSTRING!-IEDIT>>>

<SETG MEDIT-TABLE
      <MAPF ,VECTOR
	    #FUNCTION ((STR) <MAPRET .STR ,MEDIT>)
	    '["? "
	      "??"
	      "N "
	      "QT"
	      "SN"
	      "SV"
	      "SD"
	      "SF"
	      "PD"
	      "PO"
	      "PI"
	      "DI"
	      "AI"
	      "O "
	      "Q "
	      "OV"
	      "QM"]>>

<DEFINE MREP ("AUX" OREP-LOOP "ACT" REP-LOOP) 
	#DECL ((VALUE) CHANNEL (OREP-LOOP REP-LOOP) ACTIVATION)
	<COND (<ASSIGNED? REP-LOOP ,MEND-PROCESS>
	       <SET OREP-LOOP <LVAL REP-LOOP ,MEND-PROCESS>>
	       <SET REP-LOOP .REP-LOOP ,MEND-PROCESS>)
	      (<ASSIGNED? FIRST-REP ,MEND-PROCESS>
	       <SET REP-LOOP .REP-LOOP ,MEND-PROCESS>)
	      (<SET FIRST-REP T ,MEND-PROCESS>)>
	<UNWIND <REP>
		<COND (<ASSIGNED? OREP-LOOP>
		       <SET REP-LOOP .OREP-LOOP ,MEND-PROCESS>)
		      (<ASSIGNED? REP-LOOP ,MEND-PROCESS>
		       <UNASSIGN REP-LOOP ,MEND-PROCESS>)
		      (<UNASSIGN FIRST-REP ,MEND-PROCESS>)>>
	<COND (<ASSIGNED? OREP-LOOP>
	       <SET REP-LOOP .OREP-LOOP ,MEND-PROCESS>)
	      (<ASSIGNED? REP-LOOP ,MEND-PROCESS>
	       <UNASSIGN REP-LOOP ,MEND-PROCESS>)
	      (<UNASSIGN FIRST-REP ,MEND-PROCESS>)>>

<DEFINE BREAKR ('TODO "ARGS" PO "AUX" (QUICK-RUN!-IEDIT T) (BREAK? <>)) 
	#DECL ((VALUE) ANY (PO) LIST (QUICK-RUN!-IEDIT) <SPECIAL <OR 'T FALSE>>
	       (BREAK?) <OR 'T FALSE>)
	<COND (<COND (<EMPTY? .PO> <SET BREAK? T>)
		     (<OR <MEMQ <1 .PO> '![ON OFF PRINT GO!]>
			  <AND <EVAL <1 .PO>> <SET PO <REST .PO>>>>
		      <COND (<EMPTY? .PO> <SET BREAK? T>)
			    (<==? <1 .PO> ON>
			     <INTERRUPT "CHAR" !\ ,INCHAN>
			     <SET PO <REST .PO>>)
			    (<==? <1 .PO> OFF>
			     <INTERRUPT "CHAR" !\ ,INCHAN>
			     <SET PO <REST .PO>>)
			    (<==? <1 .PO> PRINT> <SET PO <REST .PO>>)
			    (<==? <1 .PO> GO>
			     <INTERRUPT "CHAR" !\ ,INCHAN>
			     <SET PO <REST .PO>>)
			    (<SET BREAK? T>)>)>
	       <AND .BREAK? <CRLF> <PRINC "**BREAK**">>
	       <REPEAT ()
		       <AND <EMPTY? .PO> <RETURN>>
		       <PRINT <1 .PO>>
		       <PRINC "= ">
		       <&1 <EVAL <1 .PO>>>
		       <SET PO <REST .PO>>>
	       <AND .BREAK?
		    <COND (<AND <LVAL HALT ,MEND-PROCESS>
				<BOUND? MEND-LOOP>
				<==? .MEND-LOOP <LVAL MEND-LOOP ,MEND-PROCESS>>>
			   <LISTEN>)
			  (<INTERRUPT "CHAR" !\ ,INCHAN>)>>)>
	<SET QUICK-RUN!-IEDIT <>>
	<EVAL .TODO>>

<DEFINE PRINT-MONS ("OPTIONAL" (ALL? <>) (EXT-CR? <>) (PL? T)
		    "AUX" (OUTCHAN ,NOUT) (MON-NUM 0))
	#DECL ((VALUE) 'T (ALL? EXT-CR? PL?) <OR 'T FALSE> (OUTCHAN) CHANNEL
	       (MON-NUM) <SPECIAL FIX>)
	<AND .ALL? <GOXY 0 <+ ,MPLINES 1>>>
	<PRINC "L">
	<PUT .OUTCHAN 14 0>
	<MAPF <> ,PRINT-MON ,MON-LIST>
	<AND .PL? <PRINC ,SEP-LINE2>>
	<AND .EXT-CR? <CRLF .OUTCHAN>>
	T>

<DEFINE PRINT-MON (PRINT-OB "AUX" (OUTCHAN ,NOUT)) 
	#DECL ((VALUE PRINT-OB) ANY (OUTCHAN) <SPECIAL CHANNEL>)
	<COND (<TYPE? .PRINT-OB LOSE> <SET MON-NUM <+ .MON-NUM 1>>)
	      (<PRIN1 <SET MON-NUM <+ .MON-NUM 1>>>
	       <PRINC !\	>
	       <&1 .PRINT-OB </ <- <13 .OUTCHAN> 11> 3>>
	       <PRINC " = ">
	       <&1 <COND (<==? <ME> ,MEND-PROCESS> <EVAL .PRINT-OB .RES>)
			 (<EVAL .PRINT-OB>)>>
	       <CRLF>)>>

<DEFINE MON-LIST-GC ("AUX" (EMPTY-SLOT 0) (ML ,MON-LIST)) 
	#DECL ((VALUE) <OR FALSE FIX> (EMPTY-SLOT) FIX (ML) VECTOR)
	<CRLF>
	<PRINC "RENUMBERING MONITOR LIST...">
	<REPEAT ((CUR-SLOT 0))
		#DECL ((VALUE) 'T (CUR-SLOT) FIX)
		<AND <G? <SET CUR-SLOT <+ .CUR-SLOT 1>> 32> <RETURN>>
		<COND (<TYPE? <.CUR-SLOT .ML> LOSE>
		       <AND <0? .EMPTY-SLOT> <SET EMPTY-SLOT .CUR-SLOT>>)
		      (<NOT <0? .EMPTY-SLOT>>
		       <PUT .ML .EMPTY-SLOT <.CUR-SLOT .ML>>
		       <SET EMPTY-SLOT <+ .EMPTY-SLOT 1>>)>>
	<CRLF>
	<COND (<0? .EMPTY-SLOT> <>)
	      (<MAPR <>
		     <FUNCTION (RML) <PUT .RML 1 #LOSE *000000000000*>>
		     <REST .ML <- .EMPTY-SLOT 1>>>
	       <SETG EMPTY-SLOT .EMPTY-SLOT>)>>

<GDECL (MSLEEP)
       <OR FIX FLOAT>
       (MPLINES
	MPTOP
	MPBOTM
	SEP-LENGTH
	EMPTY-SLOT
	LAST-LEVEL
	IPRINT-TIME
	IPRINT-TIMES)
       FIX
       (NOUT)
       CHANNEL
       (MEND-PROCESS)
       PROCESS
       (SEP-LINE SEP-LINE2)
       STRING
       (MON-LIST)
       VECTOR>

<DEFINE MINIT MINIT ("OPTIONAL" (MSLEEP <>)
				(MPLINES <>)
				(LAST-LEVEL <>)
				(IPRINT-TIMES <>))
   #DECL ((VALUE) <OR ATOM <FALSE STRING>>
	  (MINIT) ACTIVATION
	  (MSLEEP) <OR FIX FLOAT FALSE>
	  (MPLINES LAST-LEVEL IPRINT-TIMES) <OR FIX FALSE>)
   <COND (<GASSIGNED? MPBOTM>)
	 (<SETG MPBOTM <15 ,OUTCHAN>>
	  <SETG SEP-LINE
		<ISTRING <SETG SEP-LENGTH <- <13 ,OUTCHAN> 23>> !\_>>
	  <SETG SEP-LINE2 <ISTRING <13 ,OUTCHAN> !\_>>
	  <SETG MON-LIST <IVECTOR 32>>
	  <SETG EMPTY-SLOT 1>)>
   <AND <OR .MSLEEP <NOT <GASSIGNED? MSLEEP>>>
	<SETG MSLEEP
	      <COND (<NOT .MSLEEP> 1)
		    (<L? .MSLEEP 0>
		     <RETURN #FALSE ("DELAY-TIME CANNOT BE NEGATIVE") .MINIT>)
		    (.MSLEEP)>>>
   <COND (<NOT <GASSIGNED? MPLINES>>
	  <SETG MPLINES
		<COND (<NOT .MPLINES> <COND (<L? ,MPBOTM 25> 8) (12)>)
		      (<L? .MPLINES 8> 8)
		      (<G? ,MPLINES <- ,MPBOTM 4>> <- ,MPBOTM 4>)>>
	  <SETG MPTOP <+ ,MPLINES 1>>)
	 (.MPLINES
	  <SET MPLINES
	       <COND (<L? .MPLINES 8> 8)
		     (<G? .MPLINES <- ,MPBOTM <- ,MPTOP ,MPLINES> 3>>
		      <- ,MPBOTM <- ,MPTOP ,MPLINES 3>>)>>
	  <SETG MPTOP <+ <- ,MPTOP ,MPLINES> .MPLINES>>
	  <SCML <- ,MPBOTM ,MPTOP> ,OUTCHAN>
	  <SETG MPLINES .MPLINES>)>
   <AND <OR .LAST-LEVEL <NOT <GASSIGNED? LAST-LEVEL>>>
	<SETG LAST-LEVEL
	      <COND (<NOT .LAST-LEVEL> 100000)
		    (<L? .LAST-LEVEL 1>
		     <RETURN #FALSE ("LAST-LEVEL MUST BE POSITIVE") .MINIT>)
		    (.LAST-LEVEL)>>>
   <AND <OR .IPRINT-TIMES <NOT <GASSIGNED? IPRINT-TIMES>>>
	<SETG IPRINT-TIMES
	      <COND (<NOT .IPRINT-TIMES> 5)
		    (<L? .IPRINT-TIMES 1>
		     <RETURN #FALSE ("PRINTING-FREQUENCY MUST BE POSITIVE")
			     .MINIT>)
		    (.IPRINT-TIMES)>>
	<SETG IPRINT-TIME ,IPRINT-TIMES>>
   T>

<ENDPACKAGE>
