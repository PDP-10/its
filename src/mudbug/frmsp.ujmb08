<PACKAGE "FRMSP">

<ENTRY FRAMESP FR&P FRATMP FRMP FRLVALP FRTYPE FRTYPEP>

<DEFINE FRAMESP ("OPTIONAL" (PROC <ME>) F1 F2
		 "AUX" (LERR\ !-INTERRUPTS
			<COND (<TYPE? .PROC FRAME> .PROC) (<FRAME .PROC>)>))
	#DECL ((VALUE) <OR ATOM STRING> (PROC) <OR FRAME PROCESS> (F1 F2) FIX
	       (LERR\ !-INTERRUPTS) <SPECIAL FRAME>)
	<COND (<ASSIGNED? F2> <FRAMES .F1 .F2>)
	      (<ASSIGNED? F1> <FRAMES .F1>)
	      (<FRAMES>)>>

<DEFINE FR&P ("OPTIONAL" (PROC <ME>) F1 F2
	      "AUX" (LERR\ !-INTERRUPTS
		     <COND (<TYPE? .PROC FRAME> .PROC) (<FRAME .PROC>)>))
	#DECL ((VALUE) <OR ATOM STRING> (PROC) <OR FRAME PROCESS> (F1 F2) FIX
	       (LERR\ !-INTERRUPTS) <SPECIAL FRAME>)
	<COND (<ASSIGNED? F2> <FR& .F1 .F2>)
	      (<ASSIGNED? F1> <FR& .F1>)
	      (<FR&>)>>

<DEFINE FRATMP ("OPTIONAL" (PROC <ME>) F1 F2
		"AUX" (LERR\ !-INTERRUPTS
		       <COND (<TYPE? .PROC FRAME> .PROC) (<FRAME .PROC>)>))
	#DECL ((VALUE) <OR ATOM STRING> (PROC) <OR FRAME PROCESS> (F1 F2) FIX
	       (LERR\ !-INTERRUPTS) <SPECIAL FRAME>)
	<COND (<ASSIGNED? F2> <FRATM .F1 .F2>)
	      (<ASSIGNED? F1> <FRATM .F1>)
	      (<FRATM>)>>

<DEFINE FRMP (NUM
	      "OPTIONAL" (PROC <ME>)
	      "AUX" (LERR\ !-INTERRUPTS
		     <COND (<TYPE? .PROC FRAME> .PROC) (<FRAME .PROC>)>))
	#DECL ((VALUE) FRAME (NUM) FIX (PROC) <OR FRAME PROCESS>
	       (LERR\ !-INTERRUPTS) <SPECIAL FRAME>)
	<FRM .NUM>>

<DEFINE FRLVALP (ATM
		 "OPTIONAL" (PROC <ME>) F1 F2
		 "AUX" (LERR\ !-INTERRUPTS
			<COND (<TYPE? .PROC FRAME> .PROC) (<FRAME .PROC>)>))
	#DECL ((VALUE) STRING (ATM) ATOM (PROC) <OR FRAME PROCESS> (F1 F2) FIX
	       (LERR\ !-INTERRUPTS) <SPECIAL FRAME>)
	<COND (<ASSIGNED? F2> <FRLVAL .ATM .F1 .F2>)
	      (<ASSIGNED? F1> <FRLVAL .ATM .F1>)
	      (<FRLVAL .ATM>)>>

<DEFINE TYPE-ERROR ("TUPLE" TUP) 
	<AND <ASSIGNED? FRACT> <INT-LEVEL 0> <ERRET TYPE .FRACT>>>

<GDECL (TENEX?) <OR ATOM FALSE>
       (ERROR-IHEADER MPV-IHEADER) IHEADER
       (TYPE-ERROR-HANDLER TYPE-MPV-HANDLER) HANDLER>

<SETG TENEX? <G? ,MUDDLE 100>>

<SETG ERROR-IHEADER
      <OR <GET ERROR!-INTERRUPTS INTERRUPT> <EVENT "ERROR" 100>>>

<OR ,TENEX?
    <SETG MPV-IHEADER
	  <OR <GET MPV!-INTERRUPTS INTERRUPT> <EVENT "MPV" 100>>>>

<SETG TYPE-ERROR-HANDLER
      <OFF <HANDLER ,ERROR-IHEADER ,TYPE-ERROR>>>

<OR ,TENEX?
    <SETG TYPE-MPV-HANDLER
	  <OFF <HANDLER ,MPV-IHEADER ,TYPE-ERROR>>>>

<DEFINE FRTYPE ("OPTIONAL" (DO 1000) (FRM-NUM 0) "AUX" (OUTC .OUTCHAN)) 
   #DECL ((VALUE) <OR ATOM STRING> (DO FRM-NUM) FIX
	  (OUTC) <CHANNEL [12 ANY] [4 FIX]>)
   <HANDLER ,ERROR-IHEADER ,TYPE-ERROR-HANDLER>
   <OR ,TENEX? <HANDLER ,MPV-IHEADER ,TYPE-MPV-HANDLER>>
   <CRLF .OUTC>
   <UNWIND
    <REPEAT ((FR <FRM .FRM-NUM>) FNCT)
      #DECL ((VALUE) <OR ATOM STRING> (FR) FRAME (FNCT) ATOM)
      <COND (<==? .DO 0>
	     <OFF ,TYPE-ERROR-HANDLER>
	     <OR ,TENEX? <OFF ,TYPE-MPV-HANDLER>>
	     <RETURN "FUNCT---ARGS">)
	    (<NOT <LEGAL? .FR>>
	     <OFF ,TYPE-ERROR-HANDLER>
	     <OR ,TENEX? <OFF ,TYPE-MPV-HANDLER>>
	     <RETURN "ILLEGAL FRAME">)
	    (<==? <SET FNCT <FUNCT .FR>> TOPLEVEL>
	     <OFF ,TYPE-ERROR-HANDLER>
	     <OR ,TENEX? <OFF ,TYPE-MPV-HANDLER>>
	     <RETURN .FNCT>)>
      <PRIN1 .FRM-NUM .OUTC>
      <PRINC !\  .OUTC>
      <AND <L? .FRM-NUM 10> <PRINC !\  .OUTC>>
      <PRIN1 .FNCT .OUTC>
      <PRINC !\	 .OUTC>
      <AND <==? <14 .OUTC> 8> <PRINC !\	 .OUTC>>
      <COND
       (<EMPTY? <ARGS .FR>> <PRIN1 [] .OUTC>)
       (<PRINC !\[ .OUTC>
	<MAPR <>
	 <FUNCTION (OBS "AUX" (OB <1 .OBS>))
	  #DECL ((OBS) TUPLE)
	  <AND <OR <==? <PRIN1 <PROG FRACT ()
				     #DECL ((VALUE) ATOM
					    (FRACT) <SPECIAL ACTIVATION>)
				     <TYPE .OB>>
			       .OUTC>
			TYPE>
		   <NOT <LEGAL? .OB>>>
	       <PRINC "-illegal" .OUTC>>
	  <OR <EMPTY? <REST .OBS>> <PRINC !\  .OUTC>>>
	 <ARGS .FR>>
	<PRINC !\] .OUTC>)>
      <CRLF .OUTC>
      <SET DO <- .DO 1>>
      <SET FRM-NUM <+ .FRM-NUM 1>>
      <SET FR <FRAME .FR>>>
    <PROG ()
	  <OFF ,TYPE-ERROR-HANDLER>
	  <OR ,TENEX? <OFF ,TYPE-MPV-HANDLER>>>>>

<DEFINE FRTYPEP ("OPTIONAL" (PROC <ME>) F1 F2
		 "AUX" (LERR\ !-INTERRUPTS
			<COND (<TYPE? .PROC FRAME> .PROC) (<FRAME .PROC>)>))
	#DECL ((VALUE) <OR ATOM STRING> (PROC) <OR FRAME PROCESS> (F1 F2) FIX
	       (LERR\ !-INTERRUPTS) <SPECIAL FRAME>)
	<COND (<ASSIGNED? F2> <FRTYPE .F1 .F2>)
	      (<ASSIGNED? F1> <FRTYPE .F1>)
	      (<FRTYPE>)>>

<ENDPACKAGE>
