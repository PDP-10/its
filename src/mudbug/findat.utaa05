
<PACKAGE "FINDATOM">

<ENTRY FINDATOM PLACEH STAR QUOTER>

<GDECL (SPECV)
       <VECTOR [REST <OR FIX FALSE> <OR STRING FALSE>]>
       (A)
       STRING
       (FINDCT)
       FIX>

<SETG PLACEH <ASCII 61>>

<SETG STAR <ASCII 42>>

<SETG QUOTER <ASCII 17>>

<GDECL (PLACEH STAR QUOTER) CHARACTER>

<DEFINE FINDATOM (SPECSTR
		  "OPTIONAL" (OBS T)
		  "TUPLE" TYPE-SPEC
		  "AUX" SPHACK
			(OUTOBL .OBLIST)
			SPEC
			(TEMP <>)
			(VALUE? <>)
			(NOVALUE? <>)
			(LINK? <>)
			(DECL <>)
			(TYPES <>)
			(OUTCHAN .OUTCHAN) (NOBS <>))
   #DECL ((SPECSTR) <OR ATOM STRING> (OBS) <OR ATOM FALSE LIST OBLIST>
	  (OUTOBL) <LIST [REST OBLIST]> (VALUE? NOVALUE? LINK?) <OR ATOM FALSE>
	  (DECL) <OR FORM ATOM FALSE> (TYPES) <OR FALSE <TUPLE [REST ATOM]>>
	  (SPHACK) <OR STRING FALSE> (TEMP) <OR FALSE ATOM <PRIMTYPE LIST>>
	  (SPEC) <VECTOR [REST <OR FIX FALSE> <OR STRING FALSE>]>
	  (TYPE-SPEC) TUPLE (OUTCHAN) CHANNEL (NOBS) <OR FALSE LIST>)
   <CRLF>
   <COND (<NOT .OBS>
	  <COND (<EMPTY? .OBS> <SET OBS .OBLIST>)
		(<SET NOBS <CHTYPE .OBS LIST>>
		 <MAPR <>
		   <FUNCTION (X "AUX" Z (Y <1 .X>))
		     <COND (<TYPE? .Y ATOM>
			    <AND <SET Z <GET .Y OBLIST>>
				 <PUT .X 1 .Z>>)
			   (<NOT <TYPE? .Y OBLIST>>
			    <PUT .X 1 <EVAL .Y>>)>>
		   .NOBS>
		 <SET OBS T>)>)
	 (<AND <TYPE? .OBS LIST>
	       <EMPTY? .OBS>>
	  <SET OBS T>
	  <SET OUTOBL ()>)>
   <COND
    (<EMPTY? .TYPE-SPEC> <SET VALUE? T> <SET NOVALUE? T>)
    (T
     <COND (<TYPE? <SET TEMP <NTH .TYPE-SPEC <LENGTH .TYPE-SPEC>>>
		   LIST>
	    <SET OUTOBL .TEMP>)
	   (T <SET TEMP <>>)>
     <COND
      (<AND .TEMP <==? <LENGTH .TYPE-SPEC> 1>>
       <SET VALUE? T>
       <SET NOVALUE? T>)
      (T
       <COND (<MEMQ LINK .TYPE-SPEC> <SET LINK? T>)>
       <COND
	(<MEMQ T .TYPE-SPEC> <SET VALUE? T> <SET NOVALUE? T>)
	(<MEMQ ANY .TYPE-SPEC>
	 <SET VALUE? T>
	 <COND (<MEMQ <> .TYPE-SPEC> <SET NOVALUE? T>)>)
	(T
	 <COND (<MEMQ <> .TYPE-SPEC> <SET NOVALUE? T>)>
	 <REPEAT ((FROB <REST .TYPE-SPEC <- <LENGTH .TYPE-SPEC> 1>>)
		  (FROB1 <REST .FROB>) FOO)
		 #DECL ((FROB FROB1) <TUPLE [REST <OR FALSE ATOM LIST FORM>]>
			(FOO) <OR FALSE ATOM LIST FORM>)
		 <COND (<OR <TYPE? <SET FOO <1 .FROB>> LIST FALSE>>)
		       (<TYPE? .FOO FORM>
			<SET DECL <CHTYPE (.FOO !.DECL) FORM>>)
		       (<VALID-TYPE? .FOO>
			<PUT <SET FROB1 <BACK .FROB1>> 1 .FOO>)
		       (<SET DECL <CHTYPE (.FOO !.DECL) FORM>>)>
		 <COND (<==? .FROB .TYPE-SPEC>
			<COND (.DECL
			       <COND (<==? <LENGTH .DECL> 1>
				      <SET DECL <1 .DECL>>)
				     (<SET DECL <CHTYPE (OR !.DECL) FORM>>)>)>
			<COND (<EMPTY? .FROB1>) (<SET TYPES .FROB1>)>
			<RETURN>)
		       (<SET FROB <BACK .FROB>>)>>)>)>)>
   <SETG FINDCT 0>
   <COND (<TYPE? .SPECSTR ATOM>
	  <SET SPHACK <>>
	  <SET SPECSTR <SPNAME .SPECSTR>>)
	 (<SET SPHACK <OR <MEMQ ,PLACEH .SPECSTR> <MEMQ ,STAR .SPECSTR>>>)>
   <COND (.SPHACK
	  <SET SPEC <SPEC-HACK .SPECSTR>>
	  <COND (<AND <3 .SPEC>
		      <NOT <5 .SPEC>>
		      <4 .SPEC>
		      <0? <3 .SPEC>>
		      <NOT <2 .SPEC>>
		      <0? <1 .SPEC>>>
		 <SET SPECSTR <4 .SPEC>>
		 <SET SPHACK <>>)>)>
   <COND (<TYPE? .OBS OBLIST> <SET OBS (.OBS)>)>
   <COND
    (<TYPE? .OBS LIST>
     <MAPF <>
	   <FUNCTION (X "AUX" ATM) 
		   #DECL ((X) OBLIST (ATM) <OR ATOM LINK FALSE>)
		   <COND (.SPHACK
			  <SEARCH-OBL .X
				      .SPEC
				      .OUTOBL
				      .VALUE?
				      .NOVALUE?
				      .LINK?
				      .TYPES
				      .DECL>)
			 (T
			  <COND (<AND <SET ATM <LOOKUP .SPECSTR .X>>
				      <TYPE-CHECK .ATM
						  .VALUE?
						  .NOVALUE?
						  .LINK?
						  .TYPES
						  .DECL>>
				 <PRINIT .ATM .OUTOBL>)>)>>
	   .OBS>)
    (T
     <GROVEL <COND (.SPHACK .SPEC) (T .SPECSTR)>
	     .OUTOBL
	     .VALUE?
	     .NOVALUE?
	     .LINK?
	     .TYPES
	     .DECL
	     .NOBS>)>
   <CRLF>
   <PRINC "(Found ">
   <PRINC ,FINDCT>
   <PRINC ")">
   <CRLF>
   ,NULL>

<DEFINE MATCH? (N SIF MBL SIB SPEC
		"AUX" (MFL <1 .SPEC>) (TS <2 .SPEC>)
		      (MINL <+ .MFL .MBL <LENGTH .TS>>) (NL <LENGTH .N>)
		      (TSL <LENGTH .TS>) TSTR TR)
   #DECL ((N TS) STRING (SIF TR) <OR ATOM FALSE> (SIB) <OR STRING FALSE>
	  (TSTR) <OR STRING FALSE> (MBL MFL MINL ML TSL) FIX
	  (SPEC) <VECTOR [REST <OR FIX FALSE> <OR STRING FALSE>]>)
   <SET SPEC <REST .SPEC 2>>
   <AND <G=? .NL .MFL> <SET N <REST .N .MFL>>>
   <COND
    (<L? .NL .MINL> <>)
    (<SET TSTR <MEMBER .TS .N>>
     <COND
      (.SIF
       <COND
	(<1 .SPEC>
	 <SET TR
	      <COND (<2 .SPEC> <MATCH? <REST .TSTR .TSL> <> .MBL .SIB .SPEC>)
		    (T <MATCH? <REST .TSTR .TSL> T .MBL .SIB <REST .SPEC 2>>)>>
	 <SET SPEC <PUT <BACK .SPEC 2> 1 0>>
	 <REPEAT ((TMP .TSTR))
		 #DECL ((TMP) <OR FALSE STRING>)
		 <COND (<AND <NOT .TR> <SET TMP <MEMBER .TS <REST .TMP>>>>
			<SET TR <MATCH? .TMP T .MBL .SIB .SPEC>>)
		       (T <RETURN .TR>)>>
	 <PUT .SPEC 1 .MFL>
	 .TR)
	(T
	 <REPEAT ()
	   <COND
	    (<AND <NOT <SET TR
			    <OR <==? <SET MINL <LENGTH <REST .TSTR .TSL>>> .MBL>
				<AND .SIB <G? .MINL .MBL>>>>>
		  <SET TSTR <MEMBER .TS <REST .TSTR>>>>)
	    (T <RETURN .TR>)>>)>)
      (<==? .TSTR .N>
       <COND (<1 .SPEC>
	      <COND (<2 .SPEC> <MATCH? <REST .TSTR .TSL> <> .MBL .SIB .SPEC>)
		    (T <MATCH? <REST .TSTR .TSL> T .MBL .SIB <REST .SPEC 2>>)>)
	     (T
	      <OR <==? <SET MINL <LENGTH <REST .TSTR .TSL>>> .MBL>
		  <AND .SIB <G? .MINL .MBL>>>)>)>)>>

<DEFINE SPEC-HACK (AST
		   "AUX" (SPEC
			  <OR <AND <GASSIGNED? SPECV> ,SPECV>
			      <SETG SPECV <IVECTOR 50 <>>>>)
			 (LASTCHR ,PLACEH)
			 (ASP <REST .SPEC 2>)
			 (STFLG <>))
	#DECL ((AST) STRING (LASTCHR) CHARACTER (ASP SPEC) VECTOR
	       (STFLG) <OR ATOM FALSE>)
	<REPEAT ((TST <OR <AND <GASSIGNED? A> ,A> <SETG A <ISTRING 20>>>)
		 (A .TST) (CT 0) CHR ACH)
		#DECL ((TST A) STRING (CT) FIX (CHR ACH) CHARACTER)
		<COND (<EMPTY? .AST>
		       <COND (<OR <==? .LASTCHR ,STAR>
				  <AND <==? .LASTCHR ,PLACEH> .STFLG>>
			      <PUT .SPEC 1 .CT>
			      <PUT .SPEC 2 "">
			      <PUT <BACK .ASP 2> 1 <>>)
			     (<==? .LASTCHR ,PLACEH>
			      <PUT .SPEC 1 .CT>
			      <PUT .SPEC 2 <>>
			      <PUT .ASP 1 <>>)
			     (T
			      <PUT .ASP 1 <SUBSTRUC .A 0 .CT>>
			      <PUT .ASP 2 <>>
			      <PUT .SPEC 1 0>
			      <PUT .SPEC 2 <>>)>
		       <RETURN .SPEC>)
		      (<==? <SET CHR <1 .AST>> ,STAR>
		       <COND (<N==? .LASTCHR ,STAR>
			      <COND (<N==? .LASTCHR ,PLACEH>
				     <PUT .ASP 1 <SUBSTRUC .A 0 .CT>>
				     <SET TST .A>
				     <SET CT 0>
				     <SET ASP <REST .ASP>>)>
			      <SET ASP <REST <PUT <PUT .ASP 1 0> 2 <>> 2>>
			      <SET STFLG T>)>)
		      (<==? .CHR ,PLACEH>
		       <COND (<==? .LASTCHR ,STAR> <SET CT <+ .CT 1>>)
			     (<N==? .LASTCHR ,PLACEH>
			      <SET ASP <REST <PUT .ASP 1 <SUBSTRUC .A 0 .CT>>>>
			      <SET TST .A>
			      <SET CT 1>)
			     (T <SET CT <+ .CT 1>>)>)
		      (T
		       <COND (<==? .CHR ,QUOTER>
			      <SET ACH <1 <SET AST <REST .AST>>>>)
			     (T <SET ACH .CHR>)>
		       <COND (<==? .LASTCHR ,STAR>
			      <SET ASP <REST <PUT .ASP 1 .CT>>>
			      <SET CT 0>)
			     (<==? .LASTCHR ,PLACEH>
			      <SET ASP <REST <PUT .ASP 1 .CT>>>
			      <SET CT 0>)>
		       <SET STFLG <>>
		       <SET TST <REST <PUT .TST 1 .ACH>>>
		       <SET CT <+ .CT 1>>)>
		<SET LASTCHR .CHR>
		<SET AST <REST .AST>>>>

<DEFINE SEARCH-OBL (OBL SPEC OUTOBL VALUE? NOVALUE? LINK? TYPES DECL
		    "AUX" (SIB <2 .SPEC>) (MBL <1 .SPEC>) SIF (LOSER <>) TLEN)
   #DECL ((OBL) OBLIST (SPEC) <VECTOR [REST <OR FIX FALSE> <OR STRING FALSE>]>
	  (SIB) <OR STRING FALSE> (MBL) FIX
	  (VALUE? LINK? SIF NOVALUE?) <OR ATOM FALSE> (LOSER) <OR ATOM FALSE>
	  (TLEN) FIX (OUTOBL) <LIST [REST OBLIST]> (TYPES) <OR FALSE TUPLE>
	  (DECL) <OR FALSE ATOM FORM>)
   <COND (<NOT <3 .SPEC>> <SET LOSER T>)
	 (<4 .SPEC> <SET SIF <>> <SET SPEC <REST .SPEC 2>>)
	 (T <SET SIF T> <SET SPEC <REST .SPEC 4>>)>
   <MAPF <>
    <FUNCTION (BUCKET) 
       #DECL ((BUCKET) <LIST [REST <OR ATOM LINK>]>)
       <MAPF <>
	<FUNCTION (ATM) 
	   #DECL ((ATM) <OR ATOM LINK>)
	   <COND
	    (.LOSER
	     <COND (<AND <OR <==? <SET TLEN
				       <LENGTH <SPNAME <CHTYPE .ATM ATOM>>>>
				  .MBL>
			     <AND .SIB <G? .TLEN .MBL>>>
			 <TYPE-CHECK .ATM
				     .VALUE?
				     .NOVALUE?
				     .LINK?
				     .TYPES
				     .DECL>>
		    <PRINIT .ATM .OUTOBL>)>)
	    (<AND <MATCH? <SPNAME <CHTYPE .ATM ATOM>> .SIF .MBL .SIB .SPEC>
		  <TYPE-CHECK .ATM .VALUE? .NOVALUE? .LINK? .TYPES .DECL>>
	     <PRINIT .ATM .OUTOBL>)>>
	.BUCKET>>
    .OBL>>

<DEFINE PRINIT (ATM OBLIST "AUX" (OUTCHAN .OUTCHAN)) 
	#DECL ((ATM) <OR ATOM LINK> (OBLIST) <SPECIAL <LIST [REST OBLIST]>>
	       (OUTCHAN) CHANNEL)
	<COND (<TYPE? .ATM LINK>
	       <PRIN1 .ATM>
	       <PRINC "  Link to ">
	       <PRIN1 ,<CHTYPE .ATM ATOM>>
	       <CRLF>
	       <SETG FINDCT <+ ,FINDCT 1>>)
	      (T
	       <PRIN1 .ATM>
	       <AND <GASSIGNED? .ATM>
		    <PRINC " ">
		    <PRINC "Gassigned ">
		    <PRINC <TYPE ,.ATM>>>
	       <AND <ASSIGNED? .ATM>
		    <PRINC " ">
		    <PRINC "Assigned ">
		    <PRINC <TYPE ..ATM>>>
	       <CRLF>
	       <SETG FINDCT <+ ,FINDCT 1>>)>>

<DEFINE TYPE-CHECK (ATM VALUE? NOVALUE? LINK? TYPES DECL "AUX" VAL) 
	#DECL ((ATM) <OR ATOM LINK> (VALUE? LINK? NOVALUE?) <OR ATOM FALSE>
	       (TYPES) <OR FALSE <TUPLE [REST ATOM]>>
	       (DECL) <OR FORM ATOM FALSE> (VAL) ANY)
	<COND (<TYPE? .ATM LINK> <OR .LINK? .VALUE?>)
	      (<AND .VALUE? .NOVALUE?>)
	      (<AND .NOVALUE?
		    <NOT <OR <GASSIGNED? .ATM> <ASSIGNED? .ATM>>>>)
	      (.VALUE? <OR <GASSIGNED? .ATM> <ASSIGNED? .ATM>>)
	      (<AND <GASSIGNED? .ATM>
		    <PROG ()
			  <SET VAL ,.ATM>
			  T>
		    <OR <AND .TYPES <MEMQ <TYPE .VAL> .TYPES>>
			<AND .DECL <DECL? .VAL .DECL>>>>)
	      (<AND <ASSIGNED? .ATM>
		    <PROG ()
			  <SET VAL ..ATM>
			  T>
		    <OR <AND .TYPES <MEMQ <TYPE .VAL> .TYPES>>
			<AND .DECL <DECL? .VAL .DECL>>>>)>>

<DEFINE GROVEL (SPEC OUTOBL VALUE? NOVALUE? LINK? TYPES DECL NOBS
		"AUX" (CASOC <ASSOCIATIONS>) (SPHACK <NOT <TYPE? .SPEC STRING>>)
		      TOBL)
	#DECL ((SPEC)
	       <OR STRING
		   <VECTOR [REST <OR FIX FALSE> <OR STRING FALSE>]>>
	       (CASOC)
	       <OR ASOC FALSE>
	       (SPHACK)
	       <OR ATOM FALSE>
	       (TOBL)
	       ANY
	       (VALUE? LINK? NOVALUE?)
	       <OR ATOM FALSE>
	       (TYPES)
	       <OR TUPLE FALSE>
	       (DECL)
	       <OR FORM FALSE ATOM>
	       (NOBS) <OR FALSE <LIST [REST OBLIST]>>)
	<REPEAT (TMP)
		#DECL ((TMP) <OR FALSE ATOM LINK>)
		<COND (<AND <==? <INDICATOR .CASOC> OBLIST>
			    <TYPE? <SET TOBL <AVALUE .CASOC>> OBLIST>
			    <NOT <MEMQ .TOBL .NOBS>>>
		       <COND (.SPHACK
			      <SEARCH-OBL .TOBL
					  .SPEC
					  .OUTOBL
					  .VALUE?
					  .NOVALUE?
					  .LINK?
					  .TYPES
					  .DECL>)
			     (<AND <SET TMP <LOOKUP .SPEC <AVALUE .CASOC>>>
				   <TYPE-CHECK .TMP
					       .VALUE?
					       .NOVALUE?
					       .LINK?
					       .TYPES
					       .DECL>>
			      <PRINIT .TMP .OUTOBL>)>)>
		<COND (<NOT <SET CASOC <NEXT .CASOC>>> <RETURN>)>>>

<ENDPACKAGE>
