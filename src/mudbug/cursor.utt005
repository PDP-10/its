<RPACKAGE "CURSOR">

<USE-TOTAL "EDIT">

<DEFINE CURPRIN (C)
	#DECL ((C) CURSOR)
	<CRLF>
	<COND (<AND <ASSIGNED? <3 .C>> <==? .<3 .C> .C>>
	       <PRIN1 <3 .C>>)
	      (T <PRINC "(???)">)>
	<INDENT-TO 10>
	<PRINC "| ">
	<COND (<NOT <LEGAL? <1 .C>>> <PRINC "ILLEGAL CURSOR">)
	      (<LOCATIVE? <1 .C>> <SAMP <IN <1 .C>> <2 .C> <>>)
	      (<SAMP <1 .C> <2 .C> <>>)>>

<PRINTTYPE CURSOR ,CURPRIN>

<SETG CURSORS? T>

<DEFINE CUP- (LOC POS AMT "AUX" OL) 
	#DECL ((LOC) LOCATIVE (POS AMT) FIX (OL) LIST)
	<COND (<G? .AMT 0>
	       <MAPR <>
		     <FUNCTION (L "EXTRA" (C <1 .L>)) 
			     #DECL ((L OL) LIST (C) CURSOR)
			     <COND (<G=? .POS <2 .C>>)
				   (<G=? <2 .C> <+ .POS .AMT>>
				    <PUT .C 2 <- <2 .C> .AMT>>)
				   (<PUTREST .OL <REST .L>>)>
			     <SET OL .L>>
		     <REST <SET OL <GET .LOC CURSOR '(T)>>>>)>>
;"
 pos=1,amt=2
 (*a*b*c*d*e*) ==> (*a*d*e*)
  0 1 2 3 4 5       0 1 2 3
  0 1 X 1 2 3
"

<DEFINE CUP+ (LOC POS AMT) 
	#DECL ((LOC) LOCATIVE (POS AMT) FIX)
	<COND (<G? .AMT 0>
	       <MAPF <>
		     <FUNCTION (C) 
			     #DECL ((C) CURSOR)
			     <COND (<G? <2 .C> .POS>
				    <PUT .C 2 <+ .AMT <2 .C>>>)>>
		     <REST <GET .LOC CURSOR '(T)>>>)>>
;"
 pos=2,amt=1
 (*a*b*c*d*) ==> (*a*b*bc*c*d*)
  0 1 2 3 4  ==>  0 1 2  3 4 5
  0 1 2 4 5
"

<DEFINE CUP^ (LOC POS ETEM "AUX" LOC1 CURS) 
	#DECL ((LOC LOC1) LOCATIVE (POS) FIX (CURS ETEM) <PRIMTYPE LIST>)
	<SET LOC1 <AT .ETEM <+ .POS 1>>>
	<SET CURS <GET .LOC1 CURSOR '(T)>>
	<PUT .LOC1 CURSOR>
	<COND (<NOT <LENGTH? .CURS 1>>
	       <MAPF <>
		     <FUNCTION (C) 
			     #DECL ((C) CURSOR)
			     <PUT .C 2 <+ <2 .C> .POS>>
			     <PUT .C 1 .LOC>>
		     <REST .CURS>>
	       <PUTREST <REST .CURS <- <LENGTH .CURS> 1>>
			<REST <GET .LOC CURSOR '(T)>>>
	       <PUT .LOC CURSOR .CURS>)>>
;"
 pos=1,amt=3
 (*a*(*b*c*d*)*e*f*) ==> (*a*b*c*d*e*f*) 
  0 1(0 1 2 3)2 3 4       0 1 2 3 4 5 6
  0 1(1 2 3 4)4 5 6
"

<DEFINE CUP* (LOC POS AMT ETEM
	      "OPTIONAL" FLUSH?
	      "AUX" (NLOC <AT .ETEM <+ .POS 1>>) (OL <GET .LOC CURSOR '(T)>)
		    (L <REST .OL>) (NCURS ()) C)
	#DECL ((LOC NLOC) LOCATIVE (ETEM) <PRIMTYPE LIST> (AMT POS) FIX
	       (NCURS OL L) LIST (C) CURSOR)
	<REPEAT ()
		<COND (<EMPTY? .L> <RETURN>)>
		<SET C <1 .L>>
		<COND (<L=? <2 .C> .POS>)
		      (<G=? <2 .C> <+ .POS .AMT>> <PUT .C 2 <- <2 .C> -1 .AMT>>)
		      (T
		       <PUTREST .OL <REST .L>>
		       <COND (<NOT .FLUSH?>
			      <PUT .C 1 .NLOC>
			      <PUT .C 2 <- <2 .C> .POS>>
			      <SET NCURS (.C !.NCURS)>)>)>
		<SET L <REST <SET OL .L>>>>
	<COND (<EMPTY? .NCURS>) (<PUT .NLOC CURSOR (T !.NCURS)>)>>
;"
 pos=1,amt=3
 (*a* *b*c*d* *e*) ==> (*a*(*b*c*d*)*e*)
  0 1 1 2 3 4 4 5       0 1(0 1 2 3)2 3
  0 1(0 1 2 3)2 3
"

<DEFINE ATTACH (LOC OBJ "AUX" CURS) 
	#DECL ((LOC) LOCATIVE (CURS) <PRIMTYPE LIST>)
	<COND (<AND <==? <PRIMTYPE .OBJ> LIST>
		    <NOT <LENGTH? <SET CURS <GET <CHTYPE .OBJ LIST> CURSOR>>
				  1>>>
	       <MAPF <>
		     <FUNCTION (C) #DECL ((C) CURSOR) <PUT .C 1 .LOC>>
		     <REST .CURS>>
	       <PUT .OBJ CURSOR>			 ;"can attach only once"
	       <PUT .CURS 1 T>
	       <PUT .LOC CURSOR .CURS>			 ;"old stuff flushed")>>

<DEFINE PRINCUR (LOC OBJ OUTCHAN) 
	#DECL ((OBJ) <PRIMTYPE LIST> (OUTCHAN) CHANNEL (LOC) LOCATIVE)
	<MAPF <>
	      ,CURPRIN
	      <REST <GET .LOC CURSOR '(T)>>>
	<MAPR <>
	      <FUNCTION (L) 
		      #DECL ((L) <PRIMTYPE LIST>)
		      <COND (<==? <PRIMTYPE <1 .L>> LIST>
			     <PRINCUR <AT .L> <1 .L> .OUTCHAN>)>>
	      .OBJ>>


<DEFINE CUREDIT (COMSTR WHERE POS
		 "AUX" (EDIT-ITEM <IN .WHERE>) (JUNKSTR ,JUNKSTR) TEMP TEMP2 LST) 
   #DECL ((VALUE) ANY (COMSTR JUNKSTR) STRING (WHERE) LOCATIVE
	  (EDIT-ITEM) <PRIMTYPE LIST> (POS) FIX (TEMP TEMP2) ANY (LST) <PRIMTYPE LIST>)
   <COND
    (<=? .COMSTR "GO">
     <READSTRING .JUNKSTR .INCHAN ,GOOD-CHRS>
     <SET TEMP <EVAL <INTREAD .INCHAN>>>
     <COND (<TYPE? .TEMP CURSOR>
	    <SET SEARCH+ <1 .TEMP>>
	    <SET GOTO .TEMP>
	    <SET GETPATH T>)
	   (<ERR "ERROR, ARG TO GO NOT CURSOR">)>)
    (<=? .COMSTR "PC">
     <PRINCUR .WHERE .EDIT-ITEM .OUTCHAN>
     <CRLF>)
    (<=? .COMSTR "PA">
     <PRINCUR .TOP-ITEM <IN .TOP-ITEM> .OUTCHAN>
     <CRLF>)
    (<=? .COMSTR "CU">
     <READSTRING .JUNKSTR .INCHAN ,GOOD-CHRS>
     <SET TEMP <INTREAD .INCHAN>>
     <COND
      (<NOT <TYPE? .TEMP ATOM>>
       <ERR "ERROR, ARG TO CU NOT ATOM">)
      (T
       <COND (<AND <ASSIGNED? .TEMP>
		   <TYPE? <SET TEMP2 ..TEMP> CURSOR>
		   <SET LST <GET <1 .TEMP2> CURSOR>>
		   <MAPR <>
			 <FUNCTION (L) 
				 #DECL ((L) LIST)
				 <COND (<==? <1 .L> .TEMP2>
					<PUTREST .LST <REST .L>>
					<MAPLEAVE T>)
				       (T <SET LST .L> <>)>>
			 <REST .LST>>>)
	     (T
	      <SET .TEMP
		   <SET TEMP2 <CHTYPE [<RGLOC NULL> -1 NULL] CURSOR>>>)>
       <PUT .TEMP2 1 .WHERE>
       <PUT .TEMP2 2 .POS>
       <PUT .TEMP2 3 .TEMP>
       <PUT .WHERE
	    CURSOR
	    <COND (<SET CURS <GET .WHERE CURSOR>>
		   <PUT .CURS 1 ..TEMP>
		   <CONS T .CURS>)
		  ((T ..TEMP))>>)>)
    (<=? .COMSTR "KC"> <ERR "CURRENTLY UNIMPLEMENTED COMMAND">)>>

<SETG CUREDIT-TABLE <MAPF ,VECTOR
			  <FUNCTION (STR) <MAPRET .STR ,CUREDIT>>
			  '["GO" "PC" "PA" "CU" "KC"]>>

<COND (<GASSIGNED? EDIT-TABLE> <SETG EDIT-TABLE [!,EDIT-TABLE !,CUREDIT-TABLE]>)
      (<SETG EDIT-TABLE ,CUREDIT-TABLE>)>

<ENDPACKAGE>
