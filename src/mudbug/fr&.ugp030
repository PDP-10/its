<RPACKAGE "FR&" "&">

<ENTRY FR&VAL FR& &1 &LIS & &VAL>

<USE "PP">

<DEFINE FR&				    ;"Prints FUNCT and ARGS for -n- frames down"
	("OPTIONAL" (HOW-MANY 999) (FIRST 0) (OUTC .OUTCHAN))
	#DECL ((HOW-MANY FIRST) FIX (SPECBEF SPECAFT) <SPECIAL ANY>
	       (OUTC) <CHANNEL [12 ANY] [4 FIX]>)
	<TERPRI .OUTC>
	<REPEAT ((F <FRM .FIRST>) FF)
		#DECL ((F) FRAME (FF) ATOM)
		<COND (<0? .HOW-MANY> <RETURN "FUNCT---ARGS">)
		      (<==? <SET FF <FUNCT .F>> TOPLEVEL> <RETURN TOPLEVEL>)
		      (<AND			  ;"Don't print repetitious FSUBR args."
			    <OR <ASSIGNED? .FF> <GASSIGNED? .FF>>
			    <TYPE? <VALUE .FF> FSUBR>
			    <==? <FUNCT <FRAME .F>> EVAL>
			    <TYPE? <1 <ARGS <FRAME .F>>> FORM>
			    <==? .FF <1 <1 <ARGS <FRAME .F>>>>>>)
		      (ELSE
		       <PRIN1 .FIRST .OUTC>
		       <COND (<L? .FIRST 10> <PRINC "  " .OUTC>)
			     (ELSE <PRINC !\  .OUTC>)>
		       <PRIN1 .FF .OUTC>
		       <PRINC !\	 .OUTC>
		       <AND <L? <14 .OUTC> 13> <PRINC !\	 .OUTC>>
		       <&1 <ARGS .F>>
		       <TERPRI .OUTC>)>
		<SET F <FRAME .F>>
		<SET HOW-MANY <- .HOW-MANY 1>>
		<SET FIRST <+ .FIRST 1>>>>

<DEFINE FR&VAL (ATM "OPTIONAL" (HOW-MANY 100000) (FIRST 0)) 
	#DECL ((ATM) ATOM (HOW-MANY FIRST) FIX)
	<COND (<NOT <BOUND? .ATM>> "Atom is not bound anywhere.")
	      (ELSE
	       <TERPRI>
	       <SET HOW-MANY <+ .HOW-MANY 1>>
	       <REPEAT ((F <FRM .FIRST>) (LAST-LOC <LLOC .ATM>)
			(FLG <ASSIGNED? .ATM>) (NUM 0) NEXT-LOC)
		       #DECL ((F) FRAME (LAST-LOC NEXT-LOC) LOCD (NUM) FIX
			      (FLG) <OR ATOM FALSE>)
		       <COND (<==? .NUM .HOW-MANY>
			      <&VAL "Bound further down to: " .LAST-LOC .FLG>
			      <RETURN>)
			     (<==? <FUNCT .F> TOPLEVEL>
			      <&VAL "Toplevel binding: " .LAST-LOC .FLG>
			      <RETURN>)
			     (<NOT <BOUND? .ATM .F>>
			      <&VAL <- .NUM 1> .LAST-LOC .FLG>
			      <RETURN>)
			     (<==? .LAST-LOC <SET NEXT-LOC <LLOC .ATM .F>>>)
			     (ELSE
			      <&VAL <- .NUM 1> .LAST-LOC .FLG>
			      <SET LAST-LOC .NEXT-LOC>
			      <SET FLG <ASSIGNED? .ATM .F>>)>
		       <SET F <FRAME .F>>
		       <SET NUM <+ .NUM 1>>>
	       "Frame----Value")>>

<DEFINE &VAL (PRE LOCA FLG "AUX" (OUTCHAN .OUTCHAN))
	#DECL ((LOCA) LOCD (OUTCHAN) CHANNEL)
	<PRINC .PRE>
	<INDENT-TO 5>
	<COND (.FLG <&1 <IN .LOCA>> <TERPRI>)
	      (ELSE <PRINC "----bound, but not assigned a value----
">)>>

<SETG CLOBOT <REST <IVECTOR 12 1> 12>>

<SETG FSLBOT <REST <IUVECTOR 12 -1> 12>>

<GDECL (FLSBOT) <UVECTOR [REST FIX]> (CLOBOT) VECTOR>

<DEFINE & (OBJ "EXTRA" (OUTC .OUTCHAN))
	#DECL ((OBJ) ANY (OUTC) CHANNEL)
	<TERPRI .OUTC>
	<&1 .OBJ>
	<PRINC !\  .OUTC>
	.OBJ>

<SETG ASOC-VEC <IVECTOR 3>>
<DEFINE &1 (CO
	    "OPTIONAL" (CLLN <- <13 .OUTCHAN> <14 .OUTCHAN>>)
	    "EXTRA" (OUTC .OUTCHAN) AV)
   #DECL ((CO) ANY (M CLLN) FIX (OUTC) CHANNEL (AV) <VECTOR [3 ANY]>)
   <COND
    (<TYPE? .CO ASOC>
     <PUT <SET AV ,ASOC-VEC> 1 <ITEM .CO>>
     <PUT .AV 2 <INDICATOR .CO>>
     <PUT .AV 3 <AVALUE .CO>>
     <PRINC "#ASOC" .OUTC>
     <&1 .AV>
     .CO)
    (<OR <FLATSIZE .CO .CLLN> <MONAD? .CO>> <PRIN1 .CO .OUTC>)
    (<TYPE? .CO RSUBR> <PRINC "#RSUBR[&]" .OUTC>)
    (<TYPE? .CO CODE> <PRINC "#CODE![&!]" .OUTC>)
    (ELSE
     <REPEAT (CLOB FSL CLOBN CL? FS LLN STOP (NUM <MIN 12 </ .CLLN 7>>))
       #DECL ((CLOB) VECTOR (FSL) <UVECTOR [REST FIX]> (CL? CLOBN FS LLN NUM) FIX
	      (STOP) ANY (DOIT) ACTIVATION)
       <COND (<L? .NUM 2> <EP3 .CO .OUTC> <RETURN>)>
       <SET CLOB ,CLOBOT>
       <SET FSL ,FSLBOT>
       <SET CLOBN <SET FS 0>>
       <SET CL? <OR <LENGTH? .CO .NUM> 1000>>
       <SET LLN <- .CLLN <BRSZ .CO> -2>>
       <SET STOP
	    <COND (<L? .CL? 100> <REST .CO .CL?>)
		  (T <SET LLN <- .LLN 4>> <REST .CO <SET CL? .NUM>>)>>
       <REPEAT ((OBJ <REST .CO 0>))
	       #DECL ((OBJ) ANY)
	       <SET FS
		    <+ .FS
		       <1 <SET FSL
			       <PUT <BACK .FSL>
				    1
				    <+ 1
				       <COND (<FLATSIZE <1 .OBJ> .LLN>)
					     (ELSE
					      <SET CLOB <PUT <BACK .CLOB> 1 .OBJ>>
					      <SET CLOBN <+ .CLOBN 1>>
					      <BRSZ <1 .OBJ>>)>>>>>>>
	       <COND (<==? <SET OBJ <REST .OBJ>> .STOP> <RETURN>)>>
       <COND (<==? .CL? .CLOBN>
	      <EP2 .CO .STOP .CL? .LLN .OUTC>
	      <RETURN>)
	     (<NOT <G? .FS .LLN>>
	      <COND (<L? .FS </ .LLN 2>> <EP2 .CO .STOP .CL? .LLN .OUTC>)
		    (ELSE <EP1 .CO .CLOB .STOP .OUTC>)>
	      <RETURN>)>
       <COND
	(<REPEAT (TEM BRS)
	   #DECL ((BRS) FIX (TEM) ANY)
	   <REPEAT ((FL <REST .FSL>) (VIC .FSL))
	     #DECL ((FL) <UVECTOR [REST FIX]> (VIC) <UVECTOR [REST FIX]>)
	     <COND (<G? <1 .FL> <1 .VIC>> <SET VIC .FL>)
		   (<EMPTY? <SET FL <REST .FL>>>
		    <SET CLOBN <+ .CLOBN 1>>
		    <COND (<L? <SET BRS
				    <BRSZ <1 <SET TEM <REST .CO <- <LENGTH .VIC> 1>>>>>>
			       <1 .VIC>>
			   <SET CLOB <PUT <BACK .CLOB> 1 .TEM>>
			   <SET FS <- .FS <1 .VIC> <- .BRS>>>
			   <PUT .VIC 1 .BRS>)>
		    <RETURN T>)>>
	   <COND (<==? .NUM .CLOBN> <RETURN #FALSE ()>)
		 (<==? .CL? .CLOBN>
		  <EP2 .CO .STOP .CL? .LLN .OUTC>
		  <RETURN>)
		 (<NOT <G? .FS .LLN>>
		  <COND (<L? .FS </ .LLN 2>> <EP2 .CO .STOP .CL? .LLN .OUTC>)
			(ELSE <EP1 .CO .CLOB .STOP .OUTC>)>
		  <RETURN>)>>
	 <RETURN>)
	(ELSE <SET NUM <- .NUM 1>>)>>)>
   <MAPR <>
	 #FUNCTION ((V) #DECL ((V) <VECTOR ANY>) <PUT .V 1 1>)
	 <TOP ,CLOBOT>>
   .CO>

<DEFINE EP1 (CO CLOB STOP OUTC)
	#DECL ((CO STOP) ANY (CLOB) VECTOR (OUTC) CHANNEL)
	<BRACK OPENBRAK .CO .OUTC>
	<REPEAT ((ROL <REST .CO 0>))
		#DECL ((ROL) ANY)
		<COND (<MEMQ .ROL .CLOB>
		       <BRACK OPENBRAK <1 .ROL> .OUTC>
		       <PRINC !\& .OUTC>
		       <BRACK CLOSEBRAK <1 .ROL> .OUTC>)
		      (ELSE <PRIN1 <1 .ROL> .OUTC>)>
		<COND (<OR <==? <SET ROL <REST .ROL>> .STOP> <EMPTY? .ROL>>
		       <RETURN>)
		      (ELSE <PRINC !\  .OUTC>)>>
	<OR <EMPTY? .STOP> <PRINC " &.." .OUTC>>
	<BRACK CLOSEBRAK .CO .OUTC>>

<DEFINE EP2 (CO STOP NUM TOT OUTC)
	#DECL ((CO STOP) ANY (NUM TOT) FIX (OUTC) CHANNEL)
	<COND (<L? .TOT <* .NUM 4>> <EP3 .CO .OUTC>)
	      (ELSE
	       <BRACK OPENBRAK .CO .OUTC>
	       <REPEAT ((ROL <REST .CO 0>) (OLD <- <13 .OUTC> <14 .OUTC>>))
		       #DECL ((ROL) ANY (OLD) FIX)
		       <&1 <1 .ROL> </ .TOT .NUM>>
		       <COND (<OR <==? <SET ROL <REST .ROL>> .STOP> <EMPTY? .ROL>>
			      <RETURN>)
			     (ELSE
			      <PRINC !\  .OUTC>
			      <SET TOT
				   <- .TOT
				      <- .OLD
					 <SET OLD <- <13 .OUTC> <14 .OUTC>>>>>>
			      <SET NUM <- .NUM 1>>)>>
	       <OR <EMPTY? .STOP> <PRINC " &.." .OUTC>>
	       <BRACK CLOSEBRAK .CO .OUTC>)>>

<DEFINE EP3 (CO OUTC)
	#DECL ((CO) ANY (OUTC) CHANNEL)
	<BRACK OPENBRAK .CO .OUTC>
	<PRINC !\& .OUTC>
	<BRACK CLOSEBRAK .CO .OUTC>>

<DEFINE BRACK (WHICH WHAT OUTC "AUX" STR)
	#DECL ((WHICH) ATOM (WHAT) ANY (OUTC) CHANNEL (STR) <OR FALSE STRING>)
	<COND (<SET STR <GETPROP .WHICH <TYPE .WHAT>>>
	       <PRINC .STR .OUTC>)
	      (<TYPE? .WHAT ATOM FIX FLOAT>)
	      (<==? .WHICH OPENBRAK>
	       <PRINC !\# .OUTC>
	       <COND (<TYPE? .WHAT BYTES> <PRIN1 <BYTE-SIZE .WHAT> .OUTC>)
		     (<PRIN1 <TYPE .WHAT> .OUTC>)>
	       <COND (<SET STR <GETPROP OPENBRAK <PRIMTYPE .WHAT>>>
		      <PRINC .STR .OUTC>)
		     (ELSE <PRINC !\? .OUTC>)>)
	      (<SET STR <GETPROP CLOSEBRAK <PRIMTYPE .WHAT>>>
	       <PRINC .STR .OUTC>)
	      (ELSE <PRINC !\? .OUTC>)>>

<PROG ()
	<PUTPROP OPENBRAK LIST "(">
	<PUTPROP CLOSEBRAK LIST ")">
	<PUTPROP OPENBRAK FORM "<">
	<PUTPROP CLOSEBRAK FORM ">">
	<PUTPROP OPENBRAK VECTOR "[">
	<PUTPROP CLOSEBRAK VECTOR "]">
	<PUTPROP OPENBRAK UVECTOR "![">
	<PUTPROP CLOSEBRAK UVECTOR "!]">
	<PUTPROP OPENBRAK STRING "\"">
	<PUTPROP CLOSEBRAK STRING "\"">
	<PUTPROP OPENBRAK TUPLE "[">
	<PUTPROP CLOSEBRAK TUPLE "]">
	<PUTPROP OPENBRAK SEGMENT "!<">
	<PUTPROP CLOSEBRAK SEGMENT "!>">
	<PUTPROP OPENBRAK TEMPLATE "{">
	<PUTPROP CLOSEBRAK TEMPLATE "}">
	<PUTPROP OPENBRACK BYTES "{">
	<PUTPROP CLOSEBRACK BYTES "}">>

<DEFINE BRSZ (OBJ "AUX" (TOB <TYPE .OBJ>) STR)
	#DECL ((OBJ) ANY (TOB) ATOM (VALUE) FIX (STR) <OR STRING FALSE>)
	<COND (<SET STR <GETPROP OPENBRAK .TOB>>
	       <+ <* 2 <LENGTH .STR>> 2>)
	      (<TYPE? .OBJ ATOM FIX FLOAT> 2)
	      (<SET STR <GETPROP OPENBRAK <TYPEPRIM .TOB> "?">>
	       <+ <FLATSIZE .TOB 100> 3 <* 2 <LENGTH .STR>>>)>>

<DEFINE &LIS ("EXTRA" (OUTC .OUTCHAN))
	#DECL ((ENV) ENVIRONMENT (OUTC) CHANNEL)
	<PRINC "READ/EVAL/AMPERSAND PRINT LOOP
" .OUTC>
	<REPEAT (TEM (LAST-OUT .LAST-OUT))
		#DECL ((LAST-OUT) <SPECIAL ANY>)
		<SET TEM <READ>>
		<TERPRI .OUTC>
		<COND (<MONAD? <SET LAST-OUT <EVAL .TEM>>>
		       <PRIN1 .LAST-OUT .OUTC>)
		      (ELSE <&1 .LAST-OUT>)>
		<TERPRI .OUTC>>>

<ENDPACKAGE>
