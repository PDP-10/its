;;; -*- LISP -*-
;;;
;;; EXPAND: A package for macroexpanding files
;;;
;;; 1:20am  Saturday, 6 October 1979 :KMP
;;; 4:31am  Sunday, 30 March 1980 :GJC EOF-COMPILE-QUEUE
;;; 5:43pm  Thursday, 16 April 1981 :GJC KLEANED UP FOR USE IN MCL.

(HERALD EXPAND)

(EVAL-WHEN (COMPILE EVAL)
  (OR (GET 'IOTA 'VERSION) (LOAD '((LIBLSP)IOTA))))

(DEFUN COPY MACRO (X) `(SUBST NIL NIL ,(CADR X)))

(DEFVAR LISP->LISP NIL)

(DECLARE (SPECIAL EOF-COMPILE-QUEUE)
	 (*EXPR MACRO-EXPAND))

(DEFUN LISP->LISP (INPUT-FILE &OPTIONAL (OUTPUT-FILE ""))
  (SETQ OUTPUT-FILE (MERGEF OUTPUT-FILE "* MACROD"))
  (SETQ OUTPUT-FILE (MERGEF OUTPUT-FILE INPUT-FILE))
  (LET ((EOF-COMPILE-QUEUE NIL))
    (IOTA ((INFILE    INPUT-FILE  'IN)
	   (OUTSTREAM (MERGEF "* _ACRO_" OUTPUT-FILE) 'OUT))
      (LISP->LISP\WORKER INFILE OUTSTREAM)
      (DO ((MORE-STUFF EOF-COMPILE-QUEUE
		       EOF-COMPILE-QUEUE))
	  ((NULL MORE-STUFF))
	;; this might not be exactly the way COMPLR handles it.
	(SETQ EOF-COMPILE-QUEUE NIL)
	(PRINT '(COMMENT **EXPAND** START OF EOF-COMPILE-QUEUE)
	       OUTSTREAM)
	(LISP->LISP\WORKER-FROM-LIST (REVERSE MORE-STUFF)
		   T OUTSTREAM)
	(PRINT '(COMMENT **EXPAND** END OF EOF-COMPILE-QUEUE)
	       OUTSTREAM))
      (RENAMEF OUTSTREAM OUTPUT-FILE)
      )))

(DEFUN LISP->LISP\WORKER (INFILE OUTSTREAM)
       (DO ((FORM (READ INFILE INFILE)
		  (READ INFILE INFILE))
	    (OUTFILES (NCONS OUTSTREAM))
	    (LISP->LISP T)
	    (/^Q T)
	    (/^R T)
	    (/^W T))
	   ((EQ FORM INFILE))
	   (SPRINTER (COND ((ATOM FORM) FORM)
			   (T
			    (LISP->LISP\MUNG-TOPLEVEL FORM
						      INFILE
						      OUTSTREAM))))))

(DEFMACRO POPR (X L)
	  `(COND ((NULL ,X) ,L)
		 (T (POP ,X))))

(DEFUN LISP->LISP\WORKER-FROM-LIST (IN-LIST INFILE OUTSTREAM
						&AUX (IN-FORMS IN-LIST))
       (DO ((FORM (POPR IN-FORMS IN-LIST)
		  (POPR IN-FORMS IN-LIST))
	    (OUTFILES (NCONS OUTSTREAM))
	    (LISP->LISP T)
	    (/^Q T)
	    (/^R T)
	    (/^W T))
	   ((EQ FORM IN-LIST)) ;;; IN-LIST IS UNIQUE IF NON-CIRCULAR
	   (SPRINTER (COND ((ATOM FORM) FORM)
			   (T
			    (LISP->LISP\MUNG-TOPLEVEL FORM
						      INFILE
						      OUTSTREAM))))))


(DEFUN LISP->LISP\MUNG-TOPLEVEL (FORM INFILE OUTSTREAM)
  (LET ((FUN (GET (CAR FORM) 'LISP->LISP\MUNGING-FUNCTION)))
    (COND (FUN (FUNCALL FUN FORM INFILE OUTSTREAM))
	  (T
	   (MACRO-EXPAND FORM)))))

(DEFUN (DECLARE LISP->LISP\MUNGING-FUNCTION) (FORM () ())
       (MAPC 'EVAL (COPY (CDR FORM)))
       (MACRO-EXPAND FORM))

(DEFUN (EVAL-WHEN LISP->LISP\MUNGING-FUNCTION) (FORM () ())
  ;; EVAL-WHEN-LOAD ISN'T TAKEN CARE OF, IT SHOULD CALL
  ;; THE MUNG-FORM-LIST FUNCTION
  (COND ((MEMQ 'COMPILE (CADR FORM))
	 (MAPC 'EVAL (COPY (CDDR FORM)))))
  (MACRO-EXPAND FORM))

(DEFUN (INCLUDE LISP->LISP\MUNGING-FUNCTION) (FORM () OUTSTREAM)
       (PRINT `(COMMENT **EXPAND** INSERTING FILE ,(CADR FORM)) OUTSTREAM)
       (IOTA ((INFILE (CADR FORM) 'IN))
	     (LISP->LISP\WORKER INFILE OUTSTREAM))
       `(COMMENT **EXPAND** DONE INSERTING FILE ,(CADR FORM)))

(DEFUN (INCLUDEF LISP->LISP\MUNGING-FUNCTION) (FORM INFILE OUTSTREAM)
       (LET ((FILENAME (EVAL (CADR FORM))))
	    (FUNCALL (GET 'INCLUDE 'LISP->LISP\MUNGING-FUNCTION)
		     (LIST '*DUMMY* FILENAME) INFILE OUTSTREAM)))

(DEFUN (DEFUN LISP->LISP\MUNGING-FUNCTION) (FORM () ())
       ;(COND ((MEMQ (CADDR FORM) '(/&OPTIONAL /&REST /&WHOLE /&AUX))
       (RPLACA FORM 'DEFUN/&)
       (MACRO-EXPAND FORM))


(DECLARE (SPECIAL MACRO-FILES))

(DEFUN (LOAD-MACSYMA-MACROS LISP->LISP\MUNGING-FUNCTION) (FORM () ())
  `(COMMENT *** LOADING MACSYMA MACROS ***
	    ,@(MAPCAR
	       #'(LAMBDA (X)
		   (OR (GET X 'VERSION)
		       (PROGN (LOAD (MACRO-DIR X))
			      (PUSH X MACRO-FILES)))
		   (MACRO-DIR X))
	       (CDR FORM))))