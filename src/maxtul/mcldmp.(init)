;;;-*-LISP-*-
;;; COMPLR init file which sets things up to dump TS MCL.

(defun load-em (dir files)
  (mapc #'(lambda (u)
	    (print u msgfiles)
	    (or (get u 'version)
		(load `((,dir),u))))
	files))

(defun ob-hack (obarray symbol) (readlist (explode symbol)))

(defvar jnames-which-act-like-cl '(cl umcl))

(defmacro docn (&rest forms)
  `(progn ,@(mapcar #'(lambda (form)
			`(progn (print ',form msgfiles)
				(princ "=> " msgfiles)
				(prin1 ,form msgfiles)
				(princ " " msgfiles)))
		    forms)))

(defun mcl-verno ()
  (TERPRI)
  (PRINC "Macsyma source compiler ")
  (PRINC (GET 'Mcompiler 'VERSION))
  (COMPLRVERNO))

(defun dump-mcl (verno &optional
		       tty-p
		       (*pure-setting t)
		       &AUX DSKMSG (BASE 10.) DUMPFILE MES-FILE TF
		       msgfiles)
  (if tty-p (push tyo msgfiles))
  (let ((*pure *pure-setting))
    (setq TF "dsk:maxtul;mcl _undu_"
	  DUMPFILE (format nil "dsk:maxtul;mcldmp ~D" verno)
	  mes-file (format nil "dsk:maxtul;mcldms ~D" verno)
	  dskmsg (open TF 'out))
    (push dskmsg msgfiles)
    (putprop 'mcompiler verno 'version)
    (docn *pure
	  *sharing-file-list*
	  dumpfile 
	  mes-file
	  (setq error-break-environment (cons obarray readtable))
	  (setq *nopoint nil)
	  (*rset t)
	  (get 'complr 'version)
	  (get 'mcompiler 'version)
	  (get 'sharable 'version)
	  (status lispverno)
	  (status date)
	  (status dow)
	  (status daytime)
	  (status uname)
	  (status userid)
	  (status jname)
	  (status subsys))
    
;; ejs 2018-03-09: Commented out all the timing code since it appears to 
;; cause arithmetic overflow errors under some circumstances.  Will 
;; restore this code when we find/fix the issue.
;;    (load-em 'maxtul '(timepn))
    
;; ejs
;;    (timeprogn
;; ejs
;;     (time-origin)
     ;; workhorse section of code timed for the heck of it.
     
     (or (status feature defstruct) ;; good ole ALAN has to be different.
	 (load-em 'liblsp '(struct)))
     (load-em 'lisp '(format setf umlmac evonce))
     (load-em 'liblsp '(debug IOTA smurf time))
     (load-em 'MAXTUL '(MCL EXPAND))
     (load-em 'libmax ;; should use MAXDOC FILES data.
	      '(module LMMAC MAXMAC MFORMA DEFINE MOPERS ERMSGC
		       TRANSM PROCS NUMERM))
     (load-em 'maxdoc '(dcl mcldat))
;; ejs
;;     (time-origin)
     (OR (MEMBER '(SETQ MESSAGES-INITIALIZED NIL)  MCL-AFTER-PROC)
	 (PUSH '(SETQ MESSAGES-INITIALIZED NIL)  MCL-AFTER-PROC))
     (let ((^d t)) (gc))
     (docn (setq errset #'errset-break)
	   (status memfree)
	   (status features))
     (mapatoms #'(lambda (sym)
		   (cond ((get sym 'version)
			  (format msgfiles "~%~A ~A"
				  sym (get sym 'version))))))
     ;; end of workhorse section.
  ;; ejs
  ;;   )

    (progn ;; clean up message files.
     (setq msgfiles (delete dskmsg msgfiles))
     (renamef dskmsg mes-file)
     (if (probef tf)(deletef tf)))


    (FORMAT-MAIL `(,(STATUS UNAME) GJC)
		 "~
			 ~&Dump of ~A in the following *sharing-file-list* :~
			 ~%~S~
			 ~%~
			 ~%           -yours truly~
			 ~%            NJADP (not just another dumb program)~
			 ~%"
		 (namestring dumpfile)
		 *sharing-file-list*)
    (putprop 'mcompiler
	     (time:print-current-date ())
	     'date)
    (putprop 'mcompiler
	     (status uname)
	     'uname)

    (pure-suspend 'p dumpfile)

    ;; next form gets evaluated when lisp is resurected.
    (sstatus toplevel
	     ;; smart lisp calls eval on this form when we
	     ;; get out of the scope of this function call
	     ;; to (DUMP-MCL).
	     '(progn
	       (sstatus toplevel nil)
	       (sstatus gctime 0)
;; ejs
;;	       (time-origin 'set nil)
	       (announce-&-load-init-file
		'mcompiler
		nil
		(format nil "DSK:MAXTUL;MCLFIX ~D"
			(get 'mcompiler 'version)))


	       (cond ((memq (status subsys)
			    jnames-which-act-like-cl)
		      (SETQ TEST-COMPILATION-P T)
		      (#.(ob-hack sobarray 'complr-tople-after-suspend)))
		     (t
		      ;; error during INIT goes to
		      ;; standard READ-EVAL-PRINT.
		      ;; like wow man. here we are, ready to
		      ;; forge ahead into the unknown macroworld.
		      (sstatus toplevel '(*maklap-driver* nil))
		      (*maklap-driver* (status jcl))))))
    ;; this is the end man. don't put any more shit after this.
    ))

(princ "
Do ^G then (DUMP-MCL /"version/") to dump a new MCL" tyo)
