;-*-LISP-*-

;This file contains the code to merge a set of string files into one.
;Also needed is ERMSGC, to handle writing of the new file

(herald STRMRG)

(declare (*lexpr get-directory get-mfd-indexes))

(eval-when (compile eval)
  (or (get 'iota 'version)
      (load "liblsp;iota"))
  (or (get 'lmmac 'version)
      (load "libmax;lmmac"))
  (or (get 'umlmac 'version)
      (load "lisp;umlmac"))
  (or (get 'ERMSGX 'VERSION)
      (load "LIBMAX;ERMSGX")))

(eval-when (load eval)
  (or (get 'ERMSGC 'VERSION)
      (load "LIBMAX;ERMSGC")))

(eval-when (load eval compile)
  (or (get 'FILDIR 'VERSION)
      (load "Z;FILDIR")))

(defvar merge-files-prints T "T ==> Print what files are being merged")

;;; (MERGE-MESSAGE-FILES <output-file> <list-of-input-files>)
;;; merges the input files into a single message file in the output file.
;;; The output file's directory will include an ALIST of string filenames
;;; and index offsets.  ALLOCATE-MESSAGE-INDEX should look at this directory
;;; and add in offset to the index it is given.

(defun merge-message-files (output inputs)
  (let ((header-counts 1)
	(files) (offset 0) (directory-position 0)
	(message-text-word-count 0))
    (declare (fixnum header-counts offset directory-position))
    (dolist (file inputs)		;Collect a list of input SFA's
       (push (setq file (open-message-file file))
	     files)
       (setf (message-file-header-offset file) header-counts)
       (setq header-counts
	     (+ header-counts (message-file-header-count file)))
       (setq message-text-word-count
	     (+ message-text-word-count
		(or (cdr (assq 'message-text-word-count
			       (message-file-alist file)))
		    0)))
       (close file))
    (setq files (nreverse files))
    (phi ((outfile (make-fixnum-ascii-stream
		    (mergef '(_STRMG OUTPUT) output))))
       (if merge-files-prints
	   (format msgfiles
	     "~&Merging the files:~%~S~&Into file:  ~A~%"
	     (mapcar #'NAMESTRING inputs)
	     (namestring output)))
       (dotimes (() header-counts)
	  (out outfile #.(car (pnget 'EMPTY 7))))
       (dolist (file files)
	  (open file)
	  (filepos file (message-file-header-count file))
	  (setf (message-file-text-offset file) offset)
	  (let ((errset ()))
	    (errset			;Cretinous IN
	      (do () (())
		(out outfile (in file))
		(setq offset (1+ offset)))
	      () ))
	  (close file))
       (setq directory-position (filepos outfile))
       (filepos outfile 0)
       (out outfile directory-position)
       (dolist (file files)
	 (open file)
	 (filepos file 0)
	 (dotimes (() (message-file-header-count file))
	    (out outfile (+ (in file) (message-file-text-offset file)
			    (- header-counts
			       (message-file-header-count file)))))
	 (close file))
       (filepos outfile directory-position)
       (print
	`(MDOC (files .
		 ,(mapcar #'(lambda (file)
			      `(,(truename file) .
				   ,(message-file-header-offset file)))
			  files))
	       (message-count . ,(1- header-counts))
	       (creator . ,(status uname))
	       (date . ,(status date))
	       (time . ,(status daytime)))
	outfile)
       (renamef outfile (cdr (namelist output))))))


(defprop FASLREADOPEN ((DSK RLB) FASLRO FASL) AUTOLOAD)
(defprop LOAD-INFO ((DSK MAXTUL) DOCGEN FASL) AUTOLOAD)

;;; (GET-STRING-FILE-NAME file) gives the string-file filename for this FASL
;;; file, or NIL if none.

(declare (special FASLREAD-TYPE))

(defun get-string-file-name (file)
  (setq file (mergef '((DNRF *) * FASL) file))
  (let ((faslread-object ()))
    (unwind-protect
       (progn
	(setq faslread-object (faslreadopen file '(MIN EVAL)))
	(do ((entry (faslread faslread-object) (faslread faslread-object)))
	    ((eq faslread-type 'EOF))
	  (if (and (eq faslread-type 'EVAL)
		   (eq (car entry) 'STRING-FILE-NAME))
	      (return (cadr (cadr entry))))))  ;flush QUOTE
       (if faslread-object (faslreadclose faslread-object)))))

(declare (special MACSYMA-SOURCE-FILES))

(eval-when (eval compile)
  (or (get 'defile 'version)
      (load '((maxtul) defile))))

(defun merge-incore-system (&aux temp)
  (load-info)
  (merge-message-files `((DSK MAXDMP) INCORE >)
      (mapcan #'(lambda (mfile)
		  (setq temp
			(get-string-file-name
			 `((DSK ,(macsyma-source-file-fasl-dir mfile))
			   ,(macsyma-source-file-name mfile) FASL)))
		  (if temp (ncons temp)))
	  (in-core-files macsyma-source-files))))

(setq ibase 10. base 10.)

(defun FASL-FILE-EXISTS-P (file)
  (phi ((message-file (open-message-file file)))
    (let* ((truename (truename message-file))
	   (fasl (mergef '((DNRF *) * FASL)
			 (cdr (assq 'output-file-name
				    (message-file-alist message-file)))))
	   (src (cdr (or (assq 'source-file-name
			       (message-file-alist message-file))
			 (assq 'filename
			       (message-file-alist message-file)))))
	   (home `((DNRF ,(get (cadr truename) 'fasl-dir))
		   ,(cadr truename) FASL))
	   (src-fasl (mergef '((DNRF *) * FASL)
			     `(,(car src) ,(cadr src) FASL)))
	   (creator (cdr (assq 'creator (message-file-alist message-file)))))
      (or (and fasl
	       (probef fasl)
	       (equal (get-string-file-name fasl) truename))
	  (and src
	       (not (equal home fasl))
	       (probef home)
	       (equal (get-string-file-name home) truename))
	  (and (not (equal src-fasl fasl))
	       (not (equal home home))
	       (probef src-fasl)
	       (equal (get-string-file-name src-fasl) truename))
	  (and creator
	       (setq creator `((DSK ,creator) ,(cadr truename) FASL))
	       (not (equal src-fasl creator))
	       (not (equal home creator))
	       (not (equal fasl creator))
	       (probef creator)
	       (equal (get-string-file-name creator) truename))))))

(defun display-string-files-no-fasls ()
  (cursorpos 'c)
  (format t "~&****** MAXERR; ******")
  (mapc #'(lambda (file)
	    (if (not (fasl-file-exists-p
		      `((DSK MAXERR) ,(file-block-fn1 file)
				     ,(file-block-fn2 file))))
		(send file 'display)))
	(file-directory-files (get-directory 'maxerr)))
  (format T "~&****** MAXER1; ******")
  (mapc #'(lambda (file)
	    (if (not (fasl-file-exists-p
		      `((DSK MAXER1) ,(file-block-fn1 file)
				     ,(file-block-fn2 file))))
		(send file 'display)))
	(file-directory-files (get-directory 'maxer1)))
  () )
