;;; -*- LISP -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;                                                                     ;;;;;
;;;;;              THIS FILE CONTAINS A DICTIONARY OF WORDS               ;;;;;
;;;;;              FOR USE IN KMP'S NATURAL LANGUAGE HACKS.               ;;;;;
;;;;;                                                                     ;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ALLOC '(LIST 130000.))
(ALLOC '(SYMBOL 40000.))

;;; The following functions can be used to access the data 
;;; defined in this file. Note that in most cases the same 
;;; function names without a "?" on the end are used for 
;;; defining the response that the ?'d verb should return 
;;; in most cases.

(DEFUN EXPLODED (X)
       (OR (GET X 'EXPLODED) (PUTPROP X (EXPLODEC X) 'EXPLODED)))

(DEFUN VERB-PLURAL? (X)
       (OR (CAR (GET X 'VERB-FORMS)) X))

(DEFUN VERB-SING? (X)
       (OR (CADR (GET X 'VERB-FORMS))
	   (VERB-SING NIL X)))

(DEFUN VERB-PAST? (X)
       (OR (CADDR (GET X 'VERB-FORMS))
	   (VERB-PAST NIL X)))

(DEFUN VERB-PP? (X)
       (OR (CADDDR (GET X 'VERB-FORMS))
	   (VERB-PP NIL X)))

(DEFUN VERB-PROG? (X)
       (OR (CAR (CDDDDR (GET X 'VERB-FORMS)))
	   (VERB-PROG NIL X)))

;;; These two functions are nice for drawing inferences about nouns
;;; since singular nouns have roughly the same formation rules as
;;; plural verbs and vice versa.

(DEFUN NOUN-PLURAL? (X) (VERB-SING? X))

(DEFUN NOUN-SING? (X) (VERB-PLURAL? X))


(DEFUN IS-A? (TYPE WORD) (AND (MEMQ TYPE (GET WORD 'PART-OF-SPEECH)) T))

(DEFUN PART-OF-SPEECH (WORD TYPE)
       (COND ((NOT (IS-A? WORD TYPE))
	      (PUTPROP WORD
		       (CONS TYPE (GET WORD 'PART-OF-SPEECH))
		       'PART-OF-SPEECH)))
       TYPE)

(DEFUN PART-OF-SPEECH? (X) (OR (GET X 'PART-OF-SPEECH) '*NOUN*))

;;; Letters

(DEFUN VOWEL? (X) (MEMQ X '(A E I O U)))
(DEFUN CONSONANT? (X) (NOT (VOWEL? X)))

;;; Names

(DEFUN FEMALE-NAME? (X) (IS-A? 'FEMALE-NAME X))
(DEFUN MALE-NAME? (X) (IS-A? 'MALE-NAME X))
(DEFUN PERSON-NAME? (X) (OR (MALE-NAME? X)
			    (FEMALE-NAME? X)
			    (IS-A? 'PERSON-NAME X)))

;;;  Note: for compatibility,
;;;    these should get updated for dictionary lookup

(DEFUN FEMALE-PRONOUN? (X) (MEMQ X '(SHE HER)))
(DEFUN MALE-PRONOUN? (X) (MEMQ X '(HE HIM)))
(DEFUN PLURAL-PRONOUN? (X) (MEMQ X '(THEY THEM)))
(DEFUN 1ST-PERSON-PLURAL-PRONOUN? (X) (MEMQ X '(WE US)))
(DEFUN 3RD-PERSON-PLURAL-PRONOUN? (X) (MEMQ X '(THEY THEM)))

;;;
;;; Software for inferring what 'he', 'she', etc. mean
;;;

(DEFUN CLEAR-DEFAULT-NAMES () (SETPLIST 'DEFAULT-NAMES NIL))

(CLEAR-DEFAULT-NAMES)

(DEFUN DEFAULT-NAME (TYPE) (GET 'DEFAULT-NAMES TYPE))

(DEFUN SET-DEFAULT-NAME (NAME TYPE)
       (COND ((EQ TYPE 'PLURAL)
	      (PUTPROP 'DEFAULT-NAMES
		       ((LAMBDA (DEFAULT)
				(COND ((MEMQ NAME DEFAULT) DEFAULT)
				      (T (APPEND DEFAULT (LIST NAME)))))
			(GET 'DEFAULT-NAMES 'PLURAL))
		       'PLURAL))
	     (T
	      (PUTPROP 'DEFAULT-NAMES NAME TYPE)
	      (SET-DEFAULT-NAME NAME 'PLURAL)))
       NAME)



(DEFUN DETERMINER? (WORD) (IS-A? 'DETERMINER WORD))
(DEFUN ADJECTIVE? (WORD)
       (OR (IS-A? 'ADJECTIVE WORD)
	   (POSSESSIVE? WORD)))
(DEFUN COMPARATIVE-ADJECTIVE? (WORD) (IS-A? 'COMPARATIVE-ADJECTIVE WORD))
(DEFUN MODAL? (WORD) (IS-A? 'MODAL WORD))
(DEFUN HELPING-VERB? (WORD) (IS-A? 'HELPING-VERB WORD))
(DEFUN AUXILIARY-VERB? (WORD) (HELPING-VERB? WORD))
(DEFUN VERB? (WORD)
       (OR (IS-A? 'MODAL WORD)
	   (IS-A? 'HELPING-VERB WORD)
	   (IS-A? 'ACTION-VERB WORD)))
(DEFUN COMMON-NOUN? (WORD) (IS-A? 'COMMON-NOUN WORD))
(DEFUN PREPOSITION? (WORD) (IS-A? 'PREPOSITION WORD))
(DEFUN PRONOUN? (WORD) (IS-A? 'PRONOUN WORD))
(DEFUN CONJUNCTION? (WORD) (IS-A? 'CONJUNCTION WORD))
(DEFUN INTERJECTION? (WORD) (IS-A? 'INTERJECTION WORD))
(DEFUN ADVERB? (WORD) (IS-A? 'ADVERB WORD))
(DEFUN COMPARATOR? (WORD) (IS-A? 'COMPARATOR WORD))
(DEFUN MODIFIER? (WORD)
       (OR (ADVERB? WORD) (ADJECTIVE? WORD) (DETERMINER? WORD)))
(DEFUN MATCH? (WORD) (IS-A? 'MATCH WORD))
(DEFUN NOUN? (WORD)
       (OR (COMMON-NOUN? WORD)
	   (PRONOUN? WORD)
	   (PERSON-NAME? WORD)
	   (NULL (GET WORD 'PART-OF-SPEECH))))

;;; MATCHFIX?
;;;  If the arg has a MATCHFIX property, returns it, else returns NIL.

(DEFUN MATCHFIX? (X) (GET X 'MATCHFIX))

;;; MATCHDECLARE
;;;  Assigns a set of possible matches to a matchfix operators.

(DEFUN MATCHDECLARE (LEFT MATCHES)
       (PUTPROP LEFT MATCHES 'MATCHFIX)
       (DEFINE 'MATCH (NCONS LEFT))
       (DEFINE 'MATCH MATCHES))


;;; DEFINE
;;;  Defines a list of words to be a particular part of speech 
;;;  by pushing the type onto the front of its PART-OF-SPEECH 
;;;  property.

(DEFUN DEFINE (PART WORD-LIST)
       (MAPC
	(FUNCTION (LAMBDA (WORD) (PART-OF-SPEECH WORD PART)))
	WORD-LIST)
       PART)

;;; VERB-DEFINE
;;;  Takes an arg of a single verb and its variations. If the
;;;  variations are regular, they may be omitted. Certain common
;;;  exception rules are also known. Puts a verb definition on
;;;  a verb and its forms and properties pointing back to the main
;;;  verb form.
;;;
;;;    Syntax:  (VERB-DEFINE <arg-list>)
;;;
;;;             <arg-list> :: (<infinitive>
;;;			       <present-singular>
;;;			       <past-tense>
;;;			       <past-participle>
;;;			       <present-progressive>)
;;;
;;;    Example:
;;;             (VERB-DEFINE '(EAT EATS ATE EATEN EATING))
;;;

(DEFUN VERB-DEFINE (X)
       (PROG ()
	     (COND ((ATOM X) (BREAK BAD-ARG-TO-"VERB-DEFINE")))
	     (COND ((GET (CAR X) 'VERB-FORMS) (RETURN T)))
	     (SETQ X
		   (DO ((V (CDR X) (CDR V))
			(V$ (CAR X))
			(I 1 (1+ I))
			(L (NCONS (CAR X)))
			(A NIL NIL))
		       ((> I 4.) (NREVERSE L))
		       (SETQ A (CAR V))
		       (COND ((= I 1.) (SETQ L (CONS (VERB-SING A V$) L)))
			     ((= I 2.) (SETQ L (CONS (VERB-PAST A V$) L)))
			     ((= I 3.) (SETQ L (CONS (VERB-PP A V$) L)))
			     ((= I 4.) (SETQ L (CONS (VERB-PROG A V$) L))))))
	     (MAPCAR (FUNCTION (LAMBDA (A)
				       (PART-OF-SPEECH A 'ACTION-VERB)
				       (PUTPROP A X 'VERB-FORMS)))
		     X)
	     (RETURN (CAR X))))

;;; VERB-FORM
;;;  For more convenience of syntax in defining large numbers of verb
;;;  forms simultaneouly without quoting them.

(DEFUN VERB-FORM FEXPR (VERBS)
       (MAPC 'VERB-DEFINE VERBS)
       '-*-VERB-FORMS-*-)


;;;;;;;;;;;;;;;;;;;;;;;;;;; DICTIONARY/INFERENCING ;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; VERB-SING
;;;  Define the singular form of an infinitive verb X. If the first arg
;;;  is non-null, it will be used. If the first arg is null, this routine
;;;  will infer a probable singular form.
;;;
;;;  The following rules are used:
;;;
;;;  [1] If the word ends in <non-vowel>+Y then change the Y
;;;      to I and add ES.
;;;  [2] If the word ends in <[C,S,T]>+H or X then add ES.
;;;  [3] Else add an S.

(DEFUN VERB-SING (A X)
       (PROG (TEMP)
	     (COND (A (RETURN A)))
	     (SETQ TEMP (NREVERSE (EXPLODEC X)))
	     (COND ((AND (EQ (CAR TEMP) 'Y)
			 (NOT (VOWEL? (CADR TEMP))))
		    (RETURN
		     (IMPLODE
		      (NREVERSE (CONS 'S (CONS 'E (CONS 'I (CDR TEMP))))))))
		   ((OR (AND (EQ (CAR TEMP) 'H) (MEMQ (CADR TEMP) '(T S C)))
			(EQ (CAR TEMP) 'X))
		    (RETURN (IMPLODE (NREVERSE (CONS 'S (CONS 'E TEMP))))))
		   (T (RETURN (IMPLODE (NREVERSE (CONS 'S TEMP))))))))

;;; VERB-PAST
;;;  Return the past tense form of an infinitive verb X. If the first arg
;;;  is non-null, it will be used. If the first arg is null, this routine
;;;  will infer a probable past tense form.
;;;
;;;  The following rules are used:
;;;
;;;  [1] If the word ends in E, add a D.
;;;  [2] If the word ends in <non-vowel>+Y, change Y to I and add ED.
;;;  [3] If the word ends in [W,X,Y], add ED.
;;;  [4] If the word ends in some other consonant preceded by
;;;      a single vowel, double final consonant and add ED.
;;;  [4] Else add ED.

(DEFUN VERB-PAST (A X)
       (PROG (TEMP)
	     (COND (A (RETURN A)))
	     (SETQ TEMP (NREVERSE (EXPLODEC X)))
	     (COND ((EQ (CAR TEMP) 'E)
		    (RETURN
		     (IMPLODE
		      (NREVERSE (CONS 'D TEMP)))))
		   ((AND (EQ (CAR TEMP) 'Y)
			 (NOT (VOWEL? (CADR TEMP))))
		    (RETURN
		     (IMPLODE
		      (NREVERSE (CONS 'D (CONS 'E (CONS 'I (CDR TEMP))))))))
		   ((MEMQ (CAR TEMP) '(X Y W))
		    (RETURN
		     (IMPLODE
		      (NREVERSE (CONS 'D (CONS 'E TEMP))))))
		   ((AND (CONSONANT? (CAR TEMP))
			 (VOWEL? (CADR TEMP))
			 (CONSONANT? (CADDR TEMP)))
		    (RETURN
		     (IMPLODE
		      (NREVERSE (CONS 'D (CONS 'E (CONS (CAR TEMP) TEMP)))))))
		   (T (RETURN
		       (IMPLODE
			(NREVERSE (CONS 'D (CONS 'E TEMP)))))))))

;;; VERB-PP
;;;  This function returns the past-participle for a verb. Currently it uses
;;;  the same rules as the past tense inferencing function above.

(DEFUN VERB-PP (A X) (VERB-PAST A X))


;;; VERB-PROG
;;;  Return the present progressive form of an infinitive verb X. 
;;;  If the first arg is non-null, it will be used. If the first 
;;;  arg is null, this routine will infer a probable past tense form.
;;;
;;;  The following rules are used:
;;;
;;;  [1] If the last letter is an E, drop it and add ING.
;;;  [2] If the last letter is [W,X,Y] add an ING.
;;;  [3] If the word ends in a consonant preceded by
;;;      a single vowel, double the final consonant and
;;;      add ING.
;;;  [4] Else add ING.

(DEFUN VERB-PROG (A X)
       (PROG (TEMP)
	     (COND (A (RETURN A)))
	     (SETQ TEMP (NREVERSE (EXPLODEC X)))
	     (COND ((EQ (CAR TEMP) 'E)
		    (RETURN
		     (IMPLODE
		      (NREVERSE (CONS 'G (CONS 'N (CONS 'I (CDR TEMP))))))))
		   ((MEMQ (CAR TEMP) '(W X Y))
		    (RETURN
		     (IMPLODE
		      (NREVERSE
		       (CONS 'G (CONS 'N (CONS 'I TEMP)))))))
		   ((AND (CONSONANT? (CAR TEMP))
			 (VOWEL? (CADR TEMP))
			 (CONSONANT? (CADDR TEMP)))
		    (RETURN
		     (IMPLODE
		      (NREVERSE
		       (CONS 'G (CONS 'N (CONS 'I (CONS (CAR TEMP) TEMP))))))))
		   (T (RETURN
		       (IMPLODE
			(NREVERSE (CONS 'G (CONS 'N (CONS 'I TEMP))))))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Adjectives ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(DEFINE 'ADJECTIVE '(ONE TWO THREE FOUR FIVE SIX SEVEN EIGHT NINE TEN
			 TWENTY THIRTY FORTY FIFTY HUNDRED THOUSAND MILLION
			 EACH EVERY ALL SOME 
			 BIG SMALL TINY HUGE ENORMOUS LARGE
			 HEAVY DARK LIGHT COLORED SHINY DULL
			 RED ORANGE YELLOW GREEN BLUE INDIGO VIOLET PURPLE
			 BLACK BROWN GOLD SILVER WHITE GREY GRAY
			 STRIPED SPOTTED HORNED WINGED
			 SMOOTH ROUGH HARD SOFT 
			 WET DRY OILY 
			 LOUD QUIET STRONG WEAK
			 LINKED RELATED SIMILAR SIMILAR ASSOCIATED
			 GOOD TAME DOCILE DOMESTIC 
			 ANGRY MAD SAD HAPPY PARANOID DEPRESSED
			 UPSET GLAD UNFORTUNATE FORTUNATE
			 HUNGRY
			 SMART STUPID DUMB
			 CRAZY STRANGE 
			 FAST SLOW
			 OLD NEW
			 BAD EVIL MEAN CRUEL DANGEROUS
			 UGLY PRETTY BEAUTIFUL
			 REAL LIVE DEAD))

(DEFINE 'COMPARATIVE-ADJECTIVE
	'(BETTER
	  BIGGER SMALLER TINIER LARGER
	  HEAVIER DARKER LIGHTER SHINIER DULLER
	  SMOOTHER ROUGHER HARDER SOFTER
	  WETTER DRIER OILIER
	  LOUDER QUIETER STRONGER WEAKER
	  TAMER ANGRIER MADDER SADDER HAPPIER
	  HUNGRIER SMARTER CRAZIER STRANGER
	  FASTER SLOWER OLDER NEWER
	  WORSE UGLIER PRETTIER))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Adverbs  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(DEFINE 'ADVERB
	'(NEVER HARDLY NOT
          SLOWLY QUICKLY 
	  SOMETIMES OFTEN SEVERAL
	  VERY NEARLY PRACTICALLY ALMOST ABOUT APPROXIMATELY
	  ALWAYS PRECISELY REALLY EXACTLY IDENTICALLY
	  MUCH GREATLY MORE MOST
	  LESS LEAST
	  ADDITIONALLY ALSO TOO))


;;; Common Nouns
;;; Note: NOUNs are inferred by this scheme usually by the fact that they
;;;       do not fall into another category. This list is provided for
;;;       any exceptions to the rule that may be nouns or another part of
;;;       speech simultaneously.

(DEFINE 'COMMON-NOUN
	'(ADDRESS ADVOCATE AID AIM ANSWER APPEAL
	  BALANCE BOX BREAK LOVE
	  CALL CAMPAIGN CHAIN CROWD
	  DELEGATE
	  ENGINEER
	  FAKE FIGURE FIRE FOIL FOOL FORCE FORM
	  GRADE GRANT
	  HELP
	  INTERVIEW
	  JAIL
	  LOCK
	  MATCH
	  NAME NET
	  OFFER
	  PACE PHOTOGRAPH PLAN PRESENT PROGRAM PROJECT PROTEST
	  QUERY QUESTION
	  REPORT REQUEST RULE
	  SCHEDULE SIP SLUMP SKATE STORE SURVEY SWARM 
	  TEST TIE TRACE TRICK TURN))

;;; Names
;;;  Used among other things for finding pronoun antecedents

(DEFINE 'MALE-NAME
	'(ADAM AL ALAN ALLAN ALDEN ALEX ALEXANDER 
	  ALF ALFRED ALLEN ALVIN ANDREW 
	  ANDY ANTHONY ARNOLD ARTHUR
	  BARRY BART BILL BOB BUD BOBBY BRAD
	  CARROLL CARL CHARLES CHARLIE CHONG CHRIS CHRISTOPHER CHUCK
	  CLARK CLEM CLEMENT CLINT CLINTON CRAIG CURT
	  DAN DANIEL DARRELL DARRYL DAVE DAVID
	  DENNIS DERYL DEVON
	  DICK
	  DONALD DON DONNY DOUG DOUGLAS
	  DUGALD
	  EDGAR ELIOT ELLIOT EMERY ERIC ERIK
	  FRANCIS FRANK FREDRICK FRED
	  GARY GEOFF GEOFFREY GEORGE GERALD GERARD GERROLD GREG GREGORY
	  GERHARD
	  HAROLD HARRY HAL HARVEY HANK HOWARD HOWIE
	  IRVING ISAAC IVAN
	  JACK JACOB JAMES
	  JEREMIAH JERRY JEFF JEFFREY JEFFRY
	  JIM JIMMY
	  JOE JOHN JOHNNY JON JONATHAN JOSE JOSEPH
	  JUAN JULIAN
	  KARIM KEN KENNY KENNEY KENNETH KENT KURT
	  LARRY LAUREN LAURENCE LAWRENCE
	  LEO LEON LEONARD LEONARDO LESLIE
	  MAN MANNY MANUEL MARC MARK MARTIN MARTY MARVIN MATT MATTHEW MAURICE
	  MICHAEL MIKE MORRIS MYRON
	  NED NORMAN NORM 
	  ODED OSCAR
	  PATRICK PAUL PETER PETE PHILLIP PHILIP 
	  RALPH RICHARD ROB ROBERT ROGER RON RONALD RUSS RUSSEL RUSSELL 
	  SCOT SCOTT SETH STEPHEN STEVE STEWART STUART
	  TED TERRENCE TERRY THEO THEODORE THOMAS TOM TOMMY
	  WENG WILLIAM 
;unames:
	  JPG LPH MRG STEVER KMP DUFFEY RWK HIC))

(DEFINE 'FEMALE-NAME
	'(ALICE AMY ANNE ANNETTE ANN ARLENE
	  BARB BARBARA BARBRA BARBI BARBIE BETTY BERNICE 
	  CANDACE CANDY CAROL CAROLA CAROLE CATHERINE CATHI CATHY
	  CHERYL CINDY CINDI CYNTHIA
	  DEBBIE DEBBY DENISE
	  DIANA DIANNA DIANE DIANNE DORIS DOLORES DONNA DOROTHY
	  ELAINE ELENA ELLEN EMELIA EUNICE EVA EVE EVELYN 
	  FARRAH FRANCES FRANCESCA
	  GAIL GINGER GRACE 
	  JANE JANICE JO JOAN JOSIE JOSEPHINE JUANA JUANITA JULIA
	  KAREN KARIN KARI KATY KATHERINA KATHERINE KATHI KATHY KATRINA KERI
	  LAUREN LAUREEN LESLIE LISA LORRAINE LYNN LYNNE
	  MARGARET MARILYN MARILYNN MARLENA MARLENE MARY MARSHA
	  MEG MELISSA MICHELLE
	  NANCY NORA
	  PATRICIA PATTY PATTI PAULA PAULETTE PAULINE 
	  PEG PEGGY POLLY
	  ROSE ROSILYN 
	  SALLY SANDRA SANDY SOPHIE STACEY STELLA SUE SUSAN
	  TERESA TERRY TINA 
	  VICCI VICKY VICKI VICTORIA VIRGINIA
;unames:
	  BKERNS VP))



;;; Define Matches

(MATCHDECLARE 'IF '(THEN))
(MATCHDECLARE 'IFF '(THEN))
(MATCHDECLARE 'NOT-ONLY '(BUT BUT-ALSO))
(MATCHDECLARE 'EITHER '(OR))
(MATCHDECLARE 'NEITHER '(NOR))

;;; Comparators are pseudo-parst of speech used
;;; in conjunction with comparative adjectives.

(DEFINE 'COMPARATOR '(AS THAN))

;;; Conjunctions

(DEFINE 'CONJUNCTION '(AND OR BUT BECAUSE HOWEVER ALTHOUGH))

;;; Determiners

(DEFINE 'DETERMINER '(THE A AN EVERY SOME ANY MANY ALL ONE))

;;; Interjections

(DEFINE 'INTERJECTION '(OK FINE SURE GREAT GOOD NO YES OKAY SIGH FOO
			   HI HELLO GREETINGS WOW OH AH AHH AHHH AHHHH 
			   HUHUH UHHUH HMMM GEE HMM HMMMM FOOBAR FROWN SI
			   TOO ALSO ADDITIONALLY WELL))

;;; Modals [special class of verbs]

(DEFINE 'MODAL '(CAN COULD MAY MIGHT MUST SHALL SHOULD WILL WOULD))

;;; Prepositions

(DEFINE 'PREPOSITION 
	'(OF IN ON WITH FROM FOR TO AT SAME AS LIKE ABOUT
          BY BESIDE AROUND UNDER ABOVE THROUGH BENEATH AMIDST
	  ONTO VIA INSIDE OUTSIDE BEHIND OVER))

;;; Special classes of verbs

(DEFINE 'BEING-VERB '(BE AM IS ARE WAS WERE))

(DEFINE 'HELPING-VERB '(AM IS ARE WAS WERE HAVE HAS HAD DO DOES DID))


(DEFINE 'PRONOUN '(I ME YOU HE HIM SHE HER IT
		   WE US THEY THEM
		   THAT THOSE THIS THESE
		   THING THINGS ANYTHING SOMETHING EVERYTHING
					;Possessives
		   MINE YOURS HIS HERS ITS OURS THEIRS
					;Reflexives
		   MYSELF YOURSELF HIMSELF HERSELF ITSELF))

(DEFINE 'ADJECTIVE '(MY YOUR HIS HER ITS OUR THEIR))
	
(DEFUN ROOT-PRONOUN (X) (EQ (GET X 'PRONOUN-TYPE) 'SUBJECT))

(DEFUN PRONOUN-VARIATIONS-DECLARE (PRONOUN VARIATIONS)
       (PUTPROP PRONOUN 'SUBJECT 'PRONOUN-TYPE)
       (COND (VARIATIONS
	      (MAPC (FUNCTION
		     (LAMBDA (X) (PUTPROP X PRONOUN 'ROOT-PRONOUN)))
		    VARIATIONS)
	      (PUTPROP (CAR VARIATIONS) 'OBJECT 'PRONOUN-TYPE)
	      (PUTPROP (CADR VARIATIONS) 'ADJECTIVE 'PRONOUN-TYPE)
	      (PUTPROP (CADDR VARIATIONS) 'POSSESSIVE 'PRONOUN-TYPE)
	      (PUTPROP (CADDDR VARIATIONS) 'REFLEXIVE 'PRONOUN-TYPE))))

(DEFUN PRONOUN-DEFINE FEXPR (X)
       (MAPC (FUNCTION
	      (LAMBDA (X)
		      (PUTPROP (CAR X) (CADR X) 'PERSON)
		      (PUTPROP (CAR X) (CADDR X) 'GENDER)
		      (PUTPROP (CAR X) (CADDDR X) 'NUMBER)
		      (PRONOUN-VARIATIONS-DECLARE (CAR X)
						  (CAR (CDDDDR X)))))
	     X))

;;;

(PRONOUN-DEFINE (I    FIRST  ()       (SINGULAR)	(ME MY MINE MYSELF))
		(YOU  SECOND ()       (SINGULAR PLURAL) (YOU YOUR YOURS
							     YOURSELF))
		(HE   THIRD  (MALE)   (SINGULAR)	(HIM HIS HIS HIMSELF))
		(SHE  THIRD  (FEMALE) (SINGULAR)	(HER HER HERS HERSELF))
		(IT   THIRD  (NONE)   (SINGULAR)	(IT ITS ITS ITSELF))
		(THAT THIRD  (NONE)   (SINGULAR)	())
		(THIS THIRD  (NONE)   (SINGULAR)	())
		(WE   FIRST  ()       (PLURAL)		(US OUR OURS
							    OURSELVES))
		(THEY THIRD  ()       (PLURAL)		(THEM THEIR THEIRS
							      THEMSELVES))
		(THESE THIRD ()       (PLURAL)		())
		(THOSE THIRD ()       (PLURAL)		()))

(DEFUN POSSESSIVE-PRONOUN? (X)
       (EQ (GET X 'PRONOUN-TYPE) 'POSSESSIVE))

(DEFUN POSSESSIVE? (X)
       (COND ((POSSESSIVE-PRONOUN? X) (ROOT-PRONOUN X))
	     ((EQUAL (MEMQ '/' (SETQ X (EXPLODED X))) '(/' S))
	      (IMPLODE (NREVERSE (CDDR (REVERSE X)))))
	     (T NIL)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Verbs   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(VERB-FORM
 (ABANDON ABANDONS ABANDONED ABANDONED ABANDONING)
 (ACCOMODATE)
 (ACCOUNT)
 (ACCUSE)
 (ACQUIRE)
 (ACT)
 (ACTUATE)
 (ADD)
 (ADDRESS)
 (ADVERTISE)
 (ADVOCATE)
 (AGREE AGREES AGREED AGREED AGREEING)
 (AID)
 (AIM)
 (ALLEVIATE)
 (ALLOW)
 (ALTER)
 (ANNOUNCE)
 (ANNOY)
 (ANSWER ANSWERS ANSWERED ANSWERED ANSWERING)
 (APOLOGIZE)
 (APPEAL)
 (APPEAR) 
 (APPEND)
 (APPLY)
 (APPOINT)
 (APPRAISE)
 (APPRECIATE)
 (APPROACH)
 (APPROVE)
 (ARISE ARISES AROSE ARISEN)
 (ARREST)
 (ARRIVE)
 (ASK)
 (ASSIGN)
 (ASSOCIATE)
 (ASSUME)
 (ATTACK)
 (ATTEMPT)
 (ATTRACT)
 (AWAKEN)
 (BALANCE)
 (BAN)
 (BAKE)
 (BARK)
 (BEAT)
 (BECOME BECOMES BECAME BECOME)
 (BEGIN BEGINS BEGAN BEGUN)
 (BELIEVE)
 (BET BETS BET BET)
 (BETRAY)
 (BID BIDS BID BID BIDDING)
 (BITE BITES BIT BITTEN)
 (BLAST)
 (BLEEP)
 (BLOCK)
 (BLOW BLOWS BLEW BLOWN BLOWING)
 (BORROW)
 (BOTHER BOTHERS BOTHERED BOTHERED BOTHERING)
 (BOX)
 (BREAK BREAKS BROKE BROKEN)
 (BRING BRINGS BROUGHT BROUGHT)
 (BUILD BUILDS BUILT BUILT BUILDING)
 (BUMP)
 (BURN)
 (BURP)
 (BUS BUSES BUSED BUSED BUSING)
 (BUY BUYS BOUGHT BOUGHT)
 (CALCULATE)
 (CALL)
 (CAMPAIGN)
 (CANCEL)
 (CAPTURE)
 (CARE)
 (CARRY)
 (CAST CASTS CAST CAST CASTING)
 (CATCH CATCHES CAUGHT CAUGHT)
 (CAUSE)
 (CHAIN)
 (CHALLENGE)
 (CHANGE)
 (CHARGE)
 (CHASE)
 (CHECK)
 (CHOOSE CHOOSES CHOSE CHOSEN)
 (CHUCKLE)
 (CIRCULATE)
 (CLARIFY)
 (CLOBBER)
 (COLLECT)
 (COME COMES CAME COME)
 (COMPETE)
 (COMPLAIN)
 (COMPLETE)
 (COMPLICATE)
 (COMPROMISE)
 (CONCLUDE)
 (CONDUCT)
 (CONFIDE)
 (CONFIRM)
 (CONFUSE)
 (CONSENT)
 (CONSIDER CONSIDERS CONSIDERED CONSIDERED CONSIDERING)
 (CONSTRAIN)
 (CONTINUE)
 (CONTROL)
 (CONVICT)
 (COOK)
 (COPY)
 (CORRECT)
 (COUNT)
 (COVER)
 (CREATE)
 (CRITICIZE)
 (CROWD)
 (CRUSH CRUSHES CRUSHED CRUSHED)
 (CRY)
 (CUT)
 (DANCE)
 (DEBATE)
 (DECLARE)
 (DECREASE)
 (DEDICATE)
 (DEFEND)
 (DEFINE)
 (DELAY)
 (DELEGATE)
 (DELETE)
 (DENY)
 (DEREGULATE)
 (DESIRE)
 (DESTROY)
 (DETECT)
 (DIE)
 (DISAGREE)
 (DISAPPROVE)
 (DISBAND)
 (DISCARD)
 (DISCIPLINE)
 (DISCUSS)
 (DISLIKE)
 (DISMISS)
 (DISPLAY)
 (DIVEST)
 (DO DOES DID DONE DOING)
 (DRAMATIZE)
 (DRAW)
 (DRINK DRINKS DRANK DRUNK)
 (DRIVE DRIVES DROVE DRIVEN)
 (EASE)
 (EAT EATS ATE EATEN EATING)
 (EDIT)
 (ELECT)
 (ELIMINATE)
 (ENFORCE)
 (ENGINEER)
 (ENTER)
 (ESTABLISH)
 (EXCEL)
 (EXHIBIT)
 (EXIT)
 (EXPECT)
 (EXPERIENCE)
 (EXPERIMENT)
 (EXPLAIN)
 (EXPORT)
 (EXTEND)
 (FAIL)
 (FAKE)
 (FALL FALLS FELL FALLEN FALLING)
 (FEAR)
 (FEEL FEELS FELT FELT FEELING)
 (FIGHT FIGHTS FOUGHT FOUGHT)
 (FIGURE)
 (FILE)
 (FILL)
 (FIND FINDS FOUND FOUND)
 (FIRE)
 (FIX)
 (FLY)
 (FOCUS)
 (FOIL)
 (FOLLOW)
 (FOOL)
 (FORCE)
 (FORESHADOW FORESHADOWS FORESHADOWED FORESHADOWED FORESHADOWING)
 (FORM)
 (FULFILL)
 (GARGLE)
 
 (GET GETS GOT GOTTEN)
 (GIGGLE)
 (GLOW)
 (GO GOES WENT GONE GOING)
 (GRADE)
 (GRANT)
 (GROW)
 (GUIDE)
 (HAVE HAS HAD HAD HAVING)
 (HANG HANGS HUNG HUNG)
 (HAPPEN HAPPENS HAPPENED HAPPENED HAPPENING)
 (HATE)
 (HEAR)
 (HEIGHTEN HEIGHTENS HEIGHTENED HEIGHTENED HEIGHTENING)
 (HELP)
 (HESITATE)
 (HIDE HIDES HID HIDDEN)
 (HIRE)
 (HIT HITS HIT HIT)
 (HOLD HOLDS HELD HELD)
 (HOPE)
 (HOVER HOVERS HOVERED HOVERED HOVERING)
 (HUNT)
 (HURT HURTS HURT HURT)
 (ILLUMINATE)
 (IMPEACH)
 (IMPLEMENT)
 (IMPLY)
 (IMPRESS)
 (IMPROVE)
 (INCREASE)
 (INDICT)
 (INFORM)
 (INITIALIZE)
 (INJUR)
 (INSTALL)
 (INSURE)
 (INTERVIEW)
 (INTIMIDATE)
 (INTRODUCE)
 (INVADE)
 (INVESTIGATE)
 (INVOLVE)
 (IRRITATE)
 (JAIL)
 (JERK)
 (JOIN)
 (JUDGE)
 (JUMP)
 (KILL)
 (KISS)
 (KNOW)
 (LACK)
 (LAY)
 (LAUGH)
 (LEAD)
 (LEARN)
 (LEAVE)
 (LECTURE)
 (LEGISLATE)
 (LEVEL)
 (LIE)
 (LIKE)
 (LIMIT)
 (LINK)
 (LIST)
 (LISTEN LISTENS LISTENED LISTENED LISTENING)
 (LIVE)
 (LOAD)
 (LOCK)
 (LOOK)
 (LOOSEN)
 (LOSE)
 (LOVE)
 (LOWER)
 (MAKE MAKES MADE MADE)
 (MARCH)
 (MARK)
 (MATCH)
 (MATERIALIZE)
 (MEAN MEANS MEANT MEANT)
 (MEET)
 (MISLAY)
 (MOVE)
 (MUNCH)
 (MUNG)
 (MURDER)
 (NAME)
 (NEED)
 (NET)
 (NIX)
 (NOMINATE)
 (OBJECT)
 (OBSERVE)
 (OFFER)
 (OPEN OPENS OPENED OPENED OPENING)
 (ORGANIZE)
 (OUGHT OUGHT OUGHT OUGHT OUGHT)
 (OVERSHADOW OVERSHADOWS OVERSHADOWED OVERSHADOWED OVERSHADOWING)
 (PACE)
 (PACK)
 (PARK)
 (PASS)
 (PASTE)
 (PAUSE)
 (PAVE)
 (PAY)
 
 (PERFORM)
 (PERPETRATE)
 (PHOTOGRAPH)
 (PICK)
 (PLAGIARIZE)
 (PLAN)
 (PLANT)
 (PLAY)
 (PLEDGE)
 (POP)
 (PREDICT)
 (PREFER)
 (PREPARE)
 (PRESENT)
 (PRESSURE)
 (PRESUME)
 (PREY)
 (PRAY)
 (PROCLAIM)
 (PRODUCE)
 (PROFIT)
 (PROGRAM)
 (PROJECT)
 (PROMISE)
 (PROPOSE)
 (PROTECT)
 (PROTEST)
 (PROVE)
 (PROVIDE)
 (PRY)
 (PUBLISH)
 (PUSH)
 (PUT PUTS PUT PUT)
 (QUERY)
 (QUESTION)
 (QUIET)
 (QUIT QUITS QUIT QUIT)
 (RAISE)
 (RAP)
 (RAPE)
 (REALIZE)
 (RECALL)
 (RECAP)
 (RECOMMEND)
 (RECOUNT)
 (RECOVER)
 (RECYCLE)
 (REFER)
 (REFEREE)
 (REFUND)
 (REFUTE)
 (REGULATE)
 (REHEARSE)
 (REITERATE)
 (REJECT)
 (RELATE)
 (RELAY)
 (REMIND)
 (REMOVE)
 (RENEW)
 (RENOUNCE)
 (RENOVATE)
 (RENT)
 (REPLACE)
 (REPLAY)
 (REPORT)
 (REPRESENT)
 (REQUEST)
 (RESEARCH)
 (RESIGN)
 (RESOLVE)
 (REST)
 (RESTORE)
 (RETAIN)
 (RETURN)
 (REVEAL)
 (REVIEW)
 (REVISE)
 (REVISIT)
 (REVITALIZE)
 (REVIVE)
 (RESSURECT)
 (REWARD)
 (RIDE RIDES RODE RIDDEN)
 (RISE RISES ROSE RISEN)
 (ROLE)
 (RUIN)
 (RULE)
 (RUN RUNS RAN RUN)
 (RUSH)
 (SACRIFICE)
 (SAVE)
 (SAY SAYS SAID SAID)
 (SCHEDULE)
 (SEARCH)
 (SEE SEES SAW SEEN SEEING)
 (SEEK SEEKS SOUGHT SOUGHT)
 (SEEM)
 (SEIZE)
 (SELECT)
 (SELL SELLS SOLD SOLD)
 (SEND)
 (SERVE)
 (SET SETS SET SET SETTING)
 (SEW SEWS SEWED SEWED SEWING)
 (SHIFT)
 (SHOOT)
 (SHOUT)
 (SHOW SHOWS SHOWED SHOWED SHOWING)
 (SHRUG)
 (SHUN)
 (SHUT)
 (SIGNAL)
 (SING SINGS SANG SUNG)
 (SINK SINKS SANK SUNK)
 (SIP)
 (SIT SITS SAT SAT)
 (SKATE)
 (SKI SKIS SKIED SKIED SKIING)
 (SLANDER)
 (SLASH)
 (SLAY SLAYS SLEW SLAIN)
 (SLEEP SLEEPS SLEPT SLEPT)
 (SLIDE SLIDES SLID SLID)
 (SLIP)
 (SLOW)
 (SLUMP)
 (SLUR)
 (SOAR)
 (SOLVE)
 (SOW SOWS SOWED SOWED SOWING)
 (SPAN)
 (SPIN)
 (SPLIT)
 (SPIKE)
 (SPEAK)
 (SPONSOR)
 (SQUEEZE)
 (SQUINT)
 (SQUIRT)
 (STALL)
 (STAND STANDS STOOD STOOD)
 (STARE)
 (START)
 (STARVE)
 (STATE)
 (STAY)
 (STEAL)
 (STEER STEERS STEERED STEERED STEERING)
 (STIR)
 (STOP)
 (STORE)
 (STRAIGHTEN)
 (STRIP)
 (STUDY)
 (SUBMERGE)
 (SUBMIT)
 (SUCCEED)
 (SUGGEST)
 (SUPPOSE)
 (SURPRISE)
 (SURVEY)
 (SWARM)
 (SWIM SWIMS SWAM SWUM)
 (SYNTHESIZE)
 (TAKE TAKES TOOK TAKEN)
 (TALK)
 (TEACH)
 (TERMINATE)
 (TESTIFY)
 (THANK)
 
 (THINK THINKS THOUGHT THOUGHT)
 (THROW THROWS THREW THROWN THROWING)
 (TIE)
 (TIGHTEN TIGHTENS TIGHTENED TIGHTENED TIGHTENING)
 (TICK)
 (TIP)
 (TOP)
 (TRACE)
 (TRACK)
 (TRANSFER TRANSFERS TRANSFERED TRANSFERED TRANSFERING)
 (TRESPASS) 
 (TRICK)
 (TURN)
 (UNDERSTAND UNDERSTANDS UNDERSTOOD UNDERSTOOD)
 (UNDO UNDOES UNDID UNDONE UNDOING)
 (UNLOCK)
 (UPHOLD UPHOLDS UPHELD UPHELD)
 (URGE)
 (USE USES USED USED USING)
 (VACATE)
 (VALUE)
 (VETO)
 (VIEW)
 (VIOLATE)
 (VISIT VISITS VISITED VISITED VISITING)
 (VOTE)
 (WAKE)
 (WALK)
 (WANT)
 (WATCH)
 (WEAR WEARS WORE WORN WEARING)
 (WILL WILLS WILLED WILLED WILLING)
 (WIN WINS WON WON)
 (WINK)
 (WISH)
 (WONDER WONDERS WONDERED WONDERED WONDERING)
 (WORRY)
 (WORK)
 (WRITE WRITES WROTE WRITTEN)
 (YANK)
 (YELL)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Contractions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(DEFUN CONTRACTION (X)
       (COND ((NUMBERP (CADR X))
	      (PUTPROP (CAR X)
		       (CDR 
			(ASSOC (CADR X)
			       '((1. . (FORGOT USE AN APOSTROPHE))
				 (2. . (FORGOT TO CAPITALIZE YOUR APOSTROPHE))
				 (3. . (MIS-SPELLED SOMETHING))
				 (4. . (FORGOT TO TYPE A SPACE))
				 (5. . (TYPED |"0"| INSTEAD OF |"O"|))
				 (6. . (GOT THE |"I"| AND |"E"| BACKWARDS)))))
		       'TYPO)
	      (PUTPROP (CAR X) (CDDR X) 'CONTRACTION))
	     (T
	      (PUTPROP (CAR X) (CDR X) 'CONTRACTION))))

(DEFUN TYPO? (X) (GET X 'TYPO))

(DEFUN STRING-PRINC (X)
       (COND ((ATOM X)
	      (PRINC '/" TYO)
	      (PRINC X TYO)
	      (PRINC '/" TYO))
	     (T
	      (PRINC '/" TYO)
	      (PRINC (CAR X) TYO)
	      (MAPC (FUNCTION (LAMBDA (X) (PRINC '| | TYO) (PRINC X TYO)))
		    (CDR X))
	      (PRINC '/" TYO))))

(COND ((NOT (BOUNDP 'VERBOSE-TYPO-CORRECTION-FLAG))
       (SETQ VERBOSE-TYPO-CORRECTION-FLAG T)))

(DEFUN CONTRACTION? (X)
       (DECLARE (SPECIAL VERBOSE-TYPO-CORRECTION-FLAG))
       (COND ((AND (GET X 'TYPO) VERBOSE-TYPO-CORRECTION-FLAG)
	      (CURSORPOS 'A TYO)
	      (PRINC '|Using | TYO)
	      (STRING-PRINC (GET X 'CONTRACTION))
	      (PRINC '| for | TYO)
	      (STRING-PRINC X)
	      (PRINC '/. TYO)
	      (TERPRI TYO)))
       (OR (GET X 'CONTRACTION)
	   (NCONS X)))

(DEFUN EXPAND-CONTRACTIONS (X)
       (APPLY 'APPEND (MAPCAR 'CONTRACTION? X)))

(MAPC 'CONTRACTION
      '(( |AIN'T| . (   IS NOT))
	( |AINT|  . (1. IS NOT))
	( |AIN7T| . (2. IS NOT))

	( DUNNO   . (DO NOT KNOW))

	( GONNA   . (GOING TO))

	( GOTTA   . (HAVE TO))

	( MUSTA   . (MUST HAVE))

	( OUGHTA  . (OUGHT TO))

	( CUDA    . (COULD HAVE))
	( COULDA  . (COULD HAVE))
	( CUDNA   . (COULD NOT HAVE))
	( COULDNA . (COULD NOT HAVE))

	( SHUDA   . (SHOULD HAVE))
	( SHOULDA . (SHOULD HAVE))
	( SHUDNA  . (SHOULD NOT HAVE))
	( SHOULDNA. (SHOULD NOT HAVE))

	( WUDA    . (WOULD HAVE))
	( WOULDA  . (WOULD HAVE))
	( WUDNA   . (WOULD NOT HAVE))
	( WOULDNA . (WOULD NOT HAVE))

	( MIGHTA  . (MIGHT HAVE))

	( WANNA   . (WANT TO))
	( WANTA   . (WANT TO))

	( WUDA    . (WOULD HAVE))
	( WUDNA   . (WOULD NOT HAVE))

	( |DIDN'T| . (   DID NOT))
	( |DIDNT|  . (1. DID NOT))
	( |DIDN7T| . (2. DID NOT))
	( |DIN'T|  . (3. DID NOT))

	( |AREN'T| . (ARE NOT))

	( |CAN'T| . (   CAN NOT))
	( |CANT|  . (1. CAN NOT))
	( |CAN7T| . (2. CAN NOT))

	( |COULDN'T| . (   COULD NOT))
	( |COULDNT|  . (1. COULD NOT))
	( |COULDN7T| . (2. COULD NOT))

	( |DOESN'T| . (   DOES NOT))
	( |DOESNT|  . (1. DOES NOT))
	( |DOESN7T| . (2. DOES NOT))

	( |DON'T| . (   DO NOT))
	( |DONT|  . (1. DO NOT))
	( |DON7T| . (2. DO NOT))

	( |HASN'T| . (   HAS NOT))
	( |HASNT|  . (1. HAS NOT))
	( |HASN7T| . (2. HAS NOT))

	( |HAVEN'T| . (   HAVE NOT))
	( |HAVENT|  . (1. HAVE NOT))
	( |HAVEN7T| . (2. HAVE NOT))

	( |HE'D| . (   HE WOULD))
	( |HED|  . (1. HE WOULD))
	( |HE7D| . (2. HE WOULD))

	( |HE'S| . (   HE IS))
	( |HES|  . (1. HE IS))
	( |HE7S| . (2. HE IS))

	( |HERE'S| . (   HERE IS))
	( |HERES|  . (1. HERE IS))
	( |HERE7S| . (2. HERE IS))

	( |I'D| . (   I WOULD))
	( |I7D| . (2. I WOULD))

	( |I'LL| . (   I SHALL))
	( |I7LL| . (2. I SHALL))

	( |I'M| . (   I AM))
	( |IM|  . (1. I AM))
	( |I7M| . (2. I AM))

	( |I'VE| . (   I HAVE))
	( |IVE|  . (1. I HAVE))
	( |I7VE| . (2. I HAVE))

	( |ISN'T| . (   IS NOT))
	( |ISNT|  . (1. IS NOT))
	( |ISN7T| . (2. IS NOT))

	( |IT'D| . (   IT WOULD))
	( |ITD|  . (1. IT WOULD))
	( |IT7D| . (2. IT WOULD))

	( |IT'S| . (   IT IS))
	( |IT7S| . (2. IT IS))

	( |MUST'VE| . (   MUST HAVE))
	( |MUSTVE|  . (1. MUST HAVE))
	( |MUST7VE| . (2. MUST HAVE))

	( |SHE'D| . (   SHE WOULD))
	( |SHE7D| . (2. SHE WOULD))

	( |SHE'S| . (   SHE IS))
	( |SHES|  . (1. SHE IS))
	( |SHE7S| . (2. SHE IS))

	( |SHOULD'VE| . (   SHOULD HAVE))
	( |SHOULDVE|  . (1. SHOULD HAVE))
	( |SHOULD7VE| . (2. SHOULD HAVE))

	( |SHOULDN'T| . (   SHOULD NOT))
	( |SHOULDNT|  . (1. SHOULD NOT))
	( |SHOULDN7T| . (2. SHOULD NOT))

	( |THAT'S| . (   THAT IS))
	( |THATS|  . (1. THAT IS))
	( |THAT7S| . (2. THAT IS))

	( |THERE'D| . (   THERE WOULD))
	( |THERED|  . (1. THERE WOULD))
	( |THERE7D| . (2. THERE WOULD))

	( |THERE'S| . (   THERE IS))
	( |THERES|  . (1. THERE IS))
	( |THERE7S| . (2. THERE IS))

	( |WHAT'S| . (   WHAT IS))
	( |WHATS|  . (1. WHAT IS))
	( |WHAT7S| . (2. WHAT IS))

	( |WHEN'S| . (   WHEN IS))
	( |WHENS|  . (1. WHEN IS))
	( |WHEN7S| . (2. WHEN IS))

	( |WHERE'S| . (   WHERE IS))
	( |WHERES|  . (1. WHERE IS))
	( |WHERE7S| . (2. WHERE IS))

	( |WHO'S| . (   WHO IS))
	( |WHOS|  . (1. WHO IS))
	( |WHO7S| . (2. WHO IS))

	( |WON'T| . (   WILL NOT))
	( |WONT|  . (1. WILL NOT))
	( |WON7T| . (2. WILL NOT))

	( |WOULDN'T| . (   WOULD NOT))
	( |WOULDNT|  . (1. WOULD NOT))
	( |WOULDN7T| . (2. WOULD NOT))

	( |WOULD'VE| . (   WOULD HAVE))
	( |WOULDVE|  . (1. WOULD HAVE))
	( |WOULD7VE| . (2. WOULD HAVE))

	( |YOU'D| . (   YOU WOULD))
	( |YOUD|  . (1. YOU WOULD))
	( |YOU7D| . (2. YOU WOULD))

	( |YOU'LL| . (   YOU WILL))
	( |YOULL|  . (1. YOU WILL))
	( |YOU7LL| . (2. YOU WILL))

	( |YOU'RE| . (   YOU ARE))
	( |YOURE|  . (1. YOU ARE))
	( |YOU7RE| . (2. YOU ARE))

	( |YOU'VE| . (   YOU HAVE))
	( |YOUVE|  . (1. YOU HAVE))
	( |YOU7VE| . (2. YOU HAVE))

	( |W//| . (WITH))
	( |W//O| . (WITHOUT))

	( CU     . (BYE))
	( CUL    . (BYE))
	( BCNU   . (BYE))
	( S'LONG . (BYE))
	
	( B4 . (BEFORE))

	( FO . (3. OF))

	( FRO . (3. FOR))

	( CNA . (3. CAN))
	( CNA'T . (3. CAN NOT))

	( BECUZ . (BECAUSE))

	( FREIND . (6. FRIEND))
	( THIER  . (6. THEIR))
	( THEIF  . (6. THIEF))

	( YYES . (3. YES))
	( YSE  . (3. YES))
	( YEES . (3. YES))
	( YESS . (3. YES))
	( YEAH . (3. YES))
	( YEA  . (3. YES))

	( NOO . (3. NO))
	( NNO . (3. NO))

	( THRU . (THROUGH))

	( TE  . (3. THE))
	( TH  . (3. THE))
        ( EHT . (3. THE))
	( ETH . (3. THE))
	( TEH . (3. THE))
        ( HET . (3. THE))
	( HTE . (3. THE))

	( ADN . (3. AND))
	( NAD . (3. AND))
	( NDA . (3. AND))

	( HTAT . (3. THAT))
	( TAHT . (3. THAT))
	( THTA . (3. THAT))

	( HTIS . (3. THIS))
	( HTSI . (3. THIS))
	( THSI . (3. THIS))

	( OEN  . (3. ONE))

	( HWEN . (3. WHEN))
	( WEHN . (3. WHEN))

	( HWERE . (3. WHERE))
	( WEHRE . (3. WHERE))
	
	( TEHN . (3. THEN))

	( ISA . (4. IS A))
	( HASA . (4. HAS A))

	( N0 . (5. NO))
	( N0T . (5. NOT))

	 ))

(DEFUN EQS (XX YY)
       (DO ((X XX (CDR X))
	    (Y YY (CDR Y)))
	   ((NULL X) (CONS XX Y))
	   (COND ((NOT (EQ (CAR X) (CAR Y)))
		  (RETURN NIL)))))

(DEFUN EXPAND-ABBREVS (X)
       (DO ((L X)
	    (R NIL))
	   ((NULL L) (NREVERSE R))
	   ((LAMBDA (EXPANSION)
		    (SETQ R (APPEND (CAR EXPANSION) R))
		    (SETQ L (CDR EXPANSION)))
	    (GET-ABBREV-EXPANSION L))))

(DEFUN GET-ABBREV-EXPANSION (WORDS)
       (DO ((PA (POTENTIAL-ABBREVS (CAR WORDS)) (CDR PA))
	    (TEMP))
	   ((NULL PA) (CONS (NCONS (CAR WORDS)) (CDR WORDS)))
	   (COND ((SETQ TEMP (EQS (CAAR PA) WORDS))
		  (RETURN (CONS (CDAR PA) (CDR TEMP)))))))

(DEFUN POTENTIAL-ABBREVS (X)
       (GET X 'POTENTIAL-ABBREVS))

(DEFUN DEFINE-ABBREV (X)
       (PUTPROP (CAAR X)
		(SORT (CONS X (GET (CAAR X) 'POTENTIAL-ABBREVS)) 'LONGERCARP)
		'POTENTIAL-ABBREVS))

(DEFUN LONGERCARP (X Y) (> (LENGTH (CAR X)) (LENGTH (CAR Y))))

(MAPC 'DEFINE-ABBREV
      '(((MR |.|) MR)
	((MISTER) MR)
	((MRS |.|) MRS)

	((DR |.|) DOCTOR)

	((U |.| S |.| A |.|) UNITED-STATES)
	((U |.| S |.|) UNITED-STATES)
	((UNITED STATES) UNITED-STATES)

	((NOT ONLY) NOT-ONLY)
	((BUT ALSO) BUT-ALSO)

	((IF AND ONLY IF) IFF)
	
	((ATOMIC NUMBER) ATOMIC-NUMBER)
	((ATOMIC WEIGHT) ATOMIC-WEIGHT)
	((ATOMIC MASS)   ATOMIC-MASS)

	((GAMMA RAY) GAMMA-RAY)
	((GAMMA RAYS) GAMMA-RAYS)
	((ALPHA PARTICLE) ALPHA-PARTICLE)
	((ALPHA PARTICLES) ALPHA-PARTICLES)
	((BETA PARTICLE)  BETA-PARTICLE)
	((BETA PARTICLES)  BETA-PARTICLES)

	))