
	THE RULES OF SPROUTS, THE ONLY TOPOLOGICAL GAME
	INVENTED BY JOHN HORTON CONWAY AND MIKE PATERSON
	PRESENTED ORIGINALLY IN SCI. AMER. MATH GAMES 1967.JUL
	DESCRIBED HERE BY ROBERT MAAS 1977.AUG.01

Sprouts is a two-person game with alternating play.  There can
be no draw, one person wins or the other does.  The longest
game possible is 3*N-1 halfmoves and the typical game is 7*N/3 
halfmoves (where N is the number of dots in the starting 
situation, as described below), thus with N in the range 2:7
the typical game lasts between 4 and 16 moves (beginners start
at N=2 and work up, becoming experts when they have mastered
N=7) resulting in short snappy contests.

PLAYING SURFACE:  The game is played on either a sphere or a
plane, at least in principle it is; actually the game is played
in the interior of some small playing area that has been marked
on a sheet of paper, 2" by 2" square is sufficient for a game
when N=2,3,4,5 and slightly larger squares for N=6 and N=7.
The only utensils needed are a pencil or pen for drawing
freehand dots and lines in the playing area.

INITIAL SITUATION:  The game starts with N dots drawn somewhere
inside the playing area.  It is preferable to arrange the dots
as far from each other and from the edges of the playing area as
possible, usually people arrange them in a circle about half the
diameter of the playing area centered in the playing area.

LEGAL MOVE, BASIC:  A legal move consists of drawing a line from
some already-existing dot to another already-existing dot, subject
to the restrictions listed below, then placing a new dot on the
midpoint of the line (segment).  The line drawn may curve in order
to connect back to its starting point or in order to go around
obstacles that block a staight path, or to cause certain dots and
lines to be on the left side separated from other dots and lines
on the right side of the new line drawn.

RESTRICTIONS:  Each line (segment) drawn when making a move must
not touch itself (except at endpoints when connecting a dot back
to itself) nor cross or brush against any other dot or line, thus
it is impossible to cross a closed-curve in order to connect some
dot inside it to another dot outside it. -- Also, it is illegal
to make any move that causes any dot to have more than 3 (three)
connections to it.  Note that drawing a loop from a dot back to
itself counts as two connections to that dot.  Note also that
the new dot created during each move already has a line coming into
it from each side thus already has two connections at its  birth,
thus allowing only one additional connection to it.

END OF GAME, WINNER:  The game is over when there is no legal
move remaining.  The last person who was able
to make a legal move is the winner.

NOTATION USED TO PLAY GAME OVER TELEPHONE AND/OR TERMINAL, AND
USED TO RECORD A GAME:  The syntax is <p> <m>:<n1>-<n2> (<l>/<r>)<cr>
where <p> is the name of the player making the move, <m> is
the number of the move (each new move creates a new dot, the original
dots are numbered 1,2,..,N and the new dots are numbered N+1, N+2,
etc. -- each move is numbered according to the new dot created by
that move, thus the first move is numbered N+1 rather than 1),
<n1> and <n2> are the two dots connected by the line segment,
if the move is ambiguous then <l> and <r> are supplied listing the
dots that appear on the left and right of the new segment going
from <n1> to <n2> (thinking of the playing area as a roadmap,
with lines representing highways, dots representing intersections,
and unmarked areas representing city parks -- when <n1>-<n2>
completes a closed curve because <n1> and <n2> were already
connected by some other highway before the current move, to figure
out what <l> and <r> are you imagine letting your pet dog take a
walk out either your left window or right window  respectively, with
the restriction that your dog may not cross a highway, the
intersections your dog can stick his nose into are listed in <l>
and <r> for the two walks he can take respectively -- when the
highways form a peninsula or isthmus so that a dot on the neck
(thin part) of the peninsula or isthmus can be sniffed by a dog
from opposite sides while remaining in the same city park (without
crossing any highway), and such a dot is <n1> or <n2>, then the
dots immediately adjacent on the left and right as <n1> is
departed or <n2> is reached, are included in <l> and <r>
respectively to remove the ambiguity as to the resultant
configuration), and <cr> denotes carriage-return with
accompanying linefeed.  Note that the parenthesi and slash are
omitted when neither a closed curve nor a peninsula/isthmus
connection is made, or when no ambiguity is made by the omission
of <l> and <r> completely.  When there is a choice between two
moves, one of which have an <l> and <r> and the other of which
doesn't, between exactly the same <n1> and <n2>, however, the
parenthesis must be supplied in both cases to avoid ambiguity
(note, some versions of the program, if you type in just <n1>-<n2>,
will assume you intend the (/) version i.e. null <l> and <r>,
however it is bad when playing a human to fail to specify in
this case).

EXAMPLES OF NOTATION FOR MAKING MOVES:  Let us suppose that
FOO and BAZ are playing a game with N=2, with FOO playing first.
FOO may open the game by connecting dot#1 to dot#2, thus
FOO 3: 1-2
or FOO may connect dot#1 to itself either making a small loop, or
making a loop clockwise around dot#2, or making a loop CCW around
dot#2, but all these three moves are  equivalent strategically
hence can be denoted by either
FOO 3: 1-1 (2/)
or by
FOO 3: 1-1 (/2)
(technically these moves are different in that 1-3-1 was traced
in the reverse direction in one from the other, thus with car
moving in reverse direction left and right are reversed so that
dot#2 changes apparant sides, but due to symmetry the resultant
situations are identical hence the user can be sloppy in notation
in this case)
or FOO may connect dot#2 to itself, denoted by
FOO 3: 2-2 (1/)
or by
FOO 3: 2-2 (/1)
Note that although 1-1 (2/) and 2-2 (1/) are equivalent strategically,
the notation used for subsequent moves is different, thus the
player must specify which move he is making in order for play of
the game by notation to proceed.  Thus there are two totally
different opening moves, one of which has 2 ways to do it with
numbered dots.
	Let us suppose player FOO makes this opening move:
FOO 3: 1-2
Player BAZ now has three totally different replies:
BAZ 4: 1-2  (both ways to draw it are equivalent)
BAZ 4: 1-3 (2/)  or  1-3 (/2)  or  2-3 (1/)  or  2-3 (/1)
 all of which are strategically equivalent but notationally
 different hence must be correctly typed one of four ways
BAZ 4: 1-1  or  2-2  (unnecessary to specify 1-1 (3/) or 1-1 (/3)
  because the resulting situations are identical)
	Let us suppose player BAZ makes the reply:
BAZ 4: 1-3 (2/)
now player FOO has the choice of
FOO 5: 1-4 (/)
FOO 5: 1-4 (2/)
FOO 5: 2-2
FOO 5: 1-2    (equivalent to 4-2 strategically but must be
 specified correctly because notation would be different in
 that case)
	Let us suppose player FOO makes the move:
FOO 5: 1-4 (2/)
now player BAZ has the choice of
BAZ 6: 2-5
BAZ 6: 2-2
	Let us suppose player BAZ makes the move:
BAZ 6: 2-5
now player FOO has the choice of
FOO 7: 2-6 (4/)
FOO 7: 2-6 (/1)
but both moves are equivalent, and normally <l>/<r> is omitted
for dots that can't be connected to anything because they
already have three connections, thus the notation for both moves is
FOO 7: 2-6 (/)
which may be abbreviated to
FOO 7: 2-6
	After playe FOO makes the move
FOO 7: 2-6
there is no legal move, so FOO wins the game.  The complete record
of the game is:
SPROUTS GAME, 2 DOTS
FOO 3: 1-2
BAZ 4: 1-3 (2/)
FOO 5: 1-4 (2/)
BAZ 6: 2-5
FOO 7: 2-6

NOTATION FOR SITUATIONS:  Note that the above notation is for
describing a half-move to be made, not the complete situations that
result between half-moves, just like in Chess the notation N-B5
denotes a half-move not the complete board situation.  Sprouts also
has a way to represent a complete situation just like Chess
has its notation rnb1kbnr/ppppqppp/8/8/3Pp2N/8/PPP1PPPP/RNBQKB1R.
to represent a complete board position.  In fact the LISP
internal representation of this notation is actually used by
Sprouts-playing programs to keep track of the situation during
the course of a game or during analysis.  A Sprouts situation
is represented by a 3-level list, which is presented externally
by merely calling the LISP function PRINT or by a more fancy
variation of PRINT written specially for Sprouts, together with
a table of how many connections remain to be made to each dot.
People who have never programmed in LISP will probably find this
notation difficult to understand, in which case this section
should be omitted when reading this file.
	The table of lives is the easy part.  It is simply a list
of how many lives each dot has remaining, thus after the first
two half-moves in the example game, the table of lives would be
(1 2 0 1) which means dot#1 has 1 life, dot#2 has 2 lives, dot#3
has 0 lives, and dot#4 has 1 life.
	The three-level list is more complicated.  The top level
is a list of regions (city parks) altogether.  Each second level
is the list of separate pieces of highway adjoining the park
(in the top-level list) that points to it, thus to get between
the various pieces of highway one must drive across the park.
Each third level is a list of intersections on that piece of
highay adjoining that park, however the intersections are listed
in sequence from left to right as one would read off the numbers
while standing in the park and facing the highway segment.
	Note that arbitrary permutation of regions doesn't change
the situation, also that within each region arbitrary permutation
of highway segments doesn't change the situation, also that rotation
of the numbers of intersections on a highway segment doesn't change
the situation but that any other permutation of numbers of
intersections on a highway segment will result in a different
situation, or more commonly an impossible configuration.
	Below are listed the life table and the 3-level list which
denote the situations that occur in the example game above, together
with the moves (same as shown above) which transform each situation
into the next.  Each situation is shown in fully-verbose mode (all
dots shown even though they have no connections remaining to make
hence are irrelevant to the later game) and in terse mode (all
fully-dead dots deleted from the notation, and all regions where
no further connections can be made deleted from the notation):
INITIAL SITUATION:  (3 3)  (((1) (2)))
MOVE:	FOO 3: 1-2
RESULTANT SITUATION:  (2 2 1)  (((1 3 2 3)))
MOVE:	BAZ 4: 1-3 (2/)
VERBOSE SITUATION:  (1 2 0 1)  (((1 4 3)) ((1 3 2 3 4)))
TERSE SITUATION:    (1 2 0 1)  (((1 4)) ((1 2 4)))
MOVE:	FOO 5: 1-4 (2/)
VERBOSE SITUATION:  (0 2 0 0 1)  (((1 4 3)) ((1 5 4)) ((1 3 2 3 4 5)))
TERSE SITUATION:    (0 2 0 0 1)  (((2 5)))
MOVE:	BAZ 6: 2-5
VERBOSE SITUATION:  (0 1 0 0 0 1)  (((1 4 3)) ((1 5 4)) ((2 3 4 5 6)) ((1 3 2 6 5)))
TERSE SITUATION:    (0 1 0 0 0 1)  (((2 6)) ((2 6)))
MOVE:	FOO 7: 2-6
VERBOSE SITUATION DEPENDS ON WHICH OF TWO EQUIVALENT MOVES WAS DONE.
TERSE SITUATION:    (0 0 0 0 0 0 1)  ()
	Note that at the end of the game the terse situation 3-level
list is always exactly NIL (the empty list).
	There are two reasons for having notation for a situation.
One reason is to describe a situation without repeating all the moves
that led up to it, in order to resolve a dispute in the middle of
a game when somehow one player or the other has screwed up his
playing area and wants to know what the other's looks like.  The
other is when using a program to analyze a situation there must be
some way to type in the desired situation.
	When a program types out a situation, instead of using
PRINT or PRINC to type out its internal representation as shown
above, usually a more human-readable version is used, shown here:
(after the second move)
SPROUTS SITUATION:
 REGION #1:
	BOUNDARY #1:  1[1],4[1]
 REGION #2:
	BOUNDARY #1:  1[1],2[2],4[1]
Note that the numbers inside brackets are the numbers of lives
taken from the life table.  The numbers outside brackets are
the numbers identifying the dots which appear as elements in the
third level of the 3-level list.  Here's a more complicated
example from a game with N=4:
SPROUTS GAME, 4 DOTS
FOO 5: 1-1 (2/3,4)
BAZ 6: 3-5
FOO 7: 3-6 (4/)
SPROUTS SITUATION:
 REGION #1:
	BOUNDARY #1:  2[3]
	BOUNDARY #2:  1[1]
 REGION #2:
	BOUNDARY #1:  4[3]
	BOUNDARY #2:  1[1],7[1],3[1]
 REGION #3:
	BOUNDARY #1:  3[1],7[1]

CANONICAL NOTATION FOR SPROUTS SITUATIONS:  When analyzing Sprouts
it is useful to identify situations that are equivalent so as to
avoid analyzing both versions of it and thus doubling ones work.
One way to do this is to find some canonical form of notation to
represent situations and to alphabetize or hash these representations
to make it easy to determine whether a situation that turns up is
one that has already been indexed and possibly analyzed.  The
notation that I have adopted for this purpose involves replacing
the number that designates a dot by the number that designates the
number of lives it has remaining (thus eliminating duplicate entries
due to different names for a dot that plays exactly the same role
in equivalent situations), except that when a dot is shared between
two regions or between two sides of an isthmus or peninsula it is
necessary to handle it in a unique way.  A minute's thought makes
it apparant that the only way a dot can still be alive while appearing
in two different places in the TERSE notation given above is if it
has exactly one life.  Even a dot with exactly one life (which
always lies across a peninsula or isthmus or is shared between two
regions in the VERBOSE notation above) can occur just once if
it adjoins two regions one of which is dead in the sense of no
chance to connect to anything else alive in that region.  Thus four
cases exist for each dot, unshared dots with 1 2 or 3 lives each,
which can be replaced by the number of lives, and shared dots with
exactly 1 life each, which are handled specially.  What is done for
1-life shared dots is to number them 4,5,6,...  After choosing the
numbering for 1-life shared dots, a recursive short of the 3-level
structure is done, sorting rotationally-only at the third level,
and sorting fully at the top level and the second level.  One
additional symmetry is present, namely that reversing the third
level lists throughout any top level (region) element doesn't
change the situation strategically.  Thus the complete brute-force
algorithm for finding canonical form is to replace shared 1-life
dots in all k factorial ways (where k is the number of them) and
performing the following algorithm on each way:
	In each region, try reversing and not reversing all
	third-level lists, performing the following algorithm
	on each:
		Sort each third-level cyclically.
		Sort the second-level list of third-level
		lists completely.
	Sort the list of two elements you get from the two
	calls to the sub-algorithm you just did, and select
	the first element.
	Now make a list out of the results for each region
	and sort it completely.
Now make a list of length k factorial of the results from all the
permutations on names 4,5,6,... for shared 1-life dots and sort
them completely, then select the first element as the answer,
the result that is returned from the canonical-form routine.  Here
are the canonical forms that result from the sample game above:
CANONICAL FORM:  (((3) (3)))
MOVE:	FOO 3: 1-2
CANONICAL FORM:  (((2 4 2 4)))
MOVE:	BAZ 4: 1-3 (2/)
CANONICAL FORM:  (((2 4 5)) ((4 5)))
MOVE:	FOO 5: 1-4 (2/)
CANONICAL FORM:  (((1 2)))
MOVE:	BAZ 6: 2-5
CANONICAL FORM:  (((4 5)) ((4 5)))
MOVE:	FOO 7: 2-6
CANONICAL FORM:  ()
	The only reason I can think of you would want to use this
canonical notation is when looking at output from my computer
program, or when describing an abstract situation to someone without
bothering him with the details of how it was arrived at in a game.
	Here's the 4-dot situation mentionned earlier, using
canonical notation:
(((3) (4)) ((3) (4 5 6)) ((5 6)))
	The major disadvantage of canonical notation is the large
amount of compute time it takes to perform k factorial recursive
sorts when k is large.  For example when given the situation in
terse notation:
  (1 1 1 1 1 1) (((1 4) (2 6)) ((2 6)) ((1 4) (3 5)) ((3 5)))
it takes seven hundred and twenty recursive sorts to determine
that the canonical notation is:
  (((4 5)) ((6 7)) ((4 5) (8 9)) ((6 7) (8 9)))
(actually "8" would come out "10" and "9" would come out "11"
 because my program currently uses base eight rather than
 base ten) which would take several minutes on the SU-AI KL-10
machine using compiled UCI-LISP (I haven't tried it in compiled
MACLISP yet).
	It is an unsolved problem how to find the canonical form
in fewer than k factorial recursive sorts;  as far as I know
nobody has found a faster way to do it and nobody has proven it
impossible.  A solution to the general problem of finding the
canonical numbering of vertices of a graph would have important
applications in Dendral (classifying molecules), Macsyma (finding
canonical forms for tensors and other formulas so that like terms
can be combined and their coefficients added), and of course
Sprouts and other game-playing programs that want to store away
situations they've already analyzed to avoid re-analyzing them
when an equivalent situation occurs under different circumstances.
I have some techniques that might minimize average-time, but 
haven't fully checked them out.

