;-*-lisp-*-

(declare (eval (read)))
(load '((sca) mode))

(scachar)

(declare (mapex t)
	 (special *nbonus*)
	 (fixnum i j k *nbonus* top-half bottom-half nroll))

(defun yahtze ()
       (bind ((^w <- t))
	     (sort (list 1) (function <)))	;to load SORT package early
       (terpri)
       (terpri)
       (princ '|Rules? |)
       (cond ((memq (read) '(y yes sure ok))
	      (cursorpos 'c)
	      (princ '|/
This is the game of Yahtze./
/
It is a game played with 5 dice.  You get thirteen turns.  Each turn you roll/
all 5 dice, then pick up and roll any or all of them again, and then pick up/
and roll any or all of them a third time.  You then score your roll in one of/
the thirteen scoring slots - one slot for each turn.  Slots may be used only/
once per game.  The slots are:/
/
  1 - Aces (Ones)/
  2 - Twos/
  3 - Threes/
  4 - Fours/
  5 - Fives/
  6 - Sixes/
/
  T - Three of a Kind/
  F - Four of a Kind/
  H - Full House [Three of one kind, and two of another]/
  S - Small Straight [Four numbers in a row]/
  L - Large Straight [Five numbers in a row]/
  Y - Yahtze [Five of a Kind]/
  C - Chance/
/
The first 6 slots form the top half, and the last 7 make up the bottom half./
In the top half, a score is the sum of the dice of the appropriate number./
Thus (2 3 4 4 4) would score 2 if scored in the 2 slot, 3 if scored in the 3/
slot, 12 if scored in the 4 slot, and 0 if scored in any of the 1, 5, or 6/
slots.  Also, if at the end of the game you have at least 63 points in the top/
half [for example, 3 of everything gives you exactly 63], you get a 35 point/
bonus.  Scoring in T is the total of all the dice, provided there is a three/
of a kind [the score is 0 otherwise].  Scoring in F is similar.  H scores 25,/
S 30, L 40, and Y 50, provided of course that your roll meets the appropriate/
prerequisite.  If you have 50 in Y already, you get 100 bonus points for each/
additional yahtze rolled.  Any yahtze may be used as a "joker" and scored/
anywhere in the lower half.  C scores the total of all the dice, for any roll./
/
Note:  when a roll is printed out, enter the numbers of the dice you wish to/
KEEP, followed by a space.  [If you wish to roll them all again, type 0.]/
When "Score?" is printed, type the character corresponding to the slot you/
wish to score the roll in, followed by a space./
/
P.S.:  If you are on a display console and this output gets lost [in which/
case you probably won't have time to read this], try :print drb;yahtze >, at/
least for the first page or two./
|)
	      (sleep 10.0)))

       (do ((scorecard (array nil t 13) (array nil t 13)) (roll) (*nbonus* 0 0)
	    (top-half) (bottom-half) (base 10.) (ibase 10.) (*nopoint t) (ans))
	   (nil)
	   (sstatus random (fix (time)))
	   (terpri)
	   (terpri)
	   (repeat i 13
		   (cursorpos 'c)
		   (princ '|Scorecard:|)
		   (print-scorecard scorecard)
		   (setq roll (fill-roll nil))
		   (repeat i 2
		      loop (print roll)
			   (princ '|  |)
			   (setq ans (list-nums (read)))
		           (if (subset? ans roll)
			       (setq roll (fill-roll ans))
			       (go loop)))
		   (print roll)
		   (score roll scorecard)
		   (terpri))
	   (terpri)
	   (terpri)
	   (princ '|Final Scorecard:|)
	   (print-scorecard scorecard)
	   (setq top-half (sum-array scorecard 0 5))
	   (terpri)
	   (princ '|Top Half:  |)
	   (princ top-half)
	   (cond ((> top-half 62)
		  (terpri)
		  (princ '|Plus a Bonus of 35|)
		  (setq top-half (+ top-half 35))))
	   (setq bottom-half (sum-array scorecard 6 12))
	   (terpri)
	   (princ '|Bottom Half:  |)
	   (princ bottom-half)
	   (cond ((= *nbonus* 1)
		  (terpri)
		  (princ '|Plus 1 Bonus Yahtze, for 100 Points|))
		 ((> *nbonus* 1)
		  (terpri)
		  (princ '|Plus |)
		  (princ *nbonus*)
		  (princ '| Bonus Yahtzes, for |)
		  (princ (* *nbonus* 100))
		  (princ '| Points|)))
	   (terpri)
	   (princ '|Total Score:  |)
	   (princ (+ top-half bottom-half (* 100 *nbonus*)))
	   (terpri)
	   (terpri)
	   (princ '|Again? |)
	   (cond ((not (memq (read) '(y yes sure ok)))
		  (terpri)
		  (quit)))))

(defun score (roll scorecard)
       (prog (ans nroll)
	     (setq nroll (num-kind roll))
	     (cond ((and (= nroll 5) (equal (arraycall t scorecard 11) 50))
		    (setq *nbonus* (1+ *nbonus*))
		    (terpri)
		    (princ '|A|)
		    (if (> *nbonus* 1) (princ '|nother|))
		    (princ '| Bonus Yahtze !!!|)))
	loop (terpri)
	     (princ '|Score? |)
	     (setq ans (read))
	     (cond ((numberp ans)
		    (if (or (not (fixp ans)) (< ans 1) (> ans 6)
			    (arraycall t scorecard (1- ans)))
			(go loop)
			(store (arraycall t scorecard (1- ans))
			       (sum-num ans roll))))
		   ((eq ans 't)
		    (if (arraycall t scorecard 6) (go loop)
			(store (arraycall t scorecard 6)
			       (if (> nroll 2) (sum-roll roll) 0))))
		   ((eq ans 'f)
		    (if (arraycall t scorecard 7) (go loop)
			(store (arraycall t scorecard 7)
			       (if (> nroll 3) (sum-roll roll) 0))))
		   ((eq ans 'h)
		    (if (arraycall t scorecard 8) (go loop)
			(store (arraycall t scorecard 8)
			       (if (full-house? roll) 25 0))))
		   ((eq ans 's)
		    (if (arraycall t scorecard 9) (go loop)
			(store (arraycall t scorecard 9)
			       (if (or (= nroll 5) (> (nrow roll) 3)) 30 0))))
		   ((eq ans 'l)
		    (if (arraycall t scorecard 10) (go loop)
			(store (arraycall t scorecard 10)
			       (if (or (= nroll 5) (> (nrow roll) 4)) 40 0))))
		   ((eq ans 'y)
		    (if (arraycall t scorecard 11) (go loop)
			(store (arraycall t scorecard 11)
			       (if (= nroll 5) 50 0))))
		   ((eq ans 'c)
		    (if (arraycall t scorecard 12) (go loop)
			(store (arraycall t scorecard 12)
			       (sum-roll roll))))
		   (t (go loop)))))

(defun fill-roll (roll)
       (do ((roll roll (cons (1+ (random 6)) roll)))
	   ((= (length roll) 5) roll)))

(defun list-nums (x)
       (if (not (eq (typep x) 'fixnum)) (list 0)
	   (do ((out nil (cons (\ i 10) out))
		(i x (// (- i (\ i 10)) 10)))
	       ((= i 0) out))))

(defun subset? (s1 s2)
       (setq s1 (sort (lcopy1 s1) (function <))
	     s2 (sort (lcopy1 s2) (function <)))
       (do ()
	   (nil)
	   (cond ((null s1) (return t))
		 ((null s2) (return nil))
		 ((= (car s1) (car s2)) (setq s1 (cdr s1))))
	   (setq s2 (cdr s2))))

(defun sum-array (arr i j)
       (do ((k 0 (+ k (arraycall t arr i)))
	    (i i (1+ i)))
	   ((> i j) k)))

(defun print-scorecard (scorecard)
       (terpri)
       (terpri)
       (princ '|  1  2  3  4  5  6    T  F  H  S  L  Y  C|)
       (terpri)
       (repeat i 6 (princ-/. (arraycall t scorecard i)))
       (princ '|  |)
       (do i 6 (1+ i) (= i 13) (princ-/. (arraycall t scorecard i)))
       (terpri))

(defun princ-/. (frob)
       (cond ((null frob) (princ '|  .|))
	     ((< frob 10) (princ '|  |) (princ frob))
	     (t (princ '| |) (princ frob))))

(defun sum-num (i roll) (* i (number-of i roll)))

(defun num-kind (roll)
       (do ((i 1 (1+ i))
	    (j 0 (max (number-of i roll) j)))
	   ((> i 6) j)))

(defun number-of (i roll)
       (bind ((j <- 0))
	     (mapc (fn (k) (if (= i k) (setq j (1+ j)))) roll)
	     j))

(defun nrow (roll)
       (prog (i j k)
	     (setq i 1 j 0 k 0)
	loop (setq j (if (= (number-of i roll) 0) 0 (1+ j)))
	     (setq k (max j k))
	     (setq i (1+ i))
	     (if (> i 6) (return k) (go loop))))

(defun sum-roll (roll) (apply (function +) roll))

(defun full-house? (roll)	;returns T for a YAHTZE.
       (prog (i j)
	     (setq i 1 j 0)
	loop (if (= (number-of i roll) 1) (return nil))
	     (if (> (number-of i roll) 0) (setq j (1+ j)))
	     (setq i (1+ i))
	     (if (> i 6) (return (< j 3)) (go loop))))
