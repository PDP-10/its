	PTP==34
	LOC	6200


;AN ORIGIN TAPE MUST BE SUPPLIED PRIOR
;TO THIS TAPE

;MULTI-BREAKPOINT DEBUGGER

	INTDS
	STA 3,SAC+3	;SAVE AC3
	JSR SAVAC	;AND THE REST OF THE REGISTERS
	SUB 0,0
	STA 0,@INFL	;CLEAR INTERRUPT ON
	STA 0,TTFLG	;CLEAR TTI,TTO DONE FLAGS
	STA 0,TPACT	;AND CLEAR TRAP ACTIVE
	JSR RMBRK
	JMP ENTER
;PUTBR PUT BREAK POINTS INTO THE PROGRAM

;RMBRK REMOVE BREAK POINTS AND RESTORE TO THEIR
;      ORIGINAL VALUES

PUTBR:	SUB 0,0(SKP)		;CLEAR AC0
RMBRK:	ADC 0,0		;SET AC0
	LDA 2,PTBR5		;GET A COUNTER
	STA 2,INTFL		;AND SAVE IT
	STA 3,PTBR8		;SAVE RETURN
	LDA 3,PTBR6		;GET BP BLOCK POINTER
PTBR0:	LDA 1,PTBR7
	ADD 1,3		;UPDATE BLOCK POINTER
	INC 2,2		;UPDATE STORAGE REGISTER
	LDA 1,1(3)		;GET BREAK LOCATION
	MOVL% 1,1(SZC)		;AND TEST IF ACTIVE
	JMP PTBR2		;NO
	MOV 0,0(SZR)		;TEST IF PUTTING OR REMOVING
	JMP PTBR1		;REMOVING

	LDA 1,@1(3)		;PUTTING IN
	STA 1,2(3)		;SAVE INSTRUCTION
	LDA 1,3(3)		;GET BREAK INSTRUCTION
	STA 1,@1(3)		;AND STORE IT
	JMP PTBR2		;CONTINUE
;REMOVE BREAK POINT
PTBR1:	LDA 1,2(3)		;GET INSTRUCTION
	STA 1,@1(3)		;PUT BACK INTO PROGRAM

;PUT BREAK POINTER INTO PAGE ZERO
PTBR2:	LDA 1,4(3)
	STA 1,3(2)
	LDA 1,0(3)
	NEGL% 1,1(SNC)
	SUBZL 1,1
	STA 1,0(3)
PTBR3:	DSZ INTFL		;DECREMECOUNT
	JMP PTBR0		;NOT DONE
	MOV 0,0(SZR)
	JMP @PTBR8		;DONE, EXIT

	STA 0,TRPNO
	LDA 3,TTFLG	;NOW, FIX UP THE TTY FLAGS
	MOVR 3,3(SNC)
	NIOC TTI	;TTO DONE WAS A 0
	MOVR 3,3(SNC)
	NIOC TTO	;TTI DONE WAS A 0
	LDA 3,SAC+4	;RESTORE CRY
	MOVR 3,3
	LDA 0,SAC	;AND THE AC'S
	LDA 1,SAC+1
	LDA 2,SAC+2
	LDA 3,SAC+3
	JMP @PTBR8
PTBR5:	4
PTBR6:	BPBLK-5
PTBR7:	5
PTBR8:	0			;SAVED RETURN

;SAVE AC'S
SAVAC:	STA 0,SAC
	STA 1,SAC+1
	STA 2,SAC+2
	SUBCL 0,0
	STA 0,SAC+4
	JMP 0(3)		;AND RETURN

;SAVED ACCUMULATORS AND CARRY
SAC:	0
	0
	0
	0
	0

;POINTERS
TRPC0:	B2
RLOC0:	RLOC
TTFLG:	0
INFL:	INFL0
PROCD:	PRCD
CHB:	"B
TRPNO:	0
INTFL:	0
TPACT:	0



;PROCEED COMMAND
PR0:	SUBZL 0,0		;SET COUNT TO +1
PR:	LDA 3,TPACT		;TEST TRAP ACTIVE
	MOV 3,3(SNR)
	JMP ERROR		;NONE ACTIVE, ERROR
	STA 0,-1(3)		;OK, SET COUNT
PR1:	JMP @PROCD		;DO INSTRUCTION AND CONTINUE





;TRAP ENTRIES
TRP1:	SKPBN CPU		;TEST INTERRUPT
	JMP TRPCM+3		;IT IS OFF
	INTDS		;TURN IF OFF
	ISZ INTFL		;AND SET FLAG
	JMP TRPCM+3

TRP2:	SKPBN CPU
	JMP TRPCM+2
	INTDS
	ISZ INTFL
	JMP TRPCM+2

TRP3:	SKPBN CPU
	JMP TRPCM+1
	INTDS
	ISZ INTFL
	JMP TRPCM+1

TRP4:	SKPBN CPU
	JMP TRPCM
	INTDS
	ISZ INTFL




;COMMON TRAP CODE

TRPCM:	ISZ TRPNO		;SET THE TRAP NUMBER
	ISZ TRPNO
	ISZ TRPNO
	STA 3,SAC+3
	JSR SAVAC	;SAVE REGISTERS
	LDA 3,INTFL	;GET INTERRUPT FLAG
	STA 3,@INFL	;AND STORE IT
	JSR RMBRK		;GO REMOVE ALL BREAK POINTS
	LDA 0,TRPNO		;GET TRAP NUMBER
	JSR @TRPC0		;GO FORM ADDRESS IN AC0,AC2
	STA 2,TPACT
	LDA 0,0(2)	;GET TRAP LOCATION
	STA 0,@RLOC0	;AND SAVE IT
	SKPBN TTO
	SKPBZ TTI		;WAIT FOR BOTH TTI,TTO TO FINISH
	JMP .-2		;ONE IS STILL BUSY
	SUB 3,3		;CLEAR AC3
	SKPDZ TTO		;TEST TTO DONE
	INCZL 3,3		;SET, SET AC3 BIT 14
	SKPDZ TTI
	INC 3,3		;TTI SET, SET BIT 15
	STA 3,TTFLG		;SET FLAG
	DSZ -1(2)	;TEST COUNT
	JMP @PROCD		;PROCEED, HASN'T EXPIRED YET
	JSR CRLF		;GO PRINT CR,LF
	JSR @OCTL0		;TYPE ADDRESS IN AC0
	7-5			;5 DIGITS
	LDA 1,CHB
	JSR @TYP0		;TYPE A "B
	LDA 0,TRPNO	;TYPE THE TRAP NUMBER
	JSR @OCTL0
	7-1		;1 DIGIT
ENTER:	JSR CRLF
	JMP @.+1
	A0		;TYPE CONTENTS OF AC'S



;SET A BREAK POINT, IE FIND
;AND INCATIVE ONE
B1:	MOVL 0,0
	MOVZR 0,0	;CLEAR BIT0
	LDA 2,PTBR6	;GET BLOCK ADDRESS
	LDA 1,PTBR7
	NEG 1,3		;FORM COUNT IN AC3
B3:	LDA 1,PTBR7	;GET +5
	ADD 1,2		;AND UPDATE ADDRESS
	INC 3,3(SNR)	;TEST FOR COMPLETION
	JMP ERROR	;YES, ALL ACTIVE, ERROR
	LDA 1,1(2)	;GET ACTIVE LOCATION
	MOVL% 1,1(SNC)	;TEST IF ACTIVE
	SUB% 0,1(SNR)	;YES, IS IT SAME AS ARG?
	SUBZL 1,1(SKP)	;OK, USE THIS ONE
	JMP B3		;NO, TRY AGAIN
	STA 1,0(2)	;STORE COUNT
	STA 0,1(2)	;AND THE ADDRESS
	JMP EQUAL+2






;=	TYPE EXPRESSION IN AC0
EQUAL:	JSR @OCTL0	;CALL PRINTER
	7-6		;6 DIGITS
	JSR CRLF		;TYPE CR,LF
;NOW, BEGIN INPUT
BGN:	JSR INPUT		;CALL INPUT
	177777			;INPUT MASK
	CTBL1			;TABLE IF NO NUMBER
	CTBL2			;TABLE IF NUMBER
	JMP 0(3)		;EXECUTED IF NUMBER

;TYE CR,LF
CRLF:	LDA 1,CN15
	MOV 3,2
	JSR @TYP0
	LDA 1,CN12
	JSR @TYP0
	JMP 0(2)
QUEST:	"?
CN15:	15
INPT9:
CN12:	12
	0	;LIST TERMINATOR
OCTL0:	OCTAL



ERROR:	LDA 1,QUEST	;GET ?
	JSR @TYP0
	JMP BGN-1	;TYPE CR,LF
CN70:	70
CN60:	60
CPRD:	".
CDLR:	"$
C54:	54
CN177:	177



;INPUT	SUBROUTINE TO INPUT A
;	NUMBER, DECODE THE BREAK CHARACTER, TYPE A RESPONSE
;	AND TRANSFER TO THE PROPER HANDLER WITH THE EXPRESSION
;	IN AC0
;
;CALLING SEQUENCE:
;	JSR INPUT
;	INPUT MASK
;	TABLE IF NO NUMBER
;	TABLE IF NUMBER
;	RETURN IF NUMBER WITH SUBROUTINE ADDRESS IN AC3

INPUT:	STA 3,INP10		;SAVE THE CALLING LOCATION
	SUB 0,0
	STA 0,EXPFL		;CLEAR THE EXPRESSION FLAG
INPT0:	SUB 1,1(SKP)
	SUBZL 1,1
	STA 0,EXPVL		;SET EXPRESSION
	STA 1,COMBN		;SET COMBINATION FLAG
	SUB 2,2		;CLEAR VALUE OF CURRENT ATOM
INPT1:	NIOC TTI
	SKPDN TTI		;GET A CHARACTER
	JMP .-1
	DIA 1,TTI
	JSR @TYP0
	LDA 0,CN177
	AND 0,1		;CRUNCH TO 7 BITS
	SUB% 0,1(SNR)
	JMP ERROR	;A RUBOUT, ERROR
	LDA 0,CN70		;TEST FOR A DIGIT
	LDA 3,CN60
	SUBL% 0,1(SZC)
	SUBZ% 3,1(SNC)
	JMP INPT3		;NOT A DIGIT
;A DIGIT, BUILD NUMBER IN AC0
	SUB 3,1		;AC1=DIGIT
	MOVZL 2,2
	MOVZL 2,2		;MULTIPLY ATOM BY 8
	MOVZL 2,2
	ADD 1,2
INPT2:	SUBZL 0,0
	STA 0,EXPFL		;SET EXPRESSION FLAG
	JMP INPT1		;AND GET NEXT CHARACTER

TYP0:	TYPE


;NOT A DIGIT, CHECK FOR . $
INPT3:	LDA 0,CPRD		;GET ".
	SUB% 1,0(SZR)
	JMP .+3		;NOT A PERIOD
	LDA 2, ADDRS		;YES, GET VALUE OF .
	JMP INPT2

	LDA 0,CDLR		;GET "$
	SUB% 1,0(SZR)
	JMP .+3		;NO
	LDA 2,@LOC1		;YES, GET $ VALUE
	JMP INPT2		;AND PROCEED



;OK, NOW COMBINE CURRENT NUMBER WITH EXPRESSION
	LDA 3,COMBN		;GET COMBINATION FLAG
	LDA 0,EXPVL		;GET EXPESSION
	MOV 3,3(SZR)
	SUB 2,0(SKP)		;DO A SUBTRACT
	ADD 2,0		;DO AN ADD
;NOW, AC0=EXPRESSION VALUE
	LDA 3,C54		;TEST FOR +
	ADC% 1,3(SNR)
	JMP INPT0		;YES, PROCEED
	INC 3,3		;NO, TEST FOR -
	SUB% 1,3(SNR)
	JMP INPT0+1		;YES, PROCEED

;NOW, GET TABLE POINTERS
	LDA 3,INP10		;GET CALLING ADDRESS
	LDA 2,0(3)
	AND 2,0		;MASK THE NUMBER
	LDA 2,2(3)		;GET POINTER FOR NUMBER INPUT

	DSZ EXPFL		;TEST FOR NUMBER
	LDA 2,1(3)		;NO-GET THE OTHER POINTER
	STA 0,COMBN	;SAVE THE EXPRESSION


;NOW, LOOKUP THE CHARACTER IN THE TABLE
INPT4:	LDA 3,0(2)		;GET FROM TABLE
	LDA 0,CN177	;GET A 7 BIT MASK
	AND 0,3(SNR)
	JMP ERROR		;0, TABLE ENDED
	SUB% 1,3(SNR)		;COMPARE
	JMP INPT5		;FOUND
	INC 2,2		;ADVANCE TABLE POINTER
	INC 2,2
	JMP INPT4
INPT5:	LDA 0,1(2)		;GET SUBROUTINE ADDRESS
	STA 0,EXPVL		;SAVE ADDRESS
	LDA 1,0(2)	;GET FROM TABLE
	LDA 2,LEFT	;GET MASK
	ANDS 1,2	;GET MESSAGE NUMBER IN AC3
	LDA 3,TBPNT	;GET TABLE POINTER
	ADD 2,3		;FORM POINTER IN AC3
	LDA 2,0(3)	;GET STRING ADDRESS
	MOVL% 1,1(SZC)	;TEST FOR SPECIAL EXAMINE MODE
	JMP INPT7	;YES
INPT6:	LDA 1,0(2)		;GET CHARACTER
	MOV 1,1(SNR)		;TEST FOR ZERO
	JMP .+4		;OK, EXIT
	JSR @TYP0		;GO TYPE THE CHARACTER
	INC 2,2
	JMP INPT6		;AND PROCEED

	LDA 3,EXPVL		;SUBROUTINE ADDRESS
	LDA 2,INP10
	LDA 0,COMBN	;GET THE EXPRESSION INTO AC0
	ISZ EXPFL		;TEST FOR NUMBER
	JMP 3(2)		;NUMBER
	JMP 0(3)		;NO NUMBER

INPT7:	LDA 1,SLS	;TYPE SLASH, SPACE
	JSR @TYP0
	JSR TSPC
	MOV 2,1		;GET INPUT MASK
INPT8:	ADC 2,2		;SET TO / MODE
	JMP EX1		;AND PROCEED



INP10:	0
EXPFL:	0			;EXPRESSION FLAG
EXPVL:	0			;EXPRESSION VALUE
COMBN:	0			;COMBINATION FLAG
MODE:	0
LEFT:	17*400
TBPNT:	MESTBL		;POINTER TO MESSAGE TABLE


;PROCESS LINE:FEED
LF0:	ISZ ADDRS		;INCREMENT ADDRESS
	JMP .+3
;PROCESS UP-ARROW
UPR0:	DSZ ADDRS		;DECREMENT ADDRESS
	JMP .+1
	LDA 0,ADDRS		;OK, TYPE THE ADDRESS
	JSR @OCTL0
	7-5
	LDA 1,SLS		;GET A SLASH
	LDA 2,MODE
	INC% 2,2(SZR)		;TEST MODE
	LDA 1,EXC		;GET AN !
	JSR @TYP0
	JSR TSPC		;TYPE A SPACE
	LDA 0,ADDRS		;GET ADDRESS
EX0:	ADC 1,1		;GET INPUT MASK INTO AC1




;AC0-ADDRESS
;AC1-INPUT MASK
;AC2-MODE

EX1:	MOVL 0,0
	MOVZR 0,0		;CLEAR BIT 0
	STA 0,LOC1		;AND SAVE LOCATION
	STA 1,MSK		;SAVE MASK
	INC% 2,2(SZR)		;TEST MODE
	JMP .+5		;IN ! MODE
	LDA 0,@LOC1	;IN / MODE, GET VALUE
	JSR @OCTL6	;AND TYPE IT
	7-6			;6 DIGITS
	JSR TSPC		;TYPE A SPACE
	JSR INPUT		;DO INPUT
MSK:	0
	CTBL3			;COMMAND IF NO NUMBER
	CTBL3			;COMMAND IF NUMBER
	STA 0,@LOC1		;EXECUTED IF NUMBER
	JMP 0(3)		;GO CALL HANDLER
LOC1:	0
EXC:	"!
SLS0:
SLS:	"/
C40:	40
	0
ADDRS:	0
OCTL6:	OCTAL



;PROCESS A SLASH
SLSH:	ADC 2,2(SKP)		;SET AC2=-1
;PROCESS AN EXCLAMATION
EXCL:	SUBZL 2,2		;SET AC2=+1
	STA 2,MODE		;AND SET MODE
	STA 0,ADDRS		;STORE ADDRESS
	JMP EX0
TSPC:	LDA 1,C40
TYPE:	DOAS 1,TTO
	SKPDN TTO
	JMP .-1
	JMP 0(3)



;BREAK POINT COMMANDS
;B0	PRINT ALL BREAKPOINTS
;N1	EXAMINE A BREAK POINT COUNT
;D0	DELETE ALL BREAKPOINTS
;D1	DELETE A BREAKPOINT

B0:	JSR PRINT		;CALL PRINTING SUBROUTINE
	BPBLK+1		;BREAK-POINT BLOCK
	5			;DELTA ADDRESS
	"B			;PRINT "B

N1:	JSR B2		;GO CALCULATE ADDRESS
	LDA 1,0(2)	;GET CADDRESS
	MOVL 1,1(SZC)	;TEST ACTIVE
	JMP RETN	;INACTIVE, ERROR
	ADCZR 1,1		;SET DEPOSIT MASK TO 77777
	ADC 2,2		;SET TO / MODE
	ADD 2,0		;FORM REAL ADDRESS
	JMP EX1		;AND PROCEED

D1:	JSR B2			;GO CALCULATE ADDRESS
	ADCZL 3,3		;SET CONT AND ENTER D0
	JMP D0+3

D0:	LDA 2,B0+1		;GET ADDRESS
	LDA 0,B0+2		;GET CONSTANT
	NEG 0,3		;FORM COUNT
	SUBZR 1,1		;SET AC1=100000
D2:	INC 3,3(SNR)		;TEST FOR COMPLETION
	JMP RETN		;YES, EXIT
	STA 1,0(2)		;NO, CLEAR BREAK POINT
	ADD 0,2		;UPDATE ADDRESS
	JMP D2			;AND PROCEED

;B2	FORM (AC0.AND.3)*5+BPBLK+1 INTO AC0,AC2
B2:	LDA 1,CN3
	AND 1,0
	MOVZL 0,1
	MOVZL 1,1
	ADD 1,0
	LDA 1,B0+1
	ADD 1,0
	MOV 0,2
	JMP 0(3)
CN3:	3

;TAPE 2-DEBUGGER


;SUBROUTINE TO PRINT 4 LINES
;
;CALLING SEQUENCE:
;	JSR PRINT
;	INITIAL ADDRESS
;	DELTA ADDRESS
;	CHARACTER
;	RETURN IS MADE TO "BGN"

PRINT:	STA 3,PRN3		;SAVE AC3
	SUB 0,0		;CLEAR AC0
	LDA 1,0(3)		;GET INITIAL ADDRESS

PRN0:	STA 0,PRN4		;SAVE #
	STA 1,F1		;SAVE ADDRESS
	JSR OCTAL		;PRINT #
	7-1			;1 DIGIT
	LDA 2,PRN3		;GET AC3
	LDA 1,2(2)		;GET CHARACTER
	JSR TYPE		;AND TYPE IT
	LDA 0,@F1
	MOVR 1,1(SNC)	;TEST THE MODE
	MOVL% 0,0(SNC)
	JMP .+2
	JMP PRN1	;INACTIVE BP, DON'T PRINT
	JSR TSPC
	JSR OCTAL
	7-6			;PRINT AS 6 DIGITS
PRN1:	JSR TSPC		;TYPE SPACE
	LDA 1,F1		;NOW, GET ADDRESS
	ISZ PRN4		;INCREMENT NUMBER
	LDA 3,PRN3		;GET AC3
	LDA 2,1(3)		;GET DELTA DDRESS
	ADD 2,1		;UPDATE ADDRESS
	LDA 0,PRN4		;GET NUMBER
	LDA 3,CN3
	ADC% 3,0(SZR)		;AND TEST FOR DONE
	JMP PRN0		;NO
RETN:	JMP @.+1	;RETURN
	BGN-1

PRN3:	0
PRN4:	0			;NUMBER



;ACCUMULATOR COMMANDS
;A0	PRINT ALL AC'S
;A1	EXAMINE AN AC

A1:	LDA 1,CN3
	AND 1,0
	LDA 1,A0+1
	ADD 1,0		;FORM ADDRESS
	ADC 2,2		;SET TO / MODE
	JMP EX0		;AND PROCEED

A0:	JSR PRINT			;CALL PRINTER
	SAC			;INITIAL ADDRESS
	1			;DELTA ADDRESS
	"A			;PRINT A

RUN:	0	;SAVED RUN LOCATION


;OCTAL PRINTER
;CALLING SEQUENCE:
;
;	JSR OCTAL	(AC0=NUMBER TO BE PRINTED
;	7-NUMBER OF OCTAL DIGITS
;	RETURN

OCTAL:	LDA 1,0(3)		;GET ARGUMENT
	STA 1,INST		;AND SAVE IT
	INC 3,3
	STA 3,ADR		;SAVE UPDATED RETURN
	SUBZR	2,2(SKP)	;GET A BIT IN LOC 0
	SUB 2,0(SKP)
OCTL1:	LDA 1,C57	;GET A 0-1
	INC 1,1
	SUBZ% 2,0(SZC)	;COMPARE
	JMP .-4		;TOO SMALL, ADD 1 TO DIGIT
	JSR OCTL2	;OUTPUT THIS DIGIT
	MOVZR 2,2	;AND MOVE THE OUTPUT
	MOVZR 2,2	;NUMBER 1 OCTAL POSITION
	MOVZR 2,2(SZR)
	JMP OCTL1	;DO THE NEXT
	JMP @ADR	;ALL DONE, EXIT


OCTL2:	DSZ INST	;TEST FOR IGNORING
	JMP 0(3)		;STILL IGNORING
	ISZ INST
	JMP TYPE

C57:	57

;PROCEED FROM TRAP BY EXECUTING TRAP INSTRUCTION
;AND PLACING ACTIVE TRAPS BACK INTO PROGRAM

PRCD:	LDA 0,@RLOC	;GET THE INSTRUCTION
	STA 0,INST	;AND SAVE IT FOR EXECUTION
	LDA 1,MSK1		;GET MASK FOR BITS 0,2
	AND 0,1
	LDA 3,MSK1+1		;TEST FOR AN IO INSTRUCTION
	SUB 1,3(SNR)
	JMP PRCD0		;YES
	MOVL% 0,0(SNC)		;NO, TEST FOR ALC
	JMP PRCD2		;NO, IT IS MEM REF

PRCD0:	JSR @PTBR	;PUT IN THE BREAK POINTS
INST:	0			;EXECUTE THE INSTRUCTION
	DSZ RLOC	;IT DIDN'T SKIP
	ISZ RLOC		;IT DID SKIP
	ISZ RLOC
	JMP GO+1
;R RUN PROGRAM
RN:	LDA 0,RUN	;GET LOCATION
RN1:	MOVL 0,0,	;USE ARGUMENT
	MOVZR 0,0	;BUT CLEAR BIT 0
	STA 0,RLOC
GO:	JSR @PTBR		;PUT IN THE BREAKPOINTS
	DSZ INFL0		;TEST IF INTERRUPT IS ON
	JMP @RLOC		;NO, EXIT WITH IT OFF
	INTEN		;YES, TURN IT ON
	JMP @RLOC		;AND EXIT
MSK1:	160000
	060000
PTBR:	PUTBR
CLF:	CRLF
RLOC:	0



;PROCESS MEMORY REFERENCE INSTRUCTION
;DO ALL INDEXING TO CALCULATE AN INITIAL
;EFFECTIVE ADDRESS, AND TEH DO ALL
;NECESSARY DEFER CYCLES

PRCD2:	LDA 1,MSK4		;GET AN 8 BIT MASK
	MOV 1,2		;AND PUT A COPY INTO AC2
	ANDS 0,2		;8 BITS INTO LH OF AC2
	MOVL% 2,2(SZC)		;TEST BIT 8 OF INSTRUCTION
	ADDS 1,2(SKP)
	MOVS 2,2		;POSITIVE EXTEND
;NOW, EXAMINE THE INDEX FIELD
	LDA 3,MSK5		;MASK FOR BITS 6,7
	AND 0,3(SNR)		;PUT INDEX BITS INTO AC3
	AND 1,2		;X=0, AC2 TO 8 BITS
	LDA 1,MSK5+1		;GET BIT 7 CONSTANT
	SUB 0,0		;CLEAR AC0
	SUB 1,3(SNR)		;TEST FOR X=1
	LDA 0,RLOC		;YES, USE TRAP LOCATION
	SUB 1,3(SNR)		;TEST FOR X=2
	LDA 0,@SAC2		;YES, USE AC2
	SUB 1,3(SNR)
	LDA 0,@SAC3		;UES AC3
	ADD 0,2		;AC2=EFFECTIVE ADDRESS(FIRST STAGE)

;NOW, TEST THE DEFER BIT
	LDA 0,INST
	LDA 1,MSK5+2
	AND% 0,1(SNR)
	JMP PRCD5		;BIT 5=0, GO DO INSTRUCTION

;DO THE DEFER CYCLE
PRCD3:	LDA 3,MSK5+3		;BITS 1-11
	AND 2,3
	LDA 1,MSK5+4		;TEST FOR 000 000 000 01X XXX
	SUB 1,3(SZR)
	JMP PRCD4		;NOT AUTO UP OR DOWN
	LDA 0,C10		;TEST FOR UP OR DOWN
	AND 2,0(SNR)
	JMP .+4		;UP
	DSZ 0(2)		;DOWN
	JMP PRCD4		;CONTINUE
	JMP PRCD4
	ISZ 0(2)		;UP
	JMP PRCD4
ADR:	0
F1:	0


;DO THE DEFER
PRCD4:	LDA 2,0(2)		;FETCH
	MOVL% 2,2(SZC)		;TEST BIT 0
	JMP PRCD3		;SET, DO ANOTHER

;AC2=EFFECTIVE ADDRESS
;DO THE INSTRUCTION
PRCD5:	LDA 0,INST		;TEST FOR JMP OR JSR
	LDA 1,MSK1+1	;TEST FOR LDA STA
	AND 0,1(SZR)
	JMP PRCD6	;YES
	LDA 1,MSK6		;MASK FOR BITS 3,4
	AND 0,1(SNR)
	JMP .+7		;A JUMP
	LDA 3,MSK6+1		;BIT 4
	SUB 1,3(SZR)
	JMP PRCD6		;NOT JSR
	LDA 0,RLOC		;JSR
	INC 0,0
	STA 0,@SAC3		;SET AC3
	STA 2,RLOC	;SET THE NEW PC
	JMP GO		;AND DO A JMP
;LDA OR STA, ISZ OR DSZ
PRCD6:	STA 2,ADR
	LDA 1,MSK6+2		;CLEAR OUT BITS 5-15
	AND 1,0
	LDA 1,MSK6+3
	ADD 1,0		;FORM REL INSTRUCTION
	STA 0,INST		;RESTORE INSTRUCTION
	JMP PRCD0		;AND PROCEED

;CONSTANTS, ETC
SAC2:	SAC+2
SAC3:	SAC+3
C10:	10
MSK4:	377
MSK5:	001400	;BITS 6,7
	000400	;BIT 7
	002000	;BIT 5
	077760	;BITS 1-11
	000020

MSK6:	014000	;BITS 3,4
	004000	;BIT 4
	174000	;BITS 0-4
	ADR-INST+2400	;RELATIVE+@
INFL0:	0


;PROCESS MULTI-FIELD COMMAND

MLTFL:	MOVL 0,0
	MOVZR 0,0		;CLEAR BIT 0
	STA 0,F1
	JSR @INPT
	77777
	CTBL5
	CTBL4
	STA 0,F2
	JMP 0(3)
INPT:	INPUT


;SEARCH ALL OF MEMORY
SRCHA:	ADCZR 0,0	;GET ENDING ADDRESS
;SEARCH TO C(AC0)
SRCH0:	STA 0,F2	;SAVE FINAL ADDRESS
	SUB 0,0		;GET FIRST ADDRESS
	STA 0,F1	;AND STORE IT

;DO A SEARCH
SRCH:	NIOC TTI	;CLEAR INPUT DONE
	LDA 0,@F1
	LDA 1,MASK
	AND 0,1
	LDA 2,WORD1
	SUB% 1,2(SZR)
	JMP SRCH1
	LDA 0,F1
	JSR @OCTL		;PRINT ADDRESS
	7-5
	JSR @TSPCE
	LDA 0,@F1
	JSR @OCTL
	7-6
	JSR @CLF
SRCH1:	LDA 0,F1
	LDA 1,F2
	SKPDN TTI	;STOP IF KEY STRUCK
	SUB 0,1(SNR)
	JMP @BEGIN
	ISZ F1
	JMP SRCH
F2:	0
MASK:	0
WORD1:	0
OCTL:	OCTAL
TSPCE:	TSPC
TYP:	TYPE
BEGIN:	BGN-1
SA:	0


;PUNCH MEMORY
PN:	JSR HWHCH	;HALT IF TTO
PBLK:	LDA 2,F1	;GET FIRST ADDRESS
	STA 2,SA
	LDA 0,F2	;GET LAST ADDRESS
	SUBL% 2,0(SZC)
	JMP PDONE	;PUNCHING IS DONE
	MOV 2,1
	ADC 0,1		;AC1=COUNT
	LDA 3,C20	;GET 20 OCTAL
	ADDZ% 1,3(SNC)	;SEE IF COUNT.GE.20
	NEG 3,1		;YES, SET TO 20(8)
	MOV 2,3
	SUB 1,3
	STA 3,F1	;STORE UPDATED F1
	STA 1,ADR	;SAVE COUNT
	JSR PWORD	;PUNCH COUNT
	MOV 2,1
	JSR PWORD	;PUNCH ADDRESS

;NOW, CALCULATE THE CHECKSUM
	LDA 0,ADR
	MOV 0,1		;GET A COUNT
	ADD 2,1		;ADD ADDRESS TO CHECKSUM
CHK:	LDA 3,0(2)	;GET WORD
	ADD 3,1		;ADD INTO CHECKSUM
	INC 2,2		;INCREMENT ADDRESS
	INC 0,0(SZR)	;INCREMENT COUNT
	JMP CHK		;NON-ZERO, PROCEED
	NEG 1,1		;OK, NEGATE THE SUM
	JSR PWORD	;AND PUNCH IT
	LDA 2,SA	;GET FIRST ADDRESS
	LDA 1,0(2)	;GET WORD
	JSR PWORD	;AND PUNCH IT
	INC 2,2		;INCREMENT ADDRESS
	ISZ ADR		;TEST FOR COMPLETION
	JMP .-4		;NOT DONE, DO THE NEXT
	SUBZL 2,2	;PUNCH 2 BLANKS
	MOVZL 2,2
	JSR BLNK
	JMP PBLK	;DO THE NEXT BLOCK
C20:	20



;PUNCH THE WORD IN AC1
PWORD:	STA 3,SRTN	;SAVE THE RETURN
	JSR PUN		;PUNCH BITS 8-15
	MOVS 1,1
	JSR PUN		;NOW PUNCH BITS 0-7
	JMP @SRTN	;AND RETURN
SRTN:	0		;SAVED RETURN

;PUNCH BLANKS IN AC2
BLNK:	STA 3,SRTN
	NEG 2,2
	SUB 1,1
	JSR PUN		;PUNCH THE BLANK
	INC 2,2(SZR)
	JMP .-3
	JMP @SRTN	;ALL DONE, RETURN

;PUNCH C(AC1)
PUN:	LDA 0,PUNCH	;TEST WHICH DEVICE
	MOV 0,0(SNR)
	JMP @TYP	;USE THE TTO
	DOAS 1,PTP	;USE THE PTP
	SKPDN PTP
	JMP .-1
	JMP 0(3)		;AND RETURN

;HALT IF PUNCHING IS TO THE TTO
HWHCH:	LDA 0,PUNCH
	MOV 0,0(SNR)
	HALT
	JMP 0(3)
PUNCH:	0		;0,USE TTO, 1,USE PTP

E1:	MOVL 0,2(SKP)	;ENTRY IF ARG
E2:	SUBZR 2,2(SKP)	;ENTRY IF NO ARG
	MOVZR 2,2
	JSR HWHCH
	SUBZL 1,1
	JSR PWORD	;PUNCH A 1
	MOV 2,1
	JSR PWORD	;PUNCH ADDRESS
	COM 2,1
	JSR PWORD	;PUNCH CHECKSUM
PDONE:	JSR HWHCH	;HALT IF TTO
	JMP @BEGIN	;AND RETURN


;F	PUNCH TAPE FEEDS
F:	MOVZL 0,2
	MOVZL 2,2
	ADDZL 0,2	;MULTIPLY AC0 TIMES 10
	JSR HWHCH	;HALT IF TTO
	JSR BLNK
	JMP PDONE



;BREAK POINT BLOCK
;BLOCK FORMAT
;0	COUNT
;1	LOCATION (BIT0=1 INDICATES INACTIVE)
;2	INSTRUCTION
;3	BP INSTRUCTION
;4	ENTRY POINT
BPBLK:	1
	100000
	HALT
	JMP @10
	TRP1

	1
	100000
	HALT
	JMP @11
	TRP2

	1
	100000
	HALT
	JMP @12
	TRP3

	1
	100000
	HALT
	JMP @13
	TRP4




;DEFINE MESSAGE TABLE
MESTBL:
MESG1=400*0
	INPT9-1		;CR,LF
MESG2=400*1
	INPT9+1		;NOTHING
MESG3=400*2
	SLS0+1		;SPACE
MESG4=400*3
	SLS0		;/ SPACE
MESG5=400*4
	INPT9		;LINE FEED
MESG6=400*5
	SLUF		;SLUFF
MESG7=400*6+100000
	-1	;INPUT MASK
MESG8=400*7+100000
	1
MESG9=400*10+100000
	3
MESG0=400*11+100000
	77777

;CONTROL TABLE 1
;PROCESSED IF NOT NUMBER
CTBL1:	"M+MESG7	;M EXAMINE MASK
	MASK

	"C+MESG8	;C EXAMINE CARRY
	SAC+4

	"E+MESG1	;PUNCH END BLOCK
	E2

	"H+MESG8	;H EXAMINE TTO/PTP
	PUNCH

	"I+MESG8	;I EXAMINE INTERRUPT
	INFL0

	"W+MESG7	;W EXAMINE WORD
	WORD1

	"T+MESG9	;T EXAMINE TTI/TTO
	TTFLG

	"P+MESG1	;P PROCEED
	PR0

	"R+MESG1	;R RUN
	RN

	"A+MESG1	;A EXAMINE AC'S
	A0

	"B+MESG1	;B EXAMINE BREAKPOINTS
	B0

	"L+MESG0	;L EXAMINE START LOCATION
	RUN

	"S+MESG1	;S SEARCH ALL OF MEMORY
	SRCHA



	"D+MESG1	;D DELETE BREAKPOINTS
	D0

	"^+MESG2
	UPR0

CTBL3:	12+MESG6
	LF0

	"^+MESG1
	UPR0

	15+MESG5
	BGN

	0



;CONTROL TABLE 2
;PROCESSED IF NUMBER
CTBL2:	12+MESG6
	ERROR

	15+MESG5
	ERROR

	"/+MESG3
	SLSH

	"!+MESG3
	EXCL

	"P+MESG1	;P PROCEED FROM BREAKPOINTS
	PR

	"N+MESG4	;N EXAMINE BP COUNT
	N1

	"S+MESG1	;S SEARCH TO ARG
	SRCH0



	"A+MESG4	;A EXAMINE AN AC
	A1

	"B+MESG2	;B SET A BREAKPOINT
	B1

	"D+MESG1	;D DELETE A BREAKPOINT
	D1

	"R+MESG1	;R RUN PROGRAM
	RN1

	",+MESG2
	MLTFL

	"=+MESG2	;= TYPE EXPRESSION
	EQUAL

	"E+MESG1	;E END BINARY TAPE
	E1

	"F+MESG1	;F PUNCH TAPE FEED
	F

	0




;MULTI-FIELD CONTROL TABLE
CTBL4:	"S+MESG1
	SRCH

	"P+MESG1	;P PUNCH MEMORY
	PN

CTBL5:	0

SLUF:	15
	01
	0


END BGN-1 

