; -*- Midas -*-

title 11LOAD
; This isn't the original 11LOAD, this source was reconstructed by Alan on
; 5/27/89 from the binary.
; This version now uses DSK:MINITS;11LOAD FILES on all ITS machines.

a=:1	? chsr==:1
b=:2	? chsx==:2
c=:3
d=:4
e=:5
vladdr=:6
binptr=:7
blkcnt=:10
pkbcnt=:11
dski=:12
t=:13
tt=:14
chsrcv=:15
chsxmt=:16
p=:17

.insrt dsk:syseng;chsdef >

maxbyt==:100.			; Never sends packets with more than this
				; many bytes of data.

call=:pushj p,
return=:popj p,

define syscall name,args
	.call [setz ? .1stwd sixbit /name/ ? args(400000)]
termin

tsint:
loc 42
	-ltsint,,tsint
loc tsint
	p
	%piioc ? 0 ? -1 ? -1 ? die
ltsint==:.-tsint

go:	.close 1,
	move p,[-lpdl,,pdl-1]
	.suset [.roption,,t]
	tlo t,%opint
	.suset [.soption,,t]
	.suset [.smask,,[%piioc]]
	.suset [.sdf1,,[0]]
	tlne t,%opddt
	 jrst go1
	syscall detach,[movsi 7 ? movei %jself]
	 call die
	setom tplvl
	setzm jclflg
	.suset [.sjname,,[sixbit /11LOAD/]]
	.suset [.ssname,,[sixbit /CHAOS/]]
	jrst go2

go1:	setzm tplvl
	tlnn t,%opcmd
	 skipa
	  setom jclflg
go2:	syscall chaoso,[movei chsrcv ? movei chsxmt ? movei 1]
	 call die
	skipe tplvl
	 call ackrfc
	call getfn
	call mapfil
	jrst sndfil

sndfil:	movei binptr,buffer
sblklp:	call nxtblk
	call pkstrt
	jumpe blkcnt,sndend
sbytlp:	call putbyt
	jumpe blkcnt,[	call sndpkt
			call endblk
			jrst sblklp ]
	jumpe pkbcnt,[	call sndpkt
			call pkstrt
			jrst sbytlp ]
	jrst sbytlp

nxtblk:	movei a,1
	came a,(binptr)
	 aoja binptr,nxtblk
	aoj binptr,
	skipe (binptr)
	 aoja binptr,nxtblk
	aoj binptr,
	move blkcnt,1(binptr)
	lsh blkcnt,10
	ior blkcnt,0(binptr)
	subi blkcnt,6
	move vladdr,3(binptr)
	lsh vladdr,10
	ior vladdr,2(binptr)
	addi binptr,4
	return

endblk:	aos binptr
	return

pkstrt:	movei t,%corfc
	dpb t,[$cpkop pktbuf]
	move t,ldhost
	dpb t,[$cpkda pktbuf]
	move t,[.byte 8 ? "L ? "D ? 40 ? 40]
	movem t,pktbuf+%cpkdt+0
	move dski,[440800,,pktbuf+%cpkdt+1]
	move t,vladdr
	idpb t,dski
	lsh t,-10
	idpb t,dski
	movei pkbcnt,maxbyt-6
	return

putbyt:	move t,(binptr)
	aoj binptr,
	soj blkcnt,
	idpb t,dski
	soj pkbcnt,
	aoj vladdr,
	return

sndpkt:	syscall chaoso,[movei chsr ? movei chsx ? movei 1]
	 call die
	movei t,0
	dpb t,[$cpkfc pktbuf]
	dpb t,[$cpksa pktbuf]
	dpb t,[$cpksi pktbuf]
	movei t,maxbyt
	sub t,pkbcnt
	dpb t,[$cpknb pktbuf]
	syscall pktiot,[movei chsx ? movei pktbuf]
	 call die
	movei t,30.*10.		; 10 seconds
	skipe debug
	 hrloi t,3600.		; Really what DCP wanted?
	syscall netblk,[movei chsr ? movei %csrfs ? t ? movem tt]
	 call die
	cain tt,%csrfs
	 call exit
	cain tt,%csinc
	 call exit
	caie tt,%cscls
	 call die
	syscall pktiot,[movei chsr ? movei pktbuf]
	 call die
	ldb t,[$cpkop pktbuf]
	caie t,%coans
	 cain t,%cocls
	  return
	call die

sndend:	call sndpkt
	jrst exit

ackrfc:	movei t,%colsn
	dpb t,[$cpkop pktbuf]
	move t,[.byte 8 ? "1 ? "1 ? "L ? "O]
	movem t,pktbuf+4
	move t,[.byte 8 ? "A ? "D]
	movem t,pktbuf+5
	movei t,6
	dpb t,[$cpknb pktbuf]
	syscall pktiot,[movei chsxmt ? movei pktbuf]
	 call die
	movei a,30.*10.		; 10 seconds
	skipe debug
	 hrloi a,177777		; A long time
	syscall netblk,[movei chsrcv ? movei %cslsn ? a ? movem b]
	 call die
	caie b,%csrfc
	 jrst die
	syscall pktiot,[movei chsrcv ? movei pktbuf]
	 call die
	ldb e,[$cpksa pktbuf]
	movem e,ldhost
	ldb e,[$cpknb pktbuf]
	caie e,6
	 jrst chajcl
	move e,ldhost
	syscall open,[movsi .uai ? movei dski ? [sixbit /DSK/]
			[sixbit /11LOAD/] ? [sixbit /FILES/]
			[sixbit /MINITS/]]
	 call die
ctll:	.iot dski,a
	skipge a
	 call die
	caie a,^L
	 jrst ctll
fndsa:	.iot dski,a
	skipge a
	 call die
	caie a,^M
	 jrst fndsa
	.iot dski,a
	skipge a
	 call die
	caie a,^J
	 jrst fndsa
	.iot dski,a
	skipge a
	 call die
	caie a,"+
	 jrst fndsa
	setzi b,
	movei c,6
fndsa1:	.iot dski,a
	lsh b,3
	addi b,-"0(a)
	sojg c,fndsa1
	came b,e
	 jrst fndsa
fndfi1:	.iot dski,a
	skipge a
	 call die
	caie a,":
	 jrst fndfi1
fndfi2:	.iot dski,a
	skipge a
	 call die
	caie a,":
	 jrst fndfi2
	move c,[440700,,fnmbuf]
fnloop:	.iot dski,a
	idpb a,c
	caie a,^M
	 jumpg a,fnloop
	.close dski,
	move a,ldhost
repeat 6,[
	idivi a,8
	addi b,'0
	push p,b
	]
	move b,[440600,,a]
repeat 6,[
	pop p,c
	idpb c,b
	]
	.rdati b,
	syscall mlink,[[sixbit /DSK/]
			[sixbit /_11LOAD/] ? a ? [sixbit /KTV/]
			c ? b ? [sixbit /KTV/]]
	 jfcl
	return

chajcl:	move c,[440800,,pktbuf+%cpkdt]
repeat 6,[
	ibp c
	sos e
	]
	move b,[440700,,fnmbuf]
chajc2:	ildb a,c
	idpb a,b
	sojg e,chajc2
	idpb e,b
	return

rfn"$$rfn==:1
.insrt dsk:syseng;rfn >

ifn 0,[	;; Use this instead of the .INSRTed RFN to test that this produces
	;; the same binary as ex assembled from the old source.
.begin rfn

rfn:	push p,b
	push p,c
	move c,b
	push p,1(c)
	push p,2(c)
	setz e,
rfn0:	call ruc
rfn2:	call rsixg
	jrst rfn1
	call rfnn
rfn1:	caie a,72
	cain a,73
	jrst rfn0
	cain a,40
	jrst rfn0
	caie a,30
	cain a,31
	jrst rfnx
	sub p,[2,,2]
	pop p,c
	pop p,b
	return
rfnn:	cain a,72
	jrst rfnc
	cain a,73
	jrst rfns
	aoja e,rfnt(e)
rfnt:	jrst rfnf1
	jrst rfnf2
	jrst rfnc
	jrst rfns
	sos e
	return
rfns:	movem b,3(c)
	tlo e,10
	movs b,(c)
	tlne e,1
	return
	lsh b,-6
	caie b,4151
	cain b,5554
	return
	cain b,4455
	return
	caie b,6053
	cain b,6053
	return
	caie b,4354
	cain b,5257
	return
rfns1:	movsi b,446353
rfnc:	movem b,(c)
	tlo e,1
	return
rfnf1:	movem b,1(c)
	tlo e,2
	return
rfnf2:	movem b,2(c)
	tlo e,4
	return
rfnx:	addi a,(p)
	move b,-31(a)
	call rfnn
	jrst rfn0
ruc:	ildb a,d
	cail a,140
	subi a,40
	return
rsix:	push p,c
	move c,[440640,,b]
	jrst rsixg1
rsixg:	push p,c
	move c,[440600,,b]
rsixg1:	setz b,
rsix0:	cain a,21
	jrst rsix2
	caie a,177
	caig a,40
	jrst rsix1
	tlne c,40
	jrst rsix3
	caie a,72
	cain a,73
	jrst rsix1
	call rsixtp
	jrst rsix3
rsix1:	skipl c
	aos -1(p)
	pop p,c
	return
rsix2:	call ruc
rsix3:	subi a,40
	tlne c,770000
	idpb a,c
	call ruc
	jrst rsix0

.end rfn
]

getfn:	movei b,loadfn
	skipe jclflg
	 .break 12,[..rjcl,,fnmbuf]
	move d,[440700,,fnmbuf]
	call rfn"rfn
	return

rsixtp:	return

switch:	return

mapfil:	movei b,loadfn
	syscall open,[movei dski ? %clbit,,.bii ? 0(b) ? 1(b) ? 2(b) ? 3(b)]
	 call die
	syscall fillen,[movei dski ? movem fillen]
	 call die
	move a,fillen
	addi a,1777
	lsh a,-12
	movn a,a
	hrl a,a
	hrri a,buffer_-12
	setzi b,
	syscall corblk,[movei %cbred ? movei %jself ? a ? movei dski ? b]
	 call die
	syscall close,[movei dski]
	 call die
	move a,fillen
	move b,buffer-1(a)
	sojg a,.-1		; To page it in?
	return

die:	skipe debug
	 .value
exit:	.logou a,
	.break 16,160000
	.value

loadfn:	sixbit /DSK/		; What a crazy filename!
	sixbit /PTV1/
	sixbit /BIN/
	sixbit /SYS2/

fnmbuf:	block 24

constants

junk:	0
ldhost:	0
debug:	0
fillen:	0
jclflg:	0
tplvl:	0

lpdl==:20

pdl:	block lpdl

pktbuf:	block %cpmxw

buffer=:<.+1777>&<-2000>

end go
