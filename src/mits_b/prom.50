;;; -*- Mode: LISP; Package: USER; BASE: 8 -*-

#-LISPM
(progn 'compile
       (or (boundp 'lchaos-loaded) (load "mc: dcp2;lchaos"))
       (defvar conn (chaos:allocate-connection 2))
       (defvar pkt (chaos:allocate-packet))
       (defconst connection-dead 't)
       (defun rmp-reset () (fire-up-rmp-connection))
       (defun fire-up-rmp-connection ()
	 (setq connection-dead 't)
	 (if (= (chaos:initiate-connection conn pkt 500
					  (exploden "RMP116")
					  2)
		%csopn)
	     (progn (setq connection-dead 'nil)
		    "RMP connection is open")
	     (progn (format t "~&RMP connection did NOT open.~&")
		    "RMP connection failure")))

	 )

#+LISPM
(defun sleep (n) (cc:sleep n))

(defun rmp-deposit (register-offset datum &optional (re-read 't))
 #-LISPM (progn
	   (if connection-dead (fire-up-rmp-connection))
	   (chaos:set-packet-data-word pkt 0 (1+ register-offset))
	   (chaos:set-packet-data-word pkt 1 datum)
	   (chaos:set-packet-length pkt 4)
	   (chaos:send-data-packet conn pkt %codwd))
 #+LISPM (progn
	   (%unibus-write (+ 760400 register-offset) datum))
 (if re-read (rmp-examine register-offset)))

(defun rmp-examine (register-offset)
  #-LISPM (progn
	    (if connection-dead (fire-up-rmp-connection))
	    (chaos:set-packet-data-word pkt 0 register-offset)
	    (chaos:set-packet-length pkt 2)
	    (chaos:send-data-packet conn pkt %codwd)
	    (if (= (chaos:packet-opcode (chaos:receive-packet conn pkt))
		   %codwd)
		(chaos:packet-data-word pkt 0)
		(progn (format t "~&Didn't get data-is-words packet back.~&")
		       0)))
  #+LISPM (%unibus-read (+ 760400 register-offset))
  )

(defun csr ()          (rmp-examine 6))
(defun addr ()    (* 2 (rmp-examine 0)))
(defun data ()         (rmp-examine 2))
(defun bar ()          (rmp-examine 4))
(defun wcsr (n)        (rmp-deposit 6 n))
(defun waddr (n)  (* 2 (rmp-deposit 0 (// n 2))))
(defun wdata (n)       (rmp-deposit 2 n 'nil))
(defun wbar (n)        (rmp-deposit 4 n))

Œ
(defun show-range (low high)
  (wcsr 0)
  (waddr low)
  (do ((n low (1+ n)))
      ((> n high))
    (print (list (addr) (data)))))

(defun find-mismatch (n)
  (wcsr 0)
  (waddr 0)
  (do ((i 0 (logand 37777 (1+ i))))
      ((progn (and (zerop i) (print 'at-zero))
	      (not (= (data) n)))
       i)))

(defun feep-on-mismatch (n)
  (wcsr 0)
  (waddr 0)
  (do ()(())
    (if (not (= (data) n))
	#-LISPM (tyo 7)
	#+LISPM (funcall standard-output ':beep))))

(defun ascii-ize-palx-bin-file (file ofile)
  (ascii-ize-data
   ofile
   (combine-bytes
    (sort-data
     (get-bin-file-contents (open file
				  #-LISPM '(in fixnum)
				  #+LISPM '(:read :fixnum :raw :byte-size 9)))))))

(defun burn-palx-bin-file (file)
  (burn-data
   (combine-bytes
    (sort-data
     (get-bin-file-contents (open file
				  #-LISPM '(in fixnum)
				  #+LISPM '(:read :fixnum :raw :byte-size 9)))))))

(defun 4burn-palx-bin-file (file ofile)
  (4burn-data
   ofile
   (combine-bytes
    (sort-data
     (get-bin-file-contents (open file
				  #-LISPM '(in fixnum)
				  #+LISPM '(:read :fixnum :raw :byte-size 9)))))))

(defun 27burn-palx-bin-file (file ofile)
  (27burn-data
   ofile
   (combine-bytes
    (sort-data
     (get-bin-file-contents (open file
				  #-LISPM '(in fixnum)
				  #+LISPM '(:read :fixnum :raw :byte-size 9)))))))

;;; this burns 4 74s471's; the files are called foo bl0, foo bl8, foo bh0 and
;;; foo bh8.
(defun 471burn-palx-bin-file (file ofile)
  (471burn-data
   ofile
   (combine-bytes
    (sort-data
     (get-bin-file-contents (open file
				  #-LISPM '(in fixnum)
				  #+LISPM '(:read :fixnum :raw :byte-size 9)))))))

(defun get-bin-file-contents (file)
  (do ((data '() (append data new-data))
       (new-data (get-new-data file) (get-new-data file)))
      ((null new-data) (close file)
		       data)))

(defun get-new-data (file)
  (cond ((not (= (f-getwrd file) 1)) '())
	('else (let ((len (f-getwrd file))
		     (addr (f-getwrd file)))
		 (cond ((<= len 6) '())
		       ('else (do ((new-data '() (cons (cons addr (f-getbyt file)) new-data))
				   (addr addr (1+ addr))
				   (count (- len 6) (1- count)))
				  ((zerop count) (f-getbyt file)
						 new-data))))))))

#+LISPM
(defun in (file) (tyi file) (tyi file) (tyi file) (tyi file))
(defun f-getwrd (file)
  (+ (in file) (lsh (in file) 8)))
(defun f-getbyt (file)
  (in file))

(defun sort-data (data)
  (sort data #'(lambda (x y) (< (car x) (car y)))))

(defun combine-bytes (data)
  (do ((data data (cdr data))
       (last '())
       (new-data '()))
      ((null data) (and last (setq new-data (cons last new-data)))
		   (nreverse new-data))
    (cond (last (cond ((evenp (caar data))
		       (setq new-data (cons last new-data)
			     last (car data)))
		      ((= (caar data) (1+ (car last)))
		       (setq new-data (cons (cons (car last)
						  (+ (cdr last)
						     (lsh (cdar data) 8)))
					    new-data)
			     last '()))
		      ('else (setq new-data (cons last new-data)
				   new-data (cons (car data) new-data)
				   last '()))))
	  ('else (cond ((evenp (caar data))
			(setq last (car data)))
		       ('else (setq new-data (cons (car data) new-data))))))))

(defun ascii-ize-data (ofile data)
  (ascii-ize-it ofile data))				;just a transporter

(defun burn-data (data)
  (format t "~%Data ranges from ~O to ~O. Where do you want it to start? "
	  (caar data) (caar (last data)))
  (let ((offset (- (caar data) (read))))
    (format t "~%Going to burn from ~O to ~O.  Type 'y' when ready. "
	    (- (caar data) offset) (- (caar (last data)) offset))
    (do ()((= (tyi) #/y)))
    (burn-it data offset)))

(defun 4burn-data (ofile data)
  (format t "~%Data ranges from ~O to ~O. Where do you want it to start? (probably 1000)"
	  (caar data) (caar (last data)))
  (let ((offset (- (caar data) (read))))
    (format t "~%Going to burn from ~O to ~O.  Type 'y' when ready. "
	    (- (caar data) offset) (- (caar (last data)) offset))
    (do ()((= (tyi) #/y)))
    (4burn-it ofile data offset)))

(defun 27burn-data (ofile data)
  (format t "~%Data ranges from ~O to ~O. Where do you want it to start? (often 3000)"
	  (caar data) (caar (last data)))
  (let ((offset (- (caar data) (read))))
    (format t "~%Going to burn from ~O to ~O.  Type 'y' when ready. "
	    (- (caar data) offset) (- (caar (last data)) offset))
    (do ()((= (tyi) #/y)))
    (27burn-it ofile data offset)))

(defun 471burn-data (ofile data)
  (format t "~%Data ranges from ~O to ~O. Where do you want it to start? (probably 0)"
	  (caar data) (caar (last data)))
  (let ((offset (- (caar data) (read))))
    (format t "~%Going to burn from ~O to ~O.  Type 'y' when ready. "
	    (- (caar data) offset) (- (caar (last data)) offset))
    (do ()((= (tyi) #/y)))
    (471burn-it ofile data offset)))

(defun burn-it (data offset)
  (wcsr 1)
  (sleep 1)
  (do ((data data (cdr data))
       (paddr))
      ((null data))
    (setq paddr (- (caar data) offset))
    (waddr paddr)
    (do () ((plusp (logand (csr) 200))))
    (waddr paddr)
    (waddr paddr)
    (wdata (cdar data))
    (do () ((plusp (logand (csr) 200))))
    (cond ((not (= (cdar data) (data)))
	   (format t "~%~6O// ~6O ~6O did not work. Type 'y' to continue."
		   paddr
		   (data)
		   (cdar data))
	   (do () ((= (tyi) #/y))))))
  (wcsr 0))

(defun 4burn-it (ofile data offset)
  (do ((fn2 '("00" "04" "08" "12") (cdr fn2))
       (xor-bits '(16 17 01 00) (cdr xor-bits))
       (lsh-count '(-0 -4 -8. -12.) (cdr lsh-count)))
      ((null fn2))
    (let ((of (open (implode (append (exploden ofile)
				     (exploden " B")
				     (exploden (car fn2))))
		    '(out ascii))))
      (format of
	      "PROM prom-type /"6306/"~%"
	      ;"PROM~%"
	      )
      (do ((last-addr -1 addr)
	   (addr)(datum)
	   (data data (cdr data)))
	  ((null data) (format of "END~%")
		       (close of))
	(setq addr (// (- (caar data) offset) 2)
	      datum (logand (lsh (cdar data) (car lsh-count)) 17))
	(do ((n (1+ last-addr) (1+ n)))
	    ((>= n addr))
	  (format of "~4o ~3o~%" n 17))
	(format of "~4o ~3o ; ~3o~%"
		addr
		(logxor datum (car xor-bits))
		datum)))))

(defun 27burn-it (ofile data offset)
  (do ((fn2 '("00" "08") (cdr fn2))
       (lsh-count '(-0 -8.) (cdr lsh-count)))
      ((null fn2))
    (let ((of (open (implode (append (exploden ofile)
				     (exploden " B")
				     (exploden (car fn2))))
		    '(out ascii))))
      (format of
	      "PROM prom-type /"2716/"~%"
	      ;"PROM~%"
	      )
      (do ((last-addr -1 addr)
	   (addr)(datum)
	   (data data (cdr data)))
	  ((null data) (format of "END~%")
		       (close of))
	(setq addr (// (- (caar data) offset) 2)
	      datum (logand (lsh (cdar data) (car lsh-count)) 377))
	(do ((n (1+ last-addr) (1+ n)))
	    ((>= n addr))
	  (format of "~4o ~3o~%" n 377))
	(format of "~4o ~3o~%"
		addr
		datum)))))

(defun 471burn-it (ofile data offset)
  ;;; burn first pair of proms
  (471-burn-it-internal ofile data offset 256. '(l0 l8))
  ;;; burn second pair of proms
  (471-burn-it-internal ofile (nthcdr 256. data) offset 256. '(h0 h8)))

(defun 471-burn-it-internal (ofile data offset locs fn2)
  (do ((fn2 fn2 (cdr fn2))
       (lsh-count '(-0 -8.) (cdr lsh-count)))
      ((null fn2))
    (let ((of (open (implode (append (exploden ofile)
				     (exploden " B")
				     (exploden (car fn2))))
		    '(out ascii))))
      (format of
	      "PROM prom-type /"74S471/"~%"
	      ;"PROM~%"
	      )
      (do ((last-addr -1 addr)
	   (addr)(datum)
	   (data data (cdr data))
	   (locs-burned 0 (1+ locs-burned)))
	  ((or (= locs-burned locs) (null data))
	   (format of "END~%") (close of))
	(setq addr (// (- (caar data) offset) 2)
	      datum (logand (lsh (cdar data) (car lsh-count)) 377))
	(do ((n (1+ last-addr) (1+ n)))
	    ((>= n addr))
	  (format of "~4o ~3o~%" n 377))
	(format of "~4o ~3o~%"
		addr
		datum)))))

(defun ascii-ize-it (ofile data)
  (let ((of (open ofile '(out ascii))))
    (do ((data data (cdr data)))
	((null data))
      (format of "~O//~O~%" (caar data) (cdar data)))
    (close of)))


;;; An LRH file is for burning bytes at various locations.  Only the
;;; low byte of a word is used, so there should be no eproms on the
;;; top slot of the rmp-116.  The description file contains lists,
;;; where the first element is the address to burn, and the second is
;;; the data.  The address can be anything from 0 to 77777 (the
;;; address space of the RMP-116).

(defun burn-lrh-file (filename)
  (let ((filei (open filename
		     #-LISPM '(in)
		     #+LISPM '(:read))))
    (wcsr 1)
    (sleep 1)
    (unwind-protect
     (do ((last-segment -1 this-segment)
	  (this-segment)
	  (from-file (read filei 'eof) (read filei 'eof))
	  (addr)
	  (datum))
	 ((eq from-file 'eof))
       (setq addr  (car  from-file)
	     datum (cadr from-file))
       (setq this-segment (// addr 2048.))
       (if (not (= this-segment last-segment))
	   (progn (format t "~%Select bank ~D and type G to continue. > "
			  this-segment)
		  (do ((char (tyi) (tyi)))
		      ((or (= char #/g) (= char #/G))))))
       (burn-lrh-datum addr (logior 177400 datum)))
     (wcsr 0)
     (close filei)))
  'finished)

(defun burn-lrh-datum (addr datum)
  (do ((OK? '()))
      (OK?)
    (do () ((plusp (logand (csr) 200))))
    (waddr (* addr 2))
    (waddr (* addr 2))
    (wdata datum)
    (do ()((plusp (logand (csr) 200))))
    (if (= (logand datum 377) (logand (data) 377))
	(setq OK? 'data-did-get-burned)
	(progn (format t "~%~6O// ~6O ~6O did not work.  R(etry) C(ontinue) > "
		       addr (logand (data) 377) (logand datum 377))
	       (do ((char (tyi) (progn (format t "~%R(etry) C(ontinue) > ")
				       (tyi))))
		   ((member char '(#/r #/R #/c #/C))
		    (setq OK? (member char '(#/c #/C)))))))))



(defun why-bad (low high)
  (why-bad-gen low high 0 0))

(defun why-bad-gen (low high when-on when-off)
  (wcsr 0)
  (waddr low)
  (do ((a (addr) (addr))
       (d (data) (data))
       (and-all -1)
       (or-all 0)
       (and-[d-xor-a] -1)
       (or-[d-xor-a] 0)
       )
      ((> a high)
       (list 'and-all and-all
	     'or-all or-all
	     'and-[d-xor-a] and-[d-xor-a]
	     'or-[d-xor-a] or-[d-xor-a]
	     ))
     (and (= when-on (logand a when-on))
	  (zerop (logand a when-off))
	  (progn (setq and-all (logand and-all d)
		       or-all (logior or-all d)
		       and-[d-xor-a] (logand and-[d-xor-a] (logxor a d))
		       or-[d-xor-a] (logior or-[d-xor-a] (logxor a d)))))))

