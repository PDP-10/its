;;; -*- Mode:LISP; Package:MACSYMA -*-

;;; ** (c) Copyright 1981 Massachusetts Institute of Technology **

(macsyma-module medit)

(DECLARE (GENPREFIX ED)
	 (SPECIAL ST COMMAND WINDOW ^W ^S BEFORE AFTER AVANT APRES
		  GSTRING ^R $CURSOR REPRINT POS ERRSET ERRBREAK2 OLDST 
		  ^HMSG EDITMSG STATE-PDL BACKRUB READING)
	 (*EXPR REPRINT)
	 (FIXNUM WINDOW AVANT APRES COUNT SCOUNT LENGTH CNT N I OTHER
		 (UPCASIFY FIXNUM))
	 (NOTYPE (PRIN NOTYPE FIXNUM) (CHARACTER FIXNUM) (REV* FIXNUM)
		 (ASCII-NUMBERP FIXNUM)))

#.(SETQ NALT #-MULTICS #\ALT #+MULTICS #/&)

(SETQ EDITMSG  #-Multics '(|In editor:  (Type just <Alt><Alt> to exit.)/
| . |In editor:/
|)
               #+Multics '(|In editor:  (Type just &&<Carriage Return> to exit.)/
| . |In editor:/
|)    $CURSOR '&$ WINDOW -1 *NOPOINT (SETQ IBASE (SETQ BASE (+ 5 5))))

(DEFUN EDIT* (AFTER)
  (LET ((STATE-PDL (CONS 'EDIT STATE-PDL)))
       (PROG (COMMAND STRING N BEFORE AVANT APRES SSTRING ISTRING
	      GSTRING COUNT FLAG ^R REPRINT POS RSSTRING RISTRING
	      LENGTH CLEARP GRINDP MFRP QUIETP)
	     (IF ^S (SETQ ^W NIL ^S NIL))
	     (SETQ AVANT 0 APRES (LENGTH AFTER))
	     (TERPRI)
	     (COND ((CAR EDITMSG)
		    (PRINC (CAR EDITMSG))
		    (SETQ EDITMSG (CONS NIL (CDR EDITMSG))))
		   (T (PRINC (CDR EDITMSG))))
	     (PRINC (STRIPDOLLAR $CURSOR))
	     (PRAFTER)
	A    (SETQ POS (CURSORPOS))
	RDLOOP
	     (SETQ N (LET ((READING T)) (TYI)))
	     (COND ((AND (NULL COMMAND) (MEMBER N '(#\SP #\NEWLINE #\TAB #/; #/$)))
		    (GO RDLOOP))
		   ((= N #.NALT)
		    ;;; The EQUAL clause remains here because (CAR COMMAND)
		    ;;; may be NIL (and NIL is non-numeric).
		    (COND ((AND (EQUAL (CAR COMMAND) #.NALT) (NULL (CDR COMMAND)))
			   (GO EXIT))
			  ((AND (EQUAL (CAR COMMAND) #.NALT)
				(OR (NOT (EQUAL (CADR COMMAND) #/\))
				    (AND (CDDR COMMAND) (= (CADDR COMMAND) #/\))))
			   (SETQ COMMAND (NREVERSE COMMAND))
			   (SETQ REPRINT NIL) (GO LOOP))))
		   ((= N #\VT) (GO VT))
		   ((= N #\BS)
		    (COND (BACKRUB (POP COMMAND) (GO RDLOOP))
			  (T (PRINC ^HMSG) (GO VT))))
		   ((= N #\FF) (FORMFEED) (PRTEXT) (GO VT))
		   ((= N #/?)
		    (COND ((AND (EQUAL (CAR COMMAND) #/?)
				(OR (NOT (AND (CDR COMMAND) (= (CADR COMMAND) #/\)))
				    (AND (CDDR COMMAND) (= (CADDR COMMAND) #/\))))
			   (SETQ COMMAND NIL) (TERPRI) (GO RDLOOP))))
		   ((OR (= N #\NEWLINE) (= N #\TAB)))
		   ((< N 32.) (SETQ REPRINT T) (GO RDLOOP))  ; Test for control chars.
		   ((AND (= N #/\) (PUSH N COMMAND) (PROG2 (SETQ N (TYI)) NIL)))
		   ((= N #\RUBOUT) (RUBOUT* COMMAND) (POP COMMAND) (GO RDLOOP)))
	     (PUSH N COMMAND)
	     (GO RDLOOP)
	VT   (REPRINT COMMAND (= N #\FF)) (GO RDLOOP)
	LOOP (COND ((NULL COMMAND) (PRTEXT) (GO A))
		   ((OR (= (SETQ N (READ1UCCH)) #.NALT) (= N #\SP)
			(= N #\NEWLINE) (= N #\TAB))
		    (GO LOOP)))
	     (SETQ COUNT 0 STRING NIL FLAG NIL CLEARP NIL GRINDP NIL MFRP NIL)
	     (COND ((= N #/-) (GO MINUS))
		   ((ASCII-NUMBERP N) (SETQ FLAG T))
		   (T (SETQ COUNT 1) (GO X)))
	NUM  (PUSH N STRING) 
	     (IF (ASCII-NUMBERP (SETQ N (READ1UCCH))) (GO NUM))
	     (SETQ COUNT (READLIST (NREVERSE STRING)) STRING NIL)
	X1   (COND ((OR (= N #\SP) (= N #\NEWLINE) (= N #\TAB))
		    (SETQ N (READ1UCCH)) (GO X1))
		   ((MEMBER N '(#/B #/G #/I #/J #/P #/T #/V #/( #/)
				#/[ #/] #/M #/Y #/Q #/Z))
		    (TERPRI) (IF (NULL FLAG) (PRINC '-)) (GO NOGO1))
		   ((AND (NULL FLAG) (PLUSP COUNT)) (GO MX))
		   ((OR (PLUSP COUNT) (= N #/W)))
		   ((MEMBER N '(#/L #/K)) (GO MX))
		   (T (GO NOGO)))
	X    (CASEQ N
		    ((#/J #/T) (GO T))
		    (#/C (GO C))
		    (#/R (GO R))
		    (#/I (GO SI))
		    (#/G (COND ((MEMBER (SETQ N (READ1UCCH)) '(#/V #/F))
				(SETQ GRINDP T) (GO Y))
			       ((= N #/R) (INSERT (APPEND GSTRING NIL))
					  (GO LOOP))
			       (T (SETQ FLAG 'G) (GO NOGO))))
		    (#/B (GO B))
		    (#/P (GO LOOP))
		    (#/Q (COND ((OR (NULL (CDR COMMAND))
				    (AND (NULL (CDDR COMMAND))
					 (MEMBER (CAR COMMAND) '(#\SP #\NEWLINE))))
				(SETQ QUIETP T) (GO EXIT))
			       (T (GO NOGO))))
		    (#/V (SETQ WINDOW -1) (GO LOOP))
		    (#/W (SETQ WINDOW COUNT) (GO LOOP))
		    ((#/D #/S #/K #/L)
		     (IF (= APRES 0) (GO WHAT))
		     (CASEQ N
			    (#/D (DELETE* T (MIN COUNT APRES)))
			    (#/S (SETQ FLAG T) (GO SI))
			    (#/K (KILL* COUNT))
			    (T (LINE* COUNT)))
		     (GO LOOP))
		    (#/Y (COND ((MEMBER (SETQ N (READ1UCCH)) '(#/V #/F))
				(GO Y))
			       (T (SETQ FLAG (IF GRINDP 'G 'Y))
				  (GO NOGO))))
		    ((#/( #/[) (COND ((= AVANT 0) (GO WHAT))
				     ((NULL (MOVE N NIL NIL)) (GO ERR)))
			       (GO LOOP))
		    ((#/) #/]) (COND ((= APRES 0) (GO WHAT))
				     ((NULL (MOVE N T NIL)) (GO ERR)))
			       (GO LOOP))
		    (#/M (SETQ FLAG 'M)
			 (IF (= (SETQ N (READ1UCCH)) #/Y) 
			     (PROG2 (SETQ CLEARP T) (GO X)))
			 (CASEQ N
				(#/G (SETQ N #/Y GRINDP T CLEARP T)
				     (GO X))
				(#/F (SETQ MFRP T) (GO X))
				((#/) #/]) (COND ((= APRES 0) (GO WHAT))
						 ((NULL (MOVE N T T)) (GO ERR)))
					   (GO LOOP))
				((#/( #/[) (COND ((= AVANT 0) (GO WHAT))
						 ((NULL (MOVE N NIL T)) (GO ERR)))
					   (GO LOOP))
				(T (GO NOGO))))
		    (#/Z (COND ((= (SETQ N (READ1UCCH)) #/J) (GO B))
			       (T (SETQ FLAG 'Z) (GO NOGO))))
		    (#/F (SETQ FLAG 'F) (IF (= (SETQ N (READ1UCCH)) #/R)
					    (GO FR)
					    (GO NOGO)))
		    (T (GO NOGO)))
	MINUS(COND ((ASCII-NUMBERP (SETQ N (READ1UCCH))) (SETQ FLAG NIL) (GO NUM)))
	     (SETQ COUNT 1)
	MX   (CASEQ N
		    (#/C (GO R))
		    (#/R (GO C))
		    ((#/D #/S #/K #/L)
		     (IF (= AVANT 0)
			 (IF (NOT (= COUNT 0))
			     (PROG2 (PRINC "
-")				    (GO WHAT1))))
		     (CASEQ N
			    (#/D (DELETE* NIL (MIN COUNT AVANT)))
			    (#/S (SETQ FLAG NIL) (GO SI))
			    (#/K (MKILL* COUNT))
			    (T (MLINE COUNT)))
		     (GO LOOP))
		    (T (PRINC "
-")		       (GO NOGO1)))
	SI   (COND ((AND (NULL (SETQ STRING (READSTRING)))
			 (NULL (SETQ STRING (IF (= N #/S) SSTRING ISTRING)))))
		   ((= N #/S)
		    (IF (NULL (SEARCH (SETQ SSTRING STRING) FLAG COUNT NIL))
			(GO ERR)))
		   (T (INSERT (REVERSE (SETQ ISTRING STRING)))))
	     (GO LOOP)
	FR   (COND ((= APRES 0) (GO WHAT))
		   ((NULL (SETQ STRING (READSTRING)))
		    (IF (NULL RSSTRING) (GO LOOP)))
		   (T (SETQ RSSTRING STRING RISTRING (AND COMMAND (READSTRING)))))
	     (SETQ LENGTH (LENGTH RSSTRING))
	FR1  (COND ((NULL (SEARCH RSSTRING T 1 MFRP)) (IF MFRP (GO LOOP)) (GO ERR)))
	     (DELETE* NIL LENGTH)
	     (IF RISTRING (INSERT (REVERSE RISTRING)))
	     (IF (AND (NOT MFRP) (= (SETQ COUNT (1- COUNT)) 0)) (GO LOOP))
	     (GO FR1)
	C    (COND ((NOT (< APRES COUNT)) (CHARACTER COUNT) (GO LOOP)))
	B    (IF (PLUSP APRES) (CHARACTER APRES))
	     (GO LOOP)
	R    (COND ((NOT (< AVANT COUNT)) (REV* COUNT) (GO LOOP)))
	T    (IF (PLUSP AVANT) (REV* AVANT))
	     (GO LOOP)
	Y    (COND ((NULL (YANK N CLEARP GRINDP)) (GO ERR)) (CLEARP (GO T)))
	     (GO LOOP)
	WHAT (TERPRI)
	WHAT1(IF (NOT (= COUNT 1)) (PRINC COUNT))
	     (IF (MEMQ FLAG '(F M)) (PRINC FLAG))
	     (TYO N) (PRINC " impossible") (GO ERR)
	NOGO (TERPRI)
	NOGO1(IF (NOT (= COUNT 1)) (PRINC COUNT))
	     (IF CLEARP (PRINC 'M))
	     (IF (MEMQ FLAG '(F Y G M Z)) (PRINC FLAG))
	     (TYO N) (PRINC " incorrect command")
	ERR  (SETQ COMMAND NIL) (PRTEXT) (GO A)
	EXIT (IF (PLUSP APRES) (CHARACTER APRES))
	     (SETQ ST BEFORE) (RETURN QUIETP))))

;;; Read1ch returns the first character on the command-list, (the
;;; previous character, in other words).

(DEFUN READ1CH NIL (POP COMMAND))

(DEFUN READ1UCCH NIL (UPCASIFY (POP COMMAND))) ; Read one upper case character

(DEFUN PRTEXT NIL (PRBEFORE) (PRINC (STRIPDOLLAR $CURSOR)) (PRAFTER))

(DEFUN PRBEFORE NIL
 (TERPRI)
 (IF (OR (MINUSP WINDOW) (< AVANT WINDOW))
     (PRIN (REVERSE BEFORE) AVANT)
     (DO ((I WINDOW (1- I)) (X1 BEFORE) (X2))
	 ((= I 0) (PRIN X2 WINDOW))
	 (SETQ X2 (CONS (CAR X1) X2) X1 (CDR X1)))))

(DEFUN PRAFTER NIL
 (PRIN AFTER (IF (OR (MINUSP WINDOW) (< APRES WINDOW)) APRES WINDOW))
 (TERPRI))

(DEFUN PRIN (X1 I) (DO I I (1- I) (= I 0) (TYO (POP X1))))

(DEFUN READSTRING NIL
       (PROG (CHAR STRING)
	LOOP (COND ((= (SETQ CHAR (READ1CH)) #/\)
		    (PUSH #/\ STRING) (SETQ CHAR (READ1CH)))
		   ((= CHAR #.NALT) (RETURN STRING))
		   ((AND (MEMBER CHAR '(#/; #/$)) (NOT (EQUAL (CAR STRING) #/\)))
		   (PUSH #/\ STRING)))
	(PUSH CHAR STRING)
	(GO LOOP)))

(DEFUN DELETE* (FLAG COUNT)
       (PROG (SAVE)
	     (SETQ SAVE (COND (FLAG (SETQ APRES (- APRES COUNT)) AFTER)
			      (T (SETQ AVANT (- AVANT COUNT)) BEFORE))
		   GSTRING NIL)
	LOOP (SETQ GSTRING (CONS (CAR SAVE) GSTRING) SAVE (CDR SAVE))
	     (COND ((PLUSP (SETQ COUNT (1- COUNT))) (GO LOOP))
		   (FLAG (SETQ AFTER SAVE GSTRING (NREVERSE GSTRING)))
		   (T (SETQ BEFORE SAVE)))
	     (RETURN NIL)))

(DEFUN YANK (N CLEARP GRINDP)
       (PROG (ST ITEM)
	     (COND ((NULL (SETQ ST (READSTRING))) (RETURN T))
		   ((AND (= N #/V) (EQUAL ST '(#/^)))
		    (SETQ ITEM (REVERSE OLDST)) (GO END))
		   ((NULL (SETQ ITEM (PARSE2))) (RETURN NIL)))
	     (SETQ ITEM (CAR ITEM))
	     (LET ((ERRSET 'ERRBREAK2))
		  (COND ((NULL
			  (SETQ ITEM (ERRSET
				      (PROG2 (SETQ ITEM (IF (= N #/F)
							    (CONSFUNDEF
							     ITEM NIL NIL)
							    (STRMEVAL ITEM)))
					     (IF GRINDP (STRGRIND ITEM)
							(MSTRING ITEM))))))
			 (RETURN NIL))))
	     (SETQ ITEM (CAR ITEM))
	END  (IF CLEARP (SETQ BEFORE NIL AFTER NIL AVANT 0 APRES 0))
	     (INSERT ITEM)
	     (RETURN T)))

(DEFUN SEARCH (STRING FLAG COUNT MFRP)
       (SETQ STRING (MAPCAR #'UPCASIFY STRING))
       (PROG (PROV SAVE SCOUNT LENGTH)
	     (SETQ LENGTH (LENGTH STRING) SCOUNT 0)
	     (IF FLAG (SETQ STRING (REVERSE STRING)))
	START(SETQ PROV STRING SAVE (IF FLAG AFTER BEFORE))
	LOOP (COND ((NULL PROV) (IF FLAG (CHARACTER LENGTH) (REV* LENGTH))
				(IF (= (SETQ COUNT (1- COUNT)) 0) (RETURN T))
				(SETQ SCOUNT 0) (GO START))
		   ((NULL SAVE)
	     	    (IF (NOT (= SCOUNT 0))
			(IF FLAG (REV* SCOUNT) (CHARACTER SCOUNT)))
		    (IF (NOT MFRP) (PRINC "
Search failed"))    (RETURN NIL))
		   ((NOT (= (CAR PROV) (UPCASIFY (CAR SAVE))))
		    (IF FLAG (CHARACTER 1) (REV* 1))
		    (SETQ SCOUNT (1+ SCOUNT)) (GO START)))
	(SETQ PROV (CDR PROV) SAVE (CDR SAVE))
	(GO LOOP)))

(DEFUN UPCASIFY (N)
 (IF (AND (>= N #/a) (<= N #/z)) (- N #.(- #/a #/A)) N))

(DEFUN MOVE (N FLAG DELP)
       (PROG (I SCOUNT SAVE OTHER)
	     (SETQ I 0 SCOUNT 1 SAVE (IF FLAG AFTER BEFORE)
		   OTHER (CDR (ASSOC N '((#/( . #/)) (#/[ . #/])
					 (#/) . #/() (#/] . #/[)))))
	LOOP (COND ((NULL SAVE)
		    (COND ((= I 0) (PRINC "
No ")				   (TYO OTHER) (PRINC "s encountered"))
			  (T (TERPRI) (PRINC I)
			     (PRINC " too few ") (TYO N) (PRINC "s")))
		    (RETURN NIL))
		   ((= (CAR SAVE) OTHER) (SETQ I (1+ I)))
		   ((= (CAR SAVE) N)
		    (COND ((= I 0) (TERPRI) (TYO N)
				   (PRINC " seen before ") 
				   (TYO OTHER)
				   (RETURN NIL))
			  ((= (SETQ I (1- I)) 0)
			   (COND (DELP (DELETE* FLAG SCOUNT))
				 (FLAG (CHARACTER SCOUNT))
				 (T (REV* SCOUNT)))
			   (RETURN T))))
		   ((= (CAR SAVE) #/\) (SETQ SCOUNT (1+ SCOUNT) SAVE (CDR SAVE))))
	     (SETQ SCOUNT (1+ SCOUNT) SAVE (CDR SAVE))
	     (GO LOOP)))

(DEFUN INSERT (STRING)
       (PROG (SAVE)
	     (SETQ AVANT (+ AVANT (LENGTH STRING)))
	LOOP (IF (NULL STRING) (RETURN NIL))
	     (SETQ STRING (CDR (SETQ SAVE STRING)) BEFORE (RPLACD SAVE BEFORE))
	     (GO LOOP)))
 
(DEFUN CHARACTER (COUNT)
       (PROG (SAVE)
	     (SETQ APRES (- APRES COUNT) AVANT (+ AVANT COUNT))
	LOOP (SETQ AFTER (CDR (SETQ SAVE AFTER)) BEFORE (RPLACD SAVE BEFORE))
	     (IF (PLUSP (SETQ COUNT (1- COUNT))) (GO LOOP))
	     (RETURN NIL)))
 
(DEFUN REV* (COUNT)
       (PROG (SAVE)
	     (SETQ AVANT (- AVANT COUNT) APRES (+ APRES COUNT))
	LOOP (SETQ BEFORE (CDR (SETQ SAVE BEFORE)) AFTER (RPLACD SAVE AFTER))
	     (IF (PLUSP (SETQ COUNT (1- COUNT))) (GO LOOP))
	     (RETURN NIL)))
 
(DEFUN LINE* (COUNT)
       (PROG NIL
	LOOP (CHARACTER 1)
	     (COND ((= APRES 0))
		   ((OR (NOT (= (CAR BEFORE) #\NEWLINE))
			(PLUSP (SETQ COUNT (1- COUNT))))
		    (GO LOOP)))
	     (RETURN NIL)))
 
(DEFUN KILL* (COUNT)
       (PROG (N)
	     (SETQ GSTRING NIL)
	LOOP (SETQ GSTRING (NCONC GSTRING (NCONS (SETQ N (CAR AFTER))))
		   AFTER (CDR AFTER))
	     (COND ((= (SETQ APRES (1- APRES)) 0))
		   ((OR (NOT (= N #\NEWLINE)) (PLUSP (SETQ COUNT (1- COUNT))))
		    (GO LOOP)))
	     (RETURN NIL)))

(DEFUN MLINE (COUNT)
       (PROG NIL
	LOOP (IF (OR (= AVANT 0)
		     (AND (= (CAR BEFORE) #\NEWLINE)
			  (MINUSP (SETQ COUNT (1- COUNT)))))
		 (RETURN NIL))
	     (REV* 1)
	     (GO LOOP)))
 
(DEFUN MKILL* (COUNT)
       (PROG NIL
	     (SETQ GSTRING NIL COUNT (1+ COUNT))
	LOOP (COND ((= AVANT 0))
		   ((OR (NOT (= (CAR BEFORE) #\NEWLINE))
			(PLUSP (SETQ COUNT (1- COUNT))))
		    (SETQ GSTRING (CONS (CAR BEFORE) GSTRING)
			  BEFORE (CDR BEFORE))
		    (SETQ AVANT (1- AVANT)) (GO LOOP)))
	     (RETURN NIL)))

; Undeclarations for the file:
(DECLARE (NOTYPE COUNT SCOUNT LENGTH CNT N I OTHER))
