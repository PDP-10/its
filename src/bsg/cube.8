;;; BSG 3/18/80
(defun multicsp macro (x)(let ((f (cadr x)))
			   (and (status feature Multics) f)))

(multicsp (%include backquote))
(multicsp (%include defmacro))

(declare (special FRONT BACK RHS LHS TOP BOTTOM))
(declare (special cube-interrupt-set cube-display-needs-update))

(defmacro interrupt nil '(and (boundp 'cube-display-needs-update)
                              (not cube-interrupt-set)
                              (set-cube-interrupt)))

(defmacro 1to (n v &rest forms)
          `(do ,v 1 (1+ ,v)(> ,v ,n) . ,forms))

(defmacro 1to3 gunk `(1to 3 . ,gunk))
(defmacro 1to4 gunk `(1to 4 . ,gunk))
(defmacro mod stuff(cons '\ stuff))

(defmacro all-faces (var . forms)`(1to 6 ,var . ,forms))

(defmacro all-little-faces ((y z) . forms)
          `(1to 3 ,y (1to 3 ,z . ,forms)))

(array colors t 7.)
(array cube t 7 4 4)
(array Atop fixnum 7)(array Abottom fixnum 7)
(array Aright fixnum 7)(array Aleft fixnum 7)
(array Aback fixnum 7)
(array face-clock-relations t 7 5)
(array face-names t 7.)
(array face-relations fixnum 7 7)
(array face-rotate-buf t 12.)(array edge-rotate-buf t 12.)
(array xpcoef fixnum 7.  3)(array ypcoef fixnum 7. 3)
(array cube-rot-buf fixnum 4.)
(array cube-inv-perm fixnum 7.)

(defun cube-load-time-init ()                     ;what is an 'application'?
       ;;Constance
       (fillarray 'Atop '(-1))
       (fillarray 'Abottom '(-1))
       (fillarray 'Aright '(-1))
       (fillarray 'Aleft '(-1))
       (fillarray 'Aback '(-1))
       (fillarray 'face-relations '(-1))
       (fillarray 'colors '(black red orange yellow white green blue))
       ;;Dependent upon array numbering, but not cube config
       (fillarray 'xpcoef '(0 0 0 ;if we are the guy's *, his x goes . . .
                            1 1 1 ;top
                            3 2 1 ;r
                            3 3 3 ;bot
                            1 2 3)) ;l
       (fillarray 'ypcoef '(0 0 0
                            3 2 1
                            3 3 3
                            1 2 3
                            1 1 1))
       ;;Dependent upon canonical configuration
       (fillarray 'face-names '(ARRGH FRONT BACK TOP BOTTOM LHS RHS))
       (fillarray 'Aback '(0 2 1 4 3 6 5))
       (fillarray 'Atop '(0 3 3 5 5 3 3 ))
       (fillarray 'Abottom '(0 4 4 6 6 4 4))
       (fillarray 'Aright '(0 6 5 2 1 1 2))
       (fillarray 'Aleft '(0 5 6 1 2 2 1))
       ;;Computations
       (init-cube)
       (all-faces scion
                  (store (face-clock-relations scion 1)(Atop scion))
                  (store (face-clock-relations scion 2)(Aright scion))
                  (store (face-clock-relations scion 3)(Abottom scion))
                  (store (face-clock-relations scion 4)(Aleft scion)))
       (all-faces scion
                  (all-faces peer
                             (store (face-relations scion peer)
                                    (cond ((= peer (Aback scion)) 0)
                                          ((= peer scion) 0)
                                          ((= peer (Atop scion)) 1)
                                          ((= peer (Abottom scion)) 3)
                                          ((= peer (Aright scion)) 2)
                                          ((= peer (Aleft scion)) 4)
                                          (t -2)))))
       (all-faces x (all-faces y (and (< (face-relations x y) 0)
                                      (error '|no relation | (cons x y) 'fail-act)))))



(defun paint-cube ()
       (all-faces i
                  (all-little-faces (j k)
                                    (store (cube i j k)
                                           (colors i)))))
(defun init-cube ()
       (paint-cube)
       (all-faces f (set (face-names f) f))
       (interrupt))

(cube-load-time-init)

(defun listify-face (f)
       (let (colors)
            (all-little-faces (x y)
                              (setq colors (cons (cube f x y) colors)))
            (nreverse colors)))

(defun rotate-face (f what)
       (interrupt)
       (pack-cube-rotation-buffers f)
       (rotate-cube-rotation-buffers what)
       (unpack-cube-rotation-buffers f))

(defun pack-cube-rotation-buffers (f)
       (store (face-rotate-buf 0)(cube f 1 1))
       (store (face-rotate-buf 1)(cube f 1 2))
       (store (face-rotate-buf 2)(cube f 1 3))
       (store (face-rotate-buf 3)(cube f 2 3))
       (store (face-rotate-buf 4)(cube f 3 3))
       (store (face-rotate-buf 5)(cube f 3 2))
       (store (face-rotate-buf 6)(cube f 3 1))
       (store (face-rotate-buf 7)(cube f 2 1))
       (1to4 edgetype
             (let ((neighbor (face-clock-relations f edgetype)))
                  (let ((we-are-his-
                          (face-relations neighbor f)))
                       (1to3 i (store
                                 (edge-rotate-buf
                                   (+(* 3 (1- edgetype)) (1- i)))
                                 (cube neighbor
                                       (xpcoef we-are-his- (1- i))
                                       (ypcoef we-are-his- (1- i)))))))))

(defun unpack-cube-rotation-buffers (f)
       (store (cube f 1 1)(face-rotate-buf 0))
       (store (cube f 1 2)(face-rotate-buf 1))
       (store (cube f 1 3)(face-rotate-buf 2))
       (store (cube f 2 3)(face-rotate-buf 3))
       (store (cube f 3 3)(face-rotate-buf 4))
       (store (cube f 3 2)(face-rotate-buf 5))
       (store (cube f 3 1)(face-rotate-buf 6))
       (store (cube f 2 1)(face-rotate-buf 7))
       (1to4 edgetype
             (let ((neighbor (face-clock-relations f edgetype)))
                  (let ((we-are-his-
                          (face-relations neighbor f)))
                       (1to3 i (store
                                 (cube neighbor
                                       (xpcoef we-are-his- (1- i))
                                       (ypcoef we-are-his- (1- i)))
                                 (edge-rotate-buf
                                   (+(* 3 (1- edgetype)) (1- i)))))))))

(defun rotate-cube-rotation-buffers (what)
       (and (numberp what)(= what 180.)(setq what 'o180))
       (let ((edgerot (cdr (assq what '((left . 9.)(right . 3.)(o180 . 6.)))))
             (facrot (cdr (assq what '((left . 6.)(right . 2.)(o180 . 4.))))))
            (do i 0 (1+ i)(= i 3)
                (let ((e0 (edge-rotate-buf i))
                      (e3 (edge-rotate-buf (+ 3 i)))
                      (e6 (edge-rotate-buf (+ 6 i)))
                      (e9 (edge-rotate-buf (+ 9. i))))
                     (store (edge-rotate-buf (+ edgerot i)) e0)
                     (store (edge-rotate-buf (mod (+ edgerot 3 i) 12.)) e3)
                     (store (edge-rotate-buf (mod (+ edgerot 6 i) 12.)) e6)
                     (store (edge-rotate-buf (mod (+ edgerot 9. i) 12.)) e9)))
            (do i 0 (1+ i)(= i 2)
                (let ((f0 (face-rotate-buf i))
                      (f2 (face-rotate-buf (+ i 2)))
                      (f4 (face-rotate-buf (+ i 4)))
                      (f6 (face-rotate-buf (+ i 6))))
                     (store (face-rotate-buf (+ i facrot)) f0)
                     (store (face-rotate-buf (mod (+ i facrot 2) 8.)) f2)
                     (store (face-rotate-buf (mod (+ i facrot 4) 8.)) f4)
                     (store (face-rotate-buf (mod (+ i facrot 6) 8.)) f6)))))


;;;----------------------------------------------------------------------
(defun rotate-cube (around how)
       (interrupt)
       (pack-cube-rot-buf around)
       (rotate-cube-buf how)
       (unpack-cube-rot-buf around))

(defun pack-cube-rot-buf (f)
       (all-faces varx
                  (store (cube-inv-perm (symeval (face-names varx))) varx))
       (1to4 edgetype
             (let ((whos-here-now (face-clock-relations f edgetype)))
                  (store (cube-rot-buf (1- edgetype)) whos-here-now))))

(defun unpack-cube-rot-buf (f)
       (1to4 edgetype
             (set (face-names
                    (cube-inv-perm
                      (face-clock-relations f edgetype)))
                  (cube-rot-buf (1- edgetype)))))

(defun rotate-cube-buf (how)
       (and (numberp how)(= how 180.)(setq how 'o180))
       (setq how (cdr (assq how '((right . 1)(left . 3)(o180 . 2)))))
       (let ((f0 (cube-rot-buf 0))
             (f1 (cube-rot-buf 1))
             (f2 (cube-rot-buf 2))
             (f3 (cube-rot-buf 3)))
            (store (cube-rot-buf how) f0)
            (store (cube-rot-buf (mod (+ 1 how) 4)) f1)
            (store (cube-rot-buf (mod (+ 2 how) 4)) f2)
            (store (cube-rot-buf (mod (+ 3 how) 4)) f3)))

;;;----------------------------------------------------------------------

;;; Cube display generator  -- somebody else must define
;;; cube-princ, cube-terpri, and cube-displaypos appropriately.

(defun display-cube ()
       (let ((namel '(FRONT RHS BACK LHS TOP BOTTOM)))
            (1to3 fn
                  (let ((n1 (symeval (car namel)))
                        (n2 (symeval (cadr namel))))
                       (let ((l1 (listify-face-rel
                                   n1
                                   (cube-display-top-choice n1)))
                             (l2 (listify-face-rel
                                   n2
                                   (cube-display-top-choice n2))))
                            (cube-princ (car namel))
                            (cube-princ '/ /()
                            (cube-princ (ascii (+ 60 n1)))
                            (cube-princ '/)/:)
                            (cube-displaypos 40.)
                            (cube-princ (cadr namel))
                            (cube-princ '/ /()
                            (cube-princ (ascii (+ 60 n2)))
                            (cube-princ '/)/:)
                            (cube-terpri)
                            (1to3 i
                                  (cube-princ (car l1))
                                  (cube-displaypos 10.)
                                  (cube-princ (cadr l1))
                                  (cube-displaypos 20.)
                                  (cube-princ (caddr l1))
                                  (cube-displaypos 40.)
                                  (cube-princ (car l2))
                                  (cube-displaypos 50.)
                                  (cube-princ (cadr l2))
                                  (cube-displaypos 60.)
                                  (cube-princ (caddr l2))
                                  (setq l1 (cdddr l1) l2 (cdddr l2))
                                  (cube-terpri))))
                  (setq namel (cddr namel))
                  (and namel (cube-terpri)))))

;;;----------------------------------------------------------------------

(defun listify-face-rel (face topchoice)
       (1to4 edgetype
             (let ((neighbor (face-clock-relations face edgetype)))
                  (cond ((= neighbor topchoice)
                         (cond ((= edgetype 1)    ;top
                                (return (listify-face face))))
                         (pack-cube-rotation-buffers face)
                         (rotate-cube-rotation-buffers
                           (cond ((= edgetype 2)  ;right
                                  'left)
                                 ((= edgetype 3) 180.)
                                 ((= edgetype 4) 'right)))
                         (return
                           (list (face-rotate-buf 0)
                                 (face-rotate-buf 1)
                                 (face-rotate-buf 2)
                                 (face-rotate-buf 7)
                                 (cube face 2 2)
                                 (face-rotate-buf 3)
                                 (face-rotate-buf 6)
                                 (face-rotate-buf 5)
                                 (face-rotate-buf 4))))))))

(defun cube-display-top-choice (f)
       (cond ((= f TOP) BACK)
             ((= f BOTTOM) FRONT)
             (t TOP)))
