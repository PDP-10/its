;;; BSG 3/19/80
(defun multicsp macro (x)
       (let ((f (cadr x)))
	 (and (status feature Multics) f)))

(defun itsp macro (x)
       (and (status feature ITS)(cadr x)))

(multicsp (%include cube-dcls))
(itsp (includef '|bsg;cube dcls|))

(defun find-cubie (colorlist)
       (cond ((= (length colorlist) 2)
              (find-edge-cube (car colorlist)(cadr colorlist)))
             ((= (length colorlist) 3)
              (find-corner-cube (car colorlist)(cadr colorlist)(caddr colorlist)))
             (t (find-center-cube (car colorlist)))))

(defun find-center-cube (color)
       (all-faces f
                 (cond ((eq color (cube f 2 2))
                        (return (list f))))))

(defun find-edge-cube (showing side)
       (all-faces f
                 (let ((match
                         (or (edge-cube-match f showing side 1 2 1)
                             (edge-cube-match f showing side 2 3 2)
                             (edge-cube-match f showing side 3 2 3)
                             (edge-cube-match f showing side 2 1 4))))
                      (and match (return match)))))

(defun edge-cube-match (f showing side x y edgetype)
       (and (or (eq showing (cube f x y))(eq showing '*))
            (let ((neighbor (face-clock-relations f edgetype)))
                 (let ((wah (face-relations neighbor f)))
                      (or (eq side '*)
                          (eq side (cube neighbor
                                         (xpcoef wah (1- 2))
                                         (ypcoef wah (1- 2)))))))
            (list f x y)))

(defun find-corner-cube (showing lh rh)
       (all-faces
         face
         (let ((match
                 (or (match-corner-cube face showing lh rh 1 1 4)
                     (match-corner-cube face showing lh rh 1 3 1)
                     (match-corner-cube face showing lh rh 3 3 2)
                     (match-corner-cube face showing lh rh 3 1 3))))
              (and match (return match)))))

(defun match-corner-cube (face showing lh rh x y lhedgetype)
       (and (or (eq showing (cube face x y))
                (eq showing '*))
            (let  ((lhneighbor (face-clock-relations face lhedgetype))
                   (rhneighbor (face-clock-relations face
                                                     (1+ (mod lhedgetype 4)))))
                  (let ((lhwah (face-relations lhneighbor face))
                        (rhwah (face-relations rhneighbor face)))
                       (let ((lhcolor (cube lhneighbor
                                            (xpcoef lhwah (1- 3))
                                            (ypcoef lhwah (1- 3))))
                             (rhcolor (cube rhneighbor
                                            (xpcoef rhwah (1- 1))
                                            (ypcoef rhwah (1- 1)))))
                            (or (and (or (eq lhcolor lh)
                                         (eq lh '*))
                                     (or (eq rhcolor rh)
                                         (eq rh '*)))
                                (and (or (eq lhcolor rh)
                                         (eq rh '*))
                                     (or (eq rhcolor lh)
                                         (eq lh '*)))))))
            (list face x y)))

(defun cube-xy-transform (face neighbor x y)
       ;;transform x and y in "face" such that it thinks neighbor on top.
       (let ((relation (face-relations face neighbor)))
            (cond ((= relation 1)(list x y))
                  ((= relation 3)(list (- 4 x)(- 4 y)))
                  ((= relation 2)(list (- 4 y) x))
                  (t (list y (- 4 x))))))

(defun cube-xy-inverse-transform (face neighbor x y)
       (let ((relation (face-relations face neighbor)))
            (cond ((= relation 1)(list x y))
                  ((= relation 3)(list (- 4 x)(- 4 y)))
                  ((= relation 4)(list (- 4 y) x))
                  (t (list y (- 4 x))))))

(defun fetch-cube-in-orientation-pair (pair pfront ptop)
       (fetch-cube-in-orientation (car pair)(cadr pair) pfront ptop))

(defun fetch-cube-in-orientation (row col pfront ptop)
       (let (((row col)(cube-xy-inverse-transform pfront ptop row col)))
            (cube pfront row col)))

(defun make-face-front (face)
       (cond ((= face FRONT))
             ((= face BACK)(rotate-cube-down)(rotate-cube-down))
             ((= face RHS)(rotate-cube-left))
             ((= face LHS)(rotate-cube-right))
             ((= face TOP)(rotate-cube-down))
             ((= face BOTTOM)(rotate-cube-up))))

(defun make-face-top-hold-front (face)
       (cond ((= TOP face))
             ((= BOTTOM face)(rotate-cube-clockwise)(rotate-cube-clockwise))
             ((= LHS face)(rotate-cube-clockwise))
             ((= RHS face)(rotate-cube-counterclockwise))
             (t (cbarf))))

(defun randomize-cube ()
       (randomize-cube-times 10.))

(defun randomize-cube-times (count)
       (let ((faces nil))
            (do i 1 (1+ i)(> i count)
                (let ((ranturn (\ (random) 3))
                      (ranface (1+ (\ (random) 6))))
                     (setq ranface (abs ranface) ranturn (abs ranturn))
                     (and (= ranface 0)(setq ranface 6))
                     (and (> ranturn 2)(setq ranturn 2))
                     (and (> ranturn 6)(setq ranturn 6))
                     (setq ranturn (cond ((= ranturn 0) 'right)((= ranturn 1) 'left)(t 180.)))
                     (cond ((and (car faces)(= (car faces) ranface))
                            (setq i (1- i)))
                           (t (setq faces (cons ranface faces))
                              (rotate-face ranface ranturn)))))))

(defun set-0-level-cube-bindings ()
       (setq FRONT-0 FRONT BACK-0 BACK RHS-0 RHS LHS-0 LHS TOP-0 TOP BOTTOM-0 BOTTOM))


;;;----------------------------------------------------------------------
(declare (special corner-permutation-list))

(setq corner-permutation-list (list '(1 1)'(1 2)'(1 3)'(2 3)'(3 3)'(3 2)'(3 1)'(2 1)))    ;Don't quote me!!
(rplacd (last corner-permutation-list) corner-permutation-list)

(defun cube-match-star-list (pat dat)
       (do ((pat pat (cdr pat))(dat dat (cdr dat)))
           ((null pat)
            (or (null dat)(error '|cube-match-star-list pat lens bad| nil 'fail-act))
            t)
           (cond ((eq (car pat) '*))
                 ((= (car pat)(car dat)))
                 (t (return nil)))))

(defun find-cube-face-match-rot (whathave towhere)
       (do ((i 0 (1+ i))
            (l corner-permutation-list (cdr l)))
           ((= i 8.)(error '|find-cube-face-match-rot: have not found: | whathave 'fail-act))
           (cond ((cube-match-star-list whathave (car l))
                  (return
                    (do ((j 0 (1+ j))
                         (ll l (cdr ll)))
                        ((= j 8.)(error '|find-cube-face-match-rot: towhere not found: | towhere 'fail-act))
                        (cond ((cube-match-star-list towhere (car ll))
                               (return (case= j
                                              (0 nil)
                                              (2 'right)
                                              (4 180.)
                                              (6 'left)))))))))))

(defun develop-rotation-so-that-this-comes-here (face which here)
       (case= (mod (+ 4 (- (face-relations face here)
                           (face-relations face which)))
                   4)
              (0 nil)
              (1 'right)
              (2 180.)
              (3 'left)))



(defun rotate-cube-down ()(rotate-cube RHS 'left))
(defun rotate-cube-up ()(rotate-cube RHS 'right))
(defun rotate-cube-left ()(rotate-cube TOP 'right))
(defun rotate-cube-right ()(rotate-cube TOP 'left))
(defun rotate-cube-clockwise ()(rotate-cube FRONT 'right))
(defun rotate-cube-counterclockwise ()(rotate-cube FRONT 'left))
