(DEFUN THREAD							       ;FUNCTION FOR THE /$ READ MACRO
       ;;EXPANDS _ TO (THNV (READ)) EXPANDS A TO ASSERT  ;EXPANDS G TO GOAL EXPANDS T TO THTBF THTRUE
       NIL							       ;EXPANDS ? TO (THV (READ)) EXPANDS E TO (THEV
								       ;(READ))					 
       (PROG (CHAR)						       ;EXPANDS R TO THRESTRICT			 
	     
	     ;;TREATS & - - & AS A COMMENT
	     (RETURN (COND ((EQ (SETQ CHAR (READCH)) (QUOTE ?))
			    (LIST (QUOTE THV) (READ)))
			   ((EQ CHAR (QUOTE E))
			    (LIST (QUOTE THEV) (READ)))
			   ((EQ CHAR (QUOTE _))
			    (LIST (QUOTE THNV) (READ)))
			   ((EQ CHAR (QUOTE &))
			    (PROG NIL
			     CHLP (COND ((EQ (QUOTE &) (READCH))
					 (RETURN (QUOTE (COMMENT)))))
				  (GO CHLP)))
			   ((EQ CHAR (QUOTE T))
			    (QUOTE (THTBF THTRUE)))
			   ((EQ CHAR (QUOTE R)) (QUOTE THRESTRICT))
			   ((EQ CHAR (QUOTE G)) (QUOTE THGOAL))
			   ((EQ CHAR (QUOTE A)) (QUOTE THASSERT))
			   ((EQ CHAR 'N) (LIST 'THANUM (READ)))
			   ((PRINT (QUOTE ILLEGAL-PREFIX))
			    (PRINC (QUOTE $))
			    (PRINC CHAR)
			    (PRINC (READ))
			    (ERR NIL))))))

(sstatus macro $ 'thread)

; this macro handles the case where the value passed to it is an atom
; the old MacLISP used to support this, and this returned some implementation
; specific flags from a symbol flag word. The current MacLISP CAR doesn't 
; allow this, and causes an error to be signalled.  Rather than SETQ the value
; CAR to T, which re-enables the old behavior, this macro handles the ATOM
; case by returning a GENSYM (*car-of-atom*), which is guaranteed not to match
; any other value.  In the original code, any comparison with the value returned
; from (CAR <atom>) would fail, and so too does this rewrite.

(defvar *car-of-atom* (gensym))

(defmacro carx (x)
  `(let ((xx ,x))
    (cond ((null xx) nil)
          ((atom xx) *car-of-atom*)
          (t (car xx)))))

(defmacro cdrx (x)
  `(let ((xx ,x))
    (cond ((null xx) nil)
          ((atom xx) (error "CDRX of a symbol"))
          (t (cdr xx)))))
