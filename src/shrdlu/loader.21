;;;   THIS IS A PACKAGE FOR LOADING SHRDLU'S INTO CORE FROM THE DISK FILES.
;;;    THE PROCEDURE IS TO FIRST LOAD A BLISP (IGNORE ALLOCATIONS, THE 
;;;    PROGRAMS DO THEIR OWN). AND UREAD THIS FILE. EXECUTING "LOADSHRDLU"
;;;    WILL GENERATE (AFTER SOME TIME) A FULLY INTERPRETED VERSION. 
;;;    PARTIALLY COMPILED MIXES ARE AVAILLABLE, AS SEEN BELOW.
;;;    THE VARIABLE "VERSION-FILES" KEEPS A RUNNING TAB OF THE FILES
;;;    LOADER VIA "LOADER". IF ANY ERRORS OCCUR DURING READIN THEY
;;;    ARE PROTECTED BY AN "ERRSET" AND LOADING CONTINUES. (NOTE !! IF AN
;;;    UNBOUND PAREN CAUSES THE FILE TO BE TERMINATED TOO SOON, YOU'LL
;;;    NEVER NOTICE)
;;;

;(setsyntax 34. 'single 34.)

(SETQ GC-OVERFLOW '(LAMBDA (X) T)) 

(defun makoblist (x)
  (cond ((null x)
         (listarray obarray (- (cadr (arraydims 'obarray)) 129.)))
        (t 
         (*array x 'obarray))))
                        
(defun ioc fexpr (x)
  (cond 
        ((eq (car x) 'c) (setq ^d nil))
	((eq (car x) 'd) (setq ^d t))
	((eq (car x) 'q) (setq ^q t))
	((eq (car x) 's) (setq ^q nil))
        ((eq (car x) 't) (setq ^r nil))
        ((eq (car x) 'v) (setq ^w nil))
        ((eq (car x) 'r) (setq ^r t))
        ((eq (car x) 'w) (progn (setq ^w t) (clear-output t)))
	((eq (car x) 'g) (tyo 7)) 		; ring the bell
	(t (break (eval (car x))))))

(SETQ *RSET T) 

(DEFUN LOADER (*!?KEY) 
       (OR (ERRSET (EVAL (LIST 'UREAD
			       *!?KEY
			       '>
			       'DSK
			       'SHRDLU))
		   NIL)
	   (AND (PRINT *!?KEY)
		(PRINC 'NOT-FOUND)
		(RETURN NIL)))
       (LOADX)) 

(DEFUN LOADX ()
       (PROG (*!?H *!?F *!?EOF) 
	     (SETQ *!?EOF (GENSYM))
	     (PRINT 'READING)
	     (PRINC *!?KEY)
	     (SETQ VERSION-FILES (CONS (STATUS UREAD) VERSION-FILES))
	LOOP ((LAMBDA (^Q) (SETQ *!?H (READ *!?EOF))) T)
	     (AND (EQ *!?H *!?EOF) (RETURN T))
	     (OR (ERRSET ((LAMBDA (^W ^Q) (EVAL *!?H)) T T))
		 (PROG2 (PRINT 'ERROR-IN-FILE) (PRINT *!?H)))
	     (GO LOOP)))

(defun fload2 (x)
  (fload (cons x '(fasl dsk shrdlu))))

(DEFUN FLOAD (SPECS)
   (TERPRI)
   (PRINC (CAR SPECS))
   (princ '/ )
   (PRINC (CADR SPECS))
   (OR (ERRSET (APPLY 'FASLOAD SPECS))
       (ERT lossage in loading - try again ?))
   )
 

(SETQ VERSION-FILES NIL) 

(defun loadplanner ()
       (ALLOC '(LIST 320000
                FIXNUM 15000
                SYMBOL 15000
                array 500
                flonum 4000))
       (SETQ PURE NIL)
       (setq car t)
       (setq cdr t)
       (SETQ THINF NIL THTREE NIL THLEVEL NIL)
       (MAPC 'LOADER '(PLNR THTRAC))
       (THINIT))

(defun planner-compiled ()
       (ALLOC '(LIST 320000
                FIXNUM 15000
                SYMBOL 15000
                array 500
                flonum 4000))
       (SETQ PURE NIL)
       (setq car t)
       (setq cdr t)
       (SETQ THINF NIL THTREE NIL THLEVEL NIL)
       (MAPC 'fload2 '(PLNR THTRAC))
       (THINIT))

(DEFUN LOADSHRDLU ()
       (ALLOC '(LIST 320000
                FIXNUM 15000
		SYMBOL 15000
                array 500
                flonum 3000))
       (SETQ PURE NIL)
       (setq car t)
       (setq cdr t)
       (SETQ THINF NIL THTREE NIL THLEVEL NIL NOSTOP NIL)
       (load '((lisp) slave fasl))
       (load '((lisp) format fasl))
       (load '((lisp) umlmac fasl))
       (MAPC 'LOADER '(PLNR THTRAC))
       (thinit)
       (setq errlist nil)   ;removes micro-planner's fangs
       (MAPC 'LOADER '(SYSCOM MORPHO SHOW))
       (MAPC 'LOADER '(PROGMR PROGGO GINTER GRAMAR DICTIO))
       (MAPC 'LOADER '(SMSPEC SMASS SMUTIL))
       (LOADER 'NEWANS)
       (load 'blockp)
       (load 'data2)
       (load 'blockl)
       (LOADER 'SETUP)
       (load 'data)
       (load '((lisp) trace fasl))
       (let ((x nil)) nil)	; forces let to get loaded
       (load '((shrdlu) graphf fasl))
       (load '((lisp) grinde fasl))
       'CONSTRUCTION/ COMPLETED) 

(DEFUN SHRDLU-COMPILED ()
       (ALLOC '(LIST 320000
                FIXNUM 15000
		SYMBOL 15000
                array 500
                flonum 3000))
       (SETQ PURE NIL)
       (setq car t)
       (setq cdr t)
       (SETQ THINF NIL THTREE NIL THLEVEL NIL NOSTOP NIL)
       (load '((lisp) slave fasl))
       (mapc 'fload2 '(plnr thtrac))
       (thinit)
       (setq errlist nil)   ;removes micro-planner's fangs
       (mapc 'fload2 '(syscom morpho show))
       (mapc 'fload2 '(progmr proggo ginter gramar dictio))
       (mapc 'fload2 '(smspec smass smutil))
       (mapc 'fload2 '(newans blockp))
       (load 'data2)
       (fload2 'blockl)
       (LOADER 'SETUP)
       (load 'data)
       (load '((lisp) trace fasl))
       (let ((x nil)) nil)	; forces let to get loaded
       (load '((shrdlu) graphf fasl))
       (load '((lisp) grinde fasl))
       (load '((lisp) mlmac fasl))
       'COMPLETED)

(defun loadparser ()
	(mapc 'loader '(syscom morpho show))
	(mapc 'loader '(progmr proggo ginter gramar dictio))
	(loader 'setup)
        (loader 'parser)
	'complete-call-setup-num-date)

(DEFUN PARSER-compiled ()
	(SETQ PURE NIL)
        (mapc 'fload2 '(syscom morpho show))
        (mapc 'fload2 '(progmr proggo ginter gramar dictio))
        (load '((lisp) trace fasl))
        (loader 'setup)
        (loader 'parser)
	'PARSER-LOADED)
