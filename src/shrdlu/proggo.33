(defvar *go-tags* '())

;(defmacro *go (where)
; `(let ((found (assq ',where *go-tags*)))
;   (print `((*go ,',where) found ,found))
;   (*throw (cdr found) ',where)))

(defmacro foo (where)
  `(let ((label (cond ((atom ',where) ',where) (t ,where))))
     (print label)))

; (defmacro *go (where)
;  `(let* ((label (cond ((atom ',where) ',where)
; 		      (t ,where)))
; 	 (found (assq `,label *go-tags*)))
; ;    (print `((*go `,label) found ,found))
;     (*throw (cdr found) `,label)))

(defmacro *go (where)
 `(let* ((label ,(cond ((atom where) `',where)
 		       (t where)))
	 (found (assq label *go-tags*)))
;    (print `((*go ,label) found ,found))
    (*throw (cdr found) label)))

(defmacro when (x &rest body)
  `(if ,x (progn ,@body)))

(defmacro *prog (bvl &body prog-body)
 (let ((clauses '())
	(clause '())
       (first-tag (gensym 'F))
	(next-tag nil)
	(restart-tag (gensym 'R))
       (catch-tag (gensym 'C))
       (next-tag-var (gensym 'N))
	(tag-associations '()))
   (when (and prog-body (atom (car prog-body)))
     (setq first-tag (pop prog-body))
     (push (cons first-tag catch-tag) tag-associations))
   (setq clause (list first-tag))
   (do ((pb prog-body (cdr pb)))
	((null pb))
     (let ((item (car pb)))
	(cond ((atom item)
              (push clause clauses)
              (when item
		 (push (cons item catch-tag) tag-associations))
	       (setq clause (list item)))
	      (t
	       (push item clause)))))
   (when clause
     (push clause clauses))
   (setq clauses
 	  (mapcar #'(lambda (clause)
		      (let ((new-clause
			     (nreconc clause
				      (list
				       `(*throw ',catch-tag
						',next-tag)))))
			(setq next-tag (car new-clause))
			new-clause))
                 clauses))
   (setq clauses (nreverse clauses))
   `(let ((,next-tag-var ',first-tag)
          (*go-tags* (append ',tag-associations *go-tags*)))
      (prog ,bvl  ; Need a PROG anyway in case macro user does RETURN
	  ,restart-tag
         (setq ,next-tag-var
		(*catch ',catch-tag
			(cond ,@(mapcar #'(lambda (clause)
                                             (let ((tag (car clause)))
  						`((eq ,next-tag-var ',tag)
;                                                 (print `(calling tag ,',tag))
						  ,@(cdr clause))))
					  clauses))))
;         (print `(next-tag ,',next-tag-var))
         (if ,next-tag-var
  	      (go ,restart-tag)  ; NOTE: Yes, this is GO, not *GO.
	      (return nil))))))

(defun apply-macro (macro-name macro-body)
  (eval (cons macro-name macro-body)))
