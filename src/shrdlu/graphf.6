(DECLARE (SPECIAL PH-BLOCKS GP-LINES GP-SURFACE PH-TURN-ON 
   DISPLAY-AS GP-HANDIT GP-NEWOBLOCAT MAKE-VERBOSE))
(declare (GENPREFIX GP))
(declare (muzzled t))

(DEFUN GP-PROJECT
       (X Y Z)
       (LIST (FIX (*$ 0.9
		      (PLUS X (TIMES (QUOTE 0.75111) Y) (QUOTE 3.0))))
	     (FIX (*$ 0.9
		      (PLUS Z (TIMES (QUOTE 0.43302) Y) (QUOTE 3.0))))))

(DEFUN GP-INTERSECT (L1 L2)
  (PROG (DENOM SL1 SL2 C1 C2 POINTS A B TST IX IY)
 (DECLARE (FLONUM A DENOM SL1 SL2 B C1 C2 IX IY))
(SETQ TST T POINTS L1)
PRLOOP

(SETQ DENOM (*DIF (SETQ A (PLUS 1.0E-10 (CADAR POINTS))) (CADADR POINTS))
    SL2 (COND (( > (ABS DENOM) 0.1)  (//$ (*DIF (SETQ B (PLUS 1.0E-10 (CAAR POINTS))) (CAADR POINTS)) DENOM))
  (T '300.0) )
   C2 (COND ((> (ABS SL2) 30.0) A)
            (T (-$ B  (*$ SL2 A)))))
(COND (TST (SETQ SL1 SL2 C1 C2 POINTS L2 TST NIL) (GO PRLOOP)))

(COMMENT SLOPES AND CONSTANTS HAVE BEEN COMPUTED)
 (SETQ A (ABS SL1) B (ABS SL2))

(COND ((OR (< (ABS (-$ SL1 SL2)) 1.0E-2)
(AND  (< A  2.0E-2)
 (< B 20.E-2) )
(AND  (> A 30.0)
 (> B 30.0))) (RETURN NIL))

((> A  30.0) (SETQ IY C1 IX (+$ (*$ SL2 IY) C2)))
 ((>  B  30.0) (SETQ IY C2 IX (+$ (*$ SL1 IY) C1)))
 (T (SETQ IY (//$ (-$ C2 C1) (-$ SL1 SL2)) IX (+$ (*$ SL1 IY) C1)) ))

(COMMENT POTENTIAL INTERSECTION COMPUTED)

(COND ((NOT (AND (GP-FASBET IX (CAAR L1) (CAADR L1)) (GP-FASBET IY (CADAR L1) (CADADR L1)))) (RETURN NIL))
      ((NOT (AND (GP-FASBET IX (CAAR L2) (CAADR L2)) (GP-FASBET IY (CADAR L2) (CADADR L2)))) (RETURN NIL)))
(RETURN (LIST (FIX (+$ IX 0.5)) (FIX (+$ IY 0.5))))))



(DEFUN GP-FASBET
       (POINT PR1 PR2)
(DECLARE (FLONUM POINT) (FIXNUM PR1 PR2))
       (COND ((COND ((LESSP PR1 PR2) (LESSP PR1 POINT PR2))
		    ((LESSP PR2 PR1) (LESSP PR2 POINT PR1))
		    ((EQUAL PR1 PR2) (LESSP (ABS (*DIF POINT PR1)) (QUOTE 1))))
	      T)
	     ((OR (= POINT (FLOAT PR1)) (= POINT (FLOAT PR2))) T)
	     (T NIL)))


(DEFUN GP-BETWEEN
       (POINT PR1 PR2)
       (COND ((COND ((LESSP PR1 PR2) (LESSP PR1 POINT PR2))
		    ((LESSP PR2 PR1) (LESSP PR2 POINT PR1))
		    ((= (FLOAT  PR1) (FLOAT  PR2)) (LESSP (ABS (*DIF POINT PR1)) (QUOTE 1))))
	      T)
	     ((OR (= (FLOAT  POINT) (FLOAT  PR1)) (= (FLOAT  POINT) (FLOAT  PR2))) T)
	     (T NIL)))






(DEFUN GP-LINEQ
       (POINTS)
       (PROG (SLOPE CONSTANT DENOM)
	     (SETQ DENOM (- (CADAR POINTS) (CADADR POINTS)))
	     (COND ((EQUAL (QUOTE 0) DENOM)
		    (RETURN (LIST NIL (CADAR POINTS)))))
	     (SETQ SLOPE
		   (//$ (TIMES (QUOTE 1.0) (- (CAAR POINTS) (CAADR POINTS)))
			(TIMES (QUOTE 1.0) DENOM)))
	     (COND ((> (ABS SLOPE) (QUOTE 30.0))
		    (RETURN (LIST NIL (CADAR POINTS))))
		   ((< (ABS SLOPE) (QUOTE 2.0E-2)) (SETQ SLOPE (QUOTE 0.0))))
	     (SETQ CONSTANT (*DIF (CAAR POINTS) (TIMES SLOPE (CADAR POINTS))))
	     (RETURN (LIST SLOPE CONSTANT))))

(DEFUN GP-ONLINE
       (POINT LINE)
       (NOT (AND (GP-BETWEEN (CAR POINT) (CAAR LINE) (CAADR LINE))
		 (GP-BETWEEN (CADR POINT) (CADAR LINE) (CADADR LINE)))))

(DEFUN GP-TRANSPARENT
       (NAME)
       (PROG (LINES SURF HLNS)
	     (SETQ LINES (ASSQ NAME GP-LINES))
	     (RPLACA (CDDDR LINES) T)
	     (SETQ HLNS (GP-DRAWL (APPEND (CADR LINES) (CADDR LINES)) NAME))
	     (SETQ HLNS (GP-SINGLE HLNS))
	     (RPLACA (CDDDDR LINES) HLNS)
	     (MAP (FUNCTION (LAMBDA (NAME1)
				    (SETQ SURF
					  (CDDDR (ASSQ (CAR NAME1) GP-SURFACE)))
				    (RPLACA SURF
					    (GP-SINGLE (CONS NAME
							     (CAR SURF))))))
		  HLNS)
	     (RETURN HLNS)))

(DEFUN GP-OPAQUE
       (NAME)
       (PROG (LINES SURF HLNS)
	     (SETQ LINES (ASSQ NAME GP-LINES))
	     (RPLACA (CDDDR LINES) NIL)
	     (SETQ HLNS (GP-DRAWL (CADR LINES) NAME))
	     (SETQ HLNS (GP-SINGLE HLNS))
	     (RPLACA (CDDDDR LINES) HLNS)
	     (MAP (FUNCTION (LAMBDA (NAME1)
				    (SETQ SURF
					  (CDDDR (ASSQ (CAR NAME1) GP-SURFACE)))
				    (RPLACA SURF
					    (GP-SINGLE (CONS NAME
							     (CAR SURF))))))
		  HLNS)
	     (RETURN HLNS)))

(DEFUN GP-B1 (ARG1 LINE) (COND ((< ARG1 (CADDR LINE))
				(COND ((< (CADAR LINE) (CADADR LINE))
				       (QUOTE -1))
				      (T (QUOTE 1))))
			       (T (QUOTE 0))))
(DEFUN GP-B2
       (ARG1 LINE)

       (COND ((AND (< (CAR ARG1) (CADDR LINE)) (> (CADR ARG1) (CADDDR LINE)))
	      (COND ((< (FIX (PLUS (TIMES (CADDR ARG1) (CADAR LINE))
				   (CADDDR ARG1)))
			(CAAR LINE))
		     (QUOTE -1))
		    (T (QUOTE 1))))
	     (T (QUOTE 0))))

(DEFUN GP-B3
       (ARG1 LINE)
       (COND ((AND (< (CAR ARG1) (CADDR LINE)) (> (CADR ARG1) (CADDDR LINE)))
	      (COND ((< (CAAR LINE) (CAADR LINE)) (QUOTE 1)) (T (QUOTE -1))))
	     (T (QUOTE 0))))

(DEFUN GP-B4 (ARG1 LINE) (* (QUOTE -1) (GP-B1 ARG1 LINE)))

(DEFUN GP-B5
       (ARG1 LINE)
       (COMMENT ARG1 NOW HAS THE FORM Y X SLOPE CONSTANT)
       (COND ((AND (< (CAR ARG1) (CADDR LINE)) (> (CADR ARG1) (CADDDR LINE)))
	      (COND ((< (FIX (PLUS (TIMES (CADDR ARG1) (CADAR LINE))
				   (CADDDR ARG1)))
			(CAAR LINE))
		     (QUOTE 1))
		    (T (QUOTE -1))))
	     (T (QUOTE 0))))

(DEFUN GP-B6 (ARG1 LINE) (COND ((< ARG1 (CADDR LINE))
				(COND ((< (CAAR LINE) (CAADR LINE)) (QUOTE -1))
				      (T (QUOTE 1))))
			       (T (QUOTE 0))))

(DEFUN GP-SP1 (ARG1 LINE) (* (QUOTE -1) (GP-B2 ARG1 LINE)))

(DEFUN GP-P1 (ARG1 LINE) (GP-B1 ARG1 LINE))

(DEFUN GP-P2 (ARG1 LINE) (GP-B2 ARG1 LINE))

(DEFUN GP-P3 (ARG1 LINE) (GP-B2 ARG1 LINE))

(DEFUN GP-P4 (ARG1 LINE) (* (QUOTE -1) (GP-B2 ARG1 LINE)))



(DEFUN GP-BLOCK
       (NAME LOCATION SIZE)
       (PROG (V1 V2 V3 V4 V5 V6 ENTRY MY MX V7 ITM HNDL    V8 X Y Z SX SY SZ)
	     (SETQ X
		   (CAR LOCATION)
		   Y
		   (CADR LOCATION)
		   Z
		   (CADDR LOCATION)
		   SX
		   (CAR SIZE)
		   SY
		   (CADR SIZE)
		   SZ
		   (CADDR SIZE)
  		   MX
		   (+ X SX)
		   MY
		   (+ Y SY)
		   V1
		   (GP-PROJECT X Y Z)
		   V2
		   (GP-PROJECT MX Y Z)
		   V3
		   (GP-PROJECT MX MY Z)
		   V4
		   (GP-PROJECT MX MY (+ Z SZ))
		   V5
		   (GP-PROJECT X MY (+ Z SZ))
		   V6
		   (GP-PROJECT X Y (+ Z SZ))
		   V7
		   (GP-PROJECT MX Y (+ Z SZ))
		   V8
		   (GP-PROJECT X MY Z))
			 (SETQ HNDL  (LIST (+ X (// (CAR SIZE) 2))
					(+ Y (// (CADR SIZE) 2))
					(+ (CADDR SIZE) Z)))

	     (SETQ ENTRY (LIST NAME
			       (LIST (LIST V1 V2 Y X)
				     (LIST V2 V3 MY MX)
				     (LIST V3 V4 MY MX)
				     (LIST V4 V5 MY X)
				     (LIST V5 V6 MY X)
				     (LIST V6 V1 Y X)
				     (LIST V2 V7 Y MX)
				     (LIST V7 V4 MY MX)
				     (LIST V7 V6 Y X))
			       (LIST (LIST V1 V8 MY X)
				     (LIST V8 V3 MY X)
				     (LIST V8 V5 MY X))
			       NIL
			       NIL
			       (SETQ ITM  (DISCREATE (CAR V1) (CADR V1)))))
	     (SETQ GP-LINES (CONS ENTRY (DELQ (ASSQ NAME GP-LINES) GP-LINES)))


(SETQ V1 (LIST (1+ (CAR V1)) (1+ (CADR V1)))
   V2 (LIST (1- (CAR V2) ) (1+ (CADR V2)))
   V3 (LIST (1- (CAR V3)) (1+ (CADR V3)))
   V4 (LIST (1- (CAR V4)) (1- (CADR V4)))
   V5 (LIST (1+ (CAR V5)) (1- (CADR V5)))
   V6 (LIST (1+ (CAR V6)) (1- (CADR V6))))
	     (SETQ ENTRY
		   (LIST NAME
			 (LIST (LIST V1 V2 (FUNCTION GP-B1) Y)
			       (LIST V2
				     V3
				     (FUNCTION GP-B2)
				     (CONS Y (CONS MX (GP-LINEQ (LIST V2 V3)))))
			       (LIST V3 V4 (FUNCTION GP-B3) (LIST MY MX))
			       (LIST V4 V5 (FUNCTION GP-B4) MY)
			       (LIST V5
				     V6
				     (FUNCTION GP-B5)
				     (CONS Y (CONS X (GP-LINEQ (LIST V5 V6)))))
			       (LIST V6 V1 (FUNCTION GP-B6) Y))
			 LOCATION
			 NIL
			 ITM
    HNDL   
			 SIZE))
	     (SETQ GP-SURFACE
		   (CONS ENTRY (DELQ (ASSQ NAME GP-SURFACE) GP-SURFACE)))
	     (COND (PH-TURN-ON (PH-INIT NAME  HNDL  LOCATION SIZE)))))

(DEFUN GP-PYRAMID
       (NAME LOCATION SIZE)
       (PROG (V1 MY V2 V3 V4 V5 X Y Z ITM  HNDL    SX   SY SZ MX ENTRY)
	     (COND (PH-TURN-ON (PH-INIT NAME NIL LOCATION SIZE)))
	     (SETQ X
		   (CAR LOCATION)
		   Y
		   (CADR LOCATION)
		   Z
		   (CADDR LOCATION)
		   SX
		   (CAR SIZE)
		   SY
		   (CADR SIZE)
		   SZ
		   (CADDR SIZE)
 		   MX
		   (+ X SX)
		   MY
		   (+ Y SY)
		   V1
		   (GP-PROJECT X Y Z)
		   V2
		   (GP-PROJECT MX Y Z)
		   V3
		   (GP-PROJECT MX MY Z)
		   V4
		   (GP-PROJECT (SETQ SX (FIX (PLUS (TIMES SX (QUOTE 0.5)) X)))
			       (SETQ SY (FIX (PLUS (TIMES SY (QUOTE 0.5)) Y)))
			       (+ Z SZ))
		   V5
		   (GP-PROJECT X MY Z))
			 (SETQ HNDL (LIST (+ X (// (CAR SIZE) 2))
			       (+ Y (// (CADR SIZE) 2))
			       (+ (CADDR SIZE) Z)))

	     (SETQ ENTRY (LIST NAME
			       (LIST (LIST V1 V2 Y Z)
				     (LIST V2 V3 MY MX)
				     (LIST V3 V4 MY SX)
				     (LIST V4 V1 SY X)
				     (LIST V4 V2 SY SX))
			       (LIST (LIST V1 V5 MY X)
				     (LIST V5 V4 MY SX)
				     (LIST V5 V3 MY X))
			       NIL
			       NIL
			       (SETQ  ITM (DISCREATE (CAR V1) (CADR V1)))))
	     (SETQ GP-LINES (CONS ENTRY (DELQ (ASSQ NAME GP-LINES) GP-LINES)))

(SETQ V1 (LIST (1+ (CAR V1)) (1+ (CADR V1)))
      V2 (LIST (1- (CAR V2)) (1+ (CADR V2)))
    V3 (LIST (- (CAR V3) 2) (1+ (CADR V3)))
      V4 (LIST (CAR V4) (1- (CADR V4))))
	     (SETQ ENTRY
		   (LIST NAME
			 (LIST (LIST V1 V2 (FUNCTION GP-P1) Y)
			       (LIST V2
				     V3
				     (FUNCTION GP-P2)
				     (CONS Y (CONS MX (GP-LINEQ (LIST V2 V3)))))
			       (LIST V3
				     V4
				     (FUNCTION GP-P3)
				     (CONS MY
					   (CONS SX (GP-LINEQ (LIST V3 V4)))))
			       (LIST V4
				     V1
				     (FUNCTION GP-P4)
				     (CONS Y (CONS X (GP-LINEQ (LIST V4 V1))))))
			 LOCATION
			 NIL
			 ITM
 HNDL  
			 SIZE))
	     (SETQ GP-SURFACE
		   (CONS ENTRY (DELQ (ASSQ NAME GP-SURFACE) GP-SURFACE)))))

(DEFUN GP-INITIAL
       NIL
       (DISINI (QUOTE 1))
       (DO P1 DISPLAY-AS (CDR P1) (NULL P1) (GP-SELECTSHAPE P1))
       (DO P1 GP-LINES (CDR P1) (NULL P1) (GP-OPAQUE (CAAR P1)))
       (DO P1 GP-LINES (CDR P1) (NULL P1) (DISPLAY (CADDDR (CDDAR P1)) T))
       (COND (GP-HANDIT (COND ((NOT (CADR GP-HANDIT)) NIL)
			      (T (GRASP (CADR GP-HANDIT))))))
       (COND (MAKE-VERBOSE (SUMMARIZE-SCENE))))



(DEFUN GP-REFRESH
       NIL
       (PROG (OLDGRASP OLDITEM NEWITEM ORIG SURF)
	     (SETQ OLDGRASP (CADR GP-HANDIT))
	     (COND (OLDGRASP (UNGRASP)))
	     (MAP (FUNCTION (LAMBDA (P)
				    (RPLACA (CDDDAR P) NIL)
				    (RPLACA (CDDDDR (CAR P)) NIL)
				    (SETQ SURF (ASSQ (CAAR P) GP-SURFACE))
				    (RPLACA (CDDDR SURF) NIL)))
		  GP-LINES)
	     (MAP (FUNCTION (LAMBDA (P)
				    (SETQ SURF (ASSQ (CAAR P) GP-SURFACE))
				    (SETQ ORIG
					  (GP-PROJECT (CAADDR SURF)
						      (CADR (CADDR SURF))
						      (CADDR (CADDR SURF))))
				    (SETQ NEWITEM
					  (DISCREATE (CAR ORIG) (CADR ORIG)))
				    (SETQ OLDITEM (CADDDR (CDR SURF)))
				    (RPLACA (CDR (CDDDDR (CAR P))) NEWITEM)
				    (RPLACA (CDDDDR SURF) NEWITEM)
				    (GP-OPAQUE (CAAR P))
				    (DISPLAY NEWITEM T)
				    (DISFLUSH OLDITEM)))
		  GP-LINES)
	     (COND (OLDGRASP (GRASP OLDGRASP)))
            (COND (MAKE-VERBOSE (SUMMARIZE-SCENE)))))

(DECLARE (SPECIAL SEG3))

(DEFUN GP-DRAWL
       (POINTS NAME)
       (PROG (LINE RLINE
		   ELEM
		   MINIX
		   MINIZ
		   MAXIX
		   MAXIZ
		   ORIGINB
		   SIZEB
		   BLOCKS
		   VERTX
		   SURF
		   INTER
		   OBOUND
		   BOUND1
		   RBOUND
		   SUR
		   RSUR
		   COUNTER
		   SEGS
		   RSEG
		   SEGMENT
		   SEG2
		   SEG3)
	     (COMMENT RETURNS A LIST OF OBJECTS HIDING PARTS OF "NAME")
	     (SETQ SURF
		   (ASSQ NAME GP-SURFACE)
		   RLINE
		   POINTS
		   SEGS
		   NIL
		   MINIZ
		   (+ (QUOTE 2) (CADDR (CADDR SURF)))
		   MINIX
		   (CAR (CADDR SURF))
		   BLOCKS
		   NIL)
	NEWLINE
	     (COND ((NULL RLINE) (GO NONEWLINE)))
	     (SETQ LINE (CAR RLINE) RLINE (CDR RLINE))
	     (SETQ RSUR
		   GP-SURFACE
		   SEGS
		   (COND ((NULL SEGS) (NCONS (CONS (CAR LINE) NIL)))
			 (T (NCONC SEGS (NCONS (CONS (CAR LINE) NIL))))))
	NEWSURF
	     (COND ((NULL RSUR) (GO NONEWSURF)))
	     (SETQ SUR (CAR RSUR) RSUR (CDR RSUR))
	     (COND ((CADDDR (ASSQ (CAR SUR) GP-LINES)) (GO NEWSURF)))
	     (COND ((EQUAL NAME (CAR SUR)) (GO NEWSURF)))
	     (SETQ ORIGINB
		   (CADDR SUR)
		   SIZEB
		   (CADDDR (CDDDR SUR))
		   MAXIZ
		   (+ (CADDR ORIGINB) (CADDR SIZEB))
		   MAXIX
		   (+ (CAR ORIGINB) (CAR SIZEB)))
	     (COND ((< MAXIZ MINIZ) (GO NEWSURF))
		   ((< MAXIX MINIX) (GO NEWSURF)))
	     (SETQ RBOUND (CADR SUR))
	     (SETQ OBOUND NIL)
	NEWBOUND
	     (COND ((NULL RBOUND) (GO NONEWBOUND)))
	     (SETQ BOUND1 (CAR RBOUND) RBOUND (CDR RBOUND))
	     (COND ((SETQ INTER (GP-INTERSECT LINE BOUND1))
		    (SETQ ELEM
			  (CONS INTER (funcall (CADDR BOUND1) (CADDDR BOUND1) LINE)))
		    (COND ((NOT (EQUAL (QUOTE 0) (CDR ELEM)))
			   (SETQ SEGS (NCONC SEGS (NCONS ELEM)))
			   (SETQ OBOUND T)))))
	     (GO NEWBOUND)
	NONEWBOUND
	     (COND (OBOUND (SETQ BLOCKS (CONS (CAR SUR) BLOCKS))))
	     (GO NEWSURF)
	NONEWSURF
	     (SETQ ELEM (CONS (CADR LINE) NIL))
	     (SETQ SEGS (NCONC SEGS (NCONS ELEM)))
	     (GO NEWLINE)
	NONEWLINE
	     (SETQ VERTX (NCONS NIL))
	     (SETQ COUNTER (QUOTE 0))
	     (SETQ RSEG SEGS)
	FIRSTPASS
	     (COND ((NULL RSEG) (GO SECONDPASS)))
	     (SETQ SEGMENT (CAR RSEG) RSEG (CDR RSEG))
	     (COND ((CDR SEGMENT) (SETQ COUNTER (+ COUNTER (CDR SEGMENT))))
		   ((SETQ SEG2 (ASSOC (CAR SEGMENT) VERTX))
		    (SETQ COUNTER (CDR SEG2)))
		   (T (SETQ VERTX
			    (NCONC VERTX
				   (NCONS (CONS (CAR SEGMENT) COUNTER))))))
	     (GO FIRSTPASS)
	SECONDPASS
	     (SETQ VERTX (CDR VERTX))
	     (SETQ SEGMENT (CAR VERTX) RSEG (CDR VERTX))
	PASS2(COND ((NULL RSEG) (GO THIRDPASS)))
	     (COND ((> (CDAR RSEG) (CDR SEGMENT)) (SETQ SEGMENT (CAR RSEG))))
	     (SETQ RSEG (CDR RSEG))
	     (GO PASS2)
	THIRDPASS
	     (SETQ RSEG SEGS)
	     (COND ((NULL RSEG) (GO FINAL)))
	     (SETQ SEG2 RSEG)
	     (SETQ SEG3 NIL)
	PASS3(GP-SORT (FUNCTION GP-SEGORDR) (FUNCTION GP-SEGEND) SEG2)
	     (COND ((NULL (CDR SEG3)) (GO FINAL)))
	     (SETQ SEG2 (CDR SEG3))
	     (GO PASS3)
	FINAL(SETQ ELEM (CADDDR (CDR SURF)))
	     (SETQ COUNTER NIL)
	     (DISPLAY ELEM NIL)
	     (SETQ INTER (CDR SEGMENT))
	FINPASS
	     (COND ((NULL RSEG) (GO FINISH)))
	     (SETQ SEG2 (CAR RSEG))
	     (SETQ RSEG (CDR RSEG))
	     (COND ((NULL (CDR SEG2))
		    (COND ((NULL COUNTER)
			   (SETQ COUNTER
				 (- (CDR (ASSOC (CAR SEG2) VERTX)) INTER))
			   (DISALINE ELEM (CAAR SEG2) (CADAR SEG2) (QUOTE 1)))
			  (T (DISALINE ELEM
				       (CAAR SEG2)
				       (CADAR SEG2)
				       (COND ((MINUSP COUNTER) (QUOTE 1))
					     (T (QUOTE -1))))
			     (SETQ COUNTER NIL))))
		   (T (DISALINE ELEM
				(CAAR SEG2)
				(CADAR SEG2)
				(COND ((MINUSP COUNTER) (QUOTE 1))
				      (T (QUOTE -1))))
		      (SETQ COUNTER (+ COUNTER (CDR SEG2)))))
	     (GO FINPASS)
	FINISH
	     (COND ((SETQ SEGS (ASSQ NAME DISPLAY-AS))
		    (DISCUSS ELEM
			     (CAAR SEGMENT)
			     (CADAR SEGMENT)
			     (CADDDR (CDDR SEGS)))))
	     (RETURN BLOCKS)))

(DECLARE (UNSPECIAL SEG3))



(DEFUN GP-SELECTSHAPE
 (P1)
 (PROG (H1 H2 H3 T1 T2 T3 T4)
 (COMMENT REGARDLESS OF WHAT DISPLAY-AS CALLS THE TABLE/, I CALL IT :TABLE)
       (COND ((SETQ H1 (ASSQ (CAAR P1) GP-LINES))
	      (DISFLUSH (CADDDR (CDDR H1)))))
       (COND ((EQ (CADDAR P1) (QUOTE !PYRAMID))
	      (GP-PYRAMID (CAAR P1) (CADDDR (CAR P1)) (CADDDR (CDAR P1))))
	     ((EQ (CADDAR P1) (QUOTE !BLOCK))
	      (GP-BLOCK (CAAR P1) (CADDDR (CAR P1)) (CADDDR (CDAR P1))))
	     ((EQ (CADDAR P1) (QUOTE !HAND))
	      (SETQ H1 (CAR (CDDDAR P1)))
	      (SETQ H3 (GP-PROJECT (CAR H1) (CADR H1) (CADDR H1)))
	      (SETQ H2 (DISCREATE (CAR H3) (CADR H3)))
	      (SETQ T4 (DISCREATE (CAR H3) (CADR H3)))
	      (DISET H2 (QUOTE -1) (QUOTE (10 1)))
	      (DISALINE T4 (CAR H3) (QUOTE 2000) (QUOTE -1))
	      (SETQ GP-HANDIT
		    (LIST H1
			  (COND (GP-HANDIT (CADR GP-HANDIT)
					   (DISFLUSH (CADDDR (CDR GP-HANDIT))))
				(T NIL))
			  H2
			  H3
			  T4)))
	     ((EQ (CADDAR P1) (QUOTE !BOX))
	      (GP-DRBOX (CAAR P1) (CADDDR (CAR P1)) (CADDDR (CDAR P1))))
	     ((EQ (CADDAR P1) (QUOTE !TABLE))
	      (SETQ T1
		    (LIST (QUOTE 0) (QUOTE 0))
		    T2
		    (GP-PROJECT (QUOTE 1207) (QUOTE -3) (QUOTE 0))
		    T3
		    (GP-PROJECT (QUOTE 1207) (QUOTE 1207) (QUOTE 0))
		    T4
		    (GP-PROJECT (QUOTE -3) (QUOTE 1207) (QUOTE 0)))
	      (SETQ H1 (LIST (QUOTE :TABLE)
			     (LIST (LIST T1 T2 (QUOTE -3) (QUOTE -3))
				   (LIST T2 T3 (QUOTE 1207) (QUOTE 1207))
				   (LIST T3 T4 (QUOTE 1207) (QUOTE -3))
				   (LIST T4 T1 (QUOTE 1207) (QUOTE -3)))
			     NIL
			     T
			     NIL
			     (SETQ H2 (DISCREATE (QUOTE 0) (QUOTE 0)))))
	      (SETQ GP-LINES
		    (CONS H1 (DELQ (ASSQ (QUOTE :TABLE) GP-LINES) GP-LINES)))
 

	      (SETQ H3 (LIST (QUOTE :TABLE)
			     NIL
			     (LIST (QUOTE 0) (QUOTE 0) (QUOTE 0))
			     NIL
			     H2
			     NIL
			     (LIST (QUOTE 1200) (QUOTE 1200) (QUOTE 0))))
	      (SETQ GP-SURFACE
		    (CONS H3
			  (DELQ (ASSQ (QUOTE :TABLE) GP-SURFACE) GP-SURFACE))))
	     (T (PRINT (LIST (QUOTE GRAPH)
			     (QUOTE OF)
			     (CAR P1)
			     (QUOTE UNKNOWN:)
			     (QUOTE ASSUME)
			     (QUOTE BLOCK)))
		(GP-BLOCK (CAAR P1) (CADDDR (CAR P1)) (CADDDR (CDAR P1)))))))

(DECLARE (SPECIAL TOP))

(DEFUN GP-SORT
       (FUN1 FUN2 TOP)
       (PROG (P1 P2 P3 P4 P5)
	     (COMMENT SET P1 TO BOTTOM)
	     (DO INDEX TOP (CDR INDEX) (funcall FUN2 INDEX) (SETQ P1 INDEX))
	INCRP2
	     (COMMENT SET P2)
	     (COND ((EQ P1 TOP) (RETURN TOP)))
	     (DO INDEX TOP (CDR INDEX) (EQ INDEX P1) (SETQ P2 INDEX))
	TOPTEST
	     (COND ((funcall FUN1 (CAR P2) (CAR P1)) (SETQ P1 P2) (GO INCRP2)))
	     (COMMENT REVERSE P1 AND P2)
	     (SETQ P3 P1)
	FALL (SETQ P4 (CDR P3))
	     (COND ((funcall FUN2 P4) (GO DEINS)))
	     (COND ((funcall FUN1 (CAR P4) (CAR P2)) (SETQ P3 P4) (GO FALL)))
	DEINS(COMMENT DELETE AND INSERT P2)
	     (COND ((EQ P2 TOP) (SETQ P5 NIL))
		   (T (DO INDEX TOP (CDR INDEX) (EQ INDEX P2) (SETQ P5 INDEX))))
	     (COND ((NULL P5) (SETQ TOP P1)) (T (RPLACD P5 P1)))
	     (RPLACD P2 P4)
	     (RPLACD P3 P2)
	     (SETQ P2 P5)
	     (COND ((NULL P2) (RETURN TOP)))
	     (GO TOPTEST)))

(DECLARE (SPECIAL SEG3))

(DEFUN GP-SEGEND (ARG1) (COND ((EQ ARG1 TOP) NIL)
			      ((NULL (CDAR ARG1)) (SETQ SEG3 ARG1) T)))

(DEFUN GP-SEGORDR
       (ARG1 ARG2)
       (AND (GP-BETWEEN (CAAR ARG2) (CAAR ARG1) (CAAAR SEG3))
	    (GP-BETWEEN (CADAR ARG2) (CADAR ARG1) (CADAAR SEG3))))

(DECLARE (UNSPECIAL TOP SEG3))


(DEFUN GP-DRBOX
       (NAME LOCATION SIZE)
       (PROG (V1 V2
		 V3
		 V4
  		 V5
		 V6
		 ENTRY
		 MY
		 MX
		 V7
		 V8
		 X
		 Y
		 Z
		 SX
		 SY
		 SZ
		 MZ
		 XS1
		 XS2
		 YS1
		 YS2
		 VS1
		 VS2
		 VS3
		 VS4
		 VS5)
	     (SETQ X
		   (CAR LOCATION)
		   Y
		   (CADR LOCATION)
		   Z
		   (CADDR LOCATION)
		   SX
		   (CAR SIZE)
		   SY
		   (CADR SIZE)
		   SZ
		   (CADDR SIZE)
		   MX
		   (+ X SX)
		   MY
		   (+ Y SY)
		   MZ
		   (+ Z SZ)
		   XS1
		   (+ X (QUOTE 10))
		   XS2
		   (+ MX (QUOTE -10))
		   YS1
		   (+ Y (QUOTE 10))
		   YS2
		   (+ MY (QUOTE -10))
		   V1
		   (GP-PROJECT X Y Z)
		   V2
		   (GP-PROJECT MX Y Z)
		   V3
		   (GP-PROJECT MX MY Z)
		   V4
		   (GP-PROJECT MX MY MZ)
		   V5
		   (GP-PROJECT X MY MZ)
		   V6
		   (GP-PROJECT X Y MZ)
		   V7
		   (GP-PROJECT MX Y MZ)
		   V8
		   (GP-PROJECT X MY Z)
		   VS1
		   (GP-PROJECT XS1 YS1 MZ)
		   VS2
		   (GP-PROJECT XS2 YS1 MZ)
		   VS3
		   (GP-PROJECT XS2 YS2 MZ)
		   VS4
		   (GP-PROJECT XS1 YS2 MZ)
		   VS5
		   (GP-INTERSECT (LIST VS1 VS2)
				 (LIST VS4 (GP-PROJECT XS1 YS2 Z))))
	     (COMMENT FOR
		      THE
		      PHYSICS
		      PORTION
		      OF
		      THE
		      DISPLAY
		      PACKAGE
		      THE
		      !BOX
		      CONSISTS
		      OF
		      FOUR
		      BLOCKS
		      "FRONT
		      "RIGHT-SIDE
		      "BACK
		      AND
		      "LEFT-SIDE)
	     (COND (PH-TURN-ON (PH-INIT (QUOTE :PH-BOX1)
					NIL
					LOCATION
					(LIST (- SX (QUOTE 10))
					      (QUOTE 10)
					      SX))
			       (PH-INIT (QUOTE :PH-BOX2)
					NIL
					(LIST XS2 Y Z)
					(LIST (QUOTE 10)
					      (- SY (QUOTE 10))
					      SZ))
			       (PH-INIT (QUOTE :PH-BOX3)
					NIL
					(LIST XS1 YS2 Z)
					(LIST (- SX (QUOTE 10))
					      (QUOTE 10)
					      SZ))
			       (PH-INIT (QUOTE :PH-BOX4)
					NIL
					(LIST X YS1 Z)
					(LIST (QUOTE 10)
					      (- SY (QUOTE 10))
					      SZ))))
	     (SETQ ENTRY (LIST NAME
			       (LIST (LIST V1 V2 Y X)
				     (LIST V2 V3 MY MX)
				     (LIST V3 V4 MY MX)
				     (LIST V4 V5 MY X)
				     (LIST V5 V6 MY X)
				     (LIST V6 V1 Y X)
				     (LIST V2 V7 Y MX)
				     (LIST V7 V4 MY MX)
				     (LIST V7 V6 Y X)
				     (LIST V6 VS1 YS1 X)
				     (LIST VS1 VS2 YS1 XS1)
				     (LIST VS2 VS3 YS2 XS2)
				     (LIST VS3 VS4 YS2 XS1)
				     (LIST VS4 VS1 YS2 XS1)
				     (LIST VS4 VS5 YS2 XS1))
			       (LIST (LIST V1 V8 MY X)
				     (LIST V8 V3 MY X)
				     (LIST V8 V5 MY X))
			       NIL
			       NIL
			       (SETQ SX (DISCREATE (CAR V1) (CADR V1)))))
	     (SETQ GP-LINES (CONS ENTRY (DELQ (ASSQ NAME GP-LINES) GP-LINES)))
	     (SETQ ENTRY
		   (LIST NAME
			 (LIST (LIST VS2
				     VS3
				     (FUNCTION GP-SP1)
				     (CONS YS1
					   (CONS XS2
						 (GP-LINEQ (LIST VS2 VS3)))))
			       (LIST VS1 VS2 (FUNCTION GP-B4) YS1)
			       (LIST V3 V4 (FUNCTION GP-B3) (LIST MY MX))
			       (LIST V5
				     V6
				     (FUNCTION GP-B5)
				     (CONS Y (CONS X (GP-LINEQ (LIST V5 V6)))))
			       (LIST V6 V1 (FUNCTION GP-B6) Y))
			 LOCATION
			 NIL
			 SX
			 (LIST (+ X (// (CAR SIZE) 2))
			       (+ Y (// (CADR SIZE) 2))
			       (+ (CADDR SIZE) Z))
			 SIZE))
	     (SETQ GP-SURFACE
		   (CONS ENTRY (DELQ (ASSQ NAME GP-SURFACE) GP-SURFACE)))))


(DEFUN GRASP
       (NAME)
       (PROG (LINE SURFACE)
	     (SETQ LINE (ASSQ NAME GP-LINES))
	     (SETQ SURFACE (ASSQ NAME GP-SURFACE))
	     (COND ((NOT LINE) (PRINT (QUOTE (THIS IS
						   NOT
						   AN
						   OBJECT
						   BUT
						   YOU
						   WANT
						   ME
						   TO
						   PICK
						   IT

						   UP????)))
	     (BREAK GRASP T)
			       (RETURN NIL)))
	     (COND ((CADR GP-HANDIT)
		    (PRINT (QUOTE (I AM ALREADY GRASPING SOMETHING)))
		    (BREAK GRASP T)
		    (COND ((CADR GP-HANDIT) (UNGRASP)))))
	     (GP-MOVEHAND (CADDDR (CDDR SURFACE)))
	     (GP-PROPOGATETRANS (APPEND (NCONS NAME) (CADDDR (CDR LINE))))
	     (DISLINK (CADDR GP-HANDIT) (CADDDR (CDDR LINE)) T)
	     (RPLACA (CDR GP-HANDIT) NAME)
            (COND (MAKE-VERBOSE (PRINT (LIST 'GRASPING NAME))))))

(DEFUN GP-MOVEHAND
       (LOCATION)
       (PROG (NEWLOC1 NEWLOC2 NEWLOC3 NEWLOC STP ITM)
	     (SETQ STP (CADDDR (CDR GP-HANDIT)))
	     (COND ((EQUAL LOCATION (CAR GP-HANDIT)) (RETURN NIL)))
	     (SETQ ITM
		   (CADDR GP-HANDIT)
		   NEWLOC1
		   (GP-PROJECT (CAAR GP-HANDIT) (CADAR GP-HANDIT) (QUOTE 1300))
		   NEWLOC2
		   (GP-PROJECT (CAAR GP-HANDIT) (CADR LOCATION) (QUOTE 1300))
		   NEWLOC3
		   (GP-PROJECT (CAR LOCATION) (CADR LOCATION) (QUOTE 1300))
		   NEWLOC
		   (GP-PROJECT (CAR LOCATION) (CADR LOCATION) (CADDR LOCATION)))
	     (GP-DISMOTION ITM (CAR NEWLOC1) (CADR NEWLOC1) STP)
	     (GP-DISMOTION ITM (CAR NEWLOC2) (CADR NEWLOC2) STP)
	     (GP-DISMOTION ITM (CAR NEWLOC3) (CADR NEWLOC3) STP)
	     (GP-DISMOTION ITM (CAR NEWLOC) (CADR NEWLOC) STP)
	     (RPLACA GP-HANDIT LOCATION)
(COND (MAKE-VERBOSE (PRINT (LIST '(HAND MOVED TO) LOCATION))))
(RETURN GP-HANDIT)))



(DEFUN GP-PROPOGATETRANS
 (LINES)
 (PROG (UNHIDE ITM1 ITM2 ITEM ITEMLST)
       (SETQ ITEMLST NIL)
       (COND ((NOT LINES) (RETURN NIL)))
       (MAP
	(FUNCTION
	 (LAMBDA (P)
		 (COND ((CAR (SETQ ITM1 (CDDDR (ASSQ (CAR P) GP-LINES))))
			(SETQ LINES (DELETE (CAR P) LINES)))
		       (T (RPLACA ITM1 T)
			  (SETQ UNHIDE
				(APPEND (CADR (SETQ ITM2
						    (CDDR (ASSQ (CAR P)
								GP-SURFACE))))
					UNHIDE))
			  (SETQ ITEM (GP-PROJECT (CAAR ITM2)
						 (CADAR ITM2)
						 (CADDAR ITM2)))
			  (SETQ ITEM (DISCREATE (CAR ITEM) (CADR ITEM)))
			  (RPLACA (CDDR ITM1) ITEM)
			  (SETQ ITM1 (CADDR ITM2))
			  (RPLACA (CDDR ITM2) ITEM)
			  (SETQ ITEMLST (CONS ITM1 ITEMLST))))))
	LINES)
       (SETQ UNHIDE (GP-SINGLE UNHIDE))
       (MAP (FUNCTION (LAMBDA (P)
			      (GP-TRANSPARENT (CAR P))
			      (GP-DISPLAY (CAR P))
			      (SETQ UNHIDE (DELETE (CAR P) UNHIDE))))
	    LINES)
       (COND (ITEMLST (MAP (FUNCTION (LAMBDA (P) (DISFLUSH (CAR P)))) ITEMLST)))
       (MAP (FUNCTION (LAMBDA (P) (GP-OPAQUE (CAR P)) (GP-DISPLAY (CAR P))))
	    UNHIDE)))

(DEFUN GP-SINGLE (L) (PROG ( P2)
			   (DO P1
			       L
			       (CDR P1)
			       (NULL P1)
			       (COND ((CAR P1)
				      (DO P2
					  (CDR P1)
					  (CDR P2)
					  (NULL P2)
					  (COND ((EQUAL (CAR P1) (CAR P2))
						 (RPLACA P2 NIL)))))))
			   (SETQ P2 NIL)
			   (DO P1
			       L
			       (CDR P1)
			       (NULL P1)
			       (COND ((NOT (CAR P1)) NIL)
				     (T (SETQ P2 (CONS (CAR P1) P2)))))
			   (RETURN P2)))

(DEFUN GP-DISPLAY (NAME) (DISPLAY (CADDDR (CDR (ASSQ NAME GP-SURFACE))) T))



(DEFUN  MOVETO
 (LOCX LOCY LOCZ) 
       (PROG (VSIZE LOCATION   HANDLOC POINTS NAME HIDING OBJECT)
(COMMENT MOVETO LOCATION ALWAYS REFERS TO ABSOLUTE LOCATION OF THE HAND  )
 (SETQ LOCATION (LIST LOCX LOCY LOCZ)) 

	     (COND ((NULL (CADR GP-HANDIT)) (GP-MOVEHAND LOCATION)
          (COND (MAKE-VERBOSE (PRINT (LIST '(EMPTY HAND MOVED TO) LOCATION))))
					    (RETURN NIL)))
	     (SETQ NAME (CADR GP-HANDIT))
	     (SETQ OBJECT (ASSQ NAME GP-SURFACE))
	     (SETQ VSIZE (CADDDR (CDDDR OBJECT)))
	     (GP-BLOCK (QUOTE :VIRTUAL) LOCATION (LIST (CAR VSIZE)
						       (CADR VSIZE)
						       (- (QUOTE 1000)
							  (CADDR VSIZE))))
	     (SETQ POINTS (ASSQ (QUOTE :VIRTUAL) GP-LINES))
	     (SETQ HIDING (GP-SINGLE (GP-DRAWL (CADR POINTS) (QUOTE :VIRTUAL))))
	     (COMMENT HIDING IS NOW A LIST OF BLOCKS)
	     (SETQ GP-LINES (DELQ (ASSQ (QUOTE :VIRTUAL) GP-LINES) GP-LINES))
	     (DISFLUSH (CADDDR (CDDR POINTS)))
	     (SETQ GP-SURFACE
		   (DELQ (ASSQ (QUOTE :VIRTUAL) GP-SURFACE) GP-SURFACE))
	     (COND (PH-TURN-ON (SETQ PH-BLOCKS
				     (DELQ (ASSQ (QUOTE :VIRTUAL) PH-BLOCKS)
					   PH-BLOCKS))))
	     (GP-PROPOGATETRANS HIDING)
	     (SETQ HANDLOC (LIST (- (CAR LOCATION) (// (CAR VSIZE) 2))
				 (- (CADR LOCATION) (// (CADR VSIZE) 2))
				 (- (CADDR LOCATION) (CADDR VSIZE))))
	     (GP-MOVEHAND LOCATION)
	     (COMMENT THERE
		      IS
		      NOW
		      A
		      DISAGREEMENT
		      BETWEEN
		      WHAT
		      GP-SURFACE
		      /--
		      LINES
		      SAY
		      THE
		      OBJECT
		      IS
		      LOCATED
		      AND
		      WHERE
		      THE
		      OBJECT
		      ACTUALLY
		      IS
		      40)
 (COND (MAKE-VERBOSE (PRINT (LIST '(HAND MOVED TO) 
  LOCATION '(WHILE HOLDING) (CAR OBJECT) '(WHICH IS NOW AT) HANDLOC))))
	     (SETQ GP-NEWOBLOCAT (LIST HANDLOC VSIZE))))


(DEFUN UNGRASP NIL (PROG ( ITEM  LINES NAME DISPLAYED)
			 (SETQ NAME (CADR GP-HANDIT))
  (COND (MAKE-VERBOSE (PRINT (LIST 'UNGRASP NAME))))
			 (COND ((NULL NAME)
				(PRINT (QUOTE (NOT GRASPING ANYTHING)))
				(RETURN NIL)))
			 (COND ((NULL GP-NEWOBLOCAT)
				(DISLINK (CADDR GP-HANDIT)
					 (CADDDR (CDDR (ASSOC NAME GP-LINES)))
					 NIL)
				(RPLACA (CDR GP-HANDIT) NIL)
				(RETURN NIL)))
			 (SETQ DISPLAYED (ASSQ NAME DISPLAY-AS))
			 (SETQ LINES (ASSQ NAME GP-LINES))
			 (SETQ DISPLAYED (LIST NAME
					       (QUOTE DISPLAY-AS)
					       (CADDR DISPLAYED)
					       (CAR GP-NEWOBLOCAT)
					       (CADR GP-NEWOBLOCAT)))
			 (SETQ ITEM (CADDDR (CDDR LINES)))
			 (DISLINK (CADDR GP-HANDIT) ITEM NIL)
			 (GP-SELECTSHAPE (NCONS DISPLAYED))
			 (GP-TRANSPARENT NAME)
			 (GP-DISPLAY NAME)
			 (RPLACA (CDR GP-HANDIT) NIL)
			 (SETQ GP-NEWOBLOCAT NIL)))


(DEFUN GP-DISMOTION
       (HND NX NY ARM)
       (PROG (OX OY DX DY SX SY FX FY ARM1)
	     (SETQ OX
		   (CAR (CADDDR GP-HANDIT))
		   OY
		   (CADR (CADDDR GP-HANDIT))
		   FX
		   T
		   ARM
		   (CADDDR (CDR GP-HANDIT))
		   DX
		   (- NX OX)
		   DY
		   (- NY OY)
		   FY
		   T
		   SX
		   (COND ((MINUSP DX) (QUOTE -20)) (T (QUOTE 20)))
		   SY
		   (COND ((MINUSP DY) (QUOTE -14)) (T (QUOTE 14))))
	     (DO ((INDX OX (COND (FX (+ INDX SX)) (T NX)))
		  (INDY OY (COND (FY (+ INDY SY)) (T NY))))
		 ((AND (NOT FX) (NOT FY)))
		 (COND ((LESSP (ABS (- NX INDX)) (QUOTE 20)) (SETQ FX NIL)))
		 (COND ((LESSP (ABS (- NY INDY)) (QUOTE 14)) (SETQ FY NIL)))
		 (SETQ ARM1 (DISCREATE INDX INDY))
		 (DISALINE ARM1 INDX (QUOTE 1730) (QUOTE -1))
		 (DISLOCATE HND INDX INDY)
		 (SLEEP '.06)
		 (DISFLUSH ARM)
		 (SETQ ARM ARM1))
	     (DISLOCATE HND NX NY)
	     (DISALINE ARM NX NY (QUOTE -1))
	     (SETQ GP-HANDIT (LIST (CAR GP-HANDIT)
				   (CADR GP-HANDIT)
				   HND
				   (LIST NX NY)
				   ARM))))





(DEFUN NO340 NIL 
 (PUTPROP (QUOTE DISCREATE )(FUNCTION (LAMBDA (A B ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISINI )(FUNCTION (LAMBDA (A ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISPLAY )(FUNCTION (LAMBDA (A B ) NIL)) 'EXPR)
 (PUTPROP (QUOTE  DISFLUSH )(FUNCTION (LAMBDA (A ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISLOCATE )(FUNCTION (LAMBDA (A B C ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISBLINK )(FUNCTION (LAMBDA (A B ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISCOPY )(FUNCTION (LAMBDA (A ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISMARK )(FUNCTION (LAMBDA (A B ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISCRIBE )(FUNCTION (LAMBDA (A ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISLINK )(FUNCTION (LAMBDA (A B C ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISCHANGE )(FUNCTION (LAMBDA (A B C ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISLIST )(FUNCTION (LAMBDA (A ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISET )(FUNCTION (LAMBDA (A B C ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISALINE )(FUNCTION (LAMBDA (A B C D ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISAPOINT )(FUNCTION (LAMBDA (A B C ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISCUSS )(FUNCTION (LAMBDA (A B C D ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISMOTION )(FUNCTION (LAMBDA (A B C D ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISGORGE )(FUNCTION (LAMBDA (A ) NIL)) 'EXPR)
 (PUTPROP (QUOTE DISGOBBLE )(FUNCTION (LAMBDA (A ) NIL)) 'EXPR)
 (PUTPROP (QUOTE GP-DRAWL )(FUNCTION (LAMBDA (A B ) NIL)) 'EXPR)
 (PUTPROP (QUOTE GP-SORT )(FUNCTION (LAMBDA (A ) NIL)) 'EXPR)
 (PUTPROP (QUOTE GP-SEGEND )(FUNCTION (LAMBDA (A ) NIL)) 'EXPR)
 (PUTPROP (QUOTE GP-SEGORDR) (FUNCTION (LAMBDA (A ) NIL)) 'EXPR)
(PUTPROP 'GP-DISPLAY (FUNCTION (LAMBDA (A) NIL)) 'EXPR)
(PUTPROP 'GP-DISMOTION (FUNCTION (LAMBDA (A B C D ) (SETQ GP-HANDIT 
   (LIST (CAR GP-HANDIT) (CADR GP-HANDIT) A (LIST B C) D)))) 'EXPR )

(PUTPROP 'GP-PROPOGATETRANS (FUNCTION (LAMBDA (A) NIL)) 'EXPR)
      )




(DEFUN SUMMARIZE-SCENE NIL
 (PROG (DESCP)
(PRINT '(SUMMARY OF SCENE))
(PRINT '(OBJECT COLOR SHAPE LOCATION SIZE HANDLE))
(MAPC (FUNCTION (LAMBDA (P)
 (PRINT (LIST (CAR P)
(CADDDR (SETQ DESCP (CDDR (ASSQ (CAR P) DISPLAY-AS))))
(CAR DESCP)
(CAR (SETQ DESCP (CDDR P)))
(CADR (SETQ DESCP (CDDDR DESCP)))
(CAR DESCP) ))))    GP-SURFACE)

(TERPRI)
(SETQ MAKE-VERBOSE T)
(PRINT (LIST '(HAND AT) (CAR GP-HANDIT) 'GRASPING  
   (SETQ DESCP (CADR GP-HANDIT)) (COND (DESCP 
  (LIST  '(WHICH IS AT) (COND (GP-NEWOBLOCAT (CAR GP-NEWOBLOCAT))
                         (T '(THE PLACE GIVEN ABOVE))) )))))
(TERPRI)
(PRINT (LIST '(THE TIME IS) (STATUS DATE) (STATUS DAYTIME)))))


(DEFUN PLOT-DISPLAY NIL
   (PLOTLIST (MAPCAR (FUNCTION (LAMBDA (N) (GET (DISGORGE N) 'ARRAY)))
     (DISLIST))))
