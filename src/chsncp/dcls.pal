	.sbttl	DECLARE macro

arpmac == 1			;defined for testing to see if this file
				;has already been included

r0 = %0
r1 = %1
r2 = %2
r3 = %3
r4 = %4
r5 = %5
sp = %6
pc = %7
fp == r5

.xcref r0,r1,r2,r3,r4,sp,pc

.macro	.block	name,sname
name'.ln == 0
	.macro	name	thing,bytes
	sname'.'thing == name'.ln
	name'.ln == name'.ln + <bytes>
	.endm
.endm

;;; This macro initializes an array of structures to specified values.
;;; It assumes r0 points to the array, r1 is the structure size and r2
;;; is the number of structure elements in the array.
;gensym===777
;.macro	blkini	prefix,values
;gensym===gensym+1
;	.irp	genstr,\gensym
;in'genstr:
;	.irp	assign,<values>
;	strini	prefix,assign		;do the initialization
;	.endm
;	add	r1,r0
;	sob	r2,in'genstr
;	.endm
;.endm
;
;.macro	strini	prefix,a
;	realsi	prefix,a
;.endm
;
;.macro	realsi	prefix,size,member,value
;	.if	eq value
;	.iif	idn size,b,	clrb	prefix'.'member(r0)
;	.iif	idn size,w,	clr	prefix'.'member(r0)
;	.iff
;	.iif	idn size,b,	movb	#value,prefix'.'member(r0)
;	.iif	idn size,w,	mov	#value,prefix'.'member(r0)
;	.endc
;.endm

.macro	cocall
	jsr	pc,resced
.endm

.macro	printn	str1,val,str2
	.print	/str1'val'str2
/
.endm

.macro	numelm	vbl,a,b,c,d,e,f,g,h,j,k,l,p,i,m,n,o,q,r,s,t,u,v,w,x,y,z
vbl===%narg-1
.endm


;prog=.
;.macro	gitto	size
;	.blkb	<<.-prog+size-1>/size*size>-<.-prog>
;.endm

.macro	makptr	ptr,offset,nptr
	mov	ptr,nptr
	add	#offset,nptr
.endm


.macro exch a,b,temp
	.ifnb temp
		mov a,temp
		mov b,a
		mov temp,b
	.iff
		mov a,-(sp)
		mov b,a
		mov (sp)+,b
	.endc
.endm

.macro	kcall subr
	jsr pc,subr
.endm

.macro	kretrn
	rts pc
.endm

.macro	jcall subr
	jmp subr
.endm

.macro	lock level
	mfps -(sp)		;push the processor state
	mtps #level*32.
.endm

.macro	unlock
	mtps (sp)+		;restore the processor status
.endm

;;; bit masks

;mask1===177776
;mask2===177774
;mask3===177770
;mask4===177760
;mask5===177740
;mask6===177700
;mask7===177600
;mask8===177400
;mask9===177000
;mask10===176000
;mask11===174000
;mask12===170000
;mask13===160000
;mask14===140000
;mask15===100000

	.sbttl	Calling Convention Macros: call, proc, return

.macro	call	subr,inargs,outargs
.if	nb	inargs			;if there are arguments.
	.irp	arg,<inargs>
	  .if idn  arg,#0
	  clr -(sp)
	  .iff
	  mov	arg,-(sp)
	  .endc
	.endr
.endc
	jsr	pc,subr
.if	nb outargs
	.irp	arg,<outargs>
	mov	(sp)+,arg
	.endr
.endc
.endm

.macro	proc	inargs,outargs,regs,temps
	numelm	nregs,regs
	numelm	ntemps,temps

.if	nb temps
	.irp	arg,<temps>
	arg==-2*<.irpcn+1>
	.endr
	.endc

.rept	inargs
	defoff	arg,\<.rpcnt+1>,\<2*<inargs-.rpcnt+1>>
	.endr

.rept	outarg
	defoff	out,\<outarg-.rpcnt>,\<-2*<ntemps+.rpcnt+1>>
	.endr

	.macro	popem

		.rept	nregs
		.if	nb regs
			.irp	reg,<regs>
				.iif eq .irpcn+1-nregs+.rpcnt, mov (sp)+,reg
			.endm
			.endc
		.endr
	.endm

.if ne  inargs+outargs+ntemps
	mov	r5,-(sp)		;push old frame pointer onto the stack
	mov	sp,r5			;set up the new frame pointer
sspace === 2*<outarg+ntemps>		;leave space for the outargs and temps
	.if ne sspace
	  .iif eq sspace-2,	tst -(sp)
	  .iif eq sspace-4,	cmp -(sp),-(sp)
	  .iif gt sspace-4,	sub #sspace,sp
	.endc
.endc
	.if nb regs
	  .irp reg,<regs>
		mov reg,-(sp)	;push the register
	  .endr
	.endc

nina===inargs				;number of input args for return macro
nouta===outarg				;ditto for output args
;%%retc===0
;%%rets===0
.endm

.macro	defoff	prefix,suffix,offset
prefix'suffix === offset
.endm

.macro	most_return
%clc===0			;carry not known to be clear
	popem
.iif eq nina+nouta+ntemps, .mexit
	mov	(r5),r5			;restore r5, old frame pointer

;;; This next thing, believe it or not moves the output arguments below
;;; the return address temporarily moving the return address if
;;; necessary because it would get bashed by one of the output arguments

.if lt <2*nina+ntemps+1>-nouta

	mov	2*<ntemps+nouta+1>(sp),-(sp)	;move the return address

	.rept	nouta
	mov	2*<nouta-.rpcnt>(sp),2*<ntemps+nouta+nina+2-.rpcnt>(sp)
	.endr

	mov	(sp)+,2*<ntemps+nina+1>(sp)	;move the return address on top
numpop==ntemps+nina+1

.iff

min===nouta-nina-ntemps-1
.iif lt min,	min===0
	.rept	min
	mov	2*<nouta-.rpcnt-1>(sp),2*<ntemps+nouta+nina+1-.rpcnt>(sp)
	.endr

nloc===2*<nina+ntemps+1>
oloc===2*<nouta+ntemps+1>
.iif ne	nloc-oloc,	mov	oloc(sp),nloc(sp)	;move return addr

	.rept	nouta-min
	mov	(sp)+,2*<ntemps+nina+1>(sp)
	.endr

numpop===ntemps+nina+1-nouta+min
.endc
.if ne numpop
	;; fix up sp
	.iif eq numpop-1,	tst (sp)+
	.iif eq numpop-2,	cmp (sp)+,(sp)+
	.iif gt numpop-2,	add #2*numpop,sp
	.iif ne numpop-2,	%clc===1	;TST and ADD cleared carry!!!
.endc
.endm

.macro	return
;.if ne %%retc
;  .iif le <.-%%retc>-376,	br %%retc
;  .ielse			jmp %%retc
;  %%reth==.
;  .mexit
;.endc
;%%retc===.
	most_return
.iif eq %clc,	clc
	rts	pc
.endm

.macro	rtnerr
;.if ne %%rets
;  .iif le <.-%%rets>-376,	br %%rets
;  .ielse			jmp %%rets
;  .mexit
;.endc
;%%rets===.
	most_return
	sec
	rts	pc
.endm
