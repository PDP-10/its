	.sbttl	System Tables

.=1000
	mtps #340		; start at high priority
	mov #1000,sp		; and make sure we have a stack
	jmp init		; then really start

	.csect	systab

	.irp loc,\.
	.print /Systab = loc
/
	.endr

systab:

	.if	df .mglbl
	.globl	k.attc,k.atid,k.rchn,k.watc,trfint
	.globl	k.jobs,k.idle,k.trfl,w.iowt
	.globl	timclk,timhi,timlo,chrsin,chrsil,chrsot,chrsol
	.globl	chrsih,chrsoh,outcpu
	.globl	kbintv,kbinbr,printv
	.globl	frecnt,watcnt,actcnt,totjbs,trfcnt
	.globl	otactb,otrt1b,otrt1c
	.globl	active,actid
	.endc

k.attc = 1	;ID in TCB bad, chain bad or bug in list handle
k.atid = 2	;ACTIVE ID not valid, system tables bad
k.rchn = 3	;chain bombed, or looped in run queue
k.watc = 4	;chain bombed, or looped in wait queue
k.jobs = 5	;no job slots for urgent task, OVERLOAD!
k.idle = 6	;undefined idle task
k.ftal = 7	;some random fault while in the system (mem, inst, etc)
k.trfl = 8.	;LOCK on scheduler did not work!, someone CHEATED!
i.atid = 9.

w.iowt = -2	;code for IO wait
x.iowt = 150.	;ticks before rechecking IO

otactb = 1
otrt1b = 2
otrt1c = 4

trfinv = 2		;scheduler inteval (standard)
trfint:	.blkw	1	;one actually used
trfclk:	.blkw	1	;scheduler clock; next quantum when zero

timclk:		;system clock
timhi:	.blkw	1
timlo:	.blkw	1
cpuclk:	.blkw	1	;cpu time charged between scheduler calls
relclk:	.blkw	1	;real time between scheduler calls

chrsin:		;chars input
chrsih:	.blkw	1
chrsil:	.blkw	1
chrsot:		;chars output
chrsoh:	.blkw	1
chrsol:	.blkw	1

kbintv:	.blkw	1
kbinbr:	.blkw	1
printv:	.blkw	1

mxjobs=30.		;max number of job slots allocated
active:	.blkw	1	;id of the active task (ptr to TCB)
actid:	.blkw	1	;index of active job -- JOBLST(ACTID) = ACTIVE
fretcb:	.blkw	1	;chain of unused free tcb's
frecnt:	.blkw	1	;count of blocks on this chain
waitch:	.blkw	1	;chain of task who are waiting for something
watcnt:	.blkw	1	;count of blocks on this chain
chain:	.blkw	1	;runq
actcnt:	.blkw	1	;count of active running jobs
chaind:	.blkw	1	;end of run queue
totjbs:	.blkw	1	;count of jobs started
trfcnt:	.blkw	1	;count of scheduler runs

chgcpu:	.blkw	1	;charged cPu time
idlcpu:	.blkw	1	;idle cpu time
trfcpu:	.blkw	1	;time in scheduler
outcpu:	.blkw	1	;time in char sender

joblst:	.blkw	mxjobs	;array of ptrs to TCB's

idlflg:	.blkw	1	;toggle for double buffered idle lists
idlstt:	.blkw	2	;start of lists
idlmax:	.blkw	2	;ptr to end of lists
idlcnt:	.blkw	2	;ptr to place in lists
idlovl:	.blkw	1	;count of overloads
idllse:	.blkw	1	;count of no TCBs
idlwin:	.blkw	1	;count of tasks started from idle
idllen=10.		;length of idle task lists
idlls0:	.blkb	idllen+2
idlls1:	.blkb	idllen+2

.=systab+2000
idle:		;TCB for idle process
	.blkb	mxjobs*tcb.ln
;
	.page
	.sbttl	TS Data Bases
	.nlist	ttm
	.nlist

.macro	.block	name,sname
name'.ln = 0
.iif df .mglbl,	.globl	name'.ln
	.macro	name	thing,bytes
	.if df thing'.ln
.iif df .mglbl,	.globl	sname'.'bytes
		sname'.'bytes = name'.ln
		name'.ln = name'.ln + thing'.ln
	.iff
.iif df .mglbl,	.globl	sname'.'thing
		sname'.'thing = name'.ln
		name'.ln = name'.ln + <bytes>
	.endc
	.endm
.endm

.macro	$exit
	trap	3
.endm
.macro	$task
	trap	2
.endm
.macro	$wait
	trap	4
.endm
.macro	$rsum
	trap	5
.endm
.macro	$susp
	trap	7
.endm

	.enabl	lc
	.list

;  These data blocks are for the traffic controller
;	to control tasks and stuff

; TCB - Task Control Block
	.block	tcb,tc
	tcb	urg,16.		;reg save area
	tcb	jid,2		;job ID, as indx into joblst gives addr(TCB)
	tcb	ste,2		;stack warn limit
	tcb	stk,100.	;stack area for task
	tcb	gar,2		;stack guard work for pop check
	tcb	nxt,2		;chain to next task blk
	tcb	wqu,2		;ptr to wait queue to use (on wait call)
	tcb	stt,2		;status of task
	tcb	use,2		;PS for task
	tcb	wat,2		;wait code: >0 for timer, <0 for wakeup
	tcb	wtm,2		;time spent in wait queue
	tcb	chg,2		;ptr to accounting word

;  BUF - IO Buffer Block
	.block	buf,bf
	buf	tsk,2		;task id to wake up (if any)
	buf	brk,2		;character to wake task on
	buf	wct,2		;nbr of chars before waking task
	buf	siz,2		;size of buffer in bytes
	buf	cnt,2		;nbr of chars in buffer
	buf	fst,2		;ptr to before first char in buf
	buf	lst,2		;ptr to before last chr in buf (=FST if none)
	buf	ben,2		;ptr to end of buffer
	buf	adr,2		;addr of device
	buf	hdl,2		;adr of output handler
	buf	inp,2		; source of stuff
	buf	dta,2		;data block ptr for special device info
	buf	flg,2		;control flags
	buf	bfp,2		;holder for entire buffer area

	.page
	.list
