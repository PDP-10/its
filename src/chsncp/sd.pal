;This is an absolute loader that loads a funny kind of BIN file.  Each
;block in the BIN file must have an even number of bytes and the checksum
;must be followed by a null byte so that the next block begins on a word
;boundary

drvcsr=177100
drvtdb=drvcsr+2
drvrdb=drvcsr+4

drvpdl=100

drvtab:	1,drvsiz,200		;header,size,starting load address
drvgo:	mov #drvpdl,sp
	mov #drvcsr,r0
	clr (r0)		;clear csr
	mov r0,r1
	cmp (r1)+,(r1)+		;advance pointer to read buffer
	tst (r1)		;reference read buffer to clear it out
	mov #1000,r2
	mov #<70000-400>,r3	;div by two done by hand to avoid minus lossage
4$:	clr (r2)+
	sob r3,4$
5$:	jsr pc,drvrdw
	cmp r2,#1
	bne 5$
	mov #1,r5		;checksum
	jsr pc,drvrdw
	mov r2,r3		;byte count
	bit #1,r3
	beq 1$
	halt
1$:	jsr pc,drvrdw
	mov r2,r4		;address
	bit #1,r4
	beq 2$
	halt
2$:	sub #6,r3		;remaining byte count
	beq drvstb		;branch if start block
	clc
	ror r3			;convert to word count
3$:	tst (r0)
	bpl 3$
	mov (r1),r2		;get next word
	mov r2,(r4)+		;store wherever
	add r2,r5
	swab r2
	add r2,r5
	sob r3,3$
	jsr pc,drvrdw		;read checksum
	tstb r5			;test checksum
	beq 5$			;ok, get another block
drverr:	halt

drvstb:	jsr pc,drvrdw		;read checksum
	tstb r5			;test checksum
	bne drverr
	jmp (r4)

drvrdw:	tst (r0)		;wait for a word
	bpl drvrdw
	mov (r1),r2
	add r2,r5
	swab r2
	add r2,r5
	swab r2
	rts pc
drvsiz=.-drvtab
drvend:	0
	1,6,200			;header,count,start address
drven2:
