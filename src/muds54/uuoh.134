TITLE UUO HANDLER FOR MUDDLE AND HYDRA
RELOCATABLE
.INSRT MUDDLE >

;GLOBALS FOR THIS PROGRAM

.GLOBAL BACKTR,PRINT,PDLBUF,TPGROW,SPECSTO,TIMOUT,AGC,VECBOT,VECTOP
.GLOBAL BCKTRK,TPOVFL,.MONWR,.MONRD,.MONEX,MAKACT,IGVAL,ILVAL,BFRAME
.GLOBAL FLGSET,QMPOPJ,SAVM,STBL,FMPOPJ,PVSTOR,SPSTOR,POPUNW,RMCALL,NSPOPJ
.GLOBAL PURTOP,PURBOT,PLOAD,PURVEC,STOSTR,MSGTYP,UUOH,ILLUUO,RSTACK,IBLOCK

;SETUP UUO DISPATCH TABLE HERE

UUOTBL:	ILLUUO

IRP UUOS,,[[DP,DODP],[.MCALL,DMCALL],[.ACALL,DACALL],[.ECALL,DECALL],[.SAVAC,DSAVAC]
[.FATAL,DFATAL],[.ERRUU,DOERR],[.POPUN,DPOPUN]]
UUFOO==.IRPCNT+1
IRP UUO,DISP,[UUOS]
.GLOBAL UUO
UUO=UUFOO_33
DISP
.ISTOP
TERMIN
TERMIN

REPEAT 100-UUFOO,[ILLUUO
]


RMT [
IMPURE

UUOH:
LOC 41
	JSR	UUOH
LOC UUOH
	0
	JRST	UUOPUR		;GO TO PURE CODE FOR THIS

SAVEC:	0			; USED TO SAVE WORKING AC
NOLINK:	0

PURE
]

;SEPARATION OF PURE FROM IMPURE CODE HERE

UUOPUR:	MOVEM	C,SAVEC		; SAVE AC
	LDB	C,[330900,,40]
	JRST	@UUOTBL(C)	;DISPATCH BASED ON THE UUO



ILLUUO:	FATAL ILLEGAL UUO
;CALL HANDLER

MQUOTE CALLER
CALLER:

DMCALL":
	SETZB	D,R		; FLAG NOT ENTRY CALL
	LDB	C,[270400,,40]	; GET AC FIELD OF UUO
COMCAL:	LSH	C,1		; TIMES 2
	MOVN	AB,C		; GET NEGATED # OF ARGS
	HRLI	C,(C)		; TO BOTH SIDES
	SUBM	TP,C		; NOW HAVE TP TO SAVE
	MOVEM	C,TPSAV(TB)	; SAVE IT
	MOVSI	AB,(AB)		; BUILD THE AB POINTER
	HRRI	AB,1(C)		; POINT TO ARGS
	HRRZ	C,UUOH		; GET PC OF CALL
	CAIGE	C,HIBOT		; SKIP IF IN GC SPACE
	SKIPE	SAVM
	JRST	.+3
	SUBI	C,(M)		; RELATIVIZE THE PC
	HRLI	C,M		; FOR RETURNER TO WIN
	MOVEM	C,PCSAV(TB)	; XXX patched
	MOVE	SP,SPSTOR+1
	MOVEM	SP,SPSAV(TB)	; SAVE BINDING GOODIE
	MOVSI	C,TENTRY	; SET UP ENTRY WORD
	HRR	C,40		; POINT TO CALLED SR
	ADD	TP,[FRAMLN,,FRAMLN]	; ALLOCATE NEW FRAME
	JUMPGE	TP,TPLOSE
CALDON:	MOVEM	C,FSAV+1(TP)	; CLOBBER THE FRAME
	MOVEM	TB,OTBSAV+1(TP)
	MOVEM	AB,ABSAV+1(TP)	; FRAME BUILT
	MOVEM	P,PSAV(TB)
	HRRI	TB,(TP)		; SETUP NEW TB
	MOVEI	C,(C)
	SETZB	M,SAVM		; ZERO M AND SAVM FOR GC WINNAGE
	CAILE	C,HIBOT		; SKIP IF RSUBR
	JRST	CALLS
	GETYP	A,(C)		; GET CONTENTS OF SLOT
	JUMPN	D,EVCALL	; EVAL CALLING ENTRY ?
	CAIE	A,TRSUBR	; RSUBR CALLING RSUBR ?
	JRST	RCHECK		; NO
	MOVE	R,(C)+1		; YES, SETUP R
CALLR0:	HRRM	R,FSAV+1(TB)	; FIXUP THE PROPER FSAV

CALLR1:	SKIPL	M,(R)+1		; SETUP M
	JRST	SETUPM		; JUMP IF A PURE RSUBR IN QUESTION
	AOBJP	TB,.+1		; GO TO CALLED RSUBR
	INTGO			; CHECK FOR INTERRUPTS
	JRST	(M)

CALLS:	AOBJP	TB,.+1		; GO TO CALLED SUBR
	INTGO			; CHECK FOR INTERRUPTS
	JRST	@C

; HERE TO HANDLE A PURE RSUBR (LOAD IF PUNTED OR OTHERWISE FLUSHED)

SETUPM:	MOVEI	C,0		; OFFSET (FOR MAIN ENTRIES)
STUPM1:	MOVEI	D,(M)		; GET OFFSET INTO  CODE
	HLRS	M		; GET VECTOR OFFSET IN BOTH HALVES
	ADD	M,PURVEC+1	; GET IT
	SKIPL	M
	FATAL	LOSING PURE RSUBR POINTER
	HLLM	TB,2(M)		; MARK FOR LRU ALGORITHM
	SKIPN	M,1(M)		; POINT TO CORE IF LOADED
	AOJA	TB,STUPM2	; GO LOAD IT
STUPM3:	ADDI	M,(D)		; POINT TO REAL THING
	HRLI	C,M		; POINT TO START PC
	AOBJP	TB,.+1
	INTGO
	JRST	@C		; GO TO IT

STUPM2:	HLRZ	A,1(R)		; SET UP TO CALL LOADER
	PUSH	P,D
	PUSH	P,C
	PUSHJ	P,PLOAD		; LOAD IT
	JRST	PCANT1
	POP	P,C
	POP	P,D
	MOVE	M,B		; GET LOCATION
	SOJA	TB,STUPM3

RCHECK:	CAIN	A,TPCODE	; PURE RSUBR?
	JRST	.+3
	CAIE	A,TCODE		; EVALUATOR CALLING RSUBR ?
	JRST	SCHECK		; NO
	MOVS	R,(C)		; YES, SETUP R
	HRRI	R,(C)
	JRST	CALLR1		; GO FINISH THE RSUBR CALL


SCHECK:	CAIE	A,TSUBR		; RSUBR CALLING SUBR AS REFERENCE ?
	CAIN	A,TFSUBR
	SKIPA	C,(C)+1		; SKIP AND GET ROUTINE'S ADDRESS
	JRST	ECHECK
	HRRM	C,FSAV+1(TB)	; FIXUP THE PROPER FSAV
	JRST	CALLS		; GO FINISH THE SUBR CALL

ECHECK:	CAIE	A,TENTER	; SKIP IF SUB ENTRY OF RSUBR
	JRST	ACHECK		; COULD BE EVAL CALLING ONE
	MOVE	C,1(C)		; POINT TO SUB ENTRY BLOCK
ECHCK3:	GETYP	A,(C)		; SEE IF LINKED TO ITS MAIN ENTRY
	MOVE	B,1(C)
	CAIN	A,TRSUBR
	JRST	ECHCK2

; CHECK IF CAN LINK ATOM

	CAIE	A,TATOM
	JRST	BENTRY		; LOSER , COMPLAIN
ECHCK4:	MOVE	B,1(C)		; GET ATOM
	PUSH	TP,$TVEC
	PUSH	TP,C
	PUSHJ	P,IGVAL		; TRY GLOBAL VALUE
	HRRZ	C,(TP)
	SUB	TP,[2,,2]
	GETYP	0,A
	CAIN	0,TUNBOU
	JRST	BADVAL
	CAIE	0,TRSUBR	; IS IT A WINNER
	JRST	BENTRY
	CAMGE	C,PURTOP	; DONT TRY TO SMASH PURE
	SKIPE	NOLINK
	JRST	ECHCK2
	HLLM	A,(C)		; FIXUP LINKAGE
	MOVEM	B,1(C)
	JRST	ECHCK2

EVCALL:	CAIN	A,TATOM		; EVAL CALLING ENTRY?
	JRST	ECHCK4		; COULD BE MUST FIXUP
	CAIE	A,TRSUBR	; YES THIS IS ONE
	JRST	BENTRY
	MOVE	B,1(C)
ECHCK2:	MOVE	R,B		; SET UP R
	HRRM	C,FSAV+1(TB)	; SET POINTER INTO FRAME
	HRRZ	C,2(C)		; FIND OFFSET INTO SAME
	SKIPL	M,1(R)		; POINT TO START OF RSUBR
	JRST	STUPM1		; JUMP IF A LOSER
	HRLI	C,M
	JRST	CALLS		; GO TO SR

ACHECK:	CAIE	A,TATOM		; RSUBR CALLING THROUGH REFERENCE ATOM ?
	JRST	DOAPP3		; TRY APPLYING IT
	MOVE	A,(C)
	MOVE	B,(C)+1
	PUSHJ	P,IGVAL
	HRRZ	C,40		; REGOBBLE POINTER TO SLOT
	GETYP	0,A		; GET TYPE
	CAIN	0,TUNBOUND
	JRST	TRYLCL
SAVEIT:	CAIE	0,TRSUBR
	CAIN	0,TENTER
	JRST	SAVEI1		; WINNER
	CAIE	0,TSUBR
	CAIN	0,TFSUBR
	JRST	SUBRIT
	JRST	BADVAL		; SOMETHING STRANGE
SAVEI1:	CAMGE	C,PURTOP	; SKIP IF PURE RSUBR VECTOR (NEVER LINKED)
	SKIPE	NOLINK
	JRST	.+3
	MOVEM	A,(C)		; CLOBBER NEW VALUE
	MOVEM	B,(C)+1
	CAIN	0,TENTER
	JRST	ENTRIT		; HACK ENTRY TO SUB RSUBR
	MOVE	R,B		; SETUP R
	JRST	CALLR0		; GO FINISH THE RSUBR CALL

ENTRIT:	MOVE	C,B
	JRST	ECHCK3

SUBRIT:	CAMGE	C,PURBOT
	SKIPE	NOLINK
	JRST	.+3
	MOVEM	A,(C)
	MOVEM	B,1(C)
	HRRM	B,FSAV+1(TB)	; FIXUP THE PROPER FSAV
	MOVEI	C,(B)
	JRST	CALLS		; GO FINISH THE SUBR CALL

TRYLCL:	MOVE	A,(C)
	MOVE	B,(C)+1
	PUSHJ	P,ILVAL
	GETYP	0,A
	CAIE	0,TUNBOUND
	JRST	SAVEIT
	SKIPA	D,EQUOTE UNBOUND-VARIABLE
BADVAL:	MOVEI	D,0
ERCAL:	AOBJP	TB,.+1		; MAKE TB A LIGIT FRAME PNTR
	MOVEI	E,CALLER
	HRRM	E,FSAV(TB)	; SET A WINNING FSAV
	HRRZ	C,40		; REGOBBLE POINTER TO SLOT
	JUMPE	D,DOAPPL
	PUSH	TP,$TATOM
	PUSH	TP,D
	PUSH	TP,(C)
	PUSH	TP,(C)+1
	PUSH	TP,$TATOM
	PUSH	TP,MQUOTE CALLER
	MCALL	3,ERROR
	GETYP	0,A
	MOVEI	C,-1
	SOJA	TB,SAVEIT

BENTRY:	MOVE	D,EQUOTE BAD-ENTRY-BLOCK
	JRST	ERCAL

;HANDLER FOR CALL WHERE SPECIFIES NUMBER OF ARGS

DACALL":
	LDB	C,[270400,,40]	; GOBBLE THE AC LOCN INTO C
	EXCH	C,SAVEC		; C TO SAVE LOC RESTORE C
	MOVE	C,@SAVEC	; C NOW HAS NUMBER OF ARGS
	MOVEI	D,0		; FLAG NOT E CALL
	JRST	COMCAL		; JOIN MCALL

; CALL TO ENTRY FROM EVAL (LIKE ACALL)

DECALL:		LDB	C,[270400,,40]	; GET NAME OF AC
	EXCH	C,SAVEC		; STORE NAME
	MOVE	C,@SAVEC	; C NOW HAS NUM OF ARGS
	MOVEI	D,1		; FLAG THIS
	JRST	COMCAL

;HANDLE OVERFLOW IN THE TP

TPLOSE:	PUSHJ	P,TPOVFL
	JRST	CALDON

; RSUBR HAS POSSIBLY BEEN REPLACED BY A FUNCTION OR WHATEVER, DO AN APPLY

DOAPPL:	PUSH	TP,A		; PUSH THE THING TO APPLY
	PUSH	TP,B
	MOVEI	A,1
DOAPP2:	JUMPGE	AB,DOAPP1	; ARGS DONE

	PUSH	TP,(AB)
	PUSH	TP,1(AB)
	ADD	AB,[2,,2]
	AOJA	A,DOAPP2

DOAPP1:	ACALL	A,APPLY		; APPLY THE LOSER
	JRST	FINIS

DOAPP3:	MOVE	A,(C)		; GET VAL
	MOVE	B,1(C)
	JRST	BADVAL		; GET SETUP FOR APPLY CALL

; ENTRY TO BUILD A FRAME (USED BY SOME COMPILED PROG/REPEAT)

BFRAME:	HRLI	A,400000+M	; RELATIVIZE PC - XXX patched
	MOVEM	A,PCSAV(TB)	; CLOBBER PC IN
	MOVEM	TP,TPSAV(TB)	; SAVE STATE
	MOVE	SP,SPSTOR+1
	MOVEM	SP,SPSAV(TB)
	ADD	TP,[FRAMLN,,FRAMLN]
	SKIPL	TP
	PUSHJ	TPOVFL	; HACK BLOWN PDL
	MOVSI	A,TCBLK		; FUNNY FRAME
	HRRI	A,(R)
	MOVEM	A,FSAV+1(TP)	; CLOBBER
	MOVEM	TB,OTBSAV+1(TP)
	MOVEM	AB,ABSAV+1(TP)
	POP	P,A		; RET ADDR TO A
	MOVEM	P,PSAV(TB)
	HRRI	TB,(TP)
	AOBJN	TB,.+1
	JRST	(A)
;SUBROUTINE TERMINATION CODE (NOT A UUO BUT HERE FOR COMPLETENENSS)

FINIS:
CNTIN1:	HRRZS	C,OTBSAV(TB)	; RESTORE BASE
	HRRI	TB,(C)
CONTIN:	MOVE	TP,TPSAV(TB)	; START HERE FOR FUNNY RESTART
	MOVE	P,PSAV(TB)
	MOVE	SP,SPSTOR+1
	CAME	SP,SPSAV(TB)	; ANY RESTORATION NEEDED
	PUSHJ	P,SPECSTO	; YES, GO UNRAVEL THE WORLDS BINDINGS
	MOVE	AB,ABSAV(TB)	; AND GET OLD ARG POINTER
	HRRZ	C,FSAV(TB)	; CHECK FOR RSUBR
	MOVEI	M,0		; UNSETUP M FOR GC WINNAGE
	CAILE	C,HIBOT		; SKIP IF ANY FLAVOR OF RSUBR
	JRST	@PCSAV(TB)	; AND RETURN
	GETYP	0,(C)		; RETURN TO MAIN OR SUB ENTRY?
	CAIN	0,TCODE
	JRST	.+3
	CAIE	0,TPCODE
	JRST	FINIS1
	MOVS	R,(C)
	HRRI	R,(C)		; RESET R
	SKIPGE	M,1(R)		; GET LOC OF REAL SUBR
	JRST	PCREST
	JRST	FINIS2

FINIS1:	CAIE	0,TRSUBR
	JRST	FINISA		; MAY HAVE BEEN PUT BACK TO ATOM
	MOVE	R,1(C)
FINIS9:	SKIPGE	M,1(R)
	JRST	PCREST

FINIS2:	MOVEI	C,(M)		; COMPUTE REAL M FOR PURE RSUBR
	HLRS	M
	ADD	M,PURVEC+1
	SKIPN	M,1(M)		; SKIP IF LOADED
	JRST	FINIS3
	ADDI	M,(C)		; POINT TO SUB PART
PCREST:	HLRZ	0,PCSAV(TB)
	JUMPN	@PCSAV(TB)
	JFCL			; XXX patched - don't know original
	JFCL			; XXX patched
	JFCL			; XXX patched
	MOVEM	M,SAVM
	MOVEI	M,0
	JRST	@PCSAV(TB)
	JRST	PCREST

FINIS3:	PUSH	TP,A
	PUSH	TP,B
	HLRZ	A,1(R)		; RELOAD IT
	PUSHJ	P,PLOAD
	JRST	PCANT
	POP	TP,B
	POP	TP,A
	MOVE	M,1(R)
	JRST	FINIS2

FINISA:	CAIE	0,TATOM
	JRST	BADENT
	PUSH	TP,A
	PUSH	TP,B
	PUSH	TP,$TENTER
	HRL	C,(C)
	PUSH	TP,C
	MOVE	B,1(C)		; GET ATOM
	PUSHJ	P,IGVAL		; GET VAL
	GETYP	0,A
	CAIE	0,TRSUBR
	JRST	BADENT
	HRRZ	C,(TP)
	MOVE	R,B
	CAMLE	C,PURTOP	; SKIP IF CAN LINK UP
	JRST	.+3
	HLLM	A,(C)
	MOVEM	B,1(C)
	MOVE	A,-3(TP)
	MOVE	B,-2(TP)
	SUB	TP,[4,,4]
	JRST	FINIS9

BADENT:	ERRUUO	EQUOTE RSUBR-ENTRY-UNLINKED

PCANT1:	ADD	TB,[1,,]
PCANT:	ERRUUO	EQUOTE PURE-LOAD-FAILURE
	
REPEAT 0,[
BCKTR1:	PUSH	TP,A		; SAVE VALUE TO BE RETURNED
	PUSH	TP,B		; SAVE FRAME ON PP
	PUSHJ	P,BCKTRK
	POP	TP,B
	POP	TP,A
	JRST	CNTIN1
]

; SUBR TO ENABLE AND DISABLE LINKING OF RSUBRS AT RUN TIME

MFUNCTION %RLINK,SUBR,[RSUBR-LINK]

	ENTRY

	HRROI	E,NOLINK
	JRST	FLGSET

;HANDLER FOR DEBUGGING CALL TO PRINT

DODP":
	PUSH	TP, @40
	AOS	40
	PUSH	TP,@40
	PUSH P,0
	PUSH P,1
	PUSH	P,2
	PUSH	P,SAVEC
	PUSH P,4
	PUSH P,5
	PUSH P,40
	PUSH	P,UUOH
	MCALL	1,PRINT
	POP	P,UUOH
	POP P,40
	POP P,5
	POP P,4
	POP P,3
	POP P,2
	POP P,1
	POP P,0
	JRST	2,@UUOH


DFATAL:	MOVEM	A,20
	MOVEM	B,21
	MOVE	B,40
	HRLI	B,440700
	PUSHJ	P,MSGTYP
	JRST	4,.

REPEAT 0,[
; QUICK CALL HANDLER

DQCALL:	GETYP	C,@40		; SEE IF THIS GUY IS A QRSUBR OR QENT
	CAIN	C,TQENT
	JRST	DQCALE
	CAIN	C,TQRSUB
	JRST	DQCALR

; NOT A QENT OR QRSUBR, MAYBE AN ATOM THAT LINKS TO ONE

	SKIPN	NOLINK
	CAIE	C,TATOM		; SKIP IF ATOM
	JRST	DMCALL		; PRETEND TO BE AN MCALL

	HRRZ	C,UUOH		; GET PC OF CALL
	SUBI	C,(M)		; RELATIVIZE
	PUSH	P,C		; AND SAVE
	LDB	C,[270400,,40]	; GET # OF ARGS
	PUSH	P,C
	HRRZ	C,40		; POINT TO RSUBR SLOT
	MOVE	B,1(C)		; GET ATOM
	SUBI	C,(R)		; RELATIVIZE IT
	HRLI	C,(C)
	ADD	C,R		; C IS NOW A VECTOR POINTER
	PUSH	TP,$TVEC
	PUSH	TP,C
	PUSH	TP,$TATOM
	PUSH	TP,B
	PUSHJ	P,IGVAL		; SEE IF IT HAS A VALUE
	GETYP	0,A		; IS IT A WINNER
	CAIE	0,TUNBOU
	JRST	DQCAL2
	MOVE	B,(TP)
	PUSHJ	P,ILVAL		; LOCAL?
	GETYP	0,A
	CAIE	0,TUNBOU
	JRST	DQCAL2		; MAY BE A WINNER

	PUSH	TP,$TATOM
	PUSH	TP,EQUOTE UNBOUND-VARIABLE
	PUSH	TP,$TATOM
	PUSH	TP,-3(TP)
	PUSH	TP,$TATOM
	PUSH	TP,MQUOTE CALLER
	MCALL	3,ERROR
	GETYP	0,A
DQCAL2:	PUSH	TP,$TENTE		; IN CASE RSUBR ENTRY
	PUSH	TP,[0]
	CAIN	0,TRSUBR		; RSUBR?
	JRST	DQRSB		; YES, WIN
	CAIN	0,TENTER
	JRST	DQENT

DQMCAL:	HRRZ	C,-6(TP)	; PRETEND WE WERE AN MCALL
	HRRM	C,40
	POP	P,C
	DPB	C,[270400,,40]
	POP	P,C
	ADDI	C,(M)		; AND PC
	MOVEM	C,UUOH
	SUB	TP,[10,,10]
	JRST	DMCALL		; FALL INTO MCALL CODE

DQENT:	MOVEM	B,(TP)		; SAVE IT
	GETYP	0,(B)		; LINKED UP?
	MOVE	B,1(B)
	CAIN	0,TRSUBR
	JRST	DQENT1
DQENT2:	CAIE	0,TATOM		; BETTER BE ATOM
	JRST	BENTRY
	PUSHJ	P,IGVAL		; TRY TO LINK IT UP
	GETYP	0,A
	CAIE	0,TRSUBR
	JRST	BENTRY		; LOSER!
	MOVE	C,(TP)
	HLLM	A,(C)
	MOVEM	B,1(C)

DQENT1:	
DQRSB:	PUSH	TP,$TRSUBR
	PUSH	TP,B

	PUSH	TP,$TUVEC
	PUSH	TP,M

	SKIPL	M,1(B)
	PUSHJ	P,DQCALQ	; MAP ONE IN

	MOVEI	E,0		; GET OFFSET
	SKIPL	1(B)
	HLRZ	E,1(B)
	HLRE	B,M		; FIND END OF CODE VECTOR
	SUBM	M,B
	MOVE	M,(TP)
	SUB	TP,[2,,2]
	HLRZ	A,-1(B)		; GET LENGTH OF ENTRY VECTOR
	HRRZ	C,-1(B)		; GET LENGTH OF DDT SYMBOL TABLE
	ADDI	C,(A)		; TOTAL LENGTH OF RANDOM CRUFT AT THE END OF CODE
	SUBI	B,1(C)		; POINT TO FIRST ELEMENT IN ENTRY VECTOR

SL2:	HRRZ	D,(B)
	CAIL	D,(E)		; IN RANGE?
	JRST	SL1
	ADDI	B,1
	SOJG	A,SL2
	JRST	DQMCAL

SL1:	HLRE	D,(B)		; GET NEXT
	JUMPL	D,DQMCAL
	CAMN	D,(P)
	JRST	.+4
	ADDI	B,1
	SOJG	A,.-4
	JRST	DQMCAL

	HRRZ	C,(B)		; GET OFFSET
	MOVE	R,(TP)		; SETUP R
	SKIPN	B,-2(TP)	; SKIP IF RSUBR ENTRY
	JRST	DQRSB1

	ADD	C,2(B)
	HRLI	C,TQENT
	JRST	DQMUNG

DQRSB1:	MOVE	B,(TP)
	HRLI	C,TQRSUB

DQMUNG:	HRRZ	D,-6(TP)	; GET CALLING RVECTOR
	CAILE	D,@PURTOP	; SMASHABLE?
	JRST	DQLOSS		; NO LOSE

	MOVEM	C,(D)		; SMASH
	MOVEM	B,1(D)

DQLOSS:	SUB	P,[1,,1]
	POP	P,E		; RESTORE PC
	ADDI	E,(M)
	MOVEM	E,UUOH
	SUB	TP,[10,,10]
	MOVEI	E,C
	JRST	DQCAL1

DQCALE:	MOVE	E,40
	MOVE	B,1(E)		; GET RSUBR ENTRY
	MOVE	R,1(B)
	JRST	DQCAL1

DQCALR:	MOVE	E,40
	MOVE	B,1(E)
	MOVE	R,B

DQCAL1:	HRRZ	E,(E)
	HRRZ	C,RSTACK(PVP)
	HRLI	C,(C)
	ADD	C,RSTACK+1(PVP)
	JUMPGE	C,QCOPY
	HRRZ	A,FSAV(TB)
	HRL	A,(A)
	MOVEM	A,(C)		; SAVE IT
	AOS	C,RSTACK(PVP)
	HRRM	B,FSAV(TB)	; FOR FUTURE MCALLS
	HRLI	C,-1(C)
	HRR	C,UUOH
	SUBI	C,(M)		; RELATIVIZE
	PUSH	P,C		; SAVE BOTH
	SKIPL	M,1(R)		; MAYBE LINK UP?
	PUSHJ	P,DQCALP
	ADDI	E,1(M)
	JRST	(E)		; GO

DQCALP:	MOVE	B,R
DQCALQ:	HLRS	M		; GET VECTOR OFFSET IN BOTH HALVES
	ADD	M,PURVEC+1	; GET IT
	SKIPL	M
	FATAL	LOSING PURE RSUBR POINTER
	SKIPE	M,1(M)
	POPJ	P,

DQCLP1:	PUSH	TP,$TRSUBR
	PUSH	TP,B
	PUSH	P,E
	HLRZ	A,1(B)		; SET UP TO CALL LOADER
	PUSHJ	P,PLOAD		; LOAD IT
	JRST	PCANT
	POP	P,E
	MOVE	M,B		; GET LOCATION
	MOVE	B,(TP)
	SUB	TP,[2,,2]
	POPJ	P,

QCOPY:	PUSH	TP,$TVEC
	PUSH	TP,B
	HRRZ	C,UUOH
	SUBI	C,(M)
	PUSH	P,C
	PUSH	P,E
	HLRE	A,RSTACK+1(PVP)
	MOVNS	A
	ADDI	A,100
	PUSHJ	P,IBLOCK	; GET BLOCK
	MOVEI	A,.VECT.+TRSUBR
	HLRE	C,B
	SUBM	B,C
	MOVEM	A,(C)
	HRLZ	A,RSTACK+1(PVP)
	JUMPE	A,.+3
	HRRI	A,(B)
	BLT	A,-101(C)	; COPY IT
	MOVEM	B,RSTACK+1(PVP)
	MOVE	B,(TP)
	SUB	TP,[2,,2]
	POP	P,E
	POP	P,C
	ADDI	C,(M)
	HRRM	C,UUOH
	JRST	DQCAL1
	
QMPOPJ:	SKIPL	E,(P)
	JRST	QFINIS
	SUBM	M,(P)
	POPJ	P,

QFINIS:	POP	P,D
	HLRZS	D
	HRRM	D,RSTACK(PVP)
	ADD	D,RSTACK+1(PVP)
	MOVE	R,(D)		; GET R OR WHATEVER
	HRRM	R,FSAV(TB)
	GETYP	0,(R)		; TYPE
	CAIN	0,TRSUBR	; RSUBR?
	MOVE	R,1(R)
	SKIPL	M,1(R)	; RSUBR IN CORE ETC
	JRST	QRLD

QRLD2:	ADDI	E,(M)
	JRST	(E)

QRLD:	HLRS	M
	ADD	M,PURVEC+1
	SKIPE	M,1(M)		; SKIP IF LOADED
	JRST	QRLD2
	PUSH	TP,A
	PUSH	TP,B
	HLRZ	A,1(R)		; RELOAD IT
	PUSHJ	P,PLOAD
	JRST	PCANT
	POP	TP,B
	POP	TP,A
	MOVE	M,1(R)
	JRST	QRLD2

]
; THIS IS A UUO TO CALL ERROR WITH ONE ARGUMENT

DOERR:	PUSH	P,UUOH
	PUSH	TP,$TATOM
	PUSH	TP,@40
	JRST	CALER1

; ROUTINE TO DO AN RCALL FOR SUBRIFIED GOODIES

RMCALL:	MOVEM	M,SAVM				; SAVE M
	SUBM	M,(P)
	MOVEI	M,0
	PUSHJ	P,@0
	MOVE	M,SAVM
	SETZM	SAVM
	SUBM	M,(P)
	POPJ	P,
	

; ROUTINE USED BY COMPILED CODE TO SAVE ACS CALL AN INTERRUPT AND RESTORE ACS.
; THIS UUO TAKES A LOCATION FROM WHICH TO FIND A DESCRIPTION OF HOW ACS ARE TO
; BE SAVED.
; .SAVAC	LOC
; LOC POINTS TO A BLOCK WHICH CAN BE ONE OR MORE WORDS LONG DEPENDING ON BOTH
; THE NUMBER OF SCRATCH AC'S (CURRENTLY 5) AND THE NUMBER OF AC'S CONTAINING
; TEMPLATE TYPES.
; THE FIRST PART OF THE BLOCK CONTAINS THE AC DECRIPTIONS.  EACH AC IS DESCRIBED
; BY A SIX BIT FIELD WITH THE EXCEPTION OF AC'S CONTAINING TEMPLATES.
; THE SIX BIT FIELD CAN BE
; 
; 0		EITHER A TYPE WORD OR NOTHING
; 1  ->  8	THE NUMBER OF THE AC CONTAINING THE TYPE
; 9  ->  62	THE SAT OF THE THING CONTAINED IN THE AC (+ 8)
; 63		A TEMPLATE LOOK AT THE BLOCK AFTER TO FIND A POINTER TO THE TYPE WORD
;
; TEMPLATE DESCRIPTIONS ARE FOUND AFTER THE AC DESCRIPTION BLOCK. THESE ARE FOUND
; IN SUCESSIVE WORDS CONTAINING POINTERS INTO THE R VECTOR

NOACS==5
TMPPTR==1

DSAVAC:	MOVE	0,UUOH		; GET PC
	PUSH	P,0
	ANDI	0,-1		; XXX patched
	CAMG	0,PURTOP
	CAMGE	0,VECBOT
	JRST	DONREL
	SUBI	0,(M)		; M IS BASE REG
	HLL	0,(P)		; GET FLAGS - XXX patched
	TLO	0,M		; INDEX IT OFF M
	PUSH	P,0		; AND SAVE IT - XXX patched
DONREL:	MOVEM	A,ACSAV
	MOVEM	B,ACSAV+1
	MOVE	C,SAVEC
	MOVEM	C,ACSAV+2
	MOVEM	D,ACSAV+3
	MOVEM	E,ACSAV+4
	MOVEI	0,NOACS			; NUMBER OF ACS
	MOVE	A,[440620,,40]		; BYTE POINTER INDIRECTED TO 40 - XXX patched
	MOVEI	B,TMPPTR		; POINTER TO TEMPLATE BLOCK
	ADDI	B,@(P)			; GET TO BLOCK
	MOVEI	C,1
LOPSAV:	ILDB	D,A			; GET A DESCRIPTOR
	JUMPE	D,NOAC+1		; ZERO==TYPE WORD
	CAIE	D,77			; IF 63. THEN TEMPLATE HANDLE SPECIALLY
	JRST	NOTEM			; NOT A TEMPLATE
	PUSH	TP,@(B)			; IT IS A TEMPLATE POINTER SO PUSH TYPE
	ADDI	B,1			; AOS B
LOPPUS:	PUSH	TP,ACSAV-1(C)		; PUSH AC
LPSVDN:	ADDI	C,1
	SOJG	0,LOPSAV		; LOOP BACK
	JSR	LCKINT			; GO INTERRUPT
	MOVE	A,[440620,,40]		; NOW HACK POPS - XXX patched
	MOVEI	0,NOACS			; NUMBER OF ACS
	MOVEI	B,NOACS
LOPPOP:	ILDB	C,A			; GET DECRIPTION
	POP	TP,ACSAV-1(B)
	JUMPE	C,LOPBAR		; SKIP IF UNNECESSARY
	CAILE	C,8
	JRST	LOPBAR
	POP	TP,ACSAV-1(C)		; RESTORE TYPE TO ITS AC
	JRST	LOPFOO
LOPBAR:	SUB	TP,[1,,1]
LOPFOO:	SUBI	B,1
	SOJG	0,LOPPOP
	MOVE	A,ACSAV
	MOVE	B,ACSAV+1
	MOVE	C,ACSAV+2
	MOVE	D,ACSAV+3
	SUB	P,[1,,1]		; XXX patched
	POP	P,0
	JRST	@0
NOTEM:	CAILE	D,8.			; SKIP IF AC IS TO BE PUSHED
	JRST	NOAC
	PUSH	TP,ACSAV-1(D)
	JRST	LOPPUS			; FINISH PUSHING
NOAC:	SUBI	D,8			; COMPENSATE FOR ADDED AMOUNT
	MOVE	D,@STBL(D)
	HLRE	E,D			; GET NEGATIVE
	SUB	D,E
	HRLZ	D,(D)			; GET TYPE CODE 
	TLZ	D,400000		; KILL SIGN BIT
	PUSH	TP,D			; PUSH TYPE
	JRST	LOPPUS			; FINISH PUSHING

FMPOPJ:	MOVE	TP,FRM
	MOVE	FRM,(TP)
	HRLS	C,-1(TP)
	SUB	TP,C
	SUBM	M,(P)
	POPJ	P,

DPOPUN:	PUSHJ	P,POPUNW
	JRST	@UUOH


IMPURE

SAVM:	0					; SAVED M FOR SUBRIFY HACKERS

ACSAV:	BLOCK	NOACS


PURE

END
