; STUFF - Very basic useful stuff   -*-PALX-*-
stvn==%fnam2


.sbttl	Register save/restore routines

; SAVE6 routine saves R0 through R5 on stack, R0 at top:
; SP ->	R0
;	R1
;	R2
;	R3
;	R4
;	R5
; Call by JSR R5,SAVE6.  Restore regs by REST6 routine.

save6:	push r4,r3,r2,r1,r0	; R5 already on stack by JSR.
	jmp (r5)		; return.


; REST6 routine restores R0 through R5 from stack, where
; R0 is considered to be the top word of the stack (which is
; how SAVE6 pushes the registers).  Call by JSR R5,REST6.
; REST6 returns with the 6 words popped off the stack.

rest6:	tst (sp)+		; forget old R5 contents.
	pop r0,r1,r2,r3,r4	; restore other regs.
	rts r5			; return and restore R5.

.sbttl	Multiply & Divide

.if eq  eis
; MUL1 multiplies two integers, producing a single precision product.  Both the
; multiplicand and multiplier are treated as signed numbers.  This routine is
; meant to be compatible with the single precision multiply instruction found
; on reasonable PDP11s.

;	ARGS:				VALS:
; SP ->	A			 SP ->	P
;	B

mul1:	push r1,r2		; save regs
	mov 6(sp),r1		; multiplicand
	mov 10(sp),r2		; multiplier
	clr 10(sp)		; clear product accumulator
loop <	  ror r2		; divide multiplier by 2, testing lowest bit
	  exitl eq		; nothing left
	  if cs,<
	    add r1,10(sp)	; if bit is 1 then add multiplicand to product
	    >
	  asl r1		; double multiplicand
	  clc			; so ROR is logical shift
	  rptl 			; and repeat.
	  >
	if cs,<
	  add r1,10(sp)		; one last add necessary if low bit was 1
	  >
	pop r2,r1,(sp)		; restore regs, remove arg2 from stack
	rts r5


; MUL2 is multiplies two integers producing a double precision product.  Both
; the multiplicand and multiplier are treated as signed numbers.  This routine
; is meant to be compatible with the double precision multiply instruction
; found on reasonable PDP11s.

;	ARGS: 				VALS:
; SP ->	multiplicand		 SP ->	P hi
;	multiplier			P lo

mul2:	push r0,r1,r2		; save regs
	clr r0			; multiplicand
	mov 10(sp),r1		; ...
	if mi,<
	  com r0		; if low part negative set high part to -1
	  >
	mov 12(sp),r2		; multiplier
	if mi,<
	  neg r2		; negate multiplier and multiplicand
	  neg r0		; double word negate
	  neg r1		; ...
	  sbc r0		; ...
	  >
	clr 10(sp)		; clear product accumulator
	clr 12(sp)		; ...
loop <	  asr r2		; divide multiplier by 2, testing lowest bit
	  exitl eq		; nothing left
	  if cs,<
	    add r1,12(sp)	; if bit is 1 then add multiplicand to product
	    adc 10(sp)		; ...
	    add r0,10(sp)	; ...
	    >
	  asl r1		; double multiplicand
	  rol r0		; ...
	  rptl
	  >
	if cs,<
	  add r1,12(sp)		; one last add necessary if low bit was 1
	  adc 10(sp)		; ...
	  add r0,10(sp)
	  >
	pop r2,r1,r0		; restore regs
	rts r5


; DIV2 divides a double word quantity by a single word quantity yielding a
; quotient and remainder.  It is meant to simulate the DIV instruction found
; on reasonable 11s.

;	ARGS:			VALS:
; SP ->	divisor		 SP ->	remainder
;	dividend lo		quotient
;	dividend hi

div2:	jsr r5,save6		; save regs
	mov 22(sp),r0		; dividend hi
	mov 20(sp),r1		; dividend lo
	mov 16(sp),r2		; divisor
	if mi,<
	  neg r2		; negate divisor and dividend
	  neg r0		; double word negate
	  neg r1		; ...
	  sbc r0		; ...
	  >
	clr r3
	mov #16.,r4
loop <	  asl r3
	  rol r1
	  rol r0
	  cmp r2,r0
	  if le,<
	    sub r2,r0
	    inc r3
	    >
	  sorl r4
	  >
	mov r3,22(sp)
	mov r0,20(sp)
	jsr r5,rest6
	pop (sp)
	rts r5

.endc	; eq eis

; DMUL performs double precision multiplication.  Both multiplicand and
; multiplier are treated as unsigned integers.  This routine is necessary
; because the PDP11 multiply instruction is too crufty for some things.

;	ARGS:				VALS:
; R0,R1: multiplicand		 R0,R1:	product
; R2:	 multiplier

dmul:	push r3,r4		; save regs
	mov r0,r3		; copy multiplicand
	mov r1,r4		; ...
	clr r0			; clear product accumulator
	clr r1			; ...
loop <	  clc			; clear carry so ROR is logical shift
	  ror r2		; divide multiplier by 2, testing lowest bit
	  exitl eq		; nothing left
	  if cs,<
	    add r4,r1		; if bit is 1 then add multiplicand to product
	    adc r0		; ...
	    add r3,r0		; ...
	    >
	  asl r4		; double multiplicand
	  rol r3		; ...
	  rptl
	  >
	if cs,<
	  add r4,r1		; one last add necessary if low bit was 1
	  adc r0		; ...
	  add r3,r0		; ...
	  >
	pop r4,r3		; restore regs
	rts r5


; DDIV performs double precision division.  It is best suited to dividing
; double precision no.s by some constant.  Both dividend and divisor are
; treated as unsigned integers.  This routine is necessary because the PDP11
; divide instruction is too crufty for just about anything.

;	ARGS:				VALS:
; R0,R1: dividend		 R0,R1:	quotient
; R2,R3: divisor normalized	 R2:	remainder
; R4,R5: 1 shifted same

; Note: DDIV is called by JSR PC,DDIV.

ddiv:	clr -(sp)		; start quotient at 0
	clr -(sp)		; ...
loop <	  cmp r2,r0
	  blo 1$
	  if eq,<
	    cmp r3,r1
	    if los,<
1$:	      sub r3,r1		; subtract from dividend
	      sbc r0
	      sub r2,r0
	      bis r4,2(sp)
	      bis r5,(sp)
	      >
	    >
	  clc
	  ror r2
	  ror r3
	  asr r4
	  ror r5
	  rptl ne
	  tst r4
	  rptl ne
	  >
	mov r1,r2		; put remainder in r2
	pop r1,r0		; put quotient in r0,r1
	rts pc


; DIV10 divides r0,r1 by 10, remainder in r2.  Clobbers r3, r4, and r5.
; Call with JSR PC,DDIV10.
ddiv10:	mov #120000,r2		; 10 normalized
	clr r3			; ...
	mov #10000,r4		; 1 shifted same amount as 10
	clr r5			; ...
	jmp ddiv		; jump to common double precision divide


; DIV24 divides r0,r1 by 24, remainder in r2.  Clobbers r3, r4, and r5.
; Call with JSR PC,DDIV24.
ddiv24:	mov #140000,r2		; 24 normalized
	clr r3			; ...
	mov #4000,r4		; 1 shifted same amount as 24
	clr r5			; ...
	jmp ddiv		; call common double precision divide


; DIV60 divides r0,r1 by 60, remainder in r2.  Clobbers r3, r4, and r5.
; Call with JSR PC,DDIV60.
ddiv60:	mov #170000,r2		; 60 normalized
	clr r3			; ...
	mov #2000,r4		; 1 shifted same amount as 60
	clr r5			; ...
	jmp ddiv		; call common double precision divide

.sbttl	random things

bits:	.byte	1,2,4,10,20,40,100,200


.if ne  ndz
ifMIT <
      ; DZ11 line parameters
      ;	10000=Reciever clock on
      ;	 7400=speed, 4 bits:    low order bits
      ;			       00   01   10   11
      ;			   ----------------------
      ;		high	00|    50   75  110  134.5
      ;		order	01|   150  300  600 1200
      ;		bits	10|  1800 2000 2400 3600
      ;			11|  4800 7200 9600 19.2K
      ;	  200=odd parity
      ;	  100=parity enabled
      ;	   40=stop code (on is 2 stop bits)
      ;	   30=character length, excluding parity, 00=5,01=6,10=7,11=8
      ;	    7=line number
dzlpar:	17120	; line  0: 9600 baud, even parity, 7 bits      (SB)
	17121	; line  1: 9600 baud, even parity, 7 bits      (VT52 #1)
	17122	; line  2: 9600 baud, even parity, 7 bits      (VT52 #2)
	17123	; line  5: 9600 baud, even parity, 7 bits      (VT52 #3)
	13524	; line  3: 1200 baud, even parity, 7 bits      (HP2645)
	13525	; line  4: 1200 baud, even parity, 7 bits      (Vadic 1200)
	15036	; line  6: 2400 baud, no parity, 8 bits	       (HP3000)
	17037	; line  7: 9600 baud, no parity, 8 bits        (MC)

      >
.endc				; if DZ