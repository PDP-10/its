<BLOCK (<ROOT>)>

WARNS NOTES INCONS ERRS BATCH-COMPIL	;"For communication with COMFIL"

<ENDBLOCK>

<BLOCK (<MOBLIST COMBAT!- 17> <ROOT>)>

<GDECL (COMBAT THIS-PLAN PLANNED) STRING>

<FLOAD "COMBAT;PRIVAT NBIN">


;"PERFORM THE COMBAT"

<DEFINE BATCH-COMPIL ("EXTRA" TP CH TIM (ERRS <>) (NOTES <>) (WARNS <>) (INCONS <>))
	#DECL ((CH) <OR FALSE CHANNEL> (TIM) <LIST FIX FIX FIX>
	       (ERRS NOTES WARNS INCONS) <SPECIAL <OR ATOM FALSE>>
	       (TP) <OR FALSE STRING>)
    <COMBAT-OK?>
    <COND (<SET CH <OPEN "READ" ,PLANNED "<" "DSK" "COMBAT">>
	   <LGN "COMBAT">	;"LOG IN"
	   <DEMSIG "GUNNER">
	   <SETG RUNT-H <ON "RUNT" ,RUNT-F 2>>
	   <COND (<=? ,PLANNED "RIOT"> <RUNTIMER <* 15 60>>)
		 (ELSE <RUNTIMER <* 60 60 2>>)>
	   <SNAME "COMBAT">
	   <COND (<=? <10 .CH> <6 .CH>> ;"If directory not same, have to hack link"
		  <SET TP <8 .CH>>)
		 (<SET TP <GET-NAME-TWO .CH>>)
		 (<STOP <>> ;"Huh?")>
	   <SETG THIS-PLAN .TP>
	   <SETG BLOCKED-H <ON "BLOCKED" ,BLOCKED-F 200>>
	   <SETG IOC-H <ON "IOC" ,IOC-F 150>>
	   <SET REDEFINE T>
	   <IPC-OFF>
	   <IPC-ON "COMBAT" "ZONE">
	   <SETG IPC-H <ON "IPC" ,ILO 1>>
	   <IPC-ENABLE>		; "IPC hack"
	   <SETG VALRET ,NVALRET>
	   <SETG LOGOUT ,NLOGOUT>
	   <SETG QUIT ,NQUIT>
	   <SETG ERROR-H <ON "ERROR" ,ERROR-F 100>>
	   <SETG ERRET ,NERRET>
	   <LOAD .CH>		;"Run the PLAN"
	   <WON>)
	  ("NO MORE FUNCTIONS NOW GO AWAY FOR 60 MINUTES, THEN CHECK"
	   <SET TIM <RTIM>>
	   <RENAME "COMBAT;PERMIT WASTES">	; "Flush permission file"
	   <SDS "ZONE" 10000 0 <- <* 20 60> <* <COND (<G=? <1 .TIM> 20>
							  <- 44 <1 .TIM>>)
							 (ELSE <1 .TIM>)> 60>
					        <2 .TIM> -5>>
	   <OLOGOUT>)>>

'<AND? ,BATCH-COMPIL		;"DEAR GLUE: Let these Survive"
      ,RUNT-F ,BLOCKED-F ,IOC-F ,ERROR-F
      ,NVALRET ,NLOGOUT ,NQUIT ,NERRET>

\


<DEFINE WON ("AUX" (OUTCHAN <MALE "COMBAT" <STRING <SNAME> " MAIL">>) NN)
	#DECL ((OUTCHAN) <SPECIAL CHANNEL> (NN) FIX)
	<COND (<=? ,PLANNED "RWASTE">
	       <PRINC "WASTE # ">)
	      (<PRINC ,PLANNED>
	       <PRINC " # ">)>
	<PRINC ,THIS-PLAN>
	<COMBAT-PRINT .OUTCHAN>
	<PRINC " WON IN ">
	<PRINC <TIME>>
	<PRINC " SECONDS">
	<TERPRI>
	<COND (<OR .ERRS .INCONS .WARNS .NOTES>
	       <PRINC "**** See Record File for: ">
	       <SET NN <MAPF ,+ <FUNCTION (A) #DECL ((A) ATOM) <OR <AND ..A 1> 0>>
			     '(ERRS INCONS WARNS NOTES)>>
	       <MAPF <>
		     <FUNCTION (REASON ATM)
			       #DECL ((REASON ATM) ATOM)
			       <COND (..ATM <PRINC .REASON>
				      <COND (<1? <SET NN <- .NN 1>>>
					     <PRINC " and ">)
					    (<G? .NN 0> <PRINC ", ">)>)>>
		     '(ERRORS NOTES WARNINGS COMPILER-PROBLEMS)
		     '(ERRS NOTES WARNS INCONS)>)>
	<TERPRI> <CLOSE .OUTCHAN>
	<RENAME ,PLANNED ,THIS-PLAN "DSK" "COMBAT">
	<STOP T>>

<DEFINE LOST (MES "OPTIONAL" FT
	      "EXTRA" (OUTCHAN <MALE "COMBAT" <STRING <SNAME> " MAIL">>))
	#DECL ((MES) STRING (OUTCHAN) <SPECIAL CHANNEL> (FT) TUPLE)
	<COND (<=? ,PLANNED "RWASTE">
	       <PRINC "WASTE # ">)
	      (<PRINC ,PLANNED>
	       <PRINC " # ">)>
	<PRINC ,THIS-PLAN>
	<COMBAT-PRINT .OUTCHAN>
	<PRINC " LOST IN ">
	<PRINC <TIME>>
	<PRINC " SECONDS">
	<CRLF> <PRINC "	BECAUSE ">
	<PRINC .MES> <PRINC !\.>
	<COND (<ASSIGNED? FT>
	       <MAPF <> ,& .FT>)>
	<TERPRI> <TERPRI>
	<FR&> <CLOSE .OUTCHAN>
	<RENAME ,PLANNED ,THIS-PLAN "DSK" "COMBAT"
		TO "DSK:COMBAT;LOST >">
	<STOP <>>>

<DEFINE STOP (GOOD?)
	#DECL ((GOOD?) <OR FALSE ATOM>)
	<COM-MESS <SNAME> ,PLANNED <TIME> <SWAPS> .GOOD?>
	<OLOGOUT>	;"Should work, unless debugging Combat"
	<MAPF <> <FUNCTION (H)
			   #DECL ((H) ATOM)
			   <COND (<AND <GASSIGNED? .H>
				       <TYPE? ,.H HANDLER>>
				  <OFF ,.H>)>>
	      '(BLOCKED-H RUNT-H IOC-H ERROR-H)>	;"Turn Off Handlers"
	T		;"Debugging, just return T">

\

<AND? <SETG ERRCNT <SETG BLKCNT <SETG IOCCNT 0>>>	;"Occurences for each Problem"
      <GDECL (ERRCNT BLKCNT IOCCNT) FIX>>

<DEFINE ERROR-F (FRM "TUPLE" FT "AUX" (LERR\ !-INTERRUPTS .FRM))
	#DECL ((LERR\ !-INTERRUPTS) <SPECIAL ANY> (FT) TUPLE)
	<COND (<1? <SETG ERRCNT <+ ,ERRCNT 1>>>		;"Initial Error Interrupt"
	       <INT-LEVEL 0>
	       <LOST "AN ERROR HAPPENED" .FT>)
	      (<L? ,ERRCNT 5>				;"Secondary Error"
	       <DISMISS T .FRM>	;"Try to continue")
	      (<==? ,ERRCNT 5>					;"Obviously losing"
	       <RENAME ,PLANNED ,THIS-PLAN "DSK" "COMBAT"
			    TO "DSK:COMBAT;CONFUS >">
	       <OLOGOUT>)
	      (ELSE <OLOGOUT>)>>

<DEFINE BLOCKED-F ("TUPLE" FOO)
	.FOO	;"Unused Variable"
	<COND (<N=? ,IOCCNT 0> <ELOGOUT>		;"Obviously IOC's losing")>
	<COND (<N=? ,ERRCNT 0> <OLOGOUT>		;"Obviously ERR's losing")>
	<COND (<N=? ,BLKCNT 0> <OLOGOUT>		;"Obviously I'm losing")>
	<SETG BLKCNT 1>
	<INT-LEVEL 0>
	<LOST "COMBAT WENT BLOCKED">>

<DEFINE IOC-F ("TUPLE" FOO)
	.FOO	;"Unused Variable"
	<SETG IOCCNT 1>
	<RENAME ,PLANNED ,THIS-PLAN "DSK" "COMBAT"
		       TO "DSK:COMBAT;IOC >">
	<ELOGOUT>	;"Emergency LOGOUT-- doesn't do Bufout">

<DEFINE RUNT-F ()
	<LOST "TIME WAS EXHAUSTED">>

<OVERFLOW <>>
<DEFINE ILO (BODY TYPE NM1 NM2 "OPTIONAL" M1 M2 "AUX" P
	     (OUTCHAN <AND <GASSIGNED? COMPCHAN!-CFC>
			   ,COMPCHAN!-CFC>))
	#DECL ((BODY NM1 NM2 M1 M2) STRING (TYPE) FIX (P) ANY
	       (OUTCHAN) <OR <CHANNEL FIX> FALSE>)
	<COND (<==? .TYPE *400000000000*>
	       <SET P <PARSE .BODY>>
	       <COND (<AND .OUTCHAN <NOT <0? <1 .OUTCHAN>>>>
		      <CRLF>
		      <PRINC "!!!! Eval Inquiry from ">
		      <PRINC .NM1>
		      <PRINC " ">
		      <PRINC .NM2>
		      <PRINC " !!!!">
		      <PLO .P .OUTCHAN>
		      <BUFOUT .OUTCHAN>)>
	       <INT-LEVEL 0>
	       <EVAL .P>)>
	<DISMISS T>>

<DEFINE PLO (F OUTCHAN) 
	#DECL ((F) <PRIMTYPE LIST> (OUTCHAN) CHANNEL)
	<MAPR <>
	      <FUNCTION (FF "AUX" (F <1 .FF>)) 
			#DECL ((FF) LIST (F) ANY)
			<COND (<AND <TYPE? .F FORM>
				    <NOT <LENGTH? .F 1>>
				    <==? <1 .F> PARSE>>
			       <PPRINT <PARSE <2 .F>> .OUTCHAN>
			       <PRINC "!!!! Ends !!!!">
			       <CRLF>)
			      (<TYPE? .F FORM LIST> <PLO .F .OUTCHAN>)
			      (ELSE T)>>
	      .F>>

\

<DEFINE COMBAT-OK? ("EXTRA" (TIM <RTIM>) (TMP <>) TMP1 J ST)
	#DECL ((TMP TMP1) <OR FALSE CHANNEL>
	       (TIM) <LIST FIX FIX FIX> (J) FIX)
;"Check that it is not the middle of the day and non-holiday weekday,
if so reschedule for eight P.M."
	<COND (<SET TMP <OPEN "READ" "COMBAT;RWASTE >">>
	       ; "Clean up if an rwaste exists"
	       <COND (<=? <10 .TMP> <6 .TMP>>
		      <SET ST <8 .TMP>>)
		     (<SET ST <GET-NAME-TWO .TMP>>)>
	       <COND (<SET TMP1 <OPEN "READ" "WASTE" .ST "DSK" "COMBAT">>
		      <CLOSE .TMP1>
		      <COND (<AND <SET TMP1 <OPEN "READ" "COMBAT;WASTE <">>
				  <N=? <GET-NAME-TWO .TMP1> "1">>
			     <CLOSE .TMP1>
			     <SET ST "1">)
			    (T
			     <COND (.TMP1 <CLOSE .TMP1>)>
			     <SET ST ">">)>)>
	       <CLOSE .TMP>
	       <RENAME "COMBAT;RWASTE >" TO <STRING "COMBAT;WASTE " .ST>>)>
	<COND (<SET TMP <OPEN "READ" "COMBAT;RIOT <">>
	       <CLOSE .TMP>
	       <SETG PLANNED "RIOT">)
	      (<SET TMP <OPEN "READ" "COMBAT;PLAN <">>
	       <CLOSE .TMP>
	       <SETG PLANNED "PLAN">
	       <COND (<AND <G=? <1 .TIM> 8>
			   <L? <1 .TIM> 20>
			   <G? <SET J <JONES>> 0>
			   <L? .J 6>
			   <NOT <HOLIDAY? <DAT>>>>
		      <SDS "ZONE" 10000 0
			   <- <* 20 60> <* <1 .TIM> 60> <2 .TIM> -5>>
		      <OLOGOUT>)>)
	      (T
	       <COND (<AND <OR <L? <1 .TIM> 1>
			       <G? <1 .TIM> 7>>
			   <OR <AND <NOT <SET TMP <OPEN "READ" "COMBAT;PERMIT WASTES">>>
				    <N==? <3 .TMP> *47000000*>
				    <N==? <3 .TMP> *27000000*>>
			       <NOT <OR <G=? <1 .TIM> 20>
					<L=? <1 .TIM> 8>>>>>
		      <SDS "ZONE" 10000 0
			   <COND (<L? <1 .TIM> 1>
				  <- 60 <* <1 .TIM> 60> <2 .TIM> -5>)
				 (ELSE
				  <- <* 25 60> <* <1 .TIM> 60> <2 .TIM> -5>)>>
		      <OLOGOUT>)>	; "Should we run?"
	       <COND (.TMP <CLOSE .TMP>)>
	       <COND (<SET TMP <OPEN "READ" "COMBAT;WASTE <">>
		      <RENAME "WASTE" <SET ST
					   <COND (<=? <10 .TMP> "COMBAT">
						  <8 .TMP>)
						 (T <GET-NAME-TWO .TMP>)>>
			      "DSK" "COMBAT"
			      TO <STRING "COMBAT;RWASTE " .ST>>
		      <CLOSE .TMP>)>
	       <SETG PLANNED "RWASTE">
	       ; "To prevent lossage with plans and wastes existing simultaneously.")>>

<DEFINE HOLIDAY? (DAT "EXTRA" STR CHN)
	#DECL ((DAT) <LIST FIX FIX FIX> (STR) STRING (CHN) <OR FALSE CHANNEL>)
	<SET STR <MAPF ,STRING
		<FUNCTION (NUM)
			#DECL ((NUM) FIX (VALUE) STRING)
			<COND	(<G=? .NUM 10> <UNPARSE .NUM>)
				(<STRING !\0 <UNPARSE .NUM>>)>>
	.DAT>>
	<COND (<SET CHN <OPEN "READ" "HLIDAY" .STR "DSK" "COMBAT">>
	       <CLOSE .CHN>
	       T)>>
\

<DEFINE NVALRET (FOO) .FOO	;"Unused Variable" <>>

<COND (<TYPE? ,VALRET SUBR> <SETG OVALRET ,VALRET>)
      (<NOT <GASSIGNED? OVALRET>> <ERROR COMBAT VALRET>)>

<DEFINE NLOGOUT () <>>

<COND (<TYPE? ,LOGOUT SUBR> <SETG OLOGOUT ,LOGOUT>)
      (<NOT <GASSIGNED? OLOGOUT>> <ERROR COMBAT LOGOUT>)>

<DEFINE NERRET ("TUPLE" X)
	#DECL ((X) TUPLE)
	<COND (<EMPTY? .X> <ERROR COMBAT ERRET>)
	      (T <OERRET !.X>)>>

<COND (<TYPE? ,ERRET SUBR> <SETG OERRET ,ERRET>)
      (<NOT <GASSIGNED? OERRET>> <ERROR COMBAT ERRET>)>

<DEFINE NQUIT ()
	<ERROR COMBAT QUIT>
	<>>

<COND (<TYPE? ,QUIT SUBR> <SETG OQUIT ,QUIT>)
      (<NOT <GASSIGNED? OQUIT>> <ERROR COMBAT QUIT>)>

\

<DEFINE COMBAT-PRINT (OUTCHAN)
	#DECL ((OUTCHAN) CHANNEL)
	<COND (<GASSIGNED? COMBAT>
	       <PRINC " (">
	       <PRINC ,COMBAT>
	       <PRINC ")">)>>

<DEFINE COM-MESS (SN PL TI SW W
		  "AUX" (OUTCHAN <AP-TO-FIL "COMPIL;COMPIL MAIL">))
	#DECL ((SN PL) STRING (W) <OR FALSE ATOM>
	       (SW) FIX (OUTCHAN) <OR FALSE CHANNEL>)
	<COND (.OUTCHAN
		<PRINC !\[>
		<PRIN1 (<DAT><RTIM>)>
		<PRINC !\ >
		<PRINC .SN>
		<PRINC !\ >
		<PRINC .PL>
		<PRINC !\ >
		<COND (.W <PRINC "WON">)
		      (ELSE <PRINC "LOST">)>
		<PRINC !\ >
		<PRIN1 .TI>
		<PRINC !\ >
		<PRIN1 .SW>
		<PRINC !\]>
		<TERPRI>)>>

<ENDBLOCK>