 TITL               FREEWAY CROSSING PROGRAM
 SAVE
 LOAD
 EVEN
 ORG 100
 JMS INPUT  /MAIN PROGRAM
 JMS START1 START UP BY INITIALIZING
LOOP1 JMS KEYS /CHECK AND ACT ON KEYBOARD
 LAC #SETFIRE
 ASZ        NO CHANGE IN POSITION UNLESS SET
 JMS POS    /MODIFY CAR POSITIONS
 LAC #SCOREINC
 ISZ #SCOREINC
 RAR 1
 LSZ        EVERY SECOND LOOP CHANGE SCORE
 JMP LOOP2-2
 LAC #SETFIRE
 ASZ
 JMS SCOREMOD MODIFY SCORE
 JMS EXEC   EXECUTE DISPLAY
 JMP LOOP1  /LOOP IF SUBJECT NOT MOVING
LOOP2 JMS POS /MODIFY CAR POSITIONS
 JMS SUBJECT /MODIFY SUBJECT'S POSITION
 JMS CRASH  /CHECK FOR CRASH, IF SO ACT ON IT
 JMS END    /CHECK IF SUBJECT CROSSED INTERSECTION
 JMS EXEC   /EXECUTE DISPLAY
 JMP LOOP2  /END OF MAIN PROGRAM,LOOP
POS BSS 1   /GET NEW CAR POSITIONS
 LAW CARTAB /INDEXING
 DAC #CARTAB /FOR CAR TABLE
 LAW RVEL   /INDEXING
 DAC #RVEL  /FOR RANDOM VELOCITY
 LAW VEL    /INDEXING
 DAC #VEL   /FOR VELOCITIES
 LAW POSIT
 DAC #POSIT /FOR CURRENT POSITIONS
 LWC 6      /LOOP SIX TIMES
 DAC #CTR
POSLP I LAC #RVEL /GET VELOCITY FOR CAR
 ASN
 JMP POSZERO /IF ZERO GO TO NEXT ONE
 I ADD #POSIT /ADD CURRENT POSITION
 ASP        /SKIP IF POSITIVE, CHECK FOR OFF SCREEN LEFT
 JMS NEG
 SUB =2640  /CHECK FOR OFF SCREEN RIGHT
 ASM
 JMS PLUS

 ADD =2640
 I DAC #POSIT /STORE
 JMS CONVERT
 I DAC #CARTAB
POSZERO ISZ #RVEL
 ISZ #VEL
 ISZ #POSIT
 ISZ #CARTAB
 ISZ #CTR
 JMP POSLP  /LOOP BACK
 LAC CARTAB
 DAC CAR1
 LAC CARTAB+1
 DAC CAR2
 LAC CARTAB+2
 DAC CAR3
 LAC CARTAB+3
 DAC CAR4
 LAC CARTAB+4
 DAC CAR5
 LAC CARTAB+5
 DAC CAR6
 I JMP POS  /RETURN
NEG BSS 1   /TAKE CARE OF OFF LEFT POSITION
 JMS RRRR   /GET RANDOM VELOCITY
 CIA
 I DAC #RVEL
 LAC =2637
 I JMP NEG  /RETURN
PLUS BSS 1  /TAKE CARE OF OFF RIGHT POSITION
 JMS RRRR   /GET RANDOM VELOCITY
 I DAC #RVEL
 LWC 2640
 I JMP PLUS /RETURN
RRRR BSS 1  /SUBROUTINE FOR RANDOM VELOCITIES
 I LAC #VEL /GETS RVEL: VEL>=RVEL>=VEL/2
 JMS RAND
 I ADD #VEL
 SAR 1
 I JMP RRRR /RETURN
CONVERT BSS 1 /CONVERT TO D LXA
 SAR 1

 ADD =10230 /MAKE D LXA
 I JMP CONVERT /RETURN
SUBJECT BSS 1 /GET POSITION FOR SUBJECT
 LAC #SUBPOS
 ADD #SUBVEL
 DAC #SUBPOS /GET NEW POSITION
 SAL 1
 JMS CONVERT
 ADD =10352 /MAKE D LYA
 DAC CAR0   /STORE IN DISPLAY
 I JMP SUBJECT /RETURN
RVEL OCT 40 /STORAGE FOR RANDOM VELOCITIES
 OCT 40
 OCT 40
 OCT 177740
 OCT 177740
 OCT 177740
VEL OCT 40  /TABLE OF VELOCITIES
 OCT 40
 OCT 40
 OCT 40
 OCT 40
 OCT 40
POSIT HLT   /TABLE OF CURRENT POSITIONS
 HLT
 HLT
 HLT
 HLT
 HLT
CARTAB BSS 6 /TABLE FOR CARS
TAB1 D JMS LETTER+45 ZERO
TAB D JMS B3 /NUMBER TABLE
 D JMS B3+5
 D JMS B3+13
 D JMS B3+20
 D JMS B3+26
 D JMS B3+33
 D JMS B3+42
 D JMS B3+46
 D JMS B3+56
KEYS BSS 1  /KEYBOARD READ ROUTINE
 KSF      /SKIP ON KEYBOARD FLAG
 I JMP KEYS /OTHERWISE RETURN

 CLA
 KRC
 AND =177
 SAM =2     TRANSMIT
 JMP K2
 LAC #SETFIRE
 ASZ        SKIP IF ZERO
 JMP K3
 COA        FINISH SETTING
 DAC #SETFIRE
 LAC =<D JMP FIRE
 DAC SET
 LAC =<D NOP
 DAC FIRE
 LAC #SCOREON
 ASN        SKIP IF SCORING
 I JMP KEYS RETURN
 LAC #K1
 DAC .+3
 LAC #SUBVEL
 JMS M
 BSS 1
 CIA
 ADD #SCORE SCORE=SCORE-K1*SUBVEL
 DAC #SCORE
 I JMP KEYS RETURN
K3 LAC =<D JMP CAR0 FIRING
 DAC FIRE
 JMP LOOP2
K2 DAC #TMP
 LAC #SETFIRE IF SET CAN'T CHANGE IT
 ASZ
 I JMP KEYS SO RETURN
 LAC #PERMSET SAME HERE
 ASZ
 I JMP KEYS RETURN IF PERMANENT SET OF KEYS
 LAC #TMP
 SAM =4     /DOWN
 JMP K1     /SKIP IF NO
 LAC #SUBVEL
 SAM =1     /SKIP IF MIN
 JMP .+2
 I JMP KEYS /AND RETURN
 SUB =1
 DAC #SUBVEL /DECREMENT VELOCITY
 LAC #VADR
 SUB =1

 DAC #VADR  /DECREMENT TABLE
 I LAC #VADR
 DAC DIGIT  /STORE NEW DIGIT IN DISPLAY
 I JMP KEYS /RETURN
K1 SAM =6   /UP
 I JMP KEYS RETURN IF NO
 LAC #SUBVEL
 SAM =11    /SKIP IF MAX
 JMP .+2
 I JMP KEYS /AND RETURN
 ISZ #SUBVEL /INCREMENT VELOCITY
 ISZ #VADR  /AND TABLE ADDRESS
 I LAC #VADR
 DAC DIGIT  /STORE NEW DIGIT IN DISPLAY
 I JMP KEYS RETURN
INPUT BSS 1 INPUT VELOCITIES, ETC.
 CLA
 DAC #PERMSET
 LDA        INPUT PERMANENT OR NOT
 ASM
 JMP INSCORE
 COA
 DAC #PERMSET
 LDA
 AND =17    GET SET SUBJECT VELOCITY
 ASN        IF MISTAKE AND SET TO 0, SET TO 1
 COA
 DAC #SUBVEL STORE VELOCITY
 LAW TAB1
 ADD #SUBVEL
 DAC #VADR
 I LAC #VADR
 DAC DIGIT
INSCORE HLT INPUT NEXT
 CLA
 DAC #SCOREON
 DAC #SCOREMAX
 LDA
 ASM
 JMP INCAR  IF NO SCORING, DON'T INPUT MAXSCORE
 AND =77
 DAC #K2    INPUT K2
 LDA
 AND =77700 INPUT K1
 SAR 3
 SAR 3
 DAC #K1

 HLT
 LDA
 AND =37    NOW INPUT MAXSCORE IN # OF THOUSANDS (DECIMAL)
 DAC .+3    MAXIMUM IS 31,000 (INPUT 37 OCTAL)
 LAW 1750
 JMS M
 BSS 1
 DAC #SCORE STORE AS SCORE
 LAC #K2
 DAC .+3    ADJUST SCORE FOR FIRST DECREMENT
 LAW 5
 JMS M
 BSS 1
 DAC #K2
 ADD #SCORE
 DAC #SCOREMAX
 COA
 DAC #SCOREON
INCAR LAC =B INITIALIZE OUTPUT BUFFER
 DAC #OTA
 CLA
 DAC #OTC
 LAC #PERMSET
 JMS OUTPUT OUTPUT PERMSET
 LAC #SUBVEL
 JMS OUTPUT OUTPUT SET VELOCITY
 LAC #SCOREON (MEANINGLESS IF PERMSET = 0)
 JMS OUTPUT OUTPUT SCOREON
 LAC #K1    (FOLLOWING IS MEANINGLESS IF SCOREON = 0)
 JMS OUTPUT OUTPUT K1
 LAC #K2
 JMS OUTPUT OUTPUT K2
 LAC #SCOREMAX
 SUB #K2
 JMS OUTPUT OUTPUT SCOREMAX
 HLT        INPUT CAR SPEEDS
 LAW CARTAB /INDEXING
 DAC #CARTAB /FOR CAR CALLS
 LAW RVEL
 DAC #RVEL  /FOR RANDOM VELOCITIES
 LAW VEL
 DAC #VEL   /FOR VELOCITIES
 LWC 6
 DAC #CTR   /LOOP SIX TIMES
INLOOP LDA  /READ DATA SWITCHES
 ASN
 JMP .+3

 LAC =<D JMS CAR
 JMP .+2
 LAC =<D NOP
 I DAC #CARTAB /STORE WHETHER SEEN OR NOT
 LDA
 DAC #TMP
 ASP
 JMP .+2    IF NEGATIVE OUTPUT MINUS SIGN
 JMP .+3
 LAW 55     (-)
 JMS WRITE
 LAC #TMP
 I DAC #RVEL /STORE IN CURRENT VELOCITY
 ASM
 JMP INPOS
 AND =77777 /TAKES CARE OF NEGATIVE NUMBERS
 CIA
 I DAC #RVEL /STORE IN CURRENT VELOCITY
 CIA
INPOS I DAC #VEL /STORE IN VELOCITY
 JMS OUTPUT OUTPUT CAR VELOCITY
 ISZ #CARTAB /INCREMENT INDEXES
 ISZ #RVEL
 ISZ #VEL
 HLT        /STOP FOR NEXT INPUT
 ISZ #CTR   /INCREMENT COUTER
 JMP INLOOP
 LAC CARTAB
 DAC CAR1+3
 LAC CARTAB+1
 DAC CAR2+3
 LAC CARTAB+2
 DAC CAR3+3
 LAC CARTAB+3
 DAC CAR4+3
 LAC CARTAB+4
 DAC CAR5+3
 LAC CARTAB+5
 DAC CAR6+3
 LAW 15     CR
 JMS WRITE
 LAW 12     LF
 JMS WRITE
 JMP START4 START
SCOREMOD BSS 1 ROUTINE TO MODIFY SCORE
 ISZ #TIME  INCREMENT TIME IF SETFIRE SET
 NOP

 LAC #SCOREON
 ASN
 I JMP SCOREMOD RETURN ON NO SCORE DISPLAY
 LAC #SCORE
 SUB #K2
 ASP
 CLA        IF NEGATIVE SET TO 0
 DAC #SCORE
 CLA        NOW PUT IN DISPLAY
 DAC #BLANK BLANK INDICATOR
 LAW NUM1
 DAC #NUM1
 LAW 12
 DAC SDIV
 DAC SDIV+2
 DAC SDIV+4
 DAC SDIV+6
 LAC #SCORE
 JMS D
SDIV BSS 1
 JMS D
 BSS 1
 JMS D
 BSS 1
 JMS D
 BSS 1
 JMS INSERT
 LAC SDIV+6
 JMS INSERT
 LAC SDIV+4
 JMS INSERT
 LAC SDIV+2
 JMS INSERT
 COA
 DAC #BLANK
 LAC SDIV
 JMS INSERT
 I JMP SCOREMOD RETURN
INSERT BSS 1 SCORE INSERTION ROUTINE
 ASN
 JMP INSERT1
 ADD =TAB1
 DAC #TMP
 I LAC #TMP
 I DAC #NUM1
 ISZ #NUM1
 COA

 DAC #BLANK CHANGE BLANK INDICATOR
 I JMP INSERT RETURN
INSERT1 LAC #BLANK HANDLE ZEROES
 ASZ         DO BLANKS
 JMP .+3
 LAC =<D IXM
 JMP .+2
 LAC TAB1
 I DAC #NUM1
 ISZ #NUM1
 I JMP INSERT RETURN
START1 BSS 1 ALTERNATE START LOCATION
 LAC =B
 DAC #OTA   INITIALIZE OUTPUT BUFFER
 CLA
 DAC #OTC
START4 LAC #PERMSET
 ASZ
 JMP START3
 LAW TAB
 DAC #VADR
 LAC TAB
 DAC DIGIT
 COA
 DAC #SUBVEL
START3 LAC =<D NOP
 DAC SCORE
 LAC #SCOREON IF NO SCORING, TURN OFF SCORE
 ASZ
 JMP START2
 LAC =<D JMP SET
 DAC SCORE
 JMP START2
START BSS 1 /INITIALIZATION ROUTINE
 LAC #SUBVEL
 JMS OUTPUT OUTPUT SUBJECT VELOCITY
 LAW 5
 DAC .+3    MULTIPLY TIME BY 5 TO GET 1/100'S
 LAC #TIME
 JMS M
 BSS 1
 JMS OUTPUT OUTPUT TIME
 LAC #SCORE
 JMS OUTPUT OUTPUT SCORE
 LAC #CRASH
 JMS OUTPUT OUTPUT CRASH OR NOT
 LAW 15     CR

 JMS WRITE
 LAW 12      LF
 JMS WRITE
START2 LAC =<D LYA 602
 DAC CAR0   /INITIALIZE SUBJEXT
 CLA
 DAC #SUBPOS
 LAC =<D NOP
 DAC CRUNCH0 /CRUNCH INVISIBLE
 DAC SET    SET VISIBLE
 LAC =<D JMP CAR0
 DAC FIRE
 LAC #SCOREMAX
 DAC #SCORE
 JMS SCOREMOD
 CLA
 DAC #SETFIRE
 DAC #SCOREINC
 DAC #TIME
 JMP LOOP1  RETURN
END BSS 1   /DID THE SUBJECT MAKE IT?
 LAC CAR0
 SUB =<D LYA 1176
 ASP
 I JMP END  /RETURN IF HE DIDN'T
 CLA
 DAC #CRASH CRASH INDICATOR - 0= NO
 JMP CRASHED1 WAIT FOR XMIT, THEN RESTART
CRASH BSS 1 /ROUTINE TO CHECK FOR CRASH
 KSN
 KRC        CLEAR KEYBOARD
 LAW POSIT  /INDEXING
 DAC #POSIT /FOR POSITIONS
 LAW VEL
 DAC #VEL
 LWC 6
 DAC #CTR   /LOOP COUNTER
 LAW 44
 DAC #Y     INITIALIZE Y
CRASHLP I LAC #VEL CHECK FOR ZERO VELOCITY
 ASN
 JMP CRASHOUT JUMP OUT IF ZERO
 LAC #Y
 SUB #SUBPOS /GET Y DIFFERENCE
 ASP
 CIA        /ABSOLUTE VALUE
 DAC #YDIF

 I LAC #POSIT
 SAR 1
 SUB =550   /GET X DIFFERENCE
 ASP
 CIA        /ABSOLUTE VALUE
 SUB =37    /CHECK FOR X OVERLAP
 ASM
 JMP CRASHOUT /IF NONE JUMP OUT
 LAC #YDIF  /IF YES, CHECK FOR Y OVERLAP
 SUB =37    /CHECK FOR CRASH
 ASP        /SKIP IF NONE
 JMP CRASHED
CRASHOUT ISZ #POSIT /INCREMENT EVERYTHING
 ISZ #VEL
 LAW 44
 ADD #Y
 DAC #Y
 ISZ #CTR
 JMP CRASHLP /LOOP
 I JMP CRASH /RETURN IF NO CRASH
CRASHED LAC =<D JMS CRUNCH
 DAC CRUNCH0
 COA
 DAC #CRASH CRASH INDICATOR - 1=YES
 LAC #TIME
 SUB =1
 DAC #TIME  DECREMENT TIME (TO TAKE CARE OF SCOREMOD IN...
 CLA
 DAC #SCORE
 JMS SCOREMOD SET SCORE TO ZERO IF CRASH
CRASHED1 KSN CHECK KEYBOARD
 JMP .+3    /READ KEYBOARD
 JMS EXEC   /DISPLAY IF NO KEY
 JMP CRASHED1
 CLA
 KRC
 AND =177
 SAM =2     /CHECK FOR XMIT
 JMP CRASHED1 IF NOT LOOP
 JMS START  IF YES, START OVER
RAND BSS 1  /SUBROUTINE FOR RANDOM NUMBER FROM ZERO TO...
            /USES 12 WORDS, 14 OCTAL.  USES LABEL RAND...
            /LIMIT IN AC. REQUIRES USE OF SUBROUTINES...
            /RANDOM NUMBER RETURNED IN AC
 ASN        /SKIP IF NONZERO
 I JMP RAND /RETURN
 DAC .+4

 JMS NR     /GET RANDOM NUMBER 0-77777
 LAC RD     /LOAD IT
 JMS M      /MULTIPLY BY LIMIT
 BSS 1
 RAL 1      /GET BIT 0 IN LINK
 LAC .-2    /LOAD DOUBLEWORD
 RAL 1      /GET LINK IN BIT 15
 I JMP RAND /RETURN
NR BSS 1    /RANDOM NUMBER GENERATOR
            /USES 11 WORDS, 13 OCTAL. USES LABELS NR,R...
            /RANDOM NUMBER RETURNED IN AC
            /REQUIRES SUBROUTINE M
            /GIVE STARTING SEED IN RD
            /CURRENT RANDOM NUMBER WILL BE STORED IN R...
            /RANDOM NUMBER IS INTEGER BETWEEN 0 AND 777...
            /ALGORITHM FOLLOWS:
            /B IS THE WORD LENGTH MINUS THE SIGN BIT. ...
            /MULTIPLY THE CURRENT RANDOM NUMBER BY 2**...
            /TAKE THE LEAST SIGNIFICANT B BITS OF THIS...
            /THAT IS YOUR CURRENT RANDOM NUMBER AND YOU...
 LAC RD-2
 DAC .+3
 LAC RD
 JMS M
 BSS 1
 ASN
 LAC RD-1   /IF ZERO, SET TO 77777 OCTAL
 AND RD-1   /ZERO THE SIGN BIT
 DAC RD
 I JMP NR   /RETURN
 OCT 20003
 OCT 77777
RD BSS 1    /THE RANDOM NUMBER
M BSS 1     /MULTIPLY ROUTINE
            /TAKES 52 WORDS CORE,64 OCTAL. USES LABEL ...
            /MULTIPLICAND ASSUMED IN AC
            /MULTIPLIER ASSUMED IN WORD AFTER JMS. RET...
            /BE MADE TO WORD FOLLOWING MULTIPLIER
            /RESULT RETURNED IN AC.
            /LINK SET IF RESULT OUTSIDE RANGE -2**15 TO...
            /OVERFLOW WORD RETURNED TO WORD FOLLOWING ...
            /ALGORITHM FOLLOWS:
            /X:=MULTIPLICAND
            /Q:=MULTIPLIER
            /A:=0
            /MSN:=TRUE
            /IF X<0 THEN BEGIN X:=-X

            /                  MSN:=-MSN; END
            /IF Q<0 THEN BEGIN Q:=-Q
            /                  MSN:=-MSN; END
            /COMMENT IF MSN TRUE ,PRODUCT POS.
            /        IF MSN FALSE, PRODUCT NEG.
            /FOR K=-16 STEP 1 UNTIL -1 DO
            /BEGIN IF BIT 15(Q)=1 THEN A :=A+X
            /      DOUBLEWORDSHIFTRIGHTONEBIT(A,Q); EN...
            /IF A NE 0 OR BIT 0(Q) NE 0 THEN SETLINKON...
            /IF -MSN THEN Q:=-Q
            /COMMENT PRODUCT IN Q
 CLL        /CLEAR LINK
 ASM        /MULTIPLICAND NEGATIVE?
 JMP .+3    /NO
 CIA        /YES,2'S COMP AC
 CML        /COMP LINK(REMEMBER SIGN)
 DAC M+63   /MULTIPLICAND TO X
 I LAC M    /MULTIPLIER TO AC
 ASM        /MULTIPLIER NEG?
 JMP .+3    /NO
 CIA        /YES,2'S COMP MULTIPLIER
 CML        /COMP LINK,1=PROD NEG,0=PROD POS
 DAC M+56   /MULTIPLIER TO Q
 CLA        /CLEAR AC
 DAC M+57   /0 TO A
 LSZ        /LINK ZERO(PROD POS?)
 STA        /NO,PROD NEG,-1 TO MSN
 DAC M+60   /YES,0 TO MSN
 LWC 20     /-16 TO AC
 DAC M+61   /INITIALIZE COUNT
 LAC M+56   /Q INTO AC
 RAR 1      /Q(15) INTO LINK
 LAC M+57   /A INTO AC
 LSN        /Q(15)=1?
 JMP .+2    /NO
 ADD M+63   /YES,ADD X TO PARTIAL PROD A
 DAC M+62   /STORE PARTIAL PROD FOR OVERFLOW CHECK(...
 CLL        /CLEAR LINK (SET A(0)=0)
 RAR 1      /DOUBLEWORD
 DAC M+57   /SHIFT  (A)
 I DAC M    /(STORE OVERFLOW WORD IN WORD FOLLOWING...
 LAC M+56   /RIGHT  (Q)
 RAR 1      /ONE
 DAC M+56   /BIT
 ISZ M+61   /INCREMENT COUNTER,=0?
 JMP M+25   /NO, LOOP
 LAC M+62   /YES, EXIT LOOP;0=NO OVER.,NF  0=OVERFLOW(M...

 CLL        /CLEAR LINK (NO OVERFLOW)
 ASZ        /TEST FOR OVERFLOW
 STL        /OVERFLOW, SET LINK
 LAC M+56   /PRODUCT Q INTO AC
 ISZ M+60   /TEST PROD SIGN (MSM)
 CIA        /SIGN POS,COMP AC
 CIA        /SIGN NEG,COMP AC
 ISZ M      /INCREMENT RETURN ADR
 I JMP M    /RETURN
 BSS 6      /STORAGE
D BSS 1     /DIVIDE ROUTINE 
            /TAKES 65 WORDS CORE
            /DIVIDEND ASSUMED IN AC
            /DIVISOR ASSUMED WORD AFTER JMS, RETURN WI...
            /WORD FOLLOWING DIVISOR
            /QUOTIENT LEFT IN AC
            /REMAINDER LEFT IN WORD FOLLOWING JMS.  SI...
            /SAME AS THAT OF DIVIDEND
            /IF DIVISOR IS ZERO, LINK SET AND DIVIDEND...
            /LINK ZERO IF EVERYTHING NORMAL
            /ALGORITHM FOLLOWS:
            /Q:=DIVIDEND
            /X:=DIVISOR
            /A:=0
            /DSN:=TRUE
            /IF X<0 THEN BEGIN X:=-X
            /                  DSN:=-DSN; END
            /IF Q<0 THEN BEGIN Q:=-QUOTIENT
            /                  DSN:=-DSN
            /                  DIV:=FALSE; END
            /            ELSE DIV:=TRUE
            /IF X=0 THEN EXIT
            /COMMENT IF DSN TRUE,QUOTIENT POS, IF DSN ...
            /        IF DIV TRUE THEN DIVIDEND (AND RE...
            /        IF DIV FALSE THEN DIVIDEND (AND R...
            /FOR K=-16 STEP 1 UNTIL -1 DO
            /BEGIN DOUBLEWORDROTATELEFTONEBIT(A,Q)
            /      IF A>=X THEN BEGIN A:=A-X; SETBIT15...
            /IF -DIV THEN A:=-A
            /IF -DSN THEN Q:=-QUOTIENT
            /COMMENT QUOTIENT IN Q, REMAINDER IN A
 CLL        /CLEAR LINK
 ASM        /DIVIDEND NEGATIVE?
 JMP .+3    /NO
 CIA        /YES,2'S COMP. AC
 CML        /COMP. LINK (REMEMBER SIGN)
 DAC D+73   /DIVIDEND IN Q

 STA        /-1 TO AC
 LSN        /DIVIDEND NEGATIVE?
 CLA        /NO,0 TO DIV(REMAINDER POS)
 DAC D+74   /YES,-1 TO DIV (REMAINDER NEG)
 I LAC D    /DIVISOR TO AC
 ASM        /DIVISOR NEGATIVE?
 JMP .+3    /NO
 CIA        /YES,2'S COMP DIVISOR
 CML        /COMP LINK(0=POS QUOT,1=NEG QUOT)
 DAC D+75   /DIVISOR IN X
 ASZ        /DIVISOR=0?
 JMP .+4    /NO
 STL        /YES,SET LINK
 ISZ D      /INCREMENT PAST DIVISOR TO RTN ADR
 I JMP D    /RETURN
 CLA        /CLEAR AC
 DAC D+76   /A=0
 LSZ        /QUOTIENT POS(LINK 0)?
 STA        /NO,-1 TO DSN(QUOTIENT NEG)
 DAC D+77   /YES,0 TO DSN (QUOTIENT POS)
 LWC 20     /-16 TO AC
 DAC D+100  /INITIALIZE COUNT IN D?T
 LAC D+73   /Q INTO AC
 CLL        /CLEAR LINK(SET Q(15)=0)
 RAL 1      /DOUBLE WORD
 DAC D+73   /ROTATE  (Q)
 LAC D+76   /LEFT  (A)
 RAL 1      /ONE
 DAC D+76   /BIT  (A)
 SUB D+75   /SUBTRACT X FROM A
 ASP        /IS A>=X(AC POS)
 JMP D+53   /NO, GO ROTATE
 DAC D+76   /YES,AC NOW A
 LAW 1      /SET BIT
 IOR D+73   /15
 DAC D+73   /OF Q
 ISZ D+100  /BUMP COUNTER,COUNT=0?
 JMP D+35   /NO,LOOP AGAIN
 ASN        /IF DIVIDEND = 0, A (REMAINDER IN ALGORITH...
 JMP .+6    /LEAVE WORD AFTER JMS (REMAINDER) UNTOUCHED
 LAC D+76   /REMAINDER INTO AC
 ISZ D+74   /REMAINDER NEG?
 CIA        /NO POS,2'S COMP
 CIA        /YES 2'S COMP IT
 I DAC D    /PLACE IT IN WORD AFTER JMS
 ISZ D      /POINT TO RETURN ADR
 LAC D+73   /QUOTIENT Q INTO AC

 ISZ D+77   /QUOTIENT NEG
 CIA        /NO,POS,2'S COMP IT
 CIA        /YES,2'S COMP IT
 CLL        /CLEAR LINK (DIVISOR NE 0)
 I JMP D    /RETURN
 BSS 6      /STORAGE
OUTPUT BSS 1 OUTPUT A NUMBER AND A COMMA
 DAC #TMP
 CLA
 DAC #BLANK BLANK INDICATOR
 LAW 12     CONVERT TO DECIMAL
 DAC ODIV
 DAC ODIV+2
 DAC ODIV+4
 DAC ODIV+6
 LAC #TMP
 JMS D
ODIV BSS 1
 JMS D
 BSS 1
 JMS D
 BSS 1
 JMS D
 BSS 1
 JMS OUT1   START OUTPUTTING DECIMAL DIGITS
 LAC ODIV+6
 JMS OUT1
 LAC ODIV+4
 JMS OUT1
 LAC ODIV+2
 JMS OUT1
 COA        CHANGE BLANK INDICATOR FOR LAST DIGIT
 DAC #BLANK
 LAC ODIV
 JMS OUT1
 LAW 54     COMMA
 JMS WRITE
 I JMP OUTPUT RETURN
OUT1 BSS 1  OUTPUT DIGIT UNLESS BLANK
 DAC #TMP
 ASZ
 JMP .+4
 LAC #BLANK
 ASN
 I JMP OUT1 RETURN IF BLANK
 COA
 DAC #BLANK OTHERWISE SET BLANK IND. TO 1

 LAC #TMP
 JMS WRITE
 I JMP OUT1 RETURN
WRITE BSS 1 SUBROUTINE TO PACK OUTPUT IN BUFFER B
 DAC #OTD
 LAC #OTC   FIRST OR SECOND BYTE INDICATOR
 ISZ #OTC
 RAR 1
 LSZ
 JMP .+7
 LAC #OTD   FIRST BYTE
 SAL 3
 SAL 3
 SAL 2
 I DAC #OTA PUT IN BUFFER
 I JMP WRITE RETURN
 I LAC #OTA SECOND BYTE
 ADD #OTD
 I DAC #OTA PUT IN BUFFER
 ISZ #OTA
 CLA
 I DAC #OTA EXTRA ZERO WORD
 LAC #OTA
 SAM =10000 RETURN UNLESS BUFFER FULL
 I JMP WRITE RETURN
 HLT        IF SO STOP, NOW MUST OUTPUT AND RESTART AT...
EXEC BSS 1  /EXECUTE ONE DISPLAY CYCLE
 DSN
 JMP .-1
 SSF
 JMP .-1
 SCF
 LDA        /LOAD DATA SWITCHES
 ASM        /SKIP IF BIT 0 ON
 HLT        /OTHERWISE STOP
 LAW DIS    /GET DISPLAY ADDRESS
 DLA
 DON        /RUN DISPLAY
 I JMP EXEC /RETURN
LRD1 INC EB30
 INC 3030
 INC 3030
 INC 3030
 INC D3030
 INC D3030
 INC D30A140

 D NOP
 D NOP
LLD2 INC ED-30
 INC D-30-30
 INC D-30-30
 INC B-30-30
 INC B-30-30
 INC B-30-30
 INC B-30A140
 D NOP
 D NOP
 D NOP
LRD3 INC ED30
 INC D3030
 INC D3030
 INC B3030
 INC B3030
 INC B3030
 INC B30A140
 D NOP
 D NOP
LLD4 INC EB-30
 INC -30-30
 INC -30-30
 INC -30-30
 INC D-30-30
 INC D-30-30
 INC D-30A140
 D NOP
 D NOP
 D NOP
LR5 INC EB30
 INC 3030
 INC 3030
 INC 30A140
 D NOP
 D NOP
CAR INC ED-33 /WORD CAR
 INC -10B-30
 INC -200-3
 INC 0-320
 INC 30D10
 INC B2313
 INC 2-31-3
 INC D-12B-30
 INC D302-2
 INC B0303
 INC 302-1

 INC 0-1-2-1
 INC -30D30
 INC B2-3D33
 INC 30B03  /SQUARE
 INC 0303
 INC 0303
 INC -30-30
 INC -30-30
 INC -30-30
 INC -30-30
 INC -30-30
 INC 0-30-3
 INC 0-30-3
 INC 0-30-3
 INC 0-30-3
 INC 0-30-3
 INC 3030
 INC 3030
 INC 3030
 INC 3030
 INC 3030
 INC 0303
 INC 0303
 INC 03F
UP INC EB03 /LINE GOING UP
 INC 0303
 INC 0303
 INC 03A140
 D NOP
 D NOP
B3 INC ED10 /ONE
 INC B2020
 INC D-20B03
 INC 0302
 INC -2-2F
 INC ED03   /TWO
 INC 03B22
 INC 202-2
 INC -1-2-2-1
 INC -3-330
 INC 30F
 INC EB30   /THREE
 INC 32-22
 INC -30D30
 INC B22-22
 INC -30F
 INC ED30   /FOUR

 INC D10B03
 INC 0302
 INC -3-3-1-2
 INC 3030
 INC FF
 INC EB30   /FIVE
 INC 3102
 INC -32-30
 INC 0330
 INC 30F
 INC ED03   /SIX
 INC B2120
 INC 2-2-2-2
 INC -20-22
 INC 0323
 INC 202-2
 INC FF
 INC EB23   /SEVEN
 INC 3312
 INC -30-30
 INC FF
 INC ED20   /EIGHT
 INC B2021
 INC 02-31
 INC -3222
 INC 202-2
 INC -3-2-1-1
 INC 0-22-1
 INC FF
 INC ED30   /NINE
 INC B2313
 INC 03-30
 INC -2-22-2
 INC 30F
CRUNCH INC ED22 /CRUNCH DRAWING ROUTINE
 INC 00B-2-2
 INC -33-11
 INC 2222
 INC 2-2D3-3
 INC 0-3B03
 INC 0302
 INC 303-2
 INC -3-2-30
 INC D20B2-2
 INC 2-2D3-3
 INC 2-30-3
 INC 0-30-2

 INC B-3-3-2-3
 INC -23-23
 INC -23-23
 INC -3-2-3-2
 INC -3-2-3-2
 INC 1313
 INC -31-31
 INC -31-31
 INC 3232
 INC 32-33
 INC -3331
 INC 31-23
 INC -23-23
 INC 3-13-1
 INC 1313
 INC 133-3
 INC 3-313
 INC 133-2
 INC 3-23-2
 INC 2323
 INC D00A111
 D LXA 1022
 D LYA 340
 D NOP
 D NOP
 INC ED30
 INC 3030
 INC 3030
 INC B11-11
 INC 1303
 INC -200-3
 INC 1-3-1-1
 INC 1-1D-20
 INC -20B03
 INC 0302
 INC D0-20-2
 INC B-30-30
 INC D0202
 INC B0-30-3
 INC 0-2D-32
 INC B-2-2-22
 INC -2222
 INC 222-2
 INC D-32-30
 INC -30B0-3
 INC 0-30-2
 INC -22-23

 INC -230-3
 INC 0-30-2
 INC D-3303
 INC 02B-1-3
 INC -1-3-1-2
 INC -12-13
 INC -13D03
 INC 0303
 INC 0303
 INC 01B3-3
 INC 3-333
 INC 332-3
 INC 2-32-3
 INC 2323
 INC 122-3
 INC 2-332
 INC 3232
 INC 0-30-3
 INC 3131
 INC 31-2-3
 INC -2-3-2-3
 INC 3-23-2
 INC 3-2-3-2
 INC -3-23-3
 INC 3-3-30
 INC -30-30
 INC 1-31-3
 INC 1-3-32
 INC -32-32
 INC -1-3-1-3
 INC -1-3-33
 INC -33-2-3
 INC -2-3-2-3
 INC -23-23
 INC -3-3-3-3
 INC -33-33
 INC FF
LETTER INC EB13 A
 INC 1312
 INC 1-31-3
 INC 1-2D-23
 INC B-30F
 INC ED32   C
 INC 30B-2-2
 INC -20-22
 INC 0323
 INC 202-2

 INC FF
 INC EB03   D
 INC 0302
 INC 302-1
 INC 1-20-2
 INC -1-2-2-1
 INC -30F
 INC EB30   E
 INC 30A11
 INC B0202
 INC 30D-30
 INC B0202
 INC 3030
 INC FF
 INC EB03   H
 INC 0302
 INC D0-30-1
 INC B3030
 OCT 703
 INC B0302
 INC FF
 INC EB03   N
 INC 0302
 INC 2-32-3
 INC 2-203
 INC 0302
 INC FF
 INC ED10   O
 INC B2020
 INC 1302
 INC -13-20
 INC -20-1-3
 INC 0-21-3
 INC FF
 INC EB03   P
 INC 0302
 INC 303-1
 INC 0-2-3-1
 INC -30F
 INC EB03   R
 INC 0302
 INC 303-1
 INC 0-2-3-1
 INC -30D30
 INC B2-21-2
 INC FF
 INC ED01   S

 INC B2-130
 INC 13-31
 INC -3113
 INC 302-1
 INC FF
 INC ED30   T
 INC B0303
 INC 02A10
 INC B3030
 INC FF
 INC EB03   W
 INC 0302
 OCT 733
 INC B3-303
 INC 0302
 INC FF
 INC ED30   Y
 INC B0203
 INC 33A10
 INC B3-3F
 INC ED32   :
 INC B00D03
 INC D01B00
 INC FF
REST D NOP  /DISPLAY WAIT ROUTINE
 D NOP
 D NOP
 D NOP
 D NOP
 D NOP
 D NOP
 D NOP
 D NOP
 D NOP
 D RJM      /RETURN
DIS D HVC  /START OF DISPLAY
 D STS 1
 D LXA 230 /DRAW HIGHWAY
 D LYA 1154
 D NOP
 D NOP
 D NOP
 D NOP
 D NOP
 D JMS LR5
 D JMS LR5
 D JMS LR5

 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D LXA 1022
 D NOP
 D NOP
 D NOP
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D LYA 1110
 D NOP
 D NOP
 D NOP
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4

 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D LYA 1044
 D NOP
 D NOP
 D NOP
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D LYA 1000
 D NOP
 D NOP
 D NOP
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4

 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D LYA 734
 D NOP
 D NOP
 D NOP
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD1
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D JMS LRD3
 D LYA 670
 D NOP
 D NOP
 D NOP
 D JMS LLD4
 D JMS LLD4

 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD4
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D JMS LLD2
 D LYA 624
 D NOP
 D NOP
 D NOP
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D LXA 1022
 D NOP
 D NOP
 D NOP
 D JMS LR5
 D JMS LR5

 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D JMS LR5
 D LXA 1000
 D LYA 602
 D JMS REST
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
 D JMS UP
SCORE D NOP
 D LXA 745
 D LYA 1440
 D JMS REST
 D JMS LETTER+70  S
 D JMS LETTER+5   C
 D JMS LETTER+45  O
 D JMS LETTER+61  R
 D JMS LETTER+21  E
 D JMS LETTER+115 :
 D LXA 745
 D DYM
 D DYM

 D JMS REST
 D IXM
NUM1 D IXM
 D IXM
 D IXM
 D IXM
 D JMS LETTER+45
 D LXA 1000
SET D NOP
 D LXA 670
 D LYA 340
 D JMS REST
 D JMS LETTER+70  S
 D JMS LETTER+21  E
 D JMS LETTER+76  T
 D IXM
 D JMS LETTER+5   C
 D JMS LETTER     A
 D JMS LETTER+61  R
 D IXM
 D JMS LETTER+70  S
 D JMS LETTER+54  P
 D JMS LETTER+21  E
 D JMS LETTER+21  E
 D JMS LETTER+13  D
 D LXA 1000
FIRE D NOP
 D LXA 670
 D LYA 340
 D JMS REST
 D JMS LETTER+70  S
 D JMS LETTER+76  T
 D JMS LETTER     A
 D JMS LETTER+61  R
 D JMS LETTER+76  T
 D IXM
 D JMS LETTER+103 W
 D JMS LETTER+30  H
 D JMS LETTER+21  E
 D JMS LETTER+37  N
 D IXM
 D JMS LETTER+61  R
 D JMS LETTER+21  E
 D JMS LETTER     A
 D JMS LETTER+13  D
 D JMS LETTER+111 Y
 D LXA 1000

CAR0 D LYA 602
 D JMS REST
 D JMS CAR
 D LXA 1000
 D LYA 536
 D JMS REST
DIGIT D JMS B3
CAR1 D LXA 230
 D LYA 646
 D JMS REST
 D JMS CAR
CAR2 D LXA 230
 D LYA 712
 D JMS REST
 D JMS CAR
CAR3 D LXA 230
 D LYA 756
 D JMS REST
 D JMS CAR
CAR4 D LXA 230
 D LYA 1022
 D JMS REST
 D JMS CAR
CAR5 D LXA 230
 D LYA 1066
 D JMS REST
 D JMS CAR
CAR6 D LXA 230
 D LYA 1132
 D JMS REST
 D JMS CAR
 D LXA 756
 D LYA 340
 D JMS REST
CRUNCH0 D NOP
 D LXA 1000  /CENTER BEAM AND WAIT
 D LYA 1000
 D HLT
L BSS  1     LITERALS GO HERE
 ORG 3000
 ISZ #OTA    MODULE TO PRINT OUTPUT BUFFER--START HERE
 LAC =B
 DAC #OTB    UNPACK COUNTER
 CLA
 DAC #OTC    FIRST OR SECOND BYTE COUNTER
LPP LAC #OTC
 ISZ #OTC

 RAR 1
 I LAC #OTB LOAD PACKED WORD
 LSN
 JMP .+3
 ISZ #OTB
 JMP .+4
 SAR 3       FIRST BYTE
 SAR 3
 SAR 2
 TSF         SECOND BYTE
 JMP .-1
 TPC         TRANSMIT BYTE
 LAC #OTB
 SAM #OTA    CHECK FOR LAST ZERO WORD
 JMP LPP
 HLT         PROGRAM END
B BSS 1      PRINT BUFFER
 REL 1       LITERALS
 END
