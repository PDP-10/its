	TITLE              FREEWAY CROSSING PROGRAM
	.INSRT IMLAC;IMDEFS
	LOC 100
	JMS INPUT  ;MAIN PROGRAM
	JMS START1 ;START UP BY INITIALIZING
LOOP1:	JMS KEYS ;CHECK AND ACT ON KEYBOARD
	LAC SETFIRE'
	ASZ        ;NO CHANGE IN POSITION UNLESS SET
	JMS POS    ;MODIFY CAR POSITIONS
	LAC SCOREINC'
	ISZ SCOREINC'
	RAR 1
	LSZ        ;EVERY SECOND LOOP CHANGE SCORE
	JMP LOOP2-2
	LAC SETFIRE'
	ASZ
	JMS SCORMD ;MODIFY SCORE
	JMS EXEC   ;EXECUTE DISPLAY
	JMP LOOP1  ;LOOP IF SUBJECT NOT MOVING
LOOP2:	JMS POS ;MODIFY CAR POSITIONS
	JMS SUBJECT ;MODIFY SUBJECT'S POSITION
	JMS CRASH  ;CHECK FOR CRASH, IF SO ACT ON IT
	JMS ENDD   ;CHECK IF SUBJECT CROSSED INTERSECTION
	JMS EXEC   ;EXECUTE DISPLAY
	JMP LOOP2  ;END OF MAIN PROGRAM,LOOP
POS:	0   ;GET NEW CAR POSITIONS
	LAW CARTAB ;INDEXING
	DAC #CARTAB ;FOR CAR TABLE
	LAW RVEL   ;INDEXING
	DAC #RVEL  ;FOR RANDOM VELOCITY
	LAW VEL    ;INDEXING
	DAC #VEL   ;FOR VELOCITIES
	LAW POSIT
	DAC #POSIT ;FOR CURRENT POSITIONS
	LWC 6      ;LOOP SIX TIMES
	DAC CTR'
POSLP:	I LAC #RVEL ;GET VELOCITY FOR CAR
	ASN
	JMP POSZERO ;IF ZERO GO TO NEXT ONE
	I ADD #POSIT ;ADD CURRENT POSITION
	ASP        ;SKIP IF POSITIVE, CHECK FOR OFF SCREEN LEFT
	JMS NEG
	SUB [2640]  ;CHECK FOR OFF SCREEN RIGHT
	ASM
	JMS PLUS

	ADD [2640]
	I DAC #POSIT ;STORE
	JMS CONVERT
	I DAC #CARTAB
POSZERO:	ISZ #RVEL
	ISZ #VEL
	ISZ #POSIT
	ISZ #CARTAB
	ISZ CTR'
	JMP POSLP  ;LOOP BACK
	LAC CARTAB
	DAC CAR1
	LAC CARTAB+1
	DAC CAR2
	LAC CARTAB+2
	DAC CAR3
	LAC CARTAB+3
	DAC CAR4
	LAC CARTAB+4
	DAC CAR5
	LAC CARTAB+5
	DAC CAR6
	I JMP POS  ;RETURN
NEG:	0   ;TAKE CARE OF OFF LEFT POSITION
	JMS RRRR   ;GET RANDOM VELOCITY
	CIA
	I DAC #RVEL
	LAC [2637]
	I JMP NEG  ;RETURN
PLUS:	0  ;TAKE CARE OF OFF RIGHT POSITION
	JMS RRRR   ;GET RANDOM VELOCITY
	I DAC #RVEL
	LWC 2640
	I JMP PLUS ;RETURN
RRRR:	0  ;SUBROUTINE FOR RANDOM VELOCITIES
	I LAC #VEL ;GETS RVEL: VEL>=RVEL>=VEL/2
	JMS RAND
	I ADD #VEL
	SAR 1
	I JMP RRRR ;RETURN
CONVERT:	0 ;CONVERT TO DLXA
	SAR 1
	DAC TMP'
	LAW 11
	DAC .+3
	LAC TMP'
	JMS D

	0
	SAL 3
	SAL 2      ;GET MSB PORTION
	ADD .-3    ;ADD LSB PORTION
	ADD [11400] ;MAKE DLXA
	I JMP CONVERT ;RETURN
SUBJECT:	0 ;GET POSITION FOR SUBJECT
	LAC SUBPOS'
	ADD SUBVEL'
	DAC SUBPOS' ;GET NEW POSITION
	SAL 1
	JMS CONVERT
	ADD [11500] ;MAKE DLYA
	DAC CAR0   ;STORE IN DISPLAY
	I JMP SUBJECT ;RETURN
RVEL:	40 ;STORAGE FOR RANDOM VELOCITIES
	40
	40
	177740
	177740
	177740
VEL:	40  ;TABLE OF VELOCITIES
	40
	40
	40
	40
	40
POSIT:	HLT   ;TABLE OF CURRENT POSITIONS
	HLT
	HLT
	HLT
	HLT
	HLT
CARTAB:	0 ;TABLE FOR CARS
	0
	0
	0
	0
	0
TAB1:	DJMS LETTER+45 ;ZERO
TAB:	DJMS B3 ;NUMBER TABLE
	DJMS B3+5
	DJMS B3+13
	DJMS B3+20
	DJMS B3+26
	DJMS B3+33
	DJMS B3+42
	DJMS B3+46
	DJMS B3+56
KEYS:	0  ;KEYBOARD READ ROUTINE
	KSF      ;SKIP ON KEYBOARD FLAG
	I JMP KEYS ;OTHERWISE RETURN

	CLA
	KRC
	AND [177]
	SAM [2]     ;TRANSMIT
	JMP K2
	LAC SETFIRE'
	ASZ        ;SKIP IF ZERO
	JMP K3
	COA        ;FINISH SETTING
	DAC SETFIRE'
	LAC [DJMP] ;FIRE
	DAC SET
	LAC [DNOP]
	DAC FIRE
	LAC SCOREON'
	ASN        ;SKIP IF SCORING
	I JMP KEYS ;RETURN
	LAC #K1
	DAC .+3
	LAC SUBVEL'
	JMS M
	0
	CIA
	ADD #SCORE ;SCORE=SCORE-K1*SUBVEL
	DAC #SCORE
	I JMP KEYS ;RETURN
K3:	LAC [DJMP CAR0] ;FIRING
	DAC FIRE
	JMP LOOP2
K2:	DAC TMP'
	LAC SETFIRE' ;IF SET CAN'T CHANGE IT
	ASZ
	I JMP KEYS ;SO RETURN
	LAC PERMSET' ;SAME HERE
	ASZ
	I JMP KEYS ;RETURN IF PERMANENT SET OF KEYS
	LAC TMP'
	SAM [4]     ;DOWN
	JMP K1     ;SKIP IF NO
	LAC SUBVEL'
	SAM [1]     ;SKIP IF MIN
	JMP .+2
	I JMP KEYS ;AND RETURN
	SUB [1]
	DAC SUBVEL' ;DECREMENT VELOCITY
	LAC VADR'
	SUB [1]

	DAC VADR'  ;DECREMENT TABLE
	I LAC VADR'
	DAC DIGIT  ;STORE NEW DIGIT IN DISPLAY
	I JMP KEYS ;RETURN
K1:	SAM [6]   ;UP
	I JMP KEYS ;RETURN IF NO
	LAC SUBVEL'
	SAM [11]    ;SKIP IF MAX
	JMP .+2
	I JMP KEYS ;AND RETURN
	ISZ SUBVEL' ;INCREMENT VELOCITY
	ISZ VADR'  ;AND TABLE ADDRESS
	I LAC VADR'
	DAC DIGIT  ;STORE NEW DIGIT IN DISPLAY
	I JMP KEYS ;RETURN
INPUT:	0 ;INPUT VELOCITIES, ETC.
	CLA
	DAC PERMSET'
	LDA        ;INPUT PERMANENT OR NOT
	ASM
	JMP INSCORE
	COA
	DAC PERMSET'
	LDA
	AND [17]    ;GET SET SUBJECT VELOCITY
	ASN        ;IF MISTAKE AND SET TO 0, SET TO 1
	COA
	DAC SUBVEL' ;STORE VELOCITY
	LAW TAB1
	ADD SUBVEL'
	DAC VADR'
	I LAC VADR'
	DAC DIGIT
INSCORE:	HLT ;INPUT NEXT
	CLA
	DAC SCOREON'
	DAC SCORMX'
	LDA
	ASM
	JMP INCAR  ;IF NO SCORING, DON'T INPUT MAXSCORE
	AND [77]
	DAC #K2    ;INPUT K2
	LDA
	AND [77700] ;INPUT K1
	SAR 3
	SAR 3
	DAC #K1

	HLT
	LDA
	AND [37]    ;NOW INPUT MAXSCORE IN # OF THOUSANDS (DECIMAL)
	DAC .+3    ;MAXIMUM IS 31,000 (INPUT 37 OCTAL)
	LAW 1750
	JMS M
	0
	DAC #SCORE ;STORE AS SCORE
	LAC #K2
	DAC .+3    ;ADJUST SCORE FOR FIRST DECREMENT
	LAW 5
	JMS M
	0
	DAC #K2
	ADD #SCORE
	DAC SCORMX'
	COA
	DAC SCOREON'
INCAR:	LAC [B] ;INITIALIZE OUTPUT BUFFER
	DAC OTA'
	CLA
	DAC OTC'
	LAC PERMSET'
	JMS OUTPUT ;OUTPUT PERMSET
	LAC SUBVEL'
	JMS OUTPUT ;OUTPUT SET VELOCITY
	LAC SCOREON' ;(MEANINGLESS IF PERMSET = 0)
	JMS OUTPUT ;OUTPUT SCOREON
	LAC #K1    ;(FOLLOWING IS MEANINGLESS IF SCOREON = 0)
	JMS OUTPUT ;OUTPUT K1
	LAC #K2
	JMS OUTPUT ;OUTPUT K2
	LAC SCORMX'
	SUB #K2
	JMS OUTPUT ;OUTPUT SCORMX
	HLT        ;INPUT CAR SPEEDS
	LAW CARTAB ;INDEXING
	DAC #CARTAB ;FOR CAR CALLS
	LAW RVEL
	DAC #RVEL  ;FOR RANDOM VELOCITIES
	LAW VEL
	DAC #VEL   ;FOR VELOCITIES
	LWC 6
	DAC CTR'   ;LOOP SIX TIMES
INLOOP:	LDA  ;READ DATA SWITCHES
	ASN
	JMP .+3

	LAC [DJMS CAR]
	JMP .+2
	LAC [DNOP]
	I DAC #CARTAB ;STORE WHETHER SEEN OR NOT
	LDA
	DAC TMP'
	ASP
	JMP .+2    ;IF NEGATIVE OUTPUT MINUS SIGN
	JMP .+3
	LAW 55     (-)
	JMS WRITE
	LAC TMP'
	I DAC #RVEL ;STORE IN CURRENT VELOCITY
	ASM
	JMP INPOS
	AND [77777] ;TAKES CARE OF NEGATIVE NUMBERS
	CIA
	I DAC #RVEL ;STORE IN CURRENT VELOCITY
	CIA
INPOS:	I DAC #VEL ;STORE IN VELOCITY
	JMS OUTPUT ;OUTPUT CAR VELOCITY
	ISZ #CARTAB ;INCREMENT INDEXES
	ISZ #RVEL
	ISZ #VEL
	HLT        ;STOP FOR NEXT INPUT
	ISZ CTR'   ;INCREMENT COUTER
	JMP INLOOP
	LAC CARTAB
	DAC CAR1+3
	LAC CARTAB+1
	DAC CAR2+3
	LAC CARTAB+2
	DAC CAR3+3
	LAC CARTAB+3
	DAC CAR4+3
	LAC CARTAB+4
	DAC CAR5+3
	LAC CARTAB+5
	DAC CAR6+3
	LAW 15     ;CR
	JMS WRITE
	LAW 12     ;LF
	JMS WRITE
	JMP START4 ;START
SCORMD:	0 ;ROUTINE TO MODIFY SCORE
	ISZ TIME'  ;INCREMENT TIME IF SETFIRE SET
	NOP

	LAC SCOREON'
	ASN
	I JMP SCORMD ;RETURN ON NO SCORE DISPLAY
	LAC #SCORE
	SUB #K2
	ASP
	CLA        ;IF NEGATIVE SET TO 0
	DAC #SCORE
	CLA        ;NOW PUT IN DISPLAY
	DAC BLANK' ;BLANK INDICATOR
	LAW NUM1
	DAC #NUM1
	LAW 12
	DAC SDIV
	DAC SDIV+2
	DAC SDIV+4
	DAC SDIV+6
	LAC #SCORE
	JMS D
SDIV:	0
	JMS D
	0
	JMS D
	0
	JMS D
	0
	JMS INSERT
	LAC SDIV+6
	JMS INSERT
	LAC SDIV+4
	JMS INSERT
	LAC SDIV+2
	JMS INSERT
	COA
	DAC BLANK'
	LAC SDIV
	JMS INSERT
	I JMP SCORMD ;RETURN
INSERT:	0 ;SCORE INSERTION ROUTINE
	ASN
	JMP INSER1
	ADD [TAB1]
	DAC TMP'
	I LAC TMP'
	I DAC #NUM1
	ISZ #NUM1
	COA

	DAC BLANK' ;CHANGE BLANK INDICATOR
	I JMP INSERT ;RETURN
INSER1:	LAC BLANK' ;HANDLE ZEROES
	ASZ         ;DO BLANKS
	JMP .+3
	LAC [DIXM]
	JMP .+2
	LAC TAB1
	I DAC #NUM1
	ISZ #NUM1
	I JMP INSERT ;RETURN
START1:	0 ;ALTERNATE START LOCATION
	LAC [B]
	DAC OTA'   ;INITIALIZE OUTPUT BUFFER
	CLA
	DAC OTC'
START4:	LAC PERMSET'
	ASZ
	JMP START3
	LAW TAB
	DAC VADR'
	LAC TAB
	DAC DIGIT
	COA
	DAC SUBVEL'
START3:	LAC [DNOP]
	DAC SCORE
	LAC SCOREON' ;IF NO SCORING, TURN OFF SCORE
	ASZ
	JMP START2
	LAC [DJMP SET]
	DAC SCORE
	JMP START2
START:	0 ;INITIALIZATION ROUTINE
	LAC SUBVEL'
	JMS OUTPUT ;OUTPUT SUBJECT VELOCITY
	LAW 5
	DAC .+3    ;MULTIPLY TIME BY 5 TO GET 1/100'S
	LAC TIME'
	JMS M
	0
	JMS OUTPUT ;OUTPUT TIME
	LAC #SCORE
	JMS OUTPUT ;OUTPUT SCORE
	LAC #CRASH
	JMS OUTPUT ;OUTPUT CRASH OR NOT
	LAW 15     ;CR

	JMS WRITE
	LAW 12      ;LF
	JMS WRITE
START2:	LAC [DLYA 3100]
	DAC CAR0   ;INITIALIZE SUBJEXT
	CLA
	DAC SUBPOS'
	LAC [DNOP]
	DAC CRUNC0 ;CRUNCH INVISIBLE
	DAC SET    ;SET VISIBLE
	LAC [DJMP CAR0]
	DAC FIRE
	LAC SCORMX'
	DAC #SCORE
	JMS SCORMD
	CLA
	DAC SETFIRE'
	DAC SCOREINC'
	DAC TIME'
	JMP LOOP1  ;RETURN
ENDD:	0   ;DID THE SUBJECT MAKE IT?
	LAC CAR0
	SUB [DLYA 4700]
	ASP
	I JMP ENDD ;RETURN IF HE DIDN'T
	CLA
	DAC #CRASH ;CRASH INDICATOR - 0= NO
	JMP CRASH1 ;WAIT FOR XMIT, THEN RESTART
CRASH:	0 ;ROUTINE TO CHECK FOR CRASH
	KSN
	KRC        ;CLEAR KEYBOARD
	LAW POSIT  ;INDEXING
	DAC #POSIT ;FOR POSITIONS
	LAW VEL
	DAC #VEL
	LWC 6
	DAC CTR'   ;LOOP COUNTER
	LAW 44
	DAC Y'     ;INITIALIZE Y
CRASHLP:	I LAC #VEL ;CHECK FOR ZERO VELOCITY
	ASN
	JMP CRASHOUT ;JUMP OUT IF ZERO
	LAC Y'
	SUB SUBPOS' ;GET Y DIFFERENCE
	ASP
	CIA        ;ABSOLUTE VALUE
	DAC Y'DIF

	I LAC #POSIT
	SAR 1
	SUB [550]   ;GET X DIFFERENCE
	ASP
	CIA        ;ABSOLUTE VALUE
	SUB [37]    ;CHECK FOR X OVERLAP
	ASM
	JMP CRASHOUT ;IF NONE JUMP OUT
	LAC Y'DIF  ;IF YES, CHECK FOR Y OVERLAP
	SUB [37]    ;CHECK FOR CRASH
	ASP        ;SKIP IF NONE
	JMP CRASHED
CRASHOUT:	ISZ #POSIT ;INCREMENT EVERYTHING
	ISZ #VEL
	LAW 44
	ADD Y'
	DAC Y'
	ISZ CTR'
	JMP CRASHLP ;LOOP
	I JMP CRASH ;RETURN IF NO CRASH
CRASHED:	LAC [DJMS CRUNCH]
	DAC CRUNC0
	COA
	DAC #CRASH ;CRASH INDICATOR - 1=YES
	LAC TIME'
	SUB [1]
	DAC TIME'  ;DECREMENT TIME (TO TAKE CARE OF SCOREMOD IN...
	CLA
	DAC #SCORE
	JMS SCORMD ;SET SCORE TO ZERO IF CRASH
CRASH1:	KSN ;CHECK KEYBOARD
	JMP .+3    ;READ KEYBOARD
	JMS EXEC   ;DISPLAY IF NO KEY
	JMP CRASH1
	CLA
	KRC
	AND [177]
	SAM [2]     ;CHECK FOR XMIT
	JMP CRASH1 ;IF NOT LOOP
	JMS START  ;IF YES, START OVER
RAND:	0  ;SUBROUTINE FOR RANDOM NUMBER FROM ZERO TO...
	           ;USES 12 WORDS, 14 OCTAL.  USES LABEL RAND...
	           ;LIMIT IN AC. REQUIRES USE OF SUBROUTINES...
	           ;RANDOM NUMBER RETURNED IN AC
	ASN        ;SKIP IF NONZERO
	I JMP RAND ;RETURN
	DAC .+4

	JMS NR     ;GET RANDOM NUMBER 0-77777
	LAC RD     ;LOAD IT
	JMS M      ;MULTIPLY BY LIMIT
	0
	RAL 1      ;GET BIT 0 IN LINK
	LAC .-2    ;LOAD DOUBLEWORD
	RAL 1      ;GET LINK IN BIT 15
	I JMP RAND ;RETURN
NR:	0    ;RANDOM NUMBER GENERATOR
	           ;USES 11 WORDS, 13 OCTAL. USES LABELS NR,R...
	           ;RANDOM NUMBER RETURNED IN AC
	           ;REQUIRES SUBROUTINE M
	           ;GIVE STARTING SEED IN RD
	           ;CURRENT RANDOM NUMBER WILL BE STORED IN R...
	           ;RANDOM NUMBER IS INTEGER BETWEEN 0 AND 777...
	           ;ALGORITHM FOLLOWS:
	           ;B IS THE WORD LENGTH MINUS THE SIGN BIT. ...
	           ;MULTIPLY THE CURRENT RANDOM NUMBER BY 2**...
	           ;TAKE THE LEAST SIGNIFICANT B BITS OF THIS...
	           ;THAT IS YOUR CURRENT RANDOM NUMBER AND YOU...
	LAC RD-2
	DAC .+3
	LAC RD
	JMS M
	0
	ASN
	LAC RD-1   ;IF ZERO, SET TO 77777 OCTAL
	AND RD-1   ;ZERO THE SIGN BIT
	DAC RD
	I JMP NR   ;RETURN
	20003
	77777
RD:	0    ;THE RANDOM NUMBER
M:	0     ;MULTIPLY ROUTINE
	           ;TAKES 52 WORDS CORE,64 OCTAL. USES LABEL ...
	           ;MULTIPLICAND ASSUMED IN AC
	           ;MULTIPLIER ASSUMED IN WORD AFTER JMS. RET...
	           ;BE MADE TO WORD FOLLOWING MULTIPLIER
	           ;RESULT RETURNED IN AC.
	           ;LINK SET IF RESULT OUTSIDE RANGE -2**15 TO...
	           ;OVERFLOW WORD RETURNED TO WORD FOLLOWING ...
	           ;ALGORITHM FOLLOWS:
	           ;X:=MULTIPLICAND
	           ;Q:=MULTIPLIER
	           ;A:=0
	           ;MSN:=TRUE
	           ;IF X<0 THEN BEGIN X:=-X

	           ;                  MSN:=-MSN; END
	           ;IF Q<0 THEN BEGIN Q:=-Q
	           ;                  MSN:=-MSN; END
	           ;COMMENT IF MSN TRUE ,PRODUCT POS.
	           ;        IF MSN FALSE, PRODUCT NEG.
	           ;FOR K=-16 STEP 1 UNTIL -1 DO
	           ;BEGIN IF BIT 15(Q)=1 THEN A :=A+X
	           ;      DOUBLEWORDSHIFTRIGHTONEBIT(A,Q); EN...
	           ;IF A NE 0 OR BIT 0(Q) NE 0 THEN SETLINKON...
	           ;IF -MSN THEN Q:=-Q
	           ;COMMENT PRODUCT IN Q
	CLL        ;CLEAR LINK
	ASM        ;MULTIPLICAND NEGATIVE?
	JMP .+3    ;NO
	CIA        ;YES,2'S COMP AC
	CML        ;COMP LINK(REMEMBER SIGN)
	DAC M+63   ;MULTIPLICAND TO X
	I LAC M    ;MULTIPLIER TO AC
	ASM        ;MULTIPLIER NEG?
	JMP .+3    ;NO
	CIA        ;YES,2'S COMP MULTIPLIER
	CML        ;COMP LINK,1=PROD NEG,0=PROD POS
	DAC M+56   ;MULTIPLIER TO Q
	CLA        ;CLEAR AC
	DAC M+57   ;0 TO A
	LSZ        ;LINK ZERO(PROD POS?)
	STA        ;NO,PROD NEG,-1 TO MSN
	DAC M+60   ;YES,0 TO MSN
	LWC 20     ;-16 TO AC
	DAC M+61   ;INITIALIZE COUNT
	LAC M+56   ;Q INTO AC
	RAR 1      ;Q(15) INTO LINK
	LAC M+57   ;A INTO AC
	LSN        ;Q(15)=1?
	JMP .+2    ;NO
	ADD M+63   ;YES,ADD X TO PARTIAL PROD A
	DAC M+62   ;STORE PARTIAL PROD FOR OVERFLOW CHECK(...
	CLL        ;CLEAR LINK (SET A(0)=0)
	RAR 1      ;DOUBLEWORD
	DAC M+57   ;SHIFT  (A)
	I DAC M    ;(STORE OVERFLOW WORD IN WORD FOLLOWING...
	LAC M+56   ;RIGHT  (Q)
	RAR 1      ;ONE
	DAC M+56   ;BIT
	ISZ M+61   ;INCREMENT COUNTER,=0?
	JMP M+25   ;NO, LOOP
	LAC M+62   ;YES, EXIT LOOP;0=NO OVER.,NF  0=OVERFLOW(M...

	CLL        ;CLEAR LINK (NO OVERFLOW)
	ASZ        ;TEST FOR OVERFLOW
	STL        ;OVERFLOW, SET LINK
	LAC M+56   ;PRODUCT Q INTO AC
	ISZ M+60   ;TEST PROD SIGN (MSM)
	CIA        ;SIGN POS,COMP AC
	CIA        ;SIGN NEG,COMP AC
	ISZ M      ;INCREMENT RETURN ADR
	I JMP M    ;RETURN
	0
	0
	0
	0
	0
	0
D:	0     ;DIVIDE ROUTINE 
	           ;TAKES 65 WORDS CORE
	           ;DIVIDEND ASSUMED IN AC
	           ;DIVISOR ASSUMED WORD AFTER JMS, RETURN WI...
	           ;WORD FOLLOWING DIVISOR
	           ;QUOTIENT LEFT IN AC
	           ;REMAINDER LEFT IN WORD FOLLOWING JMS.  SI...
	           ;SAME AS THAT OF DIVIDEND
	           ;IF DIVISOR IS ZERO, LINK SET AND DIVIDEND...
	           ;LINK ZERO IF EVERYTHING NORMAL
	           ;ALGORITHM FOLLOWS:
	           ;Q:=DIVIDEND
	           ;X:=DIVISOR
	           ;A:=0
	           ;DSN:=TRUE
	           ;IF X<0 THEN BEGIN X:=-X
	           ;                  DSN:=-DSN; END
	           ;IF Q<0 THEN BEGIN Q:=-QUOTIENT
	           ;                  DSN:=-DSN
	           ;                  DIV:=FALSE; END
	           ;            ELSE DIV:=TRUE
	           ;IF X=0 THEN EXIT
	           ;COMMENT IF DSN TRUE,QUOTIENT POS, IF DSN ...
	           ;        IF DIV TRUE THEN DIVIDEND (AND RE...
	           ;        IF DIV FALSE THEN DIVIDEND (AND R...
	           ;FOR K=-16 STEP 1 UNTIL -1 DO
	           ;BEGIN DOUBLEWORDROTATELEFTONEBIT(A,Q)
	           ;      IF A>=X THEN BEGIN A:=A-X; SETBIT15...
	           ;IF -DIV THEN A:=-A
	           ;IF -DSN THEN Q:=-QUOTIENT
	           ;COMMENT QUOTIENT IN Q, REMAINDER IN A
	CLL        ;CLEAR LINK
	ASM        ;DIVIDEND NEGATIVE?
	JMP .+3    ;NO
	CIA        ;YES,2'S COMP. AC
	CML        ;COMP. LINK (REMEMBER SIGN)
	DAC D+73   ;DIVIDEND IN Q

	STA        ;-1 TO AC
	LSN        ;DIVIDEND NEGATIVE?
	CLA        ;NO,0 TO DIV(REMAINDER POS)
	DAC D+74   ;YES,-1 TO DIV (REMAINDER NEG)
	I LAC D    ;DIVISOR TO AC
	ASM        ;DIVISOR NEGATIVE?
	JMP .+3    ;NO
	CIA        ;YES,2'S COMP DIVISOR
	CML        ;COMP LINK(0=POS QUOT,1=NEG QUOT)
	DAC D+75   ;DIVISOR IN X
	ASZ        ;DIVISOR=0?
	JMP .+4    ;NO
	STL        ;YES,SET LINK
	ISZ D      ;INCREMENT PAST DIVISOR TO RTN ADR
	I JMP D    ;RETURN
	CLA        ;CLEAR AC
	DAC D+76   ;A=0
	LSZ        ;QUOTIENT POS(LINK 0)?
	STA        ;NO,-1 TO DSN(QUOTIENT NEG)
	DAC D+77   ;YES,0 TO DSN (QUOTIENT POS)
	LWC 20     ;-16 TO AC
	DAC D+100  ;INITIALIZE COUNT IN D?T
	LAC D+73   ;Q INTO AC
	CLL        ;CLEAR LINK(SET Q(15)=0)
	RAL 1      ;DOUBLE WORD
	DAC D+73   ;ROTATE  (Q)
	LAC D+76   ;LEFT  (A)
	RAL 1      ;ONE
	DAC D+76   ;BIT  (A)
	SUB D+75   ;SUBTRACT X FROM A
	ASP        ;IS A>=X(AC POS)
	JMP D+53   ;NO, GO ROTATE
	DAC D+76   ;YES,AC NOW A
	LAW 1      ;SET BIT
	IOR D+73   ;15
	DAC D+73   ;OF Q
	ISZ D+100  ;BUMP COUNTER,COUNT=0?
	JMP D+35   ;NO,LOOP AGAIN
	ASN        ;IF DIVIDEND = 0, A (REMAINDER IN ALGORITH...
	JMP .+6    ;LEAVE WORD AFTER JMS (REMAINDER) UNTOUCHED
	LAC D+76   ;REMAINDER INTO AC
	ISZ D+74   ;REMAINDER NEG?
	CIA        ;NO POS,2'S COMP
	CIA        ;YES 2'S COMP IT
	I DAC D    ;PLACE IT IN WORD AFTER JMS
	ISZ D      ;POINT TO RETURN ADR
	LAC D+73   ;QUOTIENT Q INTO AC

	ISZ D+77   ;QUOTIENT NEG
	CIA        ;NO,POS,2'S COMP IT
	CIA        ;YES,2'S COMP IT
	CLL        ;CLEAR LINK (DIVISOR NE 0)
	I JMP D    ;RETURN
	0          ;STORAGE
	0
	0
	0
	0
	0
OUTPUT:	0 ;OUTPUT A NUMBER AND A COMMA
	DAC TMP'
	CLA
	DAC BLANK' ;BLANK INDICATOR
	LAW 12     ;CONVERT TO DECIMAL
	DAC ODIV
	DAC ODIV+2
	DAC ODIV+4
	DAC ODIV+6
	LAC TMP'
	JMS D
ODIV:	0
	JMS D
	0
	JMS D
	0
	JMS D
	0
	JMS OUT1   ;START OUTPUTTING DECIMAL DIGITS
	LAC ODIV+6
	JMS OUT1
	LAC ODIV+4
	JMS OUT1
	LAC ODIV+2
	JMS OUT1
	COA        ;CHANGE BLANK INDICATOR FOR LAST DIGIT
	DAC BLANK'
	LAC ODIV
	JMS OUT1
	LAW 54     ;COMMA
	JMS WRITE
	I JMP OUTPUT ;RETURN
OUT1:	0  ;OUTPUT DIGIT UNLESS BLANK
	DAC TMP'
	ASZ
	JMP .+4
	LAC BLANK'
	ASN
	I JMP OUT1 ;RETURN IF BLANK
	COA
	DAC BLANK' ;OTHERWISE SET BLANK IND. TO 1

	LAC TMP'
	JMS WRITE
	I JMP OUT1 ;RETURN
WRITE:	0 ;SUBROUTINE TO PACK OUTPUT IN BUFFER B
	DAC OTD'
	LAC OTC'   ;FIRST OR SECOND BYTE INDICATOR
	ISZ OTC'
	RAR 1
	LSZ
	JMP .+7
	LAC OTD'   ;FIRST BYTE
	SAL 3
	SAL 3
	SAL 2
	I DAC OTA' ;PUT IN BUFFER
	I JMP WRITE ;RETURN
	I LAC OTA' ;SECOND BYTE
	ADD OTD'
	I DAC OTA' ;PUT IN BUFFER
	ISZ OTA'
	CLA
	I DAC OTA' ;EXTRA ZERO WORD
	LAC OTA'
	SAM [10000] ;RETURN UNLESS BUFFER FULL
	I JMP WRITE ;RETURN
	HLT        ;IF SO STOP, NOW MUST OUTPUT AND RESTART AT...
EXEC:	0  ;EXECUTE ONE DISPLAY CYCLE
	DSN
	JMP .-1
	SSF
	JMP .-1
	SCF
	LDA        ;LOAD DATA SWITCHES
	ASM        ;SKIP IF BIT 0 ON
	HLT        ;OTHERWISE STOP
	LAW DIS    ;GET DISPLAY ADDRESS
	DLA
	DON        ;RUN DISPLAY
	I JMP EXEC ;RETURN
LRD1:	INC E,B30
	INC B30,B30
	INC B30,B30
	INC B30,B30
	INC D00,131
	DIXM
	DIXM
	DIXM

	DRJM
LLD2:	DDXM
	DDXM
	INC E,D30
	INC BM30,BM30
	INC BM30,BM30
	INC-BM30,BM30
	INC BM30,N
	DDXM
	DDXM
	DRJM
LRD3:	DIXM
	DIXM
	INC E,DM30
	INC B30,B30
	INC B30,B30
	INC B30,B30
	INC B30,131
	DIXM
	DRJM
LLD4:	INC E,BM30
	INC BM30,BM30
	INC BM30,BM30
	INC BM30,BM30
	INC D00,N
	DDXM
	DDXM
	DDXM
	DDXM
	DRJM
LR5:	INC E,B30
	INC B30,B30
	INC B30,B30
	INC B30,131
	DIXM
	DRJM
CAR:	INC E,DM33 ;WORD CAR
	INC DM10,BM30
	INC BM20,B0M3
	INC B0M3,B20
	INC B30,D10
	INC B23,B13
	INC B2M3,B1M3
	INC DM12,BM30
	INC D30,D2M2
	INC B03,B03
	INC B30,B2M1

	INC B0M1,BM2M1
	INC BM30,D30
	INC B2M3,D33
	INC D30,B03  ;SQUARE
	INC B03,B03
	INC B03,B03
	INC BM30,BM30
	INC BM30,BM30
	INC BM30,BM30
	INC BM30,BM30
	INC BM30,BM30
	INC B0M3,B0M3
	INC B0M3,B0M3
	INC B0M3,B0M3
	INC B0M3,B0M3
	INC B0M3,B0M3
	INC B30,B30
	INC B30,B30
	INC B30,B30
	INC B30,B30
	INC B30,B30
	INC B03,B03
	INC B03,B03
	INC B03,F
UP:	INC E,B03 ;LINE GOING UP
	INC B03,B03
	INC B03,B03
	INC B03,113
	DIYM
	DRJM
B3:	INC E,D10 ;ONE
	INC B20,B20
	INC DM20,B03
	INC B03,B02
	INC BM2M2,F
	INC E,D03   ;TWO
	INC D03,B22
	INC B20,B2M2
	INC BM1M2,BM2M1
	INC BM3M3,B30
	INC B30,F
	INC E,B30   ;THREE
	INC B32,BM22
	INC BM30,D30
	INC B22,BM22
	INC BM30,F
	INC E,D30   ;FOUR

	INC D10,B03
	INC B03,B02
	INC BM3M3,BM1M2
	INC B30,B30
	INC F,F
	INC E,B30   ;FIVE
	INC B31,B02
	INC BM32,BM30
	INC B03,B30
	INC B30,E
	INC E,D03   ;SIX
	INC B21,B20
	INC B2M2,BM2M2
	INC BM20,BM22
	INC B03,B23
	INC B20,B2M2
	INC F,F
	INC E,B23   ;SEVEN
	INC B33,B12
	INC BM30,BM30
	INC F,F
	INC E,D20   ;EIGHT
	INC B20,B21
	INC B02,BM31
	INC BM32,B22
	INC B20,B2M2
	INC BM3M2,BM1M1
	INC B0M2,B2M1
	INC F,F
	INC E,D30   ;NINE
	INC B23,B13
	INC B03,BM30
	INC BM2M2,B2M2
	INC B30,E
CRUNCH:	INC E,D22 ;CRUNCH DRAWING ROUTINE
	INC D00,BM2M2
	INC BM33,BM11
	INC B22,B22
	INC B2M2,D3M3
	INC D0M3,B03
	INC B03,B02
	INC B30,B3M2
	INC BM3M2,BM30
	INC D20,B2M2
	INC B2M2,D3M3
	INC D2M3,D0M3
	INC D0M3,D0M2

	INC BM3M3,BM2M3
	INC BM23,BM23
	INC BM23,BM23
	INC BM3M2,BM3M2
	INC BM3M2,BM3M2
	INC B13,B13
	INC BM31,BM31
	INC BM31,BM31
	INC B32,B32
	INC B32,BM33
	INC BM33,B31
	INC B31,BM23
	INC BM23,BM23
	INC B3M1,B3M1
	INC B13,B13
	INC B13,B3M3
	INC B3M3,B13
	INC B13,B3M2
	INC B3M2,B3M2
	INC B23,B23
	INC D00,N
	DIXM
	DIXM
	DIXM
	DIXM
	INC E,D30
	INC D30,D30
	INC D30,D30
	INC B11,BM11
	INC B13,B03
	INC BM20,B0M3
	INC B1M3,BM1M1
	INC B1M1,DM20
	INC BM20,B03
	INC B03,B02
	INC D0M2,D0M2
	INC BM30,BM30
	INC D02,D02
	INC B0M3,B0M3
	INC B0M2,DM32
	INC BM2M2,BM22
	INC BM22,B22
	INC B22,B2M2
	INC DM32,DM30
	INC DM30,B0M3
	INC B0M3,B0M2
	INC BM22,BM23

	INC BM23,B0M3
	INC B0M3,B0M2
	INC DM33,D03
	INC D02,BM1M3
	INC BM1M3,BM1M2
	INC BM12,BM13
	INC BM13,D03
	INC B03,B03
	INC B03,B03
	INC B01,B3M3
	INC B3M3,B33
	INC B33,B2M3
	INC B2M3,B2M3
	INC B23,B23
	INC B12,B2M3
	INC B2M3,B32
	INC B32,B32
	INC B0M3,B0M3
	INC B31,B31
	INC B31,BM2M3
	INC BM2M3,BM2M3
	INC B3M2,B3M2
	INC B3M2,BM3M2
	INC B3M2,B3M2
	INC B3M3,BM30
	INC BM30,BM30
	INC B1M3,B1M3
	INC B1M3,BM32
	INC BM32,BM32
	INC BM1M3,BM1M3
	INC BM1M3,BM33
	INC BM33,BM2M3
	INC BM2M3,BM2M3
	INC BM23,BM23
	INC BM3M3,BM3M3
	INC BM33,BM33
	INC F,F
LETTER:	INC E,B13 ;A
	INC B13,B12
	INC B1M3,B1M3
	INC B1M2,DM23
	INC BM30,F
	INC E,D32   ;C
	INC D30,BM2M2
	INC BM20,BM22
	INC B03,B23
	INC B20,B2M2

	INC F,F
	INC E,B03   ;D
	INC B03,B02
	INC B30,B2M1
	INC B1M2,B0M2
	INC BM1M2,BM2M1
	INC BM30,F
	INC E,B30   ;E
	INC B30,B11
	INC B02,B02
	INC B30,DM30
	INC B02,B02
	INC B30,B30
	INC F,F
	INC E,B03   ;H
	INC B03,B02
	INC D0M3,D0M1
	INC B30,B30
	703
	INC B03,B02
	INC F,F
	INC E,B03   ;N
	INC B03,B02
	INC B2M3,B2M3
	INC B2M2,B03
	INC B03,B02
	INC F,F
	INC E,D10   ;O
	INC B20,B20
	INC B13,B02
	INC BM13,BM20
	INC BM20,BM1M3
	INC B0M2,B1M3
	INC F,F
	INC E,B03   ;P
	INC B03,B02
	INC B30,B3M1
	INC B0M2,BM3M1
	INC BM30,F
	INC E,B03   ;R
	INC B03,B02
	INC B30,B3M1
	INC B0M2,BM3M1
	INC BM30,D30
	INC B2M2,B1M2
	INC F,F
	INC E,D01   ;S

	INC B2M1,B30
	INC B13,BM31
	INC BM31,B13
	INC B30,B2M1
	INC F,F
	INC E,D30   ;T
	INC B03,B03
	INC B02,B10
	INC B30,B30
	INC F,F
	INC E,B03   ;W
	INC B03,B02
	733
	INC B3M3,B03
	INC B03,B02
	INC F,F
	INC E,D30   ;Y
	INC B02,B03
	INC B33,B10
	INC B3M3,F
	INC E,D32   ;:
	INC B00,D03
	INC D01,B00
	INC F,F
REST:	DNOP  ;DISPLAY WAIT ROUTINE
	DNOP
	DNOP
	DNOP
	DNOP
	DNOP
	DNOP
	DNOP
	DNOP
	DNOP
	DRJM      ;RETURN
DIS:	DHVC  ;START OF DISPLAY
	DSTS 1
	DLXA 1400 ;DRAW HIGHWAY
	DLYA 4600
	DNOP
	DNOP
	DNOP
	DNOP
	DNOP
	DJMS LR5
	DJMS LR5
	DJMS LR5

	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DIXM
	DIXM
	DIXM
	DIXM
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DDYM
	DDYM
	DDYM
	DDYM
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4

	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DDYM
	DDYM
	DDYM
	DDYM
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DDYM
	DDYM
	DDYM
	DDYM
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4

	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DDYM
	DDYM
	DDYM
	DDYM
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD1
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DJMS LRD3
	DDYM
	DDYM
	DDYM
	DDYM
	DJMS LLD4
	DJMS LLD4

	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD4
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DJMS LLD2
	DDYM
	DDYM
	DDYM
	DDYM
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DIXM
	DIXM
	DIXM
	DIXM
	DJMS LR5
	DJMS LR5

	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DJMS LR5
	DLXA 4000
	DLYA 3100
	DJMS REST
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
	DJMS UP
SCORE:	DNOP
	DLXA 3640
	DLYA 6000
	DJMS REST
	DJMS LETTER+70  ;S
	DJMS LETTER+5   ;C
	DJMS LETTER+45  ;O
	DJMS LETTER+61  ;R
	DJMS LETTER+21  ;E
	DJMS LETTER+115 ;:
	DLXA 3640
	DDYM
	DDYM

	DJMS REST
	DIXM
NUM1:	DIXM
	DIXM
	DIXM
	DIXM
	DJMS LETTER+45
	DLXA 4000
SET:	DNOP
	DLXA 3400
	DLYA 2000
	DJMS REST
	DJMS LETTER+70  ;S
	DJMS LETTER+21  ;E
	DJMS LETTER+76  ;T
	DIXM
	DJMS LETTER+5   ;C
	DJMS LETTER     ;A
	DJMS LETTER+61  ;R
	DIXM
	DJMS LETTER+70  ;S
	DJMS LETTER+54  ;P
	DJMS LETTER+21  ;E
	DJMS LETTER+21  ;E
	DJMS LETTER+13  ;D
	DLXA 4000
FIRE:	DNOP
	DLXA 3400
	DLYA 2000
	DJMS REST
	DJMS LETTER+70  ;S
	DJMS LETTER+76  ;T
	DJMS LETTER     ;A
	DJMS LETTER+61  ;R
	DJMS LETTER+76  ;T
	DIXM
	DJMS LETTER+103 ;W
	DJMS LETTER+30  ;H
	DJMS LETTER+21  ;E
	DJMS LETTER+37  ;N
	DIXM
	DJMS LETTER+61  ;R
	DJMS LETTER+21  ;E
	DJMS LETTER     ;A
	DJMS LETTER+13  ;D
	DJMS LETTER+111 ;Y
	DLXA 4000

CAR0:	DLYA 3100
	DJMS REST
	DJMS CAR
	DLXA 4000
	DLYA 2700
	DJMS REST
DIGIT:	DJMS B3
CAR1:	DLXA 1400
	DLYA 3300
	DJMS REST
	DJMS CAR
CAR2:	DLXA 1400
	DLYA 3500
	DJMS REST
	DJMS CAR
CAR3:	DLXA 1400
	DLYA 3700
	DJMS REST
	DJMS CAR
CAR4:	DLXA 1400
	DLYA 4100
	DJMS REST
	DJMS CAR
CAR5:	DLXA 1400
	DLYA 4300
	DJMS REST
	DJMS CAR
CAR6:	DLXA 1400
	DLYA 4500
	DJMS REST
	DJMS CAR
	DLXA 3700
	DLYA 2000
	DJMS REST
CRUNC0:	DNOP
	DLXA 4000  ;CENTER BEAM AND WAIT
	DLYA 4000
	DHLT
L:	0           ;LITERALS GO HERE
	LOC 3000
	ISZ OTA'    ;MODULE TO PRINT OUTPUT BUFFER--START HERE
	LAC [B]
	DAC OTB'    ;UNPACK COUNTER
	CLA
	DAC OTC'    ;FIRST OR SECOND BYTE COUNTER
LPP:	LAC OTC'
	ISZ OTC'

	RAR 1
	I LAC OTB' ;LOAD PACKED WORD
	LSN
	JMP .+3
	ISZ OTB'
	JMP .+4
	SAR 3       ;FIRST BYTE
	SAR 3
	SAR 2
	TSF         ;SECOND BYTE
	JMP .-1
	TPC         ;TRANSMIT BYTE
	LAC OTB'
	SAM OTA'    ;CHECK FOR LAST ZERO WORD
	JMP LPP
	HLT         ;PROGRAM END
B:	0       ;PRINT BUFFER
	LOC 2656
	CONSTANTS   ;LITERALS
	VARIABLES
	END
