
<PACKAGE "SMMS">

<ENTRY SM SM-MAIL SM-S SM-LIST-POST SIGNUP-SHEETS-POST SM-TALK STYI-DRY>

<USE-DEFER "BIGPRINT" "CELEST" "ITS" "LSRHIL" "MFD" "STR" "TIMFCN">

<GDECL (SM-S) <UVECTOR [REST <VECTOR FIX <VECTOR [REST STRING]>>]>>

<SETG SM-S
   ;"Decreasing dates; each must correspond to the first member of the vector!"
      ![[<DAYS 78 11 21> '["AV" "SWG" "MSB" "PDL" "SSP"]]	;115
	[<DAYS 78  9 22> '["AV" "SWG" "MSB" "PDL"]]		;113
	[<DAYS 78  9 12> '["AV"       "DSY" "MSB" "SWG" "PDL"]]	;113
	[<DAYS 78  6  2> '["AV" "TAA" "DSY" "MSB" "SWG" "PDL"]]	;111
	[<DAYS 78  1 28> '["AV"       "DSY" "MSB" "SWG" "PDL"]]	;105
	[<DAYS 77 12  5> '["AV" "DS"  "MSB" "SWG" "MB" "PDL"]]	;100
	[<DAYS 77  9  1> '["AV"       "MSB" "SWG" "MB" "PDL"]]	;98
	[<DAYS 77  8  1> '["JMB" "TAA" "MSB" "VANISH" "SWG" "MB" "PDL" "AV"]]	      ;97
	[<DAYS 77  6 28> '["CLR" "MSB" "SWG" "MB" "PDL" "ERB"	    "AV" "JMB" "TAA"]];94
	[<DAYS 77  6 12> '["CLR" "MSB" "SWG" "MB" "PDL" "ERB"		  "AV" "JMB"]];93
	[<DAYS 77  2 24> '["CLR" "MSB" "SWG" "MB" "PDL" "ERB"	    "JFH" "AV" "JMB"]];87
	[<DAYS 77  1 25> '["CLR" "MSB" "SWG" "MB" "PDL" "ERB" "EHB" "JFH" "AV" "JMB"]];86
	[<DAYS 76  8 25> '["CLR" "MSB" "SWG" "MB" "PDL" "ERB" "EHB" "JFH" "AV"]]      ;81
	[<DAYS 76  6 24> '["CLR" "MSB" "SWG" "MB"
					   "MARC" "PDL" "ERB" "EHB"
							"JMB" "TAA" "JFH" "AV"]]      ;80
	[<DAYS 76  6  3> '["CLR" "MSB" "SWG" "MB" "PDL" "ERB" "EHB"
							"JMB" "TAA" "JFH" "AV"]]   ;79!]>

<DEFINE SM ("OPTIONAL" (DT <DTNOW>)		     ;"Who is SM at this time?"
	    "AUX" N (D <DAYS !<1 <SET DT <DTNORM .DT>>>>)) 
	#DECL ((VALUE) <OR STRING FALSE> (DT) <LIST LIST> (D N) FIX)
	<MAPF <>
	      <FUNCTION (V) 
		      <COND (<G=? <SET N <- .D <1 .V>>> 0>
			     <MAPLEAVE <NTH <2 .V>
					    <+ 1 <MOD .N <LENGTH <2 .V>>>>>>)>>
	      ,SM-S>>

<DEFINE SM-MAIL ("OPTIONAL"	   ;"COMSYS-mail MSG to SM of given date/time."
		(MSG "You are System Manager today.  Please do the tape dump.")
		(DT <DTNOW>)
		(TO <SM .DT>)
		(SUBJ "dooties")
		 "AUX" (C <OPEN "PRINT" "COMSYS;M">) OUTCHAN)
	#DECL ((MSG SUBJ) STRING (DT) LIST (TO) <OR FALSE STRING>
	       (C) <OR FALSE CHANNEL> (OUTCHAN) <SPECIAL CHANNEL>)
	<COND (<AND .TO .C>
	       <SET OUTCHAN .C>
	       <MAPF <>
		     ,PRINT
		     ("TO"
		      (.TO)
		      "FROM"
		      <XUNAME>
		      "ACTION-TO"
		      (.TO)
		      "SUBJECT"
		      .SUBJ
		      "TEXT"
		      .MSG
		      "SCHEDULE"
		      '("SENDING" #FALSE ()))>
	       <CLOSE .C>)>>   

<DEFINE SM-LIST-POST ("OPTIONAL" (C <OPEN "PRINT" "HUDINI;SM LIST">)
				 (DT <DTNOW>)
		     "AUX" S M W Y OUTCHAN (CR <STRING <ASCII 13> <ASCII 10>>))
   #DECL ((VALUE) <OR LIST FALSE> (C) <OR CHANNEL FALSE>
	  (OUTCHAN) <SPECIAL CHANNEL>
	  (DT) <LIST LIST> (S CR) STRING (M W Y) FIX)
   <COND
    (.C
     <SET OUTCHAN <PUT .C 13 120>>
     <SET DT <DTNORM .DT>>
     <SET DT <DTNORM ((<1 <1 .DT>> <+ 1 <2 <1 .DT>>> 0) '())>> ;"last of month"
     <SET M <+ 2 <2 <1 .DT>>>>			     ;"month following listing"
     <SET Y <1 <1 .DT>>>
     <COND (<G? .M 12> <SET M <- .M 12>> <SET Y <+ 1 .Y>>)>
     <SET S
	  <MAPF ,STRING
		<FUNCTION () 
			<COND (<N==? .M <2 <1 <SET DT <DTADD .DT '((1)(0))>>>>>
			       <STRING .CR
				       <NTH '[" SUN"
					      "MON"
					      "TUE"
					      "WED"
					      "THU"
					      "FRI"
					      " SAT"]
					    <SET W <+ 1 <DATE-DOW <1 .DT>>>>>
				       !\ 
				       <UNPARSE <3 <1 .DT>>>
				       !\ 
				       <SM .DT>
				       !\ 
				       <OR <HOLIDAY? <1 .DT>> "">>)
			      (T <MAPSTOP>)>>>>
     <PRINC <ASCII 12>>
     <MAPF <>
	   #FUNCTION ((TIT) 
		      #DECL ((TIT) STRING)
		      <BIGPRINT <STRING <NTH '["DEC"
					       "JAN"
					       "FEB"
					       "MAR"
					       "APR"
					       "MAY"
					       "JUN"
					       "JUL"
					       "AUG"
					       "SEP"
					       "OCT"
					       "NOV"]
					     .M>
					<ASCII 32>
				      <UNPARSE <COND (<1? .M> <- .Y 1>) (.Y)>>>
				2>
		      <TERPRI>
		      <TERPRI>
		      <PRINC "SYSTEM MANAGER LIST FOR ">
		      <PRINC .TIT>
		      <TERPRI>
		      <PRINC .S>
		      <TERPRI>
		      <TERPRI>
		      <TERPRI>
		      <PRINC "
AV	3-1450	235-4612	PDL	3-1440	646-3063
DSY	3-1428	232-6884	SWG	3-1418	646-4256
MSB	3-1420			TAA	3-1448	494-8292
">
		      <PRINC <ASCII 12>>)
	   '["SECOND-FLOOR ENTRY" "ROOM 214B" "ROOM 221" "ROOM 930"]>
     <COND (<NOT <==? .OUTCHAN ,OUTCHAN>>
	    ;<ITS-CALL "SDMPBT" '![!] .OUTCHAN 1>
	    <CLOSE .OUTCHAN>
	    <ITS-CALL "MLINK"
		      '![!]
		      !<MAPF ,UVECTOR
			     ,STRTOX
			     ["DSK"
			      "PLEASE"
			      "POST"
			      ".LPTR."
			      <7 .OUTCHAN>
			      <8 .OUTCHAN>
			      <10 .OUTCHAN>]>>)>
     .DT)>>    

<GDECL (HOURS) <UVECTOR [REST FIX]>>

<DEFINE SIGNUP-SHEET ("OPTIONAL" (DTARG <DTNOW>) "AUX" DT)
   #DECL ((VALUE) STRING (DTARG) <LIST LIST> (DT) <LIST <LIST FIX FIX FIX>>)
   <SET DT (<1 <DTNORM .DTARG>> ())>				;"zero o'clock"
   <SET DT <DTADD .DT ((<- 5 <DATE-DOW <1 .DT>>>) ())>>		      ;"Friday"
   <COND (<NOT <AND <GASSIGNED? SHEET> <GASSIGNED? HOURS>>>
	  <FLOAD "SYSBIN;SIGNUP SHEET">)>
   <REPEAT (IT H BL (S <STRING ,SHEET>) (SUB .S) SUBB STR
	   SR SRH SRHS SRM SS SSH SSHS SSM
	   (NP <NEXT-PHASE <DTADD .DT '((1) ())>>)	  ;"next phase of moon"
	   (NP2 <2 .NP>)
	   (NP2 <COND (<AND <DST?> <NOT <DST? .NP2>>> <DTADD .NP2 '(() (-1))>)
		      (<AND <NOT <DST?>> <DST? .NP2>> <DTADD .NP2 '(() (+1))>)
		      (T .NP2)>)
	   (NPD <1 .NP2>)
	   (NPM <2 <2 .NP2>>)
	   (NPH <1 <2 .NP2>>)
	   (NPHS <REST ,HOURS .NPH>)
	   (NS <NEXT-SEASON <DTADD .DT '((1) ())>>)	;"next seasonal change"
	   (NS2 <2 .NS>)
	   (NS2 <COND (<AND <DST?> <NOT <DST? .NS2>>> <DTADD .NS2 '(() (-1))>)
		      (<AND <NOT <DST?>> <DST? .NS2>> <DTADD .NS2 '(() (+1))>)
		      (T .NS2)>)
	   (NSD <1 .NS2>)
	   (NSM <2 <2 .NS2>>)
	   (NSH <1 <2 .NS2>>)
	   (NSHS <REST ,HOURS .NSH>)
	   (MSG <ILIST 7 '<STRING
"    |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  
">>)
	   (MSG (
"Legend: <> bracket sunrise/set, () bracket moonrise/set, * = special event

    0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  
" !.MSG))	
	   (MMSG .MSG) MMSG1
	   (SRMSG <REST
"    Sunrises:                                                                
" 5>)
	   (SSMSG <REST
"    Sunsets:                                                                 
" 5>))
     #DECL ((S IT STR MMSG1 SRMSG SSMSG) STRING (SUB SUBB H) <OR FALSE STRING>
	    (NP NS) <VECTOR FIX <LIST LIST <LIST FIX FIX>>>
	    (NP2 NS2) <LIST LIST <LIST FIX FIX>>
	    (SR SS) <OR FALSE <LIST LIST <LIST FIX FIX FIX>>>
	    (SRH SRM SSH SSM NPM NPH NSM NSH) FIX
	    (SRHS SSHS NPHS NSHS) <UVECTOR FIX FIX>
	    (MSG MMSG) <LIST [REST STRING]>
	    (BL NPD NSD) LIST)
     <COND
      (<AND <SET SUB <MEMBER "sm" .SUB>>	;"Any more days in signup sheet?"
	    <SET SUBB <MEMBER "nn" .SUB>>>
       <SET MMSG1 <1 <SET MMSG <REST .MMSG>>>>
       <SET SRMSG <REST .SRMSG 9>>
       <SET SSMSG <REST .SSMSG 9>>
       <SET DT <DTADD .DT '((1) ())>>

       <SUBSTRUC <SET IT <SM .DT>> 0 <LENGTH .IT> .SUB>	;"system manager"
       <SUBSTRUC <SET STR <UNPARSE <+ 100 <3 <1 .DT>>>>> 1 2 .SUBB>
       <SUBSTRUC .STR 1 2 .MMSG1>				;"day of month"
       <SUBSTRUC <NTH '["JAN" "FEB" "MAR" "APR" "MAY" "JUN"
			"JUL" "AUG" "SEP" "OCT" "NOV" "DEC"]
		      <2 <1 .DT>>>
		 0
		 3
		 <REST .SUBB 3>>				;"month"
       <SUBSTRUC <UNPARSE <1 <1 .DT>>> 0 2 <REST .SUBB 7>>	;"year"

       <COND (<SET H <OR <HOLIDAY? <1 .DT>>		;"Either MIT holiday"
			 <NON-MIT-HOLIDAY? <1 .DT>>>>	;"or other holiday"
	      <SUBSTRUC .H 0 <LENGTH .H> <REST .SUB 5>>
	      <SUBSTRUC .H 0 <LENGTH .H> <REST .MMSG1 4>>	;"holiday"
	      <SET SUBB <REST .SUB <+ 5 <LENGTH .H>>>>	;"Blot out signups."
	      <REPEAT ((S <MEMQ <ASCII 13> .SUBB>)
		       (N <- <LENGTH .SUBB> <LENGTH .S> 15>)
		       (S .SUBB))
		      #DECL ((S) STRING (N) FIX)
		      <PUT .S 1 !\*>
		      <SET S <REST .S>>
		      <AND <0? <SET N <- .N 1>>> <RETURN>>>)>

       <SET SR <SUNRISE .DT 3E-4>>		;"sunrise to nearest second"
       <SET SR <COND (<AND <DST?> <NOT <DST? .SR>>> <DTADD .SR '(() (-1))>)
		     (<AND <NOT <DST?>> <DST? .SR>> <DTADD .SR '(() (+1))>)
		     (T .SR)>>
       <SET SRH <1 <2 .SR>>>
       <SET SRHS <REST ,HOURS .SRH>>
       <SET SRM <2 <2 .SR>>>
       <PUT .SUB
	    <FIX <+ <1 .SRHS> 1.5
		    </ <* <- <2 .SRHS> <1 .SRHS>> .SRM> 60.0>>>
	    !\>>
       <PUT .MMSG1 <FIX <+ <* 3 .SRH> </ .SRM 20.0> 5.5>> !\<>
       <SUBSTRUC <UNPARSE <+ 100 .SRH>> 1 2 .SRMSG>
       <PUT .SRMSG 3 !\:>
       <SUBSTRUC <UNPARSE <+ 100 .SRM>> 1 2 <REST .SRMSG 3>>
       <PUT .SRMSG 6 !\:>
       <SUBSTRUC <UNPARSE <+ 100 <3 <2 .SR>>>> 1 2 <REST .SRMSG 6>>

       <SET SS <SUNSET .DT 3E-4>>		;"sunset to nearest second"
       <SET SS <COND (<AND <DST?> <NOT <DST? .SS>>> <DTADD .SS '(() (-1))>)
		     (<AND <NOT <DST?>> <DST? .SS>> <DTADD .SS '(() (+1))>)
		     (T .SS)>>
       <SET SSH <1 <2 .SS>>>
       <SET SSHS <REST ,HOURS .SSH>>
       <SET SSM <2 <2 .SS>>>
       <PUT .SUB
	    <FIX <+ <1 .SSHS> 1.5
		    </ <* <- <2 .SSHS> <1 .SSHS>> .SSM> 60.0>>>
	    !\<>
       <PUT .MMSG1 <FIX <+ <* 3 .SSH> </ .SSM 20.0> 5.5>> !\>>
       <SUBSTRUC <UNPARSE <+ 100 .SSH>> 1 2 .SSMSG>
       <PUT .SSMSG 3 !\:>
       <SUBSTRUC <UNPARSE <+ 100 .SSM>> 1 2 <REST .SSMSG 3>>
       <PUT .SSMSG 6 !\:>
       <SUBSTRUC <UNPARSE <+ 100 <3 <2 .SS>>>> 1 2 <REST .SSMSG 6>>

       <COND (<SET SR <MOONRISE .DT>>				;"moonrise"
	      <SET SR <COND (<AND <DST?> <NOT <DST? .SR>>> <DTADD .SR '(() (-1))>)
			    (<AND <NOT <DST?>> <DST? .SR>> <DTADD .SR '(() (+1))>)
			    (T .SR)>>
	      <SET SRH <1 <2 .SR>>>
	      <SET SRHS <REST ,HOURS .SRH>>
	      <SET SRM <2 <2 .SR>>>
	      <PUT .SUB
		   <FIX <+ <1 .SRHS> 1.5
			   </ <* <- <2 .SRHS> <1 .SRHS>> .SRM> 60.0>>>
		   !\)>
	      <PUT .MMSG1 <FIX <+ <* 3 .SRH> </ .SRM 20.0> 5.5>> !\(>)>

       <COND (<SET SS <MOONSET .DT>>				;"moonset"
	      <SET SS <COND (<AND <DST?> <NOT <DST? .SS>>> <DTADD .SS '(() (-1))>)
			    (<AND <NOT <DST?>> <DST? .SS>> <DTADD .SS '(() (+1))>)
			    (T .SS)>>
	      <SET SSH <1 <2 .SS>>>
	      <SET SSHS <REST ,HOURS .SSH>>
	      <SET SSM <2 <2 .SS>>>
	      <PUT .SUB
		   <FIX <+ <1 .SSHS> 1.5
			   </ <* <- <2 .SSHS> <1 .SSHS>> .SSM> 60.0>>>
		   !\(>
	      <PUT .MMSG1 <FIX <+ <* 3 .SSH> </ .SSM 20.0> 5.5>> !\)>)>

       <COND (<=? <1 .DT> .NPD>			;"change of phase of moon"
	      <SUBSTRUC <SET STR <NTH '["*New Moon" "*First Quarter"
					"*Full Moon" "*Last Quarter"]
			     <+ 1 <1 .NP>>>>
			0
			<LENGTH .STR>
			<REST .SUB
			      <FIX <+ <1 .NPHS>
				      </ <* <- <2 .NPHS> <1 .NPHS>> .NPM> 60.0>
				      0.5>>>>
	      <SUBSTRUC <NTH '["*NM" "*FQ" "*FM" "*LQ"] <+ 1 <1 .NP>>>
			0 3 <REST .MMSG1
				  <FIX <+ <* 3 .NPH>
					  </ .NPM 20.0>
					  4.5>>>>)>

       <COND (<=? <1 .DT> .NSD>			;"change of season"
	      <SUBSTRUC <SET STR <NTH '[  "*Vernal Equinox" "*Summer Solstice"
					"*Autumnal Equinox" "*Winter Solstice"]
				      <+ 1 <1 .NS>>>>
			0
			<LENGTH .STR>
			<REST .SUB
			      <FIX <+ <1 .NSHS>
				      </ <* <- <2 .NSHS> <1 .NSHS>> .NSM> 60.0>
				      0.5>>>>
	      <SUBSTRUC <NTH '["*VE" "*SS" "*AE" "*WS"] <+ 1 <1 .NS>>>
			0 3 <REST .MMSG1
				  <FIX <+ <* 3 .NSH>
					  </ .NSM 20.0>
					  4.5>>>>)>

       <COND (<NOT <EMPTY? <SET BL <BD? <GET-MFD "DM"> .DT>>>>	;"birthday(s)"
	      <SUBSTRUC "Happy birthday to " 0 18 <SET SUBB <REST .SUB 169>>>
	      <SUBSTRUC <SET H <COND (<LENGTH? .BL 1> <1 .BL>)
				     (<LENGTH? .BL 2>
				      <STRING <1 .BL> " and " <2 .BL>>)
				     (T <STRING <1 .BL>
					       <MAPF ,STRING
						<FUNCTION (S) #DECL ((S) STRING)
							  <MAPRET ", " .S>>
						<REST .BL>>>)>>
			0
			<LENGTH .H>
			<SET SUBB <REST .SUBB 18>>>
	      <PUT .SUBB <+ 1 <LENGTH .H>> !\!>
	      <SUBSTRUC .H 0 <LENGTH .H> .MMSG1>)>)

      (T
       <SM-MAIL <STRING !.MSG <TOP .SRMSG> <TOP .SSMSG>>
		'() "SKY-FANS" "upcoming events in sky">
       <RETURN .S>)>>>

;<DEFINE NEXT-PHASE ("OPTIONAL" (DT <DTNOW>) "AUX" (PHASE '((7) (9 11 1)))) 
	#DECL ((VALUE) <VECTOR LIST FIX> (DT PHASE) LIST)
	<SET DT <DTNORM .DT>>
	<REPEAT ((PDT '((77 4 18) (2 52 6) "EST")) (P 0))	    ;"NEW MOON"
		<COND (<BEFORE? .DT .PDT> <RETURN [.PDT <+ 1 <MOD .P 4>>]>)
		      (T <SET P <+ 1 .P>> <SET PDT <DTADD .PDT .PHASE>>)>>>

<GDECL (BIGNUMS) <UVECTOR [REST <VECTOR [REST STRING]>]>>

<SETG BIGNUMS
      '![["   XXXXXXXXX   "
	  " XXXXXXXXXXXXX "
	  "XXX         XXX"
	  "XXX         XXX"
	  " XXXXXXXXXXXXX "
	  "   XXXXXXXXX   "]
	 ["XXX         XX "
	  "XXX         XXX"
	  "XXXXXXXXXXXXXXX"
	  "XXXXXXXXXXXXXXX"
	  "XXX            "
	  "XXX            "]
	 ["XXX       XXX  "
	  "XXXX       XXX "
	  "XXXXX       XXX"
	  "XXX XXX     XXX"
	  "XXX   XXX  XXX "
	  "XXX    XXXXXX  "]
	 [" XXX       XXX "
	  "XXX         XXX"
	  "XX    XXX    XX"
	  "XXX   XXX   XXX"
	  " XXXXXXXXXXXXX "
	  "   XXXXXXXXX   "]
	 ["     XXXXXXXXXX"
	  "     XXXXXXXXXX"
	  "     XXX       "
	  "     XXX       "
	  "XXXXXXXXXXXXXXX"
	  "XXXXXXXXXXXXXXX"]
	 [" XXX    XXXXXXX"
	  "XXX     XXXXXXX"
	  "XXX     XX   XX"
	  "XX      XX   XX"
	  "XXXXXXXXXX   XX"
	  " XXXXXXXX    XX"]
	 ["   XXXXXXXX    "
	  " XXXXXXXXXXXX  "
	  "XXX   XXX  XXX "
	  "XXX   XXX   XXX"
	  " XXXXXXX    XXX"
	  "   XXX     XXX "]
	 ["XXXX      XXXXX"
	  "  XXXX      XXX"
	  "    XXXX    XXX"
	  "      XXXX  XXX"
	  "        XXXXXXX"
	  "          XXXXX"]!]>

<GDECL (TTYNUMS) <VECTOR [REST STRING]>>

<DEFINE SIGNUP-SHEETS-POST ("OPTIONAL" (C <OPEN "PRINT" "HUDINI;SIGNUP SHEETS">)
				       (DT <DTNOW>)
			 "AUX" S (IX <IUVECTOR <* 2 <LENGTH <1 ,BIGNUMS>>> 0>))
   #DECL ((C) <OR CHANNEL FALSE> (DT) LIST (S) STRING
	  (IX) <UVECTOR [REST FIX]>)
   <COND
    (.C
     <COND (<NOT <GASSIGNED? TTYNUMS>> <FLOAD "SYSBIN;SIGNUP SHEET">)>
     <SET S <SIGNUP-SHEET .DT>>
     <MAPF <>
      <FUNCTION (NUM) 
	      #DECL ((NUM) STRING)
	      <REPEAT ((SUB .S) (RIX .IX)
		       (NUMVEC
			<NTH ,BIGNUMS <- <ASCII <1 .NUM>> <ASCII !\0> -1>>))
			#DECL ((SUB) STRING (RIX) <UVECTOR [REST FIX]>
			       (NUMVEC) <VECTOR [REST STRING]>)
		      <COND (<NOT <EMPTY? .RIX>>
			     <COND (<0? <1 .RIX>>
				    <SET SUB <MEMQ !\. .SUB>>
				    <PUT .RIX 1 <- <LENGTH .S> <LENGTH .SUB>>>)
				   (T <SET SUB <REST .S <1 .RIX>>>)>
			     <SUBSTRUC <1 .NUMVEC> 0 <LENGTH <1 .NUMVEC>> .SUB>
			     <SET RIX <REST .RIX>>
			     <SET NUMVEC <REST .NUMVEC>>
			     <AND <EMPTY? .NUMVEC>
				  <SET NUMVEC
				       <NTH ,BIGNUMS
					    <- <ASCII <2 .NUM>>
					       <ASCII !\0>
					       -1>>>>)
			    (T <PRINC .S .C> <RETURN>)>>>
      ,TTYNUMS>
     <COND (<NOT <==? .C ,OUTCHAN>>
	    ;<ITS-CALL "SDMPBT" '![!] .C 1>
	    <CLOSE .C>
	    ;<ITS-CALL "MLINK"
		      '![!]
		    !<MAPF ,UVECTOR ,STRTOX
		     ["DSK" "PLEASE" "POST" ".LPTR." <7 .C> <8 .C> <10 .C>]>>)>
     T)>>

;<DEFINE STYI-DRY ("OPTIONAL" (C .INCHAN))	    ;"Suck dry a STYI channel."
	#DECL ((C) CHANNEL)
	<REPEAT ()
		<AND <==? -1 <READCHR .C>> <RETURN>>>>   

;<DEFINE SM-TALK ("AUX" L SM CH (TRASH <ISTRING 99>) (UN <UNAME>)
		       (MSG <STRING "(SMTALK) " .UN " needs help.">)
		       INCHAN OUTCHAN
		       (OC <OPEN "PRINT" "STY:">) (IC <OPEN "READ" "STY:">)
		       (SML <2 <1 ,SM-S>>) (N-SM-S <LENGTH .SML>)
		       (OUT "
We hope we have been of help.
"))
   #DECL ((CH) <OR FIX CHARACTER> (L) <VECTOR [REST STRING]>
	  (SM TRASH MSG OUT UN) STRING (INCHAN OUTCHAN) <SPECIAL CHANNEL>
	  (OC IC) <OR FALSE CHANNEL>)
   <COND
    (<OR <NOT .IC> <NOT .OC>>		     ;"Check goodness of STY channels."
     <PRINC "I'm sorry, but my communication facility is busy." ,OUTCHAN>
     <TERPRI ,OUTCHAN>
     <AND .IC <CLOSE .IC>>
     <AND .OC <CLOSE .OC>>
     <AND .IC .OC>)				     ;"Return the non-channel."
    (ELSE
     <SET INCHAN .IC>
     <SET OUTCHAN .OC>
     <PRINC "I will try to find a Staff Member with whom you can consult."
	    ,OUTCHAN>
     <TERPRI ,OUTCHAN>				       ;"Tell user we're here."
     <SET L <COND (<MEMBER <SM> .SML>)	      ;"Set search list to current SM "
		  (<REST .SML <MOD <RANDOM> .N-SM-S>>)>> ;"or to a random one."
     <TERPRI>				     ;"Avoid ITS !CRLF's on STY input."
     <PROG ACT3 ((IL <INT-LEVEL>))
       #DECL ((IL) FIX)
       <REPEAT ACT1 ((N .N-SM-S))
	       #DECL ((N) FIX)
	       <AND <EMPTY? .L> <SET L <TOP .L>>>	  ;"Loop thru SM list "
	       <AND <G? 0 <SET N <- .N 1>>>	  ;"until all have been tried."
		    <SET OUT "I'm sorry, but no Staff Member is on-line.
">
		    <RETURN T .ACT3>>
	       <REPEAT ((SMS (<1 .L> <STRING <1 .L> ".SM">)))
		       #DECL ((SMS) <LIST [REST STRING]>)
		       <AND <=? .UN <1 .SMS>>		   ;"Don't try myself."
			    <EMPTY? <SET SMS <REST .SMS>>>
			    <RETURN>>
		       <STYI-DRY>
		       <PRINC <STRING "C" <SET SM <1 .SMS>> <ASCII 13>>>
							   ;"Try to make link."
		       <READSTRING .TRASH .INCHAN <+ 5 <LENGTH .SM>>>
							  ;"Suck out the echo."
		       <COND (<==? !\W <SET CH <READCHR>>>
							;"SM is in query mode."
			      <READCHR>			        ;"SPACE"
			      <AND <==? -1 <SET CH <READCHR>>>
				   <INT-LEVEL <+ 2 .IL>>
				   ;"Be sure we'll get intrpt when char comes."
				   <ON "CHAR"
				       #FUNCTION ((CHAN "AUX"
							(CHAR <READCHR .CHAN>))
						  #DECL ((CHAN) CHANNEL
							 (CHAR) CHARACTER)
						  <AND <OR <==? !\G .CHAR>
							   <==? !\N .CHAR>>
							 ;"On G or N, wake up."
						       <RETURN .CHAR .ACT2>>)
				       <+ 1 .IL>
				       <ME>
				       .INCHAN>
				   <==? -1 <SET CH <READCHR>>>
					;"If char is there, don't go to sleep."
				   <SET CH
					<PROG ACT2 ()
					    #DECL ((ACT2) <SPECIAL ACTIVATION>)
					      <INT-LEVEL .IL>
					      <SLEEP 10>
					      !\T>>
				   <OFF "CHAR" .INCHAN>>
			      <INT-LEVEL .IL>
			      <COND (<==? !\N .CH>)	 ;"If N, try next guy."
				    (<==? !\G .CH>
				     <PRINT .MSG>
				     <TERPRI>
				     <RETURN T .ACT1>)			;"Win!"
				   (ELSE <PRINC "N">)>);"Give up on timeout."
			     (<==? !\G .CH>		    ;"SM is logged in."
			      <READCHR>				       ;"SPACE"
			      <PRINC !\>
			      <SLEEP 1>
			      <PRINC !\>
			      <SLEEP 1>
			      <PRINC !\>		      ;"Alert the guy."
			      <PRINT .MSG>
			      <TERPRI>
			      <READSTRING .TRASH .INCHAN <+ 13 <LENGTH .MSG>>>
							  ;"Suck out the echo."
			      <OR <==? -1 <READCHR>> <RETURN T .ACT1>>
	   ;"Look for any char to be typed.  (Should wait for a certain char?)"
			      <READSTRING .TRASH .INCHAN
					  <LENGTH <PRINC "--MORE--">>>
						      ;"Tell SM we're waiting."
			      <OR <==? -1 <READCHR>> <RETURN T .ACT1>>
						       ;"Return if char there."
			      <INT-LEVEL <+ 2 .IL>>
			      <ON "CHAR"
				  #FUNCTION ((CHAN) 
					     #DECL ((CHAN) CHANNEL)
					     <OFF "CHAR" .CHAN>
					     <RETURN 1 .ACT2>)
				  <+ 1 .IL>
				  <ME>
				  .INCHAN>
			      <OR <==? -1 <READCHR>>
				  <AND <OFF "CHAR" .INCHAN> <RETURN T .ACT1>>>
					;"If char is there, don't go to sleep."
			      <AND <1? <PROG ACT2 ()
					    #DECL ((ACT2) <SPECIAL ACTIVATION>)
					     <INT-LEVEL .IL>
					     <SLEEP 10>
					     0>>
				  <RETURN T .ACT1>>;"If a char came, go ahead."
			      <OFF "CHAR" .INCHAN>
			      <PRINC "N">)>	     ;"Else go on to next guy."
		       <AND <EMPTY? <SET SMS <REST .SMS>>> <RETURN>>>
	       <SET L <REST .L>>>
       <INT-LEVEL .IL>
       <PRINC <STRING "You are being linked to "
		      .SM
		      ".
The following two lines come from our operating system:">
	      ,OUTCHAN>			    ;"Let user know what is happening."
       <ITS-CALL "LISTEN" '![!] ,INCHAN>
				      ;"Make sure previous msg has been typed."
       <PRINC <STRING "C" <UNAME> <ASCII 13> "N">>>
					  ;"Connect to myself and release STY."
     <STYI-DRY>					 ;"Play it safe for next time."
     <CLOSE .OUTCHAN>
     <CLOSE .INCHAN>
     <PRINC .OUT ,OUTCHAN>		     ;"Print this when link is broken."
     "DONE")>>

<ENDPACKAGE>
