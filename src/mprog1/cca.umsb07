<PACKAGE "CCA">

<ENTRY	CCA-ACTIVATE CCA-DEACTIVATE CCA-KILL
	CCA-READ CCA-PRINT
	CCA-COMMAND CCA-ERR-SYNC
	CCA-ACTIVATE-SCRIPT CCA-DEACTIVATE-SCRIPT CCA-ALLOW-SCRIPT?
	CCA-CHAN CCA-SCRIPT-CHAN
	NETCLOSE>

<ENTRY 	CCA-OPEN CCA-CLOSE CCA-LOGIN
	CCA-CONNECT CCA-ACTIVATE-DATA-CHAN CCA-DEACTIVATE-DATA-CHAN
	CCA-DATA-CHAN CCA-DATA-MODE
	CCA-ASSIGN
	CCA-GET CCA-SEND
	CCA-LIST>


<USE "CPYFIL">

<GDECL	(CCA-CHAN) <OR <LIST CHANNEL CHANNEL> FALSE>
	(CCA-DATA-CHAN) <OR CHANNEL FALSE>
	(CCA-DATA-MODE) <OR <LIST STRING FIX> FALSE>
	(CCA-SCRIPT-CHAN) <OR CHANNEL FALSE>
	(CCA-ALLOW-SCRIPT?) ANY
	(CCA-BUFFER CCA-STR RDYMSG SYNMSG) STRING
	(CCA-UVCT) UVECTOR>

<SETG CCA-CHAN <>>
<SETG CCA-SCRIPT-CHAN <>>
<SETG CCA-ALLOW-SCRIPT? T>
<SETG CCA-DATA-CHAN <>>
<SETG CCA-DATA-MODE <>>
<SETG CCA-BUFFER <ISTRING 200 !"  >>
<SETG CCA-UVCT <IUVECTOR 200 0>>
<SETG CCA-STR <ISTRING 1000 !"  >>
<SETG RDYMSG ".I210">
<SETG SYNMSG ".I220">






<DEFINE CCA-ACTIVATE CCA-ACT ("OPTIONAL" (WAITIME 120) (SOC *103*) (HOST 31))
#DECL ((VALUE) <OR STRING FALSE>
	(WAITIME SOC HOST) FIX
	(CCA-ACT) <SPECIAL ACTIVATION>)
<COND	(,CCA-CHAN)
	(<SETG CCA-CHAN <ICP .HOST .SOC .WAITIME>>
	<CCA-READ ,RDYMSG>)>>


<DEFINE CCA-DEACTIVATE ("AUX" NIN NOUT)
#DECL ((VALUE) <OR 'T FALSE> (NIN NOUT) CHANNEL)
<COND	(<AND <TYPE? ,CCA-CHAN LIST>
		<==? 2 <LENGTH ,CCA-CHAN>>
		<TYPE? <SET NIN <1 ,CCA-CHAN>> CHANNEL>
		<TYPE? <SET NOUT <2 ,CCA-CHAN>> CHANNEL>>
	<COND	(<AND
		<COND	(<MEMQ <1 <NETSTATE .NOUT>> '![5 6!]>
			<OFF "CHAR" .NOUT>
			<PRINC <ASCII 26> .NOUT>
			<NETS .NOUT>
			<CCA-READ ".J900">)>
		<NETCLOSE .NIN>
		<NETCLOSE .NOUT>>
		<SETG CCA-CHAN <>>
		T)
		(<CCA-KILL>)>)>>




<DEFINE CCA-KILL ("AUX" CHAN)
#DECL ((VALUE) <OR 'T FALSE> (CHAN) <OR <LIST CHANNEL CHANNEL> FALSE>)
<COND	(<AND <TYPE? <SET CHAN ,CCA-CHAN> LIST>
		<==? 2 <LENGTH .CHAN>>
		<TYPE? <1 .CHAN> CHANNEL>
		<TYPE? <2 .CHAN> CHANNEL>>
	<NETCLOSE <1 .CHAN>>
	<NETCLOSE <2 .CHAN>>
	<SETG CCA-CHAN <>>
	T)>>




<DEFINE CCA-READ CCA-ACT ("TUPLE" CODEST "AUX" (BUF ,CCA-BUFFER)
							(CHAN <>) CNT VAL NIN)
#DECL ((VALUE) <OR STRING FALSE> (CODEST) <TUPLE [REST STRING]>
	(BUF) STRING
	(CNT) FIX
	(NIN) <OR CHANNEL FALSE>
	(VAL) ANY
	(CHAN) <OR CHANNEL FALSE>
	(OUTCHAN) <SPECIAL CHANNEL>
	(CCA-ACT) <SPECIAL ACTIVATION>)
<COND	(<TYPE? <SET CHAN ,CCA-SCRIPT-CHAN> CHANNEL>)
	(<ASSIGNED? OUTCHAN> <SET CHAN .OUTCHAN>)
	(ELSE <SET CHAN <>>)>
<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
		<==? 2 <LENGTH .VAL>>
		<TYPE? <1 .VAL> CHANNEL>
		<TYPE? <2 .VAL> CHANNEL>>
	<SET NIN <1 .VAL>>
	<REPEAT ()
	<COND	(<AND <G? <1 .NIN> 0>
			<MEMQ <SET VAL <1 <NETSTATE .NIN>>> '![5 8 9!]>>
		<COND	(<OR <==? 13 <SET VAL <ASCII <NEXTCHR .NIN>>>> <==? 10 .VAL>>
			<READCHR .NIN>)
			(<AND <TYPE? <SET VAL <READSTRING .BUF .NIN "
" '<>>> FIX>
				<G? <SET CNT .VAL> 0>>
			<COND	(<AND <TYPE? .CHAN CHANNEL> ,CCA-ALLOW-SCRIPT?>
				<PRINC "
**RCVD** " .CHAN>
				<PRINTSTRING .BUF .CHAN .CNT>)>
			<COND	(<OR <==? <SET VAL <1 .BUF>> !"?>
					<==? .VAL !"->
					<==? .VAL !"+>
					<MAPR <> <FUNCTION (S1 S2)
						#DECL ((VALUE) <OR 'T FALSE>
							(S1 S2) STRING)
						<COND	(<==? <1 .S1> <1 .S2>>)
							(<MAPLEAVE <>>) (T)>>
						,SYNMSG .BUF>>
				<SET VAL <ISTRING .CNT>>
				<MAPR <> <FUNCTION (S1 S2)
						#DECL ((VALUE S1 S2) STRING)
						<PUT .S1 1 <1 .S2>>>
					.VAL .BUF>
				<RETURN <CHTYPE (<STRING <1 .VAL> <2 .VAL>
							<3 .VAL> <4 .VAL> <5 .VAL>>
						.VAL) FALSE>>)
				(<OR <EMPTY? .CODEST>
				<NOT <MAPF <> <FUNCTION (STR)
					#DECL ((STR) STRING)
					<COND	(<MAPR <> <FUNCTION (S1 S2)
						#DECL ((VALUE) <OR 'T FALSE>
							(S1 S2) STRING)
						<COND	(<==? <1 .S1> <1 .S2>>)
							(<MAPLEAVE <>>) (T)>>
						.STR .BUF>
						<MAPLEAVE <>>)
						(T)>>
					.CODEST>>>
				<RETURN <STRING <1 .BUF>
						<2 .BUF>
						<3 .BUF>
						<4 .BUF>
						<5 .BUF>>>)>)>)
		(<MEMQ .VAL '![-1 0 1 3 !]>
		<RETURN <CHTYPE ("NET CONNECTION DEAD" <NETSTATE .NIN>) FALSE>>)>>)>>



"	* CCA-PRINT *"

<DEFINE CCA-PRINT CCA-ACT ("TUPLE" OBJ "AUX" VAL CHAN NOUT)
#DECL ((VALUE VAL) ANY
	(OBJ) TUPLE
	(NOUT) <OR CHANNEL FALSE>
	(CHAN) <OR CHANNEL FALSE>
	(OUTCHAN) <SPECIAL CHANNEL>
	(CCA-ACT) <SPECIAL ACTIVATION>)
<COND	(<TYPE? <SET CHAN ,CCA-SCRIPT-CHAN> CHANNEL>)
	(<ASSIGNED? OUTCHAN> <SET CHAN .OUTCHAN>)
	(ELSE <SET CHAN <>>)>
<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
		<==? 2 <LENGTH .VAL>>
		<TYPE? <SET VAL <2 .VAL>> CHANNEL>>
	<SET NOUT .VAL>)
	(ELSE <RETURN <CHTYPE ("NO CHANNEL" .VAL) FALSE> .CCA-ACT>)>
<COND	(<AND <G? <1 .NOUT> 0>
		<NOT <MEMQ <1 <NETSTATE .NOUT>> '![-1 0 3!]>>>
	<COND	(<AND <TYPE? .CHAN CHANNEL> ,CCA-ALLOW-SCRIPT?>
		<PRINC "
**SENT** " .CHAN>
		<MAPF <> <FUNCTION (VAL) <PRINC .VAL .CHAN>> .OBJ>)>
	<MAPF <> <FUNCTION (VAL) <PRINC .VAL .NOUT>> .OBJ>
	<NETS .NOUT>
	T)>>


<DEFINE CCA-COMMAND (TXT "AUX" VAL)
#DECL ((VALUE) <OR 'T FALSE> (TXT) STRING (VAL) ANY)
<COND	(<AND	<OR ,CCA-CHAN <CCA-ACTIVATE>>
		<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<CCA-PRINT .TXT>
		<CCA-READ ,RDYMSG>>
	T)>>


<DEFINE CCA-ERR-SYNC ("AUX" VAL)
#DECL ((VALUE) <OR 'T FALSE> (VAL) ANY)
<COND	(<AND	<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<CCA-PRINT <ASCII 12>>
		<REPEAT () <COND (<=? ";I229" <CCA-READ ";I229">> <RETURN>)>>
		<CCA-READ ,RDYMSG>>
	T)>>


<DEFINE CCA-ACTIVATE-SCRIPT (TO "OPTIONAL" TO1 "AUX" CHAN)
#DECL ((VALUE) <OR CHANNEL FALSE> (TO) <OR STRING CHANNEL> (TO1) CHANNEL
	(CHAN) <OR CHANNEL FALSE>)
<COND	(,CCA-SCRIPT-CHAN)
	(<COND	(<TYPE? .TO CHANNEL> <SET CHAN .TO>)
		(<SET CHAN <OPEN "PRINTB" .TO>>)>
	<COND	(<AND <ASSIGNED? TO1> <TYPE? .TO1 CHANNEL>>
		<PUT <TOP .CHAN> 1 (.TO1)>)>
	<SETG CCA-SCRIPT-CHAN .CHAN>)>>



<DEFINE CCA-DEACTIVATE-SCRIPT ()
#DECL ((VALUE) <OR 'T FALSE>)
<COND	(<TYPE? ,CCA-SCRIPT-CHAN CHANNEL>
	<COND	(<G? <1 ,CCA-SCRIPT-CHAN> 0>
		<CLOSE ,CCA-SCRIPT-CHAN>)>
	<SETG CCA-SCRIPT-CHAN <>>)>>

	







"		** 'SUGARED' FUNCTIONS, PARALLELLING DATALANGUAGE COMMANDS **"


<DEFINE CCA-OPEN (FILE "OPTIONAL" (MODE "") "AUX" VAL)
#DECL ((VALUE) <OR 'T FALSE> (FILE MODE) STRING (VAL) ANY)
<COND	(<AND	<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<CCA-PRINT "OPEN " .FILE !"  .MODE ";
">
		<CCA-READ ,RDYMSG>>
	T)>>




<DEFINE CCA-CLOSE (FILE "AUX" VAL)
#DECL ((VALUE) <OR 'T FALSE> (FILE) STRING (VAL) ANY)
<COND	(<AND	<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<CCA-PRINT "CLOSE " .FILE ";
">
		<CCA-READ ,RDYMSG>>
	T)>>




<DEFINE CCA-LOGIN (NODE "AUX" VAL)
#DECL ((VALUE) <OR 'T FALSE> (NODE) STRING (VAL) ANY)
<COND	(<AND	<OR ,CCA-CHAN <CCA-ACTIVATE>>
		<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<CCA-PRINT "LOGIN " .NODE ";
">
		<CCA-READ ,RDYMSG>>
	T)>>




<DEFINE CCA-CONNECT (PORT MODE "AUX" SOC VAL)
#DECL ((VALUE) <OR 'T FALSE> (PORT MODE) STRING (VAL) ANY (SOC) FIX)
<COND	(<AND	<COND	(,CCA-DATA-CHAN
			<CHTYPE ("CONNECTION ALREADY OPEN") FALSE>) (T)>
		<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<COND	(<OR <=? "READ" .MODE> <=? "READB" .MODE>>
			<SET SOC <+ 2 <7 <1 ,CCA-CHAN>>>>)
			(<OR <=? "PRINT" .MODE> <=? "PRINTB" .MODE>>
			<SET SOC <+ 2 <7 <2 ,CCA-CHAN>>>>)
			(<CHTYPE ("ILLEGAL MODE" .MODE) FALSE>)>>
	<AND <CCA-PRINT "CONNECT " .PORT !"  .SOC ";
">
		<CCA-READ ,RDYMSG>
		<SETG CCA-DATA-MODE (.MODE .SOC)>
		T>)>>


<DEFINE CCA-ACTIVATE-DATA-CHAN ("OPTIONAL" (WAITIME 120) "AUX" VAL)
#DECL ((VALUE) <OR CHANNEL FALSE> (WAITIME) FIX (VAL) ANY)
<COND	(<SET VAL <AND	<COND	(<NOT ,CCA-DATA-CHAN>)
				(<CHTYPE ("CONNECTION ALREADY SET-UP") FALSE>)>
		<COND	(<AND <TYPE? ,CCA-DATA-MODE LIST>
				<==? 2 <LENGTH ,CCA-DATA-MODE>>
				<TYPE? <1 ,CCA-DATA-MODE> STRING>
				<TYPE? <2 ,CCA-DATA-MODE> FIX>>)
			(<CHTYPE ("PORT NOT CONNECTED") FALSE>)>
		<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<COND	(<SETG CCA-DATA-CHAN <OPEN <1 ,CCA-DATA-MODE>
					<2 ,CCA-DATA-MODE> -1 "NET" -1>>)
			(<CHTYPE ("COULDNT OPEN DATA CHANNEL" ,CCA-DATA-CHAN) FALSE>)>
		<SET VAL <PROG CCA-DATA-ACT ()
			#DECL ((CCA-DATA-ACT) <SPECIAL ACTIVATION>)
			<INT-LEVEL 4>
			<ON "CHAR" ,DATA-NETINT 3 0 ,CCA-DATA-CHAN>
			<INT-LEVEL 0>
			<COND	(<NOT <==? 1 <1 <SET VAL <NETSTATE ,CCA-DATA-CHAN>>>>>
				.VAL)
				(ELSE <SLEEP .WAITIME>
				<NETCLOSE ,CCA-DATA-CHAN>
				<SETG CCA-DATA-CHAN <>>
				<RETURN <CHTYPE ("TIME-OUT, RFC NOT RECEIVED")
						FALSE>
					.CCA-DATA-ACT>)>>>
		<OFF "CHAR" ,CCA-DATA-CHAN>
		<COND	(<AND <TYPE? .VAL UVECTOR> <==? 2 <1 .VAL>>>)
			(<CHTYPE ("FUNNY STATE ENCOUNTERED" .VAL) FALSE>)>
		<COND	(<AND	<NETACC ,CCA-DATA-CHAN>
				<MEMQ <1 <SET VAL <NETSTATE ,CCA-DATA-CHAN>>>
					'![5 8 9!]>>)
			(<CHTYPE ("COULDNT ACCEPT CONNECTION" <NETSTATE ,CCA-DATA-CHAN>)
				FALSE>)>>>
	,CCA-DATA-CHAN)
	(ELSE
	<COND	(<TYPE? ,CCA-DATA-CHAN CHANNEL>
		<NETCLOSE ,CCA-DATA-CHAN>
		<SETG CCA-DATA-CHAN <>>)>
	.VAL)>>



<DEFINE CCA-DEACTIVATE-DATA-CHAN ("AUX" VAL)
#DECL ((VALUE) <OR 'T FALSE> (VAL) ANY)
<COND	(<AND <GASSIGNED? CCA-DATA-CHAN>
		<TYPE? ,CCA-DATA-CHAN CHANNEL>>
	<NETCLOSE ,CCA-DATA-CHAN>
	<SETG CCA-DATA-CHAN <>>
	<SETG CCA-DATA-MODE <>>
	T)>>



<DEFINE CCA-ASSIGN (TO FROM "OPTIONAL" (FLG <>) (WAITIME 120) "AUX" VAL)
#DECL ((VALUE) <OR CHANNEL STRING FALSE> (FROM TO) STRING (VAL FLG) ANY (WAITIME) FIX)
<COND	(<AND	<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<CCA-PRINT .TO " = " .FROM ";
">
		<SET VAL <CCA-READ ,RDYMSG ".I230" ".I231" ".I240" ".I241">>>
	<COND	(<NOT .FLG> .VAL)
		(<AND ,CCA-DATA-MODE
			<OR <=? .VAL ".I240"> <=? .VAL ".I230">>
			<SET VAL <CCA-ACTIVATE-DATA-CHAN .WAITIME>>
			<CCA-READ ";I249" ";I239">>
		.VAL)>)>>


<DEFINE CCA-GET (TO "OPTIONAL" (FROM ,CCA-DATA-CHAN) "AUX" VAL CHAN)
#DECL ((VALUE) <OR CHANNEL 'T FALSE> (TO) <OR CHANNEL STRING>
	(FROM CHAN) <OR CHANNEL FALSE> (VAL) ANY)
<COND	(<AND	<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<COND	(<AND <TYPE? .FROM CHANNEL>
				<OR <=? "READ" <2 .FROM>> <=? "READB" <2 .FROM>>>>)
			(<CHTYPE ("BAD 'FROM' CHANNEL ARGUMENT" .FROM) FALSE>)>
		<COND	(<TYPE? .TO CHANNEL>
			<COND	(<OR <=? "PRINTB" <2 .TO>> <=? "PRINT" <2 .TO>>>
				<SET CHAN .TO>)>)
			(<AND <TYPE? .TO STRING> <SET CHAN <OPEN "PRINTB" .TO>>>)
			(<CHTYPE ("COULDN'T OPEN OUTPUT CHANNEL" .TO) FALSE>)>
		<COND	(<=? "READ" <2 .FROM>>
			<REPEAT ((STR ,CCA-STR))
			#DECL ((STR) STRING)
			<COND	(<AND <TYPE? <SET VAL <READSTRING .STR .FROM "" '<>>>
						FIX>
					<G? .VAL 0>>
				<PRINTSTRING .STR .CHAN .VAL>)
				(ELSE <RETURN>)>>)
			(<=? "READB" <2 .FROM>>
			<REPEAT ((BUF ,CCA-UVCT) (BUFLNT <LENGTH .BUF>) (CNT 0))
			#DECL ((BUF) UVECTOR (BUFLNT CNT) FIX)
			<COND	(<AND <TYPE? <SET VAL <READB .BUF .FROM '<>>> FIX>
					<G? .VAL 0>>
				<COND	(<==? .VAL .BUFLNT> <PRINTB .BUF .CHAN>)
					(ELSE
					<SET CNT 0>
					<PRINTB <IUVECTOR .VAL
						'<NTH .BUF <SET CNT <+ 1 .CNT>>>> .CHAN>
					<RETURN>)>)
				(ELSE <RETURN>)>>)>>
	<COND	(<==? .TO .CHAN> .TO)
		(ELSE <CLOSE .CHAN> 'T)>)>>
 



<DEFINE CCA-SEND (FROM "OPTIONAL" (TO ,CCA-DATA-CHAN) "AUX" VAL CHAN)
#DECL ((VALUE) <OR CHANNEL 'T FALSE> (FROM) <OR CHANNEL STRING>
	(TO CHAN) <OR CHANNEL FALSE> (VAL) ANY)
<COND	(<AND	<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<COND	(<AND <TYPE? .TO CHANNEL>
				<OR <=? "PRINTB" <2 .TO>> <=? "PRINT" <2 .TO>>>>)
			(<CHTYPE ("BAD 'TO' CHANNEL ARGUMENT" .TO) FALSE>)>
		<COND	(<TYPE? .FROM CHANNEL>
			<COND	(<OR <=? "READB" <2 .TO>> <=? "READ" <2 .FROM>>>
				<SET CHAN .FROM>)>)
			(<AND <TYPE? .FROM STRING> <SET CHAN <OPEN "READB" .FROM>>>)
			(<CHTYPE ("COULDN'T OPEN INPUT CHANNEL" .FROM) FALSE>)>
		<PROG CCA-DATA-ACT ()
		#DECL ((CCA-DATA-ACT) <SPECIAL ACTIVATION>)
			<INT-LEVEL 4>
			<ON "CHAR" ,DATA-NETINT 3 0 .TO>
			<INT-LEVEL 0>
			<SET VAL <COND	(<=? "PRINTB" <2 .TO>> <COPY-FILE .CHAN .TO>)
					(<=? "PRINT" <2 .TO>> <FILECOPY .CHAN .TO>)>>
			<OFF "CHAR" .TO>
			.VAL>>
	<COND	(<==? .FROM .CHAN> .FROM)
		(ELSE <CLOSE .CHAN> 'T)>)>>





<DEFINE CCA-LIST (FILE "OPTIONAL" (MODE "") "AUX" VAL)
#DECL ((VALUE) <OR 'T FALSE> (FILE MODE) STRING (VAL) ANY)
<COND	(<AND	<COND	(<AND <TYPE? <SET VAL <OR ,CCA-CHAN <CCA-ACTIVATE>>> LIST>
				<==? 2 <LENGTH .VAL>>
				<TYPE? <1 .VAL> CHANNEL>
				<TYPE? <2 .VAL> CHANNEL>>)
			(<CHTYPE ("NOT CONNECTED TO DATACOMPUTER") FALSE>)>
		<CCA-PRINT "LIST " .FILE !"  .MODE ";
">
		<CCA-READ ,RDYMSG>>
	T)>>




"	* ICP *

Initiates Initial Connection Protocol with a foreign host"


<DEFINE ICP ICPACT (HOST FSOC "OPTIONAL" (WAITIME <* 3 60>)
			"AUX" CHICP CH1 CH2 SOC STATE)
#DECL((HOST   FSOC) FIX
	(CH1 CH2) <OR FALSE CHANNEL>
	(CHICP) <SPECIAL <OR CHANNEL FALSE>> 
	(STATE) <OR UVECTOR FALSE>
	(SOC) <OR UVECTOR FIX FALSE>
	(WAITIME) FIX
	(ICPACT) ACTIVATION)
<COND	(<SET CHICP <OPEN "READB" -1 .FSOC "NET" .HOST 32>>
	<SET STATE <PROG DONE ()
		#DECL ((DONE) <SPECIAL ACTIVATION>)
		<INT-LEVEL 4>
		<ON "CHAR" ,ICP-NETINT 3 0 .CHICP>
		<INT-LEVEL 0>
		<COND	(<NOT <==? 4 <1 <SET STATE <NETSTATE .CHICP>>>>>
			<OFF "CHAR" .CHICP>
			<RETURN .STATE .DONE>)
			(ELSE
			<SLEEP .WAITIME> 
			<NETCLOSE .CHICP>     
			<RETURN <CHTYPE ("ICP timed out") FALSE> .ICPACT>)>>>  
	<COND	(<AND <OR <==? <1 .STATE> 5> <==? <1 .STATE> 9><==? <1 .STATE> 8>>
			<READB <SET SOC '![0!]> .CHICP>
			<SET SOC <1 .SOC>>
			<SET CH1 <OPEN "READ" <+ 2 <7 .CHICP>> <+ 1 .SOC>
				"NET" .HOST 8>>
			<SET CH2 <OPEN "PRINT" <+ 3 <7 .CHICP>> .SOC "NET" .HOST 8>>
			<PUT .CH2 13 9000000>
		<NETCLOSE .CHICP>>
		<ON "CHAR" ,FDUPLEX-NETINT 3 0 .CH1>
		<ON "CHAR" ,FDUPLEX-NETINT 3 0 .CH2>
		(.CH1 .CH2))
		(ELSE <CHTYPE (.STATE) FALSE>)>)>>



"	* NETWORK INTERRUPT HANDLERS *"

<DEFINE ICP-NETINT (STATE CHAN "AUX" A)
#DECL((A) UVECTOR
	(STATE) <OR UVECTOR FALSE>
	(CHAN) CHANNEL
	(DONE) <SPECIAL ACTIVATION>
	(CHICP) <SPECIAL <OR CHANNEL FALSE>>)    
<COND 	(<AND <ASSIGNED? DONE>
		<TYPE? .DONE ACTIVATION>
		<ASSIGNED? CHICP>
		<TYPE? .CHICP CHANNEL>
		<==? .CHAN .CHICP>
		<NOT <==? 4 <1 <SET A <NETSTATE .CHICP>>>>>>
	<DISMISS .A .DONE>)>
<DISMISS T>>


<DEFINE FDUPLEX-NETINT (VAL CHAN "AUX" NIN NOUT)
#DECL ((CHAN) <OR CHANNEL FALSE>
	(CCA-ACT) <SPECIAL ACTIVATION>
	(VAL) ANY
	(NIN NOUT) CHANNEL)
<COND	(<MEMQ <1 <NETSTATE .CHAN>> '![-1 0 3!]>
	<COND	(<AND <TYPE? ,CCA-CHAN LIST>
			<==? 2 <LENGTH ,CCA-CHAN>>
			<TYPE? <SET NIN <1 ,CCA-CHAN>> CHANNEL>
			<TYPE? <SET NOUT <2 ,CCA-CHAN>> CHANNEL>>
		<NETCLOSE .NIN>
		<NETCLOSE .NOUT>
		<SETG CCA-CHAN <CHTYPE ("INTERRUPT, NET CONNECTION CRASHED") FALSE>>)>
	<COND	(<AND <GASSIGNED? CCA-DATA-CHAN>
			<TYPE? ,CCA-DATA-CHAN CHANNEL>>
		<NETCLOSE ,CCA-DATA-CHAN>
		<SETG CCA-DATA-CHAN <>>)>
	<COND	(<ASSIGNED? CCA-ACT>
		<DISMISS ,CCA-CHAN .CCA-ACT>)>)>
<DISMISS T>>



<DEFINE DATA-NETINT (VAL CHAN)
#DECL ((CHAN) <OR CHANNEL FALSE>
	(CCA-DATA-ACT) <SPECIAL ACTIVATION>
	(VAL) ANY)
<COND	(<AND <GASSIGNED? CCA-DATA-CHAN>
		<==? .CHAN ,CCA-DATA-CHAN>
		<ASSIGNED? CCA-DATA-ACT>>
	<COND	(<==? 2 <1 <SET VAL <NETSTATE .CHAN>>>>
		<DISMISS <NETSTATE .CHAN> .CCA-DATA-ACT>)
		(<MEMQ <1 .VAL> '![-1 0 3!]>
		<DISMISS <CHTYPE ("INTERRUPT, AUX DATA CHAN CRASHED") FALSE>
			.CCA-DATA-ACT>)>)>
<DISMISS T>>


;"	* NETCLOSE *"

<DEFINE NETCLOSE (VAL "AUX" CHAN)
#DECL ((VALUE VAL) ANY (CHAN) CHANNEL)
<COND	(<AND <TYPE? .VAL CHANNEL> <G? <1 <SET CHAN .VAL>> 0>>
	<COND	(<GET .CHAN INTERRUPT> <OFF "CHAR" .CHAN>)>
	<CLOSE .CHAN>)>>


<ENDPACKAGE>
