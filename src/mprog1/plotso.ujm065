
<PACKAGE "PLOTSO">

<ENTRY
 GRAPH
 GRFUNC
 PLOT
 REGRAPH
 ERASE_S
 SCALE
 SURPRESS-GRAPH-NUMBERS
 GRAPH_DATA
 GRAPH_TITLE
 GRAPH_X
 GRAPH_Y
 GRAPH_COMMENT
 CLEAR-GRAPHS
 NUMPRINT
 DEMO
 NO-DRAW
 END_DEMO
 GRFLIST
 BACKSPACE>

<USE "GS">

<NEWTYPE GRFLIST LIST>

<PRINTTYPE GRFLIST <FUNCTION (X) T>>

<USE-DEFER "GSTTYC">

<COND (<NOT <GASSIGNED? G_R>>
       <PRINC "YOU MAY WANT TO EVALUATE <G_R>">
       <USE "GSTTYC">
       <G_R <>>)>
<DROP "GSTTYC">

<SET GLOBAL_GRAPHS <CHTYPE () GRFLIST>>

<SET GLOBAL_MAKE_GRID T>

<SET GLOBAL_CONSERVE_SCALE <>>

<SET SMOOTH-TOL '0.5>

<SET OLD_INC .05>

<SET OLD_MIN 0>

<SET OLD_MAX 1>

<SET OLD_VAR T>

<SET OLD_FORM '<SIN .T>>

<DEFINE GRFUNC (FUNC
		"OPTIONAL" MIN-MY 
			   (MAX-MY .OLD_MAX)
			   (INC <COND (<ASSIGNED? MIN-MY>
					</ <- .MAX-MY .MIN-MY> 100.0>)
					(T <SET MIN-MY .OLD_MIN>
					 .OLD_INC)>)
		"AUX" (NOERASE T) (GG <GIVE-GG>))
	#DECL ((FUNC) <OR FUNCTION SUBR FSUBR RSUBR> (TITLE NOERASE) <SPECIAL ANY>
	       (GG VALUE) <GRFLIST [REST VECTOR]>
	       (MIN-MY MAX-MY INC) <OR FLOAT FIX>
		(OLD_INC OLD_MIN OLD_MAX) <SPECIAL <OR FIX FLOAT>>)
	<COND (<G=? .MIN-MY .MAX-MY><ERROR MIN-IS-G=?-MAX!-ERROR GRFUNC>)>
	<SET OLD_MIN .MIN-MY>
	<SET OLD_MAX .MAX-MY>
	<SET OLD_INC .INC>
	<VEC_PLOTTER <SET GLOBAL_GRAPHS <PUT <CHTYPE 
	     (!.GG
	      <PUT <VEC_CALC .FUNC .MIN-MY .MAX-MY .INC>
		   GRF
		   ('"FUNCTION = "
		    <UNPARSE .FUNC>
		    '"   MIN = "
		    .MIN-MY
		    '"   MAX = "
		    .MAX-MY
		    '"   INC = "
		    .INC
		    '"
")>) GRFLIST> TITLE <GET .GG TITLE>>>
		     .GLOBAL_MAKE_GRID
		     .GLOBAL_CONSERVE_SCALE>
	.GLOBAL_GRAPHS>

<DEFINE GRAPH ("OPTIONAL" (FORM-MY .OLD_FORM) (VAR .OLD_VAR)
			  MIN-MY  (MAX-MY .OLD_MAX)
			(INC <COND (<ASSIGNED? MIN-MY>
				    </ <- .MAX-MY .MIN-MY> 100.0>)
				   (T <SET MIN-MY .OLD_MIN>
					.OLD_INC)>)
	       "AUX" (NOERASE T)(TLIST (1)) (VARLIST .TLIST) (MARKER (1))
		     (GG <GIVE-GG>))
	#DECL ((FORM-MY) <OR FORM FLOAT FIX FALSE>
	       (GLOBAL_GRAPHS GG VALUE) <GRFLIST [REST VECTOR]>
	       (VARLIST MARKER TITLE NOERASE) <SPECIAL ANY>
	       (VAR) <OR ATOM FALSE> (MIN-MY MAX-MY INC) <OR FIX FLOAT>
		(OLD_INC OLD_MIN OLD_MAX OLD_VAR OLD_FORM) <SPECIAL ANY>)
	<COND (<G=? .MIN-MY .MAX-MY><ERROR MIN-IS-G=?-MAX!-ERROR GRAPH>)>
	<SET FORM-MY <OR .FORM-MY .OLD_FORM>>
	<SET OLD_VAR <SET VAR <OR .VAR .OLD_VAR>>>
	<SET OLD_INC .INC>
	<SET OLD_FORM .FORM-MY>
	<SET OLD_MIN .MIN-MY>
	<SET OLD_MAX .MAX-MY>
	<PUT .VAR .MARKER T>
	<GET_VARS .FORM-MY>
	<VEC_PLOTTER <SET GLOBAL_GRAPHS <PUT <CHTYPE
	     (!.GG
	      <PUT <VEC_CALC <CHTYPE ((.VAR) .FORM-MY) FUNCTION> .MIN-MY .MAX-MY .INC>
		   GRF
		   ('"FORM = "
		    .FORM-MY
		    '"   VAR = "
		    .VAR
		    '"   MIN = "
		    .MIN-MY
		    '"   MAX = "
		    .MAX-MY
		    '"   INC = "
		    .INC
		    '"
	"
		    !<REST .TLIST!>)>) GRFLIST> TITLE <GET .GG TITLE>>>
		     .GLOBAL_MAKE_GRID
		     .GLOBAL_CONSERVE_SCALE>
	.GLOBAL_GRAPHS>

<DEFINE GET_VARS (FORM-MY)
	#DECL ((VALUE) 'T (FORM-MY) ANY
		(VARLIST) <SPECIAL LIST>)
	<AND <STRUCTURED? .FORM-MY>
	     <OR <AND <TYPE? .FORM-MY FORM>
		      <MEMQ <1 .FORM-MY> '[LVAL GVAL VALUE]>
		      <NOT <GET <2 .FORM-MY> .MARKER>>
		      <PUT <2 .FORM-MY> .MARKER T>
		      <PUTREST .VARLIST (.FORM-MY '" = " <EVAL .FORM-MY> '"   ")>
		      <SET VARLIST <REST .VARLIST 4>>>
		 <MAPF <> ,GET_VARS .FORM-MY>>>
	T>

<DEFINE VEC_CALC (FUNC XMIN XMAX OINC
		  "AUX" (YMIN <MIN>) (YMAX <MAX>)
			(INC <MAX .OINC </ <FLOAT <- .XMAX .XMIN>><- .RBOUND .LBOUND>>>)
			(VEC
			 <IUVECTOR <* 2
				      <+ 1
					 <FIX <+ 1.0E-2
						 </ <- .XMAX .XMIN> .INC>>>>>
				   0.0000000>)
			VAR VAL)
	#DECL ((FUNC) <OR FUNCTION FSUBR RSUBR SUBR>
	       (XMIN XMAX INC OINC VAR) <OR FLOAT FIX> (YMIN YMAX) FLOAT
		(LBOUND RBOUND BBOUND TBOUND) <SPECIAL <OR FIX FLOAT>>
		(VEC) UVECTOR)
	<SET VAR .XMIN>
	<REPEAT ((V .VEC))
		#DECL ((V) UVECTOR)
		<COND (<EMPTY? .V> <RETURN>)
		      (T
		       <PUT .V 1 <FLOAT .VAR>>
		       <PUT .V 2 <FLOAT <APPLY .FUNC .VAR>>>
		       <SET YMIN <MIN .YMIN <2 .V>>>
		       <SET YMAX <MAX .YMAX <2 .V>>>
		       <SET VAR <+ .VAR .INC>>
		       <SET V <REST .V 2>>)>>
   <SET VAL
    <COND (<LENGTH? .VEC 5>
	  [.VEC .XMIN .XMAX .YMIN .YMAX 0 <>])
	 (T <REPEAT ((YTOL </ <* <- .YMAX .YMIN> .SMOOTH-TOL>
			      <- .TBOUND .BBOUND>>)
			(V <REST .VEC <- <LENGTH .VEC> 4>>)
			(W .V)
			(YDEL <- <2 .W> <4 .V>>)
			(YCHK <2 .W>))
		<SET YCHK <+ .YDEL .YCHK>>
		<SET W <BACK .W 2>>
		<COND (<G? <ABS <- .YCHK <2 .W>>> .YTOL>
		       <SET V <BACK .V 2>>
		       <SET YDEL <- <2 .W> <4 .V>>>
		       <SET YCHK <2 .W>>)>
		<PUT .V 2 <2 .W>>
		<PUT .V 1 <1 .W>>
		<COND (<==? .W .VEC>
		       <RETURN [.V .XMIN .XMAX .YMIN .YMAX 0 <>]>)>>)>>
	<PUT .VAL 6 <GSBEGIN ,DO_VEC_P .VAL>>
	<GSUNBLANK>
	.VAL>

<DEFINE PLOT (X-MY
	      "OPTIONAL" (OY-MY .X-MY) (LINE <>) (CHAR T)
	      "AUX" (NOERASE T)
		    (XFORM <GET_ITEM_FORMER X-MY>)
		    (YFORM
		     <COND (<==? .X-MY .OY-MY> .XFORM) (T <GET_ITEM_FORMER OY-MY>)>)
		    (TEMP <PLOT_CALC .XFORM .YFORM>)
		    SAVE-THIN
		    (GG <GIVE-GG>))
	#DECL ((GG GLOBAL_GRAPHS) <GRFLIST [REST VECTOR]>
		(GRIT_EXPLNTN_POSN) <SPECIAL FIX>
		(X-MY OY-MY NOERASE) <SPECIAL ANY> (THIN-PLOT) <SPECIAL FUNCTION>
		(SAVE-THIN) <OR FALSE LIST>)
  <COND(<OR <NOT <OR .LINE .CHAR>><EMPTY? <1 .TEMP>>>
	<ERROR NOTHING-PLOTTED!-ERRORS>)
       (T
	<COND (<AND .LINE
		    <SET SAVE-THIN <THIN-PLOT .TEMP>>>
	      <PUT .TEMP
		   <COND (.CHAR THIN-PLOT) (1)>
		   .SAVE-THIN>)>
	<PUT .TEMP PLOT <COND (.LINE <>)
			      (T <SET GRIT_EXPLNTN_POSN <+ 1 .GRIT_EXPLNTN_POSN>>)>>
	<PUT .TEMP FANCY_CHAR .CHAR>
	<AGRITCH .TEMP .CHAR .GG>
	<PUT .TEMP GRF ('"plot
")>
	<PUT .TEMP 6 <GSBEGIN ,DO_VEC_P .TEMP>>
	<GSUNBLANK>
	<COND (<EMPTY? .GG>
		<SET GG <PUT <CHTYPE (.TEMP) GRFLIST> TITLE <GET .GG TITLE>>>)
	      (T
		<PUTREST <REST .GG <- <LENGTH .GG> 1>> (.TEMP)>)>
	<VEC_PLOTTER <SET GLOBAL_GRAPHS .GG>
		     .GLOBAL_MAKE_GRID
		     .GLOBAL_CONSERVE_SCALE>)>
  .GLOBAL_GRAPHS>

<DEFINE GET_ITEM_FORMER (VAR)
	#DECL ((VAR) ATOM)
	<COND (<TYPE? ..VAR CHANNEL>
	       <FORM PROG
		     '(GIFTEMP)
		     <FORM SET GIFTEMP <FORM READ ..VAR <>>>
		     '<AND <TYPE? .GIFTEMP FIX FLOAT> .GIFTEMP>>)
	      (<TYPE? ..VAR FIX FLOAT> ..VAR)
	      (<TYPE? ..VAR FUNCTION FSUBR SUBR RSUBR> <FORM ..VAR>)
	      (<TYPE? ..VAR FORM> ..VAR)
	      (<AND ..VAR <STRUCTURED? ..VAR>>
	       <FORM PROG
		     '(GIFTEMP)
		     <FORM AND
			   <FORM NOT <FORM EMPTY? <FORM LVAL .VAR>>>
			   <FORM SET GIFTEMP <FORM 1 <FORM LVAL .VAR>>>
			   <FORM SET .VAR <FORM REST <FORM LVAL .VAR>>>
			   '<AND <TYPE? .GIFTEMP FIX FLOAT> .GIFTEMP>>>)
	      (T
	       <SET .VAR 0>
	       <FORM SET .VAR <FORM + 1 <FORM LVAL .VAR>>>)>>

<DEFINE PLOT_CALC (XFORM YFORM
		   "AUX" (RESULT (0)) (HERE .RESULT) IX IY IIX IIY
			 (XMIN <MIN>) (YMIN <MIN>) (XMAX <MAX>) (YMAX <MAX>))
	#DECL ((RESULT HERE) LIST (XMIN YMIN XMAX YMAX) FLOAT
		(IX IY) <OR FALSE FIX FLOAT> (IIX IIY) <OR FIX FLOAT>)
	<REPEAT ()
		<OR <AND <SET IX <EVAL .XFORM>> <SET IY <EVAL .YFORM>>>
		    <RETURN [<REST .RESULT>
			     .XMIN
			     .XMAX
			     .YMIN
			     .YMAX
			     0
			     <>]>>
		<SET XMIN <MIN .XMIN <SET IIX .IX>>>
		<SET XMAX <MAX .XMAX .IIX>>
		<SET YMIN <MIN .YMIN <SET IIY .IY>>>
		<SET YMAX <MAX .YMAX .IIY>>
		<PUTREST .HERE (.IIX .IIY)>
		<SET HERE <REST .HERE 2>>>>

<DEFINE THIN-PLOT (ARG
	"AUX" (XTOL </ <* <- <3 .ARG><2 .ARG>> .SMOOTH-TOL>
		       <- .RBOUND .LBOUND>>)
	(YTOL </ <* <- <5 .ARG><4 .ARG>> .SMOOTH-TOL>
		 <- .TBOUND .BBOUND>>)
	(TVAL #FALSE(NO-CHANGES))
	(VAL <LIST !<1 .ARG>>))
	#DECL ((VAL) LIST (XTOL YTOL) FLOAT (TVAL) <OR FALSE 'T>
		(RBOUND LBOUND BBOUND TBOUND) <SPECIAL <OR FIX FLOAT>>)
	<REPEAT ((SO .VAL) XD YD XD1 YD1 XD2 YD2)
		#DECL ((SO) <LIST [REST <OR FIX FLOAT>]>
			(XD YD XD1 YD1 XD2 YD2) FLOAT)
		<COND (<LENGTH? .SO 4><RETURN>)>
		<SET XD <SET XD1 <FLOAT <- <3 .SO> <1 .SO>>>>>
		<SET YD <SET YD1 <FLOAT <- <4 .SO> <2 .SO>>>>>
		<COND (<0? <MAX <ABS .XD><ABS .YD>>>
			<PUTREST <REST .SO><REST .SO 4>>
			<SET TVAL T>
			<AGAIN>)>
		<REPEAT ()
			<COND (<LENGTH? .SO 5><RETURN>)>
			<SET XD2 <FLOAT <- <5 .SO> <1 .SO>>>>
			<SET YD2 <FLOAT <- <6 .SO><2 .SO>>>>
			<COND (<AND
				<G=? <* .XD1 <- .XD2 .XD1>> 0.000>
				<G=? <* .YD1 <- .YD2 .YD1>> 0.000>
				<COND (<L? <ABS .YD><ABS .XD>>
					<L? <ABS <- <* .XD2 </ .YD .XD>> .YD2>> .YTOL>)
				      (T
					<L? <ABS <- <* .YD2 </ .XD .YD>> .XD2>> .XTOL>)>>
			       <SET XD1 .XD2>
			       <SET YD1 .YD2>
			       <PUTREST <REST .SO> <REST .SO 4>>
			       <SET TVAL T>)
			      (T <RETURN>)>>
		<SET SO <REST .SO 2>>>
	<COND (.TVAL .VAL)
	      (T .TVAL)>
	>

<DEFINE AGRITCH (APLT CODE-MY GG)
	#DECL ((APLT VALUE) VECTOR (CODE-MY) ANY (GG) <GRFLIST [REST VECTOR]>)
	<COND (<OR <TYPE? .CODE-MY FALSE FORM>
		   <AND <TYPE? .CODE-MY FIX>
			<G? .CODE-MY 0>>>
	       <PUT .APLT 7 .CODE-MY>)
	      (T
	       <PUT .APLT 7
		  <MAPF <FUNCTION ("TUPLE" USED "AUX" (GNUM 1))
				#DECL ((GNUM VALUE) FIX (USED) TUPLE)
			    <PROG ()
				<COND (<MEMQ .GNUM .USED>
					<SET GNUM <+ .GNUM 1>>
					<AGAIN>)>>
			    .GNUM>
			7
			.GG>>)>>

<SET NEED-BLANKING <SET HAVE-BLANKED <>>>

<SET GRIT_EXPLNTN_POSN -1>

<SET GRID-IS-NULL <>>

<DEFINE REGRAPH ("TUPLE" TO_GRAPH)
	#DECL ((TO_GRAPH) <TUPLE [REST FIX]> (GLOBAL_GRAPHS) GRFLIST)
	<REGRAPHER .GLOBAL_GRAPHS !.TO_GRAPH>>

<DEFINE REGRAPHER (X-MY
		   "TUPLE" ITEMS
		   "AUX" (CONSCAL #FALSE ())
			 (NOERASE T)
			 (TITLE
			  <OR <AND <NOT .NEED-BLANKING>
				   <NOT .HAVE-BLANKED>
				   <GET .GLOBAL_GRAPHS TITLE>>
			      <GET .X-MY TITLE>>)
			 FEW-ITEMS GGTAIL GNUM)
	#DECL ((TITLE NOERASE) <SPECIAL ANY> (ITEMS) <TUPLE [REST FIX]>
		(FEW-ITEMS) <VECTOR [REST FIX]> 
		(X-MY GLOBAL_GRAPHS) <SPECIAL <GRFLIST [REST VECTOR]>>
		(GGTAIL) LIST (GNUM) FIX)
 <COND (<EMPTY? .X-MY>
	<ERROR EMPTY-GRFLIST-ARGUMENT--ERRET-ANYTHING!-ERRORS>)
       (T
	<SET FEW-ITEMS
	     <MAPR <FUNCTION ("TUPLE" STUFF "AUX" (J 0))
			#DECL ((STUFF) TUPLE (J) <SPECIAL FIX> (VALUE) VECTOR)
			<COND (<EMPTY? .STUFF>
				<IVECTOR <LENGTH .X-MY> '<SET J <+ 1 .J>>>)
			      (T <VECTOR !.STUFF>)>>
		   <FUNCTION (DTAIL "AUX" (DEX <1 .DTAIL>))
			#DECL ((DTAIL) <TUPLE [REST FIX]> (DEX) FIX)
			<COND (<0? .DEX><MAPRET>)
			      (<LENGTH? .X-MY <- <ABS .DEX> 1>>
			       <ERROR REGRAPH-INDEX-OUT-OF-RANGE--ERRET-ANYTHING!-ERRORS .DEX>
			       <MAPRET>)
			      (<OR <MEMQ .DEX <REST .DTAIL>>
				   <MEMQ <- .DEX> <REST .DTAIL>>>
			       <ERROR DUPL-REGRAPH-INDEX--ERRET-ANYTHING!-ERROR .DEX>
			       <MAPRET>)>
			.DEX>
		     .ITEMS>>
	<COND (<==? .GLOBAL_GRAPHS .X-MY>
		<COND (.NEED-BLANKING
			<MAPF <>
			      <FUNCTION (VEC) #DECL ((VEC) VECTOR)
				  <GSBLANK <6 .VEC>>>
			      .X-MY>)>
		<COND (<OR .NEED-BLANKING .HAVE-BLANKED>
		       <SET GLOBAL_MAKE_GRID T>
		       <MAPF <>
			     <FUNCTION (DEX) #DECL ((DEX) FIX)
				<COND (<G? .DEX 0>
					<GSCHANGE <6 <NTH .X-MY .DEX>>>
					<GSUNBLANK>)>>
			     .FEW-ITEMS>)
		      (T
		       <MAPF <>
			     <FUNCTION (DEX) #DECL ((DEX) FIX)
				<COND (<G? .DEX 0>
				       <GSUNBLANK <6 <NTH .X-MY .DEX>>>)
				      (T <GSBLANK <6 <NTH .X-MY <- .DEX>>>>)>>
			     .FEW-ITEMS>)>)
	      (<OR .NEED-BLANKING .HAVE-BLANKED
		   <EMPTY? .GLOBAL_GRAPHS>>
		<MAPF <>
		      <FUNCTION (VEC) #DECL ((VEC) VECTOR)
			  <COND (<NOT <MEMQ .VEC .X-MY>>
				 <GSREMOVE <6 .VEC>>
				 <PUT .VEC 6 <>>)>>
		      .GLOBAL_GRAPHS>
		<SET GRIT_EXPLNTN_POSN -1>
		<MAPF <>
		      <FUNCTION (VEC) #DECL ((VEC) VECTOR)
			  <COND (<GET .VEC PLOT>
				 <PUT .VEC PLOT <SET GRIT_EXPLNTN_POSN
						     <+ 1 .GRIT_EXPLNTN_POSN>>>)>
			  <PUT .VEC 7 <>>>
		      .X-MY>
		<MAPF <>
		      <FUNCTION (VEC)
			  <AGRITCH .VEC <GET .VEC FANCY_CHAR> .X-MY>>
		      .X-MY>
		<SET GNUM 0>
		<MAPF <>
		      <FUNCTION (VEC) #DECL ((VEC) VECTOR)
			  <COND (<6 .VEC>
				 <GSCHANGE <6 .VEC>>)
				(T
				 <PUT .VEC 6 <GSBEGIN ,DO_VEC_P .VEC>>)>
			  <COND (<MEMQ <SET GNUM <+ .GNUM 1>> .FEW-ITEMS>
				 <GSUNBLANK>)
				(T
				 <GSEND>)>>
		      .X-MY>
		<SET GLOBAL_MAKE_GRID T>
		<SET GLOBAL_GRAPHS .X-MY>)
	      (T
		<SET GGTAIL <REST .GLOBAL_GRAPHS <- <LENGTH .GLOBAL_GRAPHS> 1>>>
		<MAPF <>
		      <FUNCTION (DEX "AUX" VEC) #DECL ((DEX) FIX (VEC) VECTOR)
			  <COND (<MEMQ <SET VEC <NTH .X-MY <ABS .DEX>>> .GLOBAL_GRAPHS>
				 <COND (<G? .DEX 0>
					<GSUNBLANK <6 .VEC>>)
				       (T <GSBLANK <6 .VEC>>)>)
				(T
				 <COND (<GET .VEC PLOT>
					<PUT .VEC PLOT <SET GRIT_EXPLNTN_POSN
							    <+ 1 .GRIT_EXPLNTN_POSN>>>)>
				 <AGRITCH .VEC <GET .VEC FANCY_CHAR> .GLOBAL_GRAPHS>
				 <COND (<6 .VEC><ERROR>)>
				 <PUT .VEC 6 <GSBEGIN ,DO_VEC_P .VEC>>
				 <COND (<G? .DEX 0>
					<GSUNBLANK>)
					(T <GSBLANK>)>
				 <SET GGTAIL <REST <PUTREST .GGTAIL (.VEC)>>>)>>
		      .FEW-ITEMS>)>
	<PUT .GLOBAL_GRAPHS TITLE .TITLE>
	<SET HAVE-BLANKED <SET NEED-BLANKING <>>>
	<VEC_PLOTTER .GLOBAL_GRAPHS .GLOBAL_MAKE_GRID .CONSCAL>)>
   <CHTYPE .GLOBAL_GRAPHS GRFLIST>>

<APPLYTYPE GRFLIST ,REGRAPHER>

<DEFINE CLEAR-GRAPHS ("AUX" (NOERASE T))
	#DECL ((VALUE) FALSE (NOERASE) <SPECIAL ANY>)
	<SET NEED-BLANKING T>
	<GIVE-GG>
	<GSBLANK .PLOT-SEGMENT>
	<GSEND-UPDATES>
	<SET GLOBAL_CONSERVE_SCALE <>>>

<DEFINE GIVE-GG ()
	#DECL ((VALUE GLOBAL_GRAPHS) <GRFLIST [REST VECTOR]>)
	<COND (<OR .NEED-BLANKING .HAVE-BLANKED>
		<MAPF <>
		      <FUNCTION (VEC) #DECL ((VEC) VECTOR)
			  <GSREMOVE <6 .VEC>>
			  <PUT .VEC 6 <>>>
		      .GLOBAL_GRAPHS>
		<SET GLOBAL_MAKE_GRID T>
		<SET GRIT_EXPLNTN_POSN -1>
		<SET GLOBAL_GRAPHS <CHTYPE <LIST> GRFLIST>>
		<SET HAVE-BLANKED <SET NEED-BLANKING <>>>)>
	.GLOBAL_GRAPHS>

<DEFINE VEC_PLOTTER (PLOT_LIST
		     "OPTIONAL" (MAKE_GRID <>) (CONSERVE_SCALE <>)
		     "AUX" XMIN XMAX YMIN YMAX
			   XMIN1 XMAX1 YMIN1 YMAX1
			   PS1 PS2 PS3 PS4
			   T1 T2 T3 T4)
   #DECL ((PLOT_LIST) STRUCTURED (VALUE) 'T
	  (PLOT_SCALE) <VECTOR [4 <OR FIX FLOAT>] <UVECTOR [4 FLOAT]>>
	  (CONSERVE_SCALE XMIN XMIN1 XMAX XMAX1 YMIN YMIN1 YMAX YMAX1)
		<SPECIAL ANY>
		(GLOBAL_GRAPHS) GRFLIST (PLOT-SEGMENT) GSEG)
   <PROG ()
     <SET XMIN <MAPF ,MIN
		#FUNCTION ((F) #DECL ((VALUE) <OR FIX FLOAT>
			(F) <VECTOR [5 ANY] GSEG>)
			<COND (<NOT <OR <NTH <6 .F> ,SEG-LVS>
					<NTH <6 .F> ,SEG-NVS>>><MAPRET>)>
			<2 .F>)
		.PLOT_LIST>>
     <COND (<==? <MIN> .XMIN><RETURN>)>
     <SET XMAX <MAPF ,MAX
		#FUNCTION ((F) #DECL ((VALUE) <OR FIX FLOAT>
			(F) <VECTOR [5 ANY] GSEG>)
			<COND (<NOT <OR <NTH <6 .F> ,SEG-LVS>
					<NTH <6 .F> ,SEG-NVS>>><MAPRET>)>
			<3 .F>)
		.PLOT_LIST>>
     <SET YMIN <MAPF ,MIN
		#FUNCTION ((F) #DECL ((VALUE) <OR FIX FLOAT>
			(F) <VECTOR [5 ANY] GSEG>)
			<COND (<NOT <OR <NTH <6 .F> ,SEG-LVS>
					<NTH <6 .F> ,SEG-NVS>>><MAPRET>)>
			<4 .F>)
		.PLOT_LIST>>
     <SET YMAX <MAPF ,MAX
		#FUNCTION ((F) #DECL ((VALUE) <OR FIX FLOAT>
			(F) <VECTOR [5 ANY] GSEG>)
			<COND (<NOT <OR <NTH <6 .F> ,SEG-LVS>
					<NTH <6 .F> ,SEG-NVS>>><MAPRET>)>
			<5 .F>)
		.PLOT_LIST>>
     <SET T1 <NUML? <SET XMIN1 <MIN .XMIN <SET PS1 <1 .PLOT_SCALE>>>> .PS1>>
     <SET T2 <NUMG? <SET XMAX1 <MAX .XMAX <SET PS2 <2 .PLOT_SCALE>>>> .PS2>>
     <SET T3 <NUML? <SET YMIN1 <MIN .YMIN <SET PS3 <3 .PLOT_SCALE>>>> .PS3>>
     <SET T4 <NUMG? <SET YMAX1 <MAX .YMAX <SET PS4 <4 .PLOT_SCALE>>>> .PS4>>
     <COND
      (<OR .T1 .T2 .T3 .T4 .MAKE_GRID>
       <MAPPER PLOT_SCALE
	       <COND (.CONSERVE_SCALE <GSSCALE .XMIN1 .XMAX1 .YMIN1 .YMAX1>)
		     (T
		      <GENEROUS_SCALE .XMIN .XMAX .YMIN .YMAX>)>>
       <COND (<AND <ASSIGNED? NO-DRAW> .NO-DRAW> <RETURN>)>
       <COND (<OR <N==? .PS1 <1 .PLOT_SCALE>>
		  <N==? .PS2 <2 .PLOT_SCALE>>
		  <N==? .PS3 <3 .PLOT_SCALE>>
		  <N==? .PS4 <4 .PLOT_SCALE>>>
	<GSCHANGE .PLOT-SEGMENT>
	<GSUNBLANK>
	<MAPF <>
	      <FUNCTION (X "AUX" SEG) #DECL ((X) VECTOR (SEG) GSEG)
		  <COND (<NTH <SET SEG <6 .X>> ,SEG-LVS>
			 <GSCHANGE .SEG>
			 <GSUNBLANK .SEG>)>>
	      .GLOBAL_GRAPHS>)>)
      (T
       <COND (<AND <ASSIGNED? NO-DRAW> .NO-DRAW> <RETURN>)>)>
     <COND (.GRID-IS-NULL
	    <SET GRID-IS-NULL <>>
	    <GSCHANGE .PLOT-SEGMENT>)>
     <GSUNBLANK .PLOT-SEGMENT>
     <SET NOERASE <>>
     <GSEND-UPDATES>
   >T>

<DEFINE GRSTORE ("OPTIONAL" A1 HITTEST)
	<COND (.NEED-BLANKING <SET GRID-IS-NULL T>)
	      (T <MAPPER PLOT_SCALE <GRID>>)>>

<DEFINE GRID ("OPTIONAL" (DGTL .DGTL) (XINC <NICE_INC <- .RIGHT .LEFT>>)
			 (YINC <NICE_INC <- .GTOP .BOTTOM>>)
	      "AUX" (BOTTOM .BOTTOM)(LEFT .LEFT)(GTOP .GTOP)(RIGHT .RIGHT)
		    (XBOUNDS <NICE_BOUNDS .LEFT .RIGHT .XINC>)
		    (YBOUNDS <NICE_BOUNDS .BOTTOM .GTOP .YINC>)
		    (VL <* .DGTL <- .GTOP .BOTTOM>>)
		    (HL <* .DGTL <- .RIGHT .LEFT>>)
		    (LT .GTOP) (LB <- .GTOP .VL>)
		    (LR .RIGHT) (LL <- .RIGHT .HL>)
		    (BLN <+ .BOTTOM .VL>)
		    (LLN <+ .LEFT .HL>)
		    (XCENTER
		     <COND (<G=? <* .LEFT .RIGHT> 0>
			    .LEFT)
			   (<G=? .LLN <- .HL>>
			    <SET LLN .HL>
			    0.0)
			   (T
			    <SET LL <- .HL>>
			    <SET LR <MIN .RIGHT .HL>>
			    0.0)>)
		    (YCENTER
		     <COND (<G=? <* .BOTTOM .GTOP> 0.0>
			    .BOTTOM)
			   (<G=? .BLN <- .VL>>
			    <SET BLN .VL>
			    0.0)
			   (T
			    <SET LB <- .VL>>
			    <SET LT <MIN .GTOP .VL>>
			    0.0)>)
		    (TITLE <GET .GLOBAL_GRAPHS TITLE>)
		    (MARK-X-AXIS <AND .TITLE <2 .TITLE>>)
		    (MARK-Y-AXIS <AND .TITLE <3 .TITLE>>))
	#DECL ((VALUE) 'T (XINC YINC DGTL) <OR FIX FLOAT>
	       (XBOUNDS YBOUNDS) <VECTOR [2 <OR FIX FLOAT>]>
	       (XCENTER YCENTER BOTTOM LEFT RIGHT GTOP
	       VL HL LT LB LR LL BLN LLN) <OR FIX FLOAT>)
	<SET GLOBAL_MAKE_GRID <>>
	<GFMUNG 0
		0
		.LEFT
		.BOTTOM
		.LEFT
		.GTOP
		.RIGHT
		.GTOP
		.RIGHT
		.BOTTOM
		.LEFT
		.BOTTOM>
	<COND (<AND .MARK-X-AXIS
		    <COND (<TYPE? .MARK-X-AXIS LIST>
			   <PROG ((YDEL <* 0.03 <- .GTOP .BOTTOM>>)
				(XMID <* 0.5 <+ .RIGHT .LEFT>>)
				(YSTART <- .BOTTOM <* 0.05 <- .GTOP .BOTTOM>>>))
			      <MAPF 
				<>
				<FUNCTION (LIN) #DECL ((LIN) <OR STRING CHARACTER>)
				    <POSITION .XMID <SET YSTART <- .YSTART .YDEL>>>
				    <AND <TYPE? .LIN STRING>
					 <BSPACE </ <- <LENGTH .LIN> 1> 2>>>
				    <GSTEXT .LIN>
				    T>
				.MARK-X-AXIS>>
			   <>)
			  (<EVAL .MARK-X-AXIS>)>>)
	      (T
		<AND <G? .YCENTER .BOTTOM>
		     <LINE_SEG .LEFT .YCENTER .RIGHT .YCENTER>>
		<REPEAT ((POS <1 .XBOUNDS>))
			<LINE_SEG .POS .BLN .POS .BOTTOM>
			<GSTEXT <ASCII 10>>
			<NUMPRINT .POS .XINC 2>
			<COND (<NUMG? <SET POS <+ .POS .XINC>> <2 .XBOUNDS>>
			       <RETURN T>)>>
		<REPEAT ((POS <1 .XBOUNDS>))
		       <LINE_SEG .POS .LB .POS .LT>
		       <COND (<NUMG? <SET POS <+ .POS .XINC>> <2 .XBOUNDS>>
			      <RETURN T>)>>)>
	<COND (<AND .MARK-Y-AXIS
		    <COND (<TYPE? .MARK-Y-AXIS LIST>
			   <PROG ((YDEL <* 0.03 <- .GTOP .BOTTOM>>)
				(XSTART <+ <* 1.3 .LEFT><* -0.3 .RIGHT>>)
				(YSTART <+ <* 0.5
						<+ <LENGTH .MARK-Y-AXIS> 1>
						.YDEL>
					   <* 0.5 <+ .GTOP .BOTTOM>>>))
			     <MAPF 
				<>
				<FUNCTION (LIN)
				    <POSITION .XSTART <SET YSTART <- .YSTART .YDEL>>>
				    <GSTEXT .LIN>
				    T>
				.MARK-Y-AXIS>>
			   <>)
			  (<EVAL .MARK-Y-AXIS>)>>)
	      (T
		<AND <G? .XCENTER .LEFT>
		     <LINE_SEG .XCENTER .GTOP .XCENTER .BOTTOM>>
		<REPEAT ((POS <1 .YBOUNDS>))
			<LINE_SEG .LLN .POS .LEFT .POS>
			<GSTEXT !">
			<NUMPRINT .POS .YINC 1>
			<COND (<NUMG? <SET POS <+ .POS .YINC>> <2 .YBOUNDS>>
			       <RETURN T>)>>
		<REPEAT ((POS <1 .YBOUNDS>))
		       <LINE_SEG .LR .POS .LL .POS>
		       <COND (<NUMG? <SET POS <+ .POS .YINC>> <2 .YBOUNDS>>
			      <RETURN T>)>>)>
	<GSTEXT " ">
	<GSTEXT !">
       <COND (<AND .TITLE <SET TITLE <1 .TITLE>>>
		<PROG ((YDEL <* 0.03 <- .GTOP .BOTTOM>>)
			(XMID <* 0.5 <+ .RIGHT .LEFT>>)
			(YSTART <+ .GTOP 
				   <* 0.05 <- .GTOP .BOTTOM>>
				   <* .YDEL <LENGTH .TITLE>>>))
		  <MAPF <>
			<FUNCTION (LIN)
			    <POSITION .XMID <SET YSTART <- .YSTART .YDEL>>>
			    <COND (<TYPE? .LIN STRING>
				   <BSPACE </ <- <LENGTH .LIN> 1> 2>>)>
			    <GSTEXT .LIN>
			    T>
			 .TITLE>>)>
	T>

<DEFINE NUMPRINT (NUM DIFF
		  "OPTIONAL" (BS #FALSE ())
		  "AUX" (TOL <* 0.09999999 <TEN_ROUND .DIFF>>) (SIGN <>) (B 1)
			TEMPA TEMPB)
	#DECL ((NUM DIFF) <OR FLOAT FIX> (TOL) FLOAT (B) FIX
	       (TEMPA) <OR FIX STRING> (TEMPB) STRING)
	<COND
	 (<OR <TYPE? .NUM FIX>
	      <AND <G? .DIFF 9.0><SET NUM <FIX <+ .NUM 0.5>>>>>
	  <AND .BS <BSPACE </ <FLATSIZE .NUM 100> .BS>>>
	  <GSTEXT <UNPARSE .NUM>>)
	 (T
	  <COND (<NUML? .NUM 0>
		 <SET SIGN T>
		 <SET B <+ .B 1>>
		 <SET NUM <ABS .NUM>>)>
	  <SET NUM
	       <MAX 0.0000000
		    <- .NUM <SET TEMPA <FIX <+ .NUM <* 0.5 .TOL>>>>>>>
	  <SET TEMPA <UNPARSE .TEMPA>>
	  <SET NUM <FIX <+ 0.5
			   <* 10.0
			      </ <+ 1 .NUM> <TEN_ROUND .DIFF>>>>>>
	  <SET TEMPB <REST <UNPARSE
		  <COND (<0? <MOD .NUM 10>> </ .NUM 10>)
			(T .NUM)>>>>
	  <AND .BS
	       <BSPACE </ <+ .B <LENGTH .TEMPA> <LENGTH .TEMPB>> .BS>>>
	  <AND .SIGN <GSTEXT !"->>
	  <GSTEXT <STRING .TEMPA
			  !".
			  .TEMPB>>)>>

<DEFINE NUMG? (A B)
	#DECL ((A B) <OR FIX FLOAT>)
	<NOT <OR <L? .A .B> <NUMEQ? .A .B>>>>

<DEFINE NUML? (A B)
	#DECL ((A B) <OR FIX FLOAT>)
	<NOT <OR <G? .A .B> <NUMEQ? .A .B>>>>

<DEFINE NUMEQ? (A B)
	#DECL ((A B) <OR FIX FLOAT>)
	<L? <ABS </ <- .A .B> <MAX 0.99999994E-4 <ABS <FLOAT .B>>>>>
	    1.0E-5>>

<DEFINE BSPACE (N) #DECL ((N) FIX (BSPACES) STRING)
    <GSTEXT <REST .BSPACES <- 100 .N>>>>

<SET BSPACES <ISTRING 100 <ASCII 8>>>

<SET DGTL 0.15000000E-1>

<SET DESIRED_INC 6>

<DEFINE GENEROUS_SCALE (XMIN XMAX YMIN YMAX)
	#DECL ((XMIN XMAX YMIN YMAX) <OR FLOAT FIX>)
	<GSSCALE !<GENEROUS_BOUNDS .XMIN .XMAX!>
	       !<GENEROUS_BOUNDS .YMIN .YMAX!>>>

<DEFINE GENEROUS_BOUNDS (MIN-MY MAX-MY
			 "AUX" (DESIRED_INC <- .DESIRED_INC 1>)
			       (INC <NICE_INC <- .MAX-MY .MIN-MY>>))
	#DECL ((MIN-MY MAX-MY) <OR FIX FLOAT> (DESIRED_INC) <SPECIAL <OR FIX FLOAT>>
	       (INC) FLOAT)
	[<* .INC <FIX <- </ <FLOAT .MIN-MY> .INC> 0.09999999>>>
	 <* .INC <FIX <+ </ <FLOAT .MAX-MY> .INC> 1.0999999>>>]>

<DEFINE NICE_BOUNDS (MIN-MY MAX-MY INC)
	#DECL ((MIN-MY MAX-MY INC) <OR FLOAT FIX> (VALUE) VECTOR)
	[<* .INC <FIX <+ </ <FLOAT .MIN-MY> .INC> 1.0100000>>>
	 <* .INC <FIX <+ </ <FLOAT .MAX-MY> .INC> -1.0E-2>>>]>

<DEFINE NICE_INC (X)
	#DECL ((X) <OR FLOAT FIX> (VALUE) FLOAT)
	<MAX <TEN_ROUND </ .X <* 1.0 .DESIRED_INC>>>
	     <* 2.0 <TEN_ROUND </ .X <* 2.0 .DESIRED_INC>>>>
	     <* 5.0 <TEN_ROUND </ .X <* 5.0 .DESIRED_INC>>>>>>

<DEFINE TEN_ROUND (X)
	#DECL ((X) <OR FLOAT FIX> (VALUE) FLOAT)
	<AND <0? .X> <SET X 0.10000000E-2>>
	<EXP <* <LOG 10> <- <FIX <+ </ <LOG .X> <LOG 10>> 100>> 100>>>>

<DEFINE DO_VEC_P (XX "OPTIONAL" YY ZZ "AUX" GRFNUM)
	#DECL ((XX GRFNUM) <SPECIAL ANY> 
		(GLOBAL_GRAPHS) GRFLIST)
	<COND (<AND <NOT .NEED-BLANKING>
		    <SET GRFNUM <MEMQ .XX .GLOBAL_GRAPHS>>>
		<SET GRFNUM <+ 1 <- <LENGTH .GLOBAL_GRAPHS><LENGTH .GRFNUM>>>>
		<MAPPER PLOT_SCALE <VEC_P .XX .GRFNUM>>)>>

<DEFINE VEC_P (VEC GRFNUM
	       "AUX" (HERE <1 .VEC>) CHR TEMP
			IGRITCH_POS X1 X2 Y1)
	#DECL ((VEC) STRUCTURED (THIN-PLOT SURPRESS-GRAPH-NUMBERS) <SPECIAL ANY>
		(X1 X2 Y1) FLOAT (GRFNUM) FIX
		(LEFT RIGHT BOTTOM GTOP) <SPECIAL <OR FIX FLOAT>>)
	<AND <NOT <EMPTY? .HERE>>
	     <AND <SET TEMP <7 .VEC>>
		  <SET CHR <OR <AND <TYPE? .TEMP FORM> .TEMP>
			       <FANCY_CHAR .TEMP>>>
		  <REPEAT ()
			  <GFMUNG 0 0 <1 .HERE> <2 .HERE>>
			  <EVAL .CHR>
			  <AND <EMPTY? <SET HERE <REST .HERE 2>>> <RETURN T>>>>>
	<OR <SET IGRITCH_POS <GET .VEC PLOT>>
	    <GFMUNGER 0 0 <OR <GET .VEC THIN-PLOT><1 .VEC>>>>
	<COND (<EMPTY? <1 .VEC>> T)
	      (<OR
		<AND .IGRITCH_POS
		     <SET X1 <+ .LEFT <* <- .RIGHT .LEFT>
					 <+ 0.05 <* 0.15000000 <MOD .IGRITCH_POS 6>>>>>>
		     <SET X2 <+ .X1 <* 0.3E-1 <- .RIGHT .LEFT>>>>
		     <SET Y1 <- .BOTTOM <* <+ 0.75E-1 <* .03 </ .IGRITCH_POS 6>>>
					   <- .GTOP .BOTTOM>>>>
		     <POSITION .X1 .Y1>
		     <EVAL .CHR>
		     <POSITION .X2 .Y1>>
		 <NOT <AND <ASSIGNED? SURPRESS-GRAPH-NUMBERS>
			     .SURPRESS-GRAPH-NUMBERS>>>
	       <GSTEXT <UNPARSE (.GRFNUM)>>)>>

<SET DFCS 0.10000000E-1>

<SET FANCY_CHARS
     '[<FORM GFMUNG 0 1 .H 0 .-H .-V .-H .V .H .V .H .-V>
       <FORM GFMUNG 0 1 .H .-V .-H2 0 0 .V2 .H2 0 0 .-V2>
       <FORM GFMUNG 0 1 .H .V .-H2 .-V2 .H .V .-H .V .H2 .-V2>
       <FORM GFMUNG 0 1 0 .V 0 .-V2 0 .V .-H 0 .H2 0>
       <FORM GFMUNG 0 1 .H .V .-H2 0 .H2 .-V2 .-H2 0 .H2 .V2>
       <FORM GFMUNG 0 1 .H .V 0 .-V2 .-H2 .V2 0 .-V2 .H2 .V2>]>

<DEFINE FANCY_CHAR ("OPTIONAL" (N 1) (SIZE .DFCS)
		    "AUX" (H <* .SIZE <- .RIGHT .LEFT>>)
			  (V <* .SIZE <- .GTOP .BOTTOM>>) (-H <- .H>)
			  (-V <- .V>) (H2 <* 2 .H>) (V2 <* 2 .V>)
			  (-H2 <* -2 .H>) (-V2 <* -2 .V>))
	#DECL ((H V -H -V H2 V2 -H2 -V2 RIGHT LEFT BOTTOM GTOP DFCS)
		<SPECIAL <OR FIX FLOAT>> (N) FIX
		(FANCY_CHARS) VECTOR)
	<OR <AND <NOT <G? .N <LENGTH .FANCY_CHARS>>>
		 <EVAL <NTH .FANCY_CHARS .N>>>
	    <FORM GSTEXT
		  <ASCII <OR <AND <L? <SET N <- .N <LENGTH .FANCY_CHARS>>> 27>
				 <+ .N 64>>
			    <+ 96 <MOD .N 26>>>>>>>

<DEFINE CONT-L-SEARCH (CR CN)
	#DECL ((CR) CHARACTER)
	<COND (<==? .CR <ASCII 12>> <ERASE_S>)>>

<DEFINE ERASE_S ()
	#DECL ((VALUE) ANY
		(NOERASE NEED-BLANKING HAVE-BLANKED GLOBAL_CONSERVE_SCALE) <SPECIAL ANY>
		(GLOBAL_GRAPHS) <GRFLIST [REST VECTOR]> (DEV-DISPATCH) VECTOR)
	<COND(<NOT <OR <EMPTY? .GLOBAL_GRAPHS>
		       .HAVE-BLANKED
		       <AND <ASSIGNED? NOERASE> .NOERASE>>>
		<COND (<==? <NTH .DEV-DISPATCH ,OFF-BEGIN>
			     <NTH .DEV-DISPATCH ,OFF-UNBLANK>>
			<SET NEED-BLANKING T>)
		      (T
			<SET HAVE-BLANKED T>
			<SET NEED-BLANKING <>>
			<GSBLANK .PLOT-SEGMENT>
			<MAPF <>
			      <FUNCTION (X) #DECL ((X) <VECTOR [7 ANY]>)
				  <GSBLANK <6 .X>>>
			      .GLOBAL_GRAPHS>
			<GSEND-UPDATES>)>
		<SET GLOBAL_CONSERVE_SCALE <>>)>>

<DEFINE GRAPH_TITLE (TITLE "OPTIONAL" (TGRF .GLOBAL_GRAPHS)
			   "AUX" (CTIT <GET .TGRF TITLE>))
	#DECL ((TITLE) <SPECIAL ANY> (VALUE) ANY
		(TGRF GLOBAL_GRAPHS) GRFLIST (PLOT-SEGMENT) GSEG)
	<SET TITLE <COND(<TYPE? .TITLE STRING CHARACTER>
			 (.TITLE))
			(<TYPE? .TITLE LIST>
			 <COND (<EMPTY? .TITLE> '("()"))
			       (T <MAPF ,LIST
					<FUNCTION (LIN) 
						<COND (<TYPE? .LIN STRING CHARACTER>
							.LIN)
						      (<UNPARSE .LIN>)>>
					.TITLE>)>)
			(<NOT .TITLE> .TITLE)
			((<UNPARSE .TITLE>))>>
	<COND (.CTIT <PUT .CTIT 1 .TITLE>)
	      (T <PUT .TGRF TITLE [.TITLE <> <>]>)>
	<AND <==? .TGRF .GLOBAL_GRAPHS>
	     <NOT <EMPTY? .GLOBAL_GRAPHS>>
	     <PROG ()	<GSCHANGE .PLOT-SEGMENT>
			<GSUNBLANK>>>
	.TITLE>

<DEFINE GRAPH_X (XTITLE "OPTIONAL" (TGRF .GLOBAL_GRAPHS) "AUX" (CTIT <GET .TGRF TITLE>))
	#DECL ((XTITLE) <OR FALSE
			     STRING
			     CHARACTER
			     <LIST [REST <OR STRING CHARACTER>]>
			     FORM>
		(VALUE) <OR FALSE <LIST [REST <OR STRING CHARACTER>]> FORM>
		(TGRF GLOBAL_GRAPHS) GRFLIST (PLOT-SEGMENT) GSEG)
	<COND (<TYPE? .XTITLE STRING CHARACTER>
		<SET XTITLE (.XTITLE)>)>
	<COND (.CTIT <PUT .CTIT 2 .XTITLE>)
	      (T <PUT .TGRF TITLE [<> .XTITLE <>]>)>
	<AND <==? .TGRF .GLOBAL_GRAPHS>
	     <NOT <EMPTY? .GLOBAL_GRAPHS>>
	     <PROG ()	<GSCHANGE .PLOT-SEGMENT>
			<GSUNBLANK>>>
	.XTITLE>

<DEFINE GRAPH_Y (YTITLE "OPTIONAL" (TGRF .GLOBAL_GRAPHS) "AUX" (CTIT <GET .TGRF TITLE>))
	#DECL ((YTITLE)  <OR FALSE
			     STRING
			     CHARACTER
			     <LIST [REST <OR STRING CHARACTER>]>
			     FORM>
		(VALUE) <OR FALSE <LIST [REST <OR STRING CHARACTER>]> FORM>
		(TGRF GLOBAL_GRAPHS) GRFLIST (PLOT-SEGMENT) GSEG)
	<COND (<TYPE? .YTITLE STRING CHARACTER>
		<SET YTITLE (.YTITLE)>)>
	<COND (.CTIT <PUT .CTIT 3 .YTITLE>)
	      (T <PUT .TGRF TITLE [<> <> .YTITLE]>)>
	<AND <==? .TGRF .GLOBAL_GRAPHS>
	     <NOT <EMPTY? .GLOBAL_GRAPHS>>
	     <PROG ()	<GSCHANGE .PLOT-SEGMENT>
			<GSUNBLANK>>>
	.YTITLE>

<DEFINE GRAPH_COMMENT (COMMENT-MY
		       "OPTIONAL" ITEM-MY
		       "AUX" (TEMP .GLOBAL_GRAPHS))
	#DECL ((VALUE ITEM-MY COMMENT-MY) ANY
		(TEMP GLOBAL_GRAPHS) GRFLIST)
	<COND (<OR <ASSIGNED? ITEM-MY>
		   <AND <NOT <EMPTY? .TEMP>>
			<SET ITEM-MY <NTH .TEMP <LENGTH .TEMP>>>>>
		<PUT .ITEM-MY COMMENT .COMMENT-MY>)>
	.COMMENT-MY>

<DEFINE GRAPH_DATA ("OPTIONAL" (GRFS .GLOBAL_GRAPHS)
		    "AUX" (GFNUM 0) (TITLE <GET .GRFS TITLE>))
	#DECL ((GFNUM) FIX (VALUE) ATOM (GRFS GLOBAL_GRAPHS) GRFLIST)
	<COND (.TITLE
	     <AND <1 .TITLE>
		  <PRINC <STRING "TITLE:  " <UNPARSE <1 .TITLE>> "
">>>
	     <AND <2 .TITLE>
		  <PRINC <STRING "X-AXIS TITLE:  " <UNPARSE <2 .TITLE>> "
">>>
	     <AND <3 .TITLE>
		  <PRINC <STRING "Y-AXIS TITLE:  " <UNPARSE <3 .TITLE>> "
">>>)>
	<MAPF <>
	      <FUNCTION (GF "AUX" TEMP)
		      <PRINT (<SET GFNUM <+ .GFNUM 1>>)>
		      <AND <SET TEMP <GET .GF COMMENT>> <PRINC .TEMP> <TERPRI>>
		      <AND <SET TEMP <GET .GF GRF>> <MAPF <> ,PRINC .TEMP>>
		      <TERPRI>>
	      .GRFS>
	T>

<DEFINE DEMO ("OPTIONAL" (FILE "DSK:MUDDLE;UGRF DEMO"))
	#DECL ((VALUE) '"BEGINNING" (RINCHAN INCHAN) <SPECIAL CHANNEL>
		(CHRS) <SPECIAL STRING> (FILE) STRING)
	<SET CHRS "">
	<AND <SET RINCHAN <OPEN "READ" .FILE>>
	     <SET INCHAN <OPEN "READ" "INT:" ,CHARGIVER>>
	     "BEGINNING">>

<DEFINE CHARGIVER ("AUX" TEMP)
	#DECL ((VALUE TEMP) CHARACTER (CHRS) <SPECIAL STRING>
		(RINCHAN) <SPECIAL CHANNEL>)
	<COND (<EMPTY? .CHRS>
	       <SET TEMP <READCHR ,INCHAN>>
	       <AND <==? .TEMP <ASCII 27>>
		    <SET CHRS <UNPARSE <READ .RINCHAN '<ASCII 3>>>>>
	       .TEMP)
	      (<SET TEMP <1 .CHRS>>
	       <SET CHRS <REST .CHRS>>
	       <PRINC .TEMP>)>>

<DEFINE END_DEMO ()
	#DECL ((INCHAN RINCHAN) <SPECIAL CHANNEL> (VALUE) '"DONE")
	<CLOSE .INCHAN> <CLOSE .RINCHAN> <SET INCHAN ,INCHAN> "DONE"
>

<DEFINE SCALE ("TUPLE" ZZ "AUX" (Z .ZZ)) 
	#DECL ((VALUE) 'T (Z) <SPECIAL ANY>
		(GLOBAL_CONSERVE_SCALE GLOBAL_MAKE_GRID) <OR 'T FALSE>)
	<MAPPER PLOT_SCALE '<GSSCALE !.Z>>
	<VEC_PLOTTER <GIVE-GG> 
		     <SET GLOBAL_MAKE_GRID T>
		     <SET GLOBAL_CONSERVE_SCALE T>>>

<HANDLER <GET .INCHAN INTERRUPT> ,CONT-L-SEARCH>

<SET BACKSPACE <INSERT <REMOVE ,NULL> <ROOT>>>

<PROG ()
<SET PLOT-SEGMENT <GSBEGIN ,GRSTORE>>
<GSEND>>

<MAPPER PLOT_SCALE
	<PROG ((TEM <* 0.05 <- .TBOUND .BBOUND>>))
		<SET LBOUND <+ <* .90 .LBOUND>
			       <* .10 .RBOUND>>>
		<SET TBOUND <- .TBOUND .TEM>>
		<SET BBOUND <+ .BBOUND .TEM>>
		<GSSCALE>>>

<ENDPACKAGE>
