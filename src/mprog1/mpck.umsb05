<BLOCK <ROOT>>

PACKAGE 

RPACKAGE 

ENTRY 

EXTERNAL 

USE

USE-TOTAL 

DROP 

NULL-OBLIST

ENDPACKAGE 

FILSTR

FILPRS

L-DATUM 

USE-DATUM 

L-TRY-USER

L-UNUSE 

USE-DEFER 

L-NOISY 

L-DIRECTORIES

L-SECOND-NAMES

L-PATH

L-OBL

<MOBLIST PACKAGE 29>

<MOBLIST PKG!-PACKAGE 17>

<SETG OBLIST (<GET INITIAL OBLIST> <ROOT>)>

<BLOCK (<MOBLIST IPKG!-PKG!-PACKAGE 23>
	<GET PKG!-PACKAGE OBLIST>
	<ROOT>)>

<SETG PKG!-PACKAGE .OBLIST>

<SETG PKG-OB <GET PACKAGE OBLIST>>

<SETG COL-OB <MOBLIST RPACKAGE 7>>

<SETG L-TRY-USER <>>

<SETG L-NOISY T>

<SETG L-DIRECTORIES ("MDLLIB" "MDL")>

<SETG L-SECOND-NAMES ("FBIN" "GBIN" "NBIN" "BINARY" "MUD")>

<GDECL	(COL-OB
	PKG-OB)
		OBLIST
	(L-TRY-USER
	L-NOISY)
		ANY
	(L-DIRECTORIES
	L-SECOND-NAMES)
		<LIST [REST STRING]>>


<DEFINE FILSTR ("OPTIONAL" (N1 "") (N2 "MUD") (DN "DSK") (SN <SNAME>))
#DECL ((VALUE N1 N2 DN SN) STRING)
<STRING .DN ":<" .SN !"> .N1 !". .N2>>

<DEFINE FILPRS (FIL "AUX" (CHN <CHANNEL "READ" .FIL>))
#DECL ((VALUE) <LIST [REST STRING]> (FIL) STRING (CHN) CHANNEL)
(<7 .CHN> <8 .CHN> <9 .CHN> <10 .CHN>)>

<DEFINE L-PATH ()
<MAPF <> <FUNCTION (X) <PRINT <GET .X OBLIST>>> .OBLIST> ,NULL>

<DEFINE L-OBL (ATM)
#DECL ((ATM) ATOM)
<GET <OBLIST? .ATM> OBLIST>>


<DEFINE FIND/LOAD (STR "AUX" CHN TMP (OUTCHAN ,OUTCHAN))
	#DECL ((STR) STRING (OUTCHAN) <SPECIAL CHANNEL>)
	<COND (<AND <SET TMP <LOOKUP .STR ,PKG-OB>> <GASSIGNED? .TMP>>
	       .TMP)
	      (<SET CHN <SEARCH .STR>>
	       <COND (,L-NOISY <PRINC "/"> <PRINC .STR>)>
	       <LOAD .CHN>
	       <OR <LOOKUP .STR ,PKG-OB>
		   <PROG ()
			 <SET TMP <INSERT .STR ,PKG-OB>>
			 <SETG .TMP .OBLIST>
			 .TMP>>)>>

<DEFINE SEARCH (IND "AUX" (PATH ,L-DIRECTORIES))
	#DECL ((VALUE) <OR CHANNEL FALSE>
	       (IND) STRING
	       (PATH) <LIST [REST STRING]>)
	<AND ,L-TRY-USER <SET PATH <CONS <SNAME> .PATH>>>
	<MAPF <>
	      <FUNCTION (DIR "AUX" CHAN)
			#DECL ((VALUE) FALSE
			       (DIR) STRING
			       (CHAN) <OR CHANNEL FALSE>)
			<AND	<MAPF <> <FUNCTION (NAME2)
					#DECL ((NAME2) STRING)
					<COND	(<SET CHAN <OPEN "READ" .IND .NAME2
								"DSK" .DIR>>
						<MAPLEAVE .CHAN>)>> ,L-SECOND-NAMES>
				<MAPLEAVE .CHAN>>>
	      .PATH>>

<DEFINE PACKAGE (NAME
		 "OPTIONAL" (INAME <STRING !"I .NAME>) (SIZE 19) (ISIZE 23)
		 "EXTRA" ATM IATM OBL IOBL TMP)
	#DECL ((NAME INAME) STRING (SIZE ISIZE) FIX (ATM IATM VALUE) ATOM
	       (OBL IOBL) OBLIST)
	<SET ATM
	     <OR <LOOKUP .NAME ,PKG-OB> <INSERT .NAME ,PKG-OB>>>
	<SET OBL <MOBLIST .ATM .SIZE>>
	<SET IATM <OR <LOOKUP .INAME .OBL> <INSERT .INAME .OBL>>>
	<SET IOBL <MOBLIST .IATM .ISIZE>>
	<BLOCK <SETG .ATM <SET TMP (.IOBL .OBL <ROOT>)>>>
	<PUT .ATM IOBLIST .IATM>
	<PUT .TMP IN-COLLECTION .ATM>
	.ATM>

<DEFINE RPACKAGE (NAME
		  "OPTIONAL" (INAME <STRING !"I .NAME>) (ISIZE 23)
		  "AUX" ATM IATM IOBL TMP)
	#DECL ((NAME INAME) STRING (ISIZE) FIX (ATM IATM VALUE) ATOM
	       (IOBL) OBLIST)
	<SET ATM
	     <OR <LOOKUP .NAME ,PKG-OB> <INSERT .NAME ,PKG-OB>>>
	<SET IATM
	     <OR <LOOKUP .INAME ,COL-OB> <INSERT .INAME ,COL-OB>>>
	<SET IOBL <MOBLIST .IATM .ISIZE>>
	<BLOCK <SETG .ATM <SET TMP (.IOBL <ROOT>)>>>
	<PUT .ATM IOBLIST .IATM>
	<PUT .TMP IN-COLLECTION .ATM>
	.ATM>

<DEFINE ENTRY ("TUPLE" NAMES "AUX" (NAME T))
	#DECL ((VALUE NAME) ATOM (NAMES) <TUPLE [REST ATOM]>)
	<REPEAT ()
		<COND (<EMPTY? .NAMES> <RETURN .NAME>)>
		<SET NAME <1 .NAMES>>
		<SET NAMES <REST .NAMES>>
		<COND (<NOT <GET .OBLIST IN-COLLECTION>>
		       <ERROR ENTRY NOT-IN-PACKAGE-OR-COLLECTION!-ERRORS>)
		      (<==? <OBLIST? .NAME> <1 .OBLIST>>
		       <INSERT <REMOVE .NAME> <2 .OBLIST>>)
		      (<NOT <==? <OBLIST? .NAME> <2 .OBLIST>>>
		       <ERROR ENTRY .NAME ALREADY-USED-ELSEWHERE!-ERRORS>)>>>

<DEFINE USE ("TUPLE" NAMES "AUX" NAME PK OBL N M)
   #DECL ((VALUE) ATOM (NAMES) <TUPLE [REST STRING]> (PK) <OR ATOM FALSE>
	  (NAME) STRING (OBL) <OR FALSE OBLIST> (N M) FIX
	  (OBLIST) <LIST [REST OBLIST]>)
   <REPEAT ()
	   <COND (<EMPTY? .NAMES> <RETURN USE>)>
	   <SET NAME <1 .NAMES>>
	   <SET NAMES <REST .NAMES>>
	   <SET PK <FIND/LOAD .NAME>>
	   <COND
	    (<NOT .PK> <ERROR PACKAGE .NAME NOT-FOUND!-ERRORS>)
	    (<AND <SET OBL <GET .PK OBLIST>> <NOT <MEMQ .OBL .OBLIST>>>
	     <COND (<NOT <0? <SET N <LENGTH <MEMQ ,PKG-OB .OBLIST>>>>>
		    <PUTREST <REST .OBLIST <- <SET M <LENGTH .OBLIST>> .N 1>>
			     (.OBL !<REST .OBLIST <- .M .N>!>)>)
		   (T
		    <PUTREST <REST .OBLIST <- <LENGTH .OBLIST> 1>> (.OBL)>)>)>>>

<DEFINE USE-TOTAL ("TUPLE" NAMES "AUX" NAME PK OBL N M)
   #DECL ((VALUE) ATOM (NAMES) <TUPLE [REST STRING]> (PK) <OR ATOM FALSE>
	  (NAME) STRING (OBL) <OR FALSE OBLIST> (N M) FIX
	  (OBLIST) <LIST [REST OBLIST]>)
   <REPEAT ()
	   <COND (<EMPTY? .NAMES> <RETURN USE>)>
	   <SET NAME <1 .NAMES>>
	   <SET NAMES <REST .NAMES>>
	   <SET PK <FIND/LOAD .NAME>>
	   <COND
	    (<NOT .PK> <ERROR PACKAGE .NAME NOT-FOUND!-ERRORS>)
	    (<AND <SET OBL <GET .PK OBLIST>> <NOT <MEMQ .OBL .OBLIST>>>
	     <COND (<NOT <0? <SET N <LENGTH <MEMQ ,PKG-OB .OBLIST>>>>>
		    <PUTREST <REST .OBLIST <- <SET M <LENGTH .OBLIST>> .N 1>>
			     (.OBL !<REST .OBLIST <- .M .N>!>)>)
		   (T
		    <PUTREST <REST .OBLIST <- <LENGTH .OBLIST> 1>> (.OBL)>)>)>
	<COND
	    (<AND <SET PK <OR	<GET .PK IOBLIST>
				<LOOKUP <STRING !"I <PNAME .PK>> <GET .PK OBLIST>>>>
			<SET OBL <GET .PK OBLIST>>
			<NOT <MEMQ .OBL .OBLIST>>>
	     <COND (<NOT <0? <SET N <LENGTH <MEMQ ,PKG-OB .OBLIST>>>>>
		    <PUTREST <REST .OBLIST <- <SET M <LENGTH .OBLIST>> .N 1>>
			     (.OBL !<REST .OBLIST <- .M .N>!>)>)
		   (T
		    <PUTREST <REST .OBLIST <- <LENGTH .OBLIST> 1>> (.OBL)>)>)>>>



<SETG USE-DEFER <SETG EXTERNAL ,USE>>

<DEFINE DROP ("TUPLE" NAMES "AUX" NAME PK OBL N)
	#DECL ((VALUE) ATOM (NAMES) <TUPLE [REST STRING]> (PK) <OR ATOM FALSE>
	       (N) FIX (NAME) STRING (OBL) <OR FALSE OBLIST>
	       (OBLIST) <LIST [REST OBLIST]>)
	<REPEAT ()
		<COND (<EMPTY? .NAMES> <RETURN DROP>)>
		<SET NAME <1 .NAMES>>
		<SET NAMES <REST .NAMES>>
		<COND (<NOT <SET PK <LOOKUP .NAME ,PKG-OB>>>
		       <ERROR PACKAGE .NAME NOT-PACKAGE-OR-COLLECTION!-ERRORS>)>
		<SET OBL <GET .PK OBLIST>>
		<COND (<NOT <0? <SET N <LENGTH <MEMQ .OBL .OBLIST>>>>>
		       <PUTREST <REST .OBLIST <SET N <- <LENGTH .OBLIST> .N 1>>>
				<REST .OBLIST <+ .N 2>>>)>
		<COND	(<AND	<SET PK <OR	<GET .PK IOBLIST>
						<AND .OBL
					<LOOKUP <STRING !"I <PNAME .PK>> .OBL>>>>
				<SET OBL <GET .PK OBLIST>>>
			<COND (<NOT <0? <SET N <LENGTH <MEMQ .OBL .OBLIST>>>>>
			       <PUTREST <REST .OBLIST <SET N <- <LENGTH .OBLIST> .N 1>>>
					<REST .OBLIST <+ .N 2>>>)>)>>>

<SETG NULL-OBLIST <MOBLIST NULL 1>>

<DEFINE ENDPACKAGE ("AUX" (PK <GET .OBLIST IN-COLLECTION>) IATM OBL VAL)
	#DECL ((PK) <OR ATOM FALSE> (VALUE) ATOM
		(IATM) <OR ATOM FALSE>
		(OBL) <OR OBLIST FALSE>
		(VAL) ANY)
	<COND (.PK
		<PUT .OBLIST IN-COLLECTION>
		<ENDBLOCK>
		<COND	(<AND	<SET IATM <OR	<GET .PK IOBLIST>
						<LOOKUP <STRING !"I <PNAME .PK>>
							<GET .PK OBLIST>>>>
				<SET OBL <GET .IATM OBLIST>>
				<MAPF <> <FUNCTION (L)
						#DECL ((L) LIST)
						<COND	(<EMPTY? .L>)
							(ELSE <MAPLEAVE <>>)>> .OBL>>
			<PUT <PUT .IATM OBLIST> OBLIST>
			<PUT .PK IOBLIST>
			<COND	(<AND	<GASSIGNED? .PK>
					<TYPE? ,.PK LIST>
					<SET VAL <MEMBER .OBL ,.PK>>>
				<PUT .VAL 1 ,NULL-OBLIST>)>)>
		.PK)
	      (ELSE
	       <ERROR UNMATCHED-ENDPACKAGE-OR-ENDCOLLECTION!-ERRORS>)>>

<DEFINE L-UNUSE (STR "AUX" TMP IATM)
#DECL ((STR) STRING (TMP) ANY (IATM) <OR ATOM FALSE>)
	<COND (<AND <SET TMP <LOOKUP .STR ,PKG-OB>> <GASSIGNED? .TMP>>
	       <DROP .STR>
		<COND	(<SET IATM <OR	<PUT .TMP IOBLIST>
				<LOOKUP <STRING !"I <PNAME .TMP>> <GET .TMP OBLIST>>>>
			<PUT <PUT .IATM OBLIST> OBLIST>)>
	       <GUNASSIGN .TMP>
		<PUT <PUT .TMP OBLIST> OBLIST>
		<REMOVE .TMP ,PKG-OB>
	       "PACKAGE REMOVED")
	      (<SET TMP <LOOKUP .STR ,UDOB>>
	       <REMOVE .TMP ,UDOB>
	       "DATUM REMOVED")
	      (T #FALSE ("NOT PACKAGE OR DATUM"))>>






<DEFINE L-DATUM (IND "AUX" CHN TMP)
	<COND (<SET CHN <SEARCH .IND>>
	       <SET TMP <READ .CHN '<>>>
	       <CLOSE .CHN>
	       .TMP)
	      (<CHTYPE ("DATUM NOT FOUND") FALSE>)>>

<SETG UDOB <MOBLIST USE-DATUM 17>>

<DEFINE USE-DATUM (IND "AUX" TMP)
	<COND (<SET TMP <LOOKUP .IND ,UDOB>> ,.TMP)
	      (<SET TMP <L-DATUM .IND>> <SETG <INSERT .IND ,UDOB> .TMP>)
	      (T .TMP)>>


<ENDBLOCK>

<ENDBLOCK>

<SET OBLIST ,OBLIST>

