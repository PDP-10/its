<PACKAGE "ACOM">

<ENTRY GET-F/A-DEFAULTS>

<USE "AHACK" "EUTL" "CALSYM" "CALRDR" "CALCOM" "EHACK"
     "COMMAND" "BUF" "ACHECK" "AMAKE" "EGROUP" "ANOTES">

<USE-DEFER "ALIB">

<DEFINE NOTES-FUN (CALL ITEMX GNAM FILE "EXTRA" (OUTCHAN .OUTCHAN))
	#DECL ((CALL) ATOM (ITEMX) <OR STRING ATOM FALSE> (GNAM) <OR FALSE ATOM>
	       (FILE) STRING (OUTCHAN) <SPECIAL <OR CHANNEL FALSE>>)
	<COND (.ITEMX
	       <COND (<NOT <MEMBER "TTY:" .FILE>>
		      <SET OUTCHAN <OPEN "PRINT" .FILE>>)>
	       <COND (<TYPE? .ITEMX STRING>
		      <COND (<NOT .GNAM><SET GNAM &&NOTES&&>)>
		      <GROUP-LOAD .ITEMX .GNAM>
		      <SET ITEMX .GNAM>)>
	       <EVAL <FORM .CALL .ITEMX>>
	       <COND (<NOT <MEMBER "TTY:" .FILE>>
		      <CLOSE .OUTCHAN>)>)>>

<DEFINE MYABSTR-NOTES (ITEM GNA FILE)
	#DECL ((ITEM) <OR FALSE ATOM STRING>)
	<NOTES-FUN ABSTR-NOTES .ITEM .GNA .FILE>>

<DEFINE MYABSTR-SHORT (ITEM GNA FILE)
	#DECL ((ITEM) <OR FALSE ATOM STRING>)
	<NOTES-FUN ABSTR-SHORT .ITEM .GNA .FILE>>

<DEFINE MYFILE-ABSTRACT F-A-ACT ("OPTIONAL" GROUP "EXTRA" GNAME (GCONT ()))
	#DECL ((INFILE) <OR FALSE STRING ATOM> (OFILE) STRING (LOAD?) ANY
	       (GNAME) <OR FALSE ATOM> (GCONT) LIST (F-A-ACT) <SPECIAL ACTIVATION>)
	<COND (<ASSIGNED? GROUP>
	       <SET INFILE <READER '[] "group named" '["
Name of the group to abstract" ""] '["ATOM"]>>)
	      (<PROG ((OBLIST (<GET INITIAL OBLIST><ROOT>)))
		     #DECL ((OBLIST) <SPECIAL <LIST [REST OBLIST]>>)
		     <SET INFILE <READER '[] "file named" '["
Name of the file to abstract" ""] '["FILE"]>>>)>
	<OR .INFILE <RETURN T .F-A-ACT>>
	<PROG DO-OFILE-OVER ()
	      <SET OFILE <READER '[#FALSE () #FALSE () <COND (<TYPE? .INFILE ATOM>
							      <PNAME .INFILE>)
							     (.CALICO-NM1)> "ABSTR"]
				 "to output file"
				 '["
File to output the abstracts to." ""]
				 '["FILE"]>>
	      <OR .OFILE <AGAIN .F-A-ACT>>
	      <SET GRPNAME <READER '[] "to composer group" '["
If given, the abstracts will be loaded for the composer with this name"""] '["ATOM"]>>
	      <AND <=? #FALSE (#FALSE ()) .GRPNAME>
		   <AGAIN .DO-OFILE-OVER>>>
	<FILE-ABSTRACT .INFILE .OFILE>
	<COND (<AND .GRPNAME <ASSIGNED? .GRPNAME>>
	       <TERPRI>
	       <PRINC "Loading for composer">
	       <MAPF <>
		     <FUNCTION (X)
			       <SET GCONT (<ADD-OBJECT .X> !.GCONT)>>
		     ..GRPNAME>
	       <AND <NOT <EMPTY? .GCONT>>
		    <PUT <GET Abstract AGROUP-TABLE>
			 2
			 [<PNAME .GRPNAME>
			  .GCONT
			  !<2 <GET Abstract AGROUP-TABLE!>>]>>
	       <COMMAND-UPDATE>
	       <TERPRI>
	       <PRINC "Ready">)>>

<DEFINE GET-BATCH-JOB (FRFILE TOFILE RECFILE REABS AUTH "AUX" OUTC)
	#DECL ((FRFILE TOFILE RECFILE) STRING
	       (OUTC) <OR CHANNEL FALSE>)
	<COND (<SET OUTC <OPEN "PRINT" "MABSTR;> BATABS">>
	       <PRINT .FRFILE .OUTC>
	       <PRINT .TOFILE .OUTC>
	       <PRINT .RECFILE .OUTC>
	       <PRINT .REABS .OUTC>
	       <PRINT <COND (<EMPTY? .AUTH><SNAME>)
			    (T <VECTOR !.AUTH>)>
		      .OUTC>
	       <CLOSE .OUTC>
	       T)
	      (T <PRINT .OUTCHAN>)>>

<DEFINE MYCHECK-ABSTR (SYMLIST)
	#DECL ((SYMLIST) STRUCTURED)
	<MAPF <> ,CHECK-ABSTR <SYM-SORT .SYMLIST>>>

<DEFINE MYOLD-NEW (SYMLIST)
	#DECL ((SYMLIST) STRUCTURED)
	<MAPF <> ,OLD-NEW <SYM-SORT .SYMLIST>>>

<DEFINE DUMPER-ALIB (ID FILE NAME)
	#DECL ((ID) <OR LIST FIX FALSE STRING> (FILE) STRING (NAME) ATOM)
	<COND (.ID
	       <COND (<MEMBER "  NAME ABSTR" .FILE>
		      <EVAL <FORM .NAME .ID>>)
		     (<EVAL <FORM .NAME .ID .FILE>>)>)
	      (T)>>

<DEFINE MYLOAD-ENTRY (ID "EXTRA" IRS-IN)
	#DECL ((ID) <OR FIX STRING FALSE> (IRS-IN) ANY)
	<COND (.ID
	       <SET IRS-IN <LOAD-ENTRY .ID>>
	       <COND (.IRS-IN
		      <ADD-OBJECT .IRS-IN>
		      <COMMAND-UPDATE>)
		     (<PRINT .IRS-IN>)>)
	      (T)>>

<DEFINE MYLOAD-PACKAGE (ID NAME? "EXTRA" IRS-IN)
	#DECL ((ID) <OR FIX STRING FALSE> (NAME? IRS-IN) ANY)
	<COND (.ID
	       <SET IRS-IN <LOAD-PACKAGE .ID .NAME?>>
	       <COND (<NOT .IRS-IN><PRINT .IRS-IN>)
		     (<TYPE? <1 .IRS-IN> VECTOR>
		      <MAPF <> ,ADD-OBJECT .IRS-IN>
		      <COMMAND-UPDATE>)
		     (<TYPE? <1 .IRS-IN> STRING>
		      <PRINT .IRS-IN>)>)
	      (T)>>
	
<DEFINE MYLOAD-BUNCH (ID "EXTRA" IRS-IN)
	#DECL ((ID) <OR FALSE LIST> (IRS-IN) ANY)
	<COND (.ID 
	       <SET IRS-IN <LOAD-BUNCH .ID>>
	       <OR <EMPTY? .IRS-IN>
		   <PROG ()
			 <MAPF <> ,ADD-OBJECT .IRS-IN>
			 <COMMAND-UPDATE>>>)
	      (T)>>

<DEFINE GET-F/A-DEFAULTS ("EXTRA" FOO)
	#DECL ((FOO) ANY)
	<SET FOO
	     <READER '[] "
Record file to " '["
If a file is given, a record of the abstracting will be printed into the file
rather than to the tty" ""] '["FILE"]>>
	<COND (<=? .FOO <STRING .CALICO-DEV !\: .CALICO-SNM !\;
				.CALICO-NM1 !\  .CALICO-NM2>>
	       <AND <ASSIGNED? RECORD><UNASSIGN RECORD>>)
	      (<SET RECORD .FOO>)>
	<SET FOO <READARGS '[] "
Items to re-abstract " '["
If given, only those items named will be abstracted" ""] '["ATOM" "MULT"]>>
	<COND (<EMPTY? <1 .FOO>><AND <ASSIGNED? REABSTRACT><UNASSIGN REABSTRACT>>)
	      (<SET REABSTRACT <1 .FOO>>)>
	<SET FOO <READARGS '[] "
Author (if not <SNAME>) " '["
If given, the author field will be set to the names given, instead of <SNAME>" ""] '["STRING" "MULT"]>>
	<COND (<EMPTY? <1 .FOO>><AND <ASSIGNED? AUTHOR><UNASSIGN AUTHOR>>)
	      (<SET AUTHOR <VECTOR !<1 .FOO>>>)>
	<SET FOO <READER '[] "Quiet-mode? " '["
If non-false, no output will go to tty (so you need not hang the tty waiting)" ""] '["ANY"]>>
	<COND (.FOO <SET QUIET T>)(<SET QUIET <>>)>>


<SETG IRSTAB 
      <MAKEBST "Library retrieval commands"
         %<BSTSORT
                '["Load.entry"
		 '<CALICO-COMMAND ,MYLOAD-ENTRY
				 '[[]
				  "with id"
				  ["
IRS identifier for the entry to be loaded from MUDIRS data base
(either number or full trailered name)"""]
				  ["STRING" "FIX"]]>
		 "Load.package"
		 '<CALICO-COMMAND ,MYLOAD-PACKAGE
				 '[[]
				  "with id"
				  ["
IRS identifier for the package to be loaded from MUDIRS data base
(either number or full trailered name)"""]
				  ["STRING" "FIX"]
				  []
				  "Name only?"
				  ["
If non-false, only the names of the items in the package will be printed"""]
				  ["ANY"]]>
		 "Load.bunch"
		 '<CALICO-COMMAND ,MYLOAD-BUNCH
				 '[[]
				  "with id's"
				  ["
The IRS identifiers of the items to be loaded from MUDIRS data base
(either numbers or full trailered names)"""]
				  ["FIX" "STRING" "MULT"]]>
		 "Dump.entry"
		 '<CALICO-COMMAND ,DUMPER-ALIB
				'[[]
				  "with id"
				  ["
IRS Identifier of the entry to be dumped from MUDIRS to a file
(either number or full unique trailered name)" ""]
				  ["FIX" "STRING"]
				  [#FALSE () #FALSE () "  NAME" "ABSTR"] ;"NOTE SPACES"
				  "to file (opt)"
				  ["
File into which the entry will be dumped (default is <name> ABSTR)" ""]
				  ["FILE"]
				  #FALSE (DUMP-ENTRY) "" [] ["SYM"]]>
		 "Dump.package"
		 '<CALICO-COMMAND ,DUMPER-ALIB
				 '[[]
				  "with id"
				  ["
IRS Identifier of the package to be dumped from MUDIRS data base to a file
(either a number or full unique trailered name)" ""]
				  ["FIX" "STRING"]
				  [#FALSE () #FALSE () "  NAME" "ABSTR"] ;"NOTE SPACES"
				  "to file (opt)"
				  ["
File into which the package will be dumped (default is <name> ABSTR)" ""]
				  ["FILE"]
				  #FALSE (DUMP-PACKAGE) ""[]["SYM"]]>
		 "Dump.bunch"
		 '<CALICO-COMMAND ,DUMPER-ALIB
		 		 '[[]
				  "with id's"
				  ["
IRS Identifiers of the entries to be dumped from MUDIRS data base to a file
(either numbers or full trailered names)" ""]
				  ["FIX" "STRING" "MULT"]
				  [#FALSE () #FALSE () "  NAME" "ABSTR"]
				  "to file (opt)"
				  ["
File into which the entries will be dumped (default is <name> ABSTR)" ""]
				  ["FILE"]
				  #FALSE (DUMP-BUNCH) ""[]["SYM"]]>
		 "Delete.entry"
		 '<CALICO-COMMAND #FUNCTION ((X)<AND .X <DELETE-ENTRY .X>>)
				 '[[]
				  "with id"
				  ["
Identifier of the entry to be deleted from the MUDIRS data base" ""]
				  ["FIX" "STRING"]]>
		 "Delete.package"
		 '<CALICO-COMMAND #FUNCTION ((X)<AND .X <DELETE-PACKAGE .X>>)
				 '[[]
				  "with id"
				  ["
Identifier of the package to be deleted from  the MUDIRS data base" ""]
				  ["FIX" "STRING"]]>]>>>

<ADDTABLE ,IRSTAB>



<SETG AB-CREATE-COM 
    <MAKEBST "Abstract creation commands" 
	%<BSTSORT
		 '["File.abstract"
		  '<MYFILE-ABSTRACT>
		 "Group.abstract"
		  '<MYFILE-ABSTRACT T>
		 "Abstract.notes"
		  '<CALICO-COMMAND ,MYABSTR-NOTES
				'[GRPFIL
				  []
				  "for group-name/file-spec"
				  ["
Enter name of group or file-specification for which ABSTR-NOTES will be done" ""]
				  ["ATOM" "STRING"]
				  <COND (<TYPE? .GRPFIL ATOM>
					 <CHTYPE (.GRPFIL) FALSE>)
					([])>
				  "with group name (opt)"
				  ["
This will give the loaded file a group name (if you will need it later)" ""]
				  ["ATOM"]
				  ["TTY"]
				  "to (opt) file"
				  ["
File to recieve the output"]
				  ["FILE"]]>
	    "Batch.abstract"
	    '<CALICO-COMMAND ,GET-BATCH-JOB
			   '[[]
			     "from file"
			     ["" ""]
			     ["FILE"]
			     [#FALSE () #FALSE () #FALSE () "ABSTR"]
			     "to file (opt)"
			     ["" ""]
			     ["FILE"]
			     [#FALSE () #FALSE () #FALSE () "ARCORD"]
			     "record to file"
			     ["" ""]
			     ["FILE"]
			     []
			     "Items to re-abstract"
			     ["
If given, only those items named will be abstracted" ""]
			     ["ATOM" "MULT"]
			     []
			     "Author (if not <SNAME>)"
			     ["
If given, the author field will be set to this value" ""]
			     ["STRING" "MULT"]]>
		  "Set.file.abstract.defaults"
		  '<GET-F/A-DEFAULTS>
		  "Abstract.short"
		  '<CALICO-COMMAND ,MYABSTR-SHORT
				'[GRPFIL
				  []
				  "for group-name/file-spec"
				  ["
Enter name of group or file-specification for which short checking will be done" ""]
				  ["ATOM" "STRING"]
				  <COND (<TYPE? .GRPFIL ATOM>
					 <CHTYPE (.GRPFIL) FALSE>)
					([])>
				  "with group name (opt)"
				  ["
This will give the loaded file a group name (if you will need it later)" ""]
				  ["ATOM"]
				  ["TTY"]
				  "to (opt) file"
				  ["
File to recieve the output"]
				  ["FILE"]]>
		 "Check.file"
		 '<CALICO-COMMAND ,CHECK-FILE
				 '[[]
				  "named"
				  ["
All abstracts in the file specified will be checked for correctness of form" ""]
				  ["FILE"]]>
 		 "Check.abstract"
		 '<CALL/APPLY '<CALICO-COMMAND ,MYCHECK-ABSTR
				 [,OBJLOADTAB
				  "named"
				  ["
The abstract provided will be checked for correctness of form" ""]
				  ["SYM""MULT"]]> LOAD>
		 "Old.new"
		 '<CALL/APPLY '<CALICO-COMMAND ,MYOLD-NEW
				 [,OBJLOADTAB
				  "for abstract(s)"
				  ["
Abstracts provided will be changed from the old format to the new format
(i.e. NOTES field will be added, etc.)" ""]
				  ["SYM""MULT"]]> LOAD>]>>>

<ADDTABLE ,AB-CREATE-COM>



<SETG COMTAB
    <MAKEBST "XABSTR commands" 
	%<BSTSORT
		'[
		 "Copy.abstract"
		 '<CALL/APPLY '<CALICO-COMMAND ,COPY-ABSTR
				 [,OBJONLYTAB
				  "named"
				  '["
Name of the abstract or template to be copied" ""]
				  '["SYM"]
				  '[]
				  "to unique name(s)"
				  '["
Names for the copies of the abstracts (these will be placed in the unique
name field. All other fields will be copied.)" ""]
				  '["ATOM" "MULT"]
				  '[]
				  "to be known as"
				  '["optional group name for the new abstracts" ""]
				  '["ATOM"]]> LOAD>
		 "Create.template.field"
		 '<CREATE-TEMPLATE>
		 "Save.abstracts"
		 '<CALICO-COMMAND ,ABSTR-SAVE
				 '[[#FALSE () #FALSE () "ABSTR" "WORLD"]
				  "to file (opt.)"
				  ["
Saves the abstracts (all of them) in a file. Default file is ABSTR WORLD.
Also saved are scratches and automatic modes." ""]
				  ["FILE"]
				  []
				  "only dump scratches and auto-modes?"
				  ["
If non-false, will dump automatic modes and scratches only" ""]
			          ["ATOM"]]>
		 "Restore.abstracts"
		 '<CALICO-COMMAND ,ABSTR-RESTORE
				 '[[#FALSE () #FALSE () "ABSTR" "WORLD"]
				  "from file (opt.)"
				  ["
Restores a file of abstracts as may have been SAVEd previously. Default file
is ABSTR WORLD." ""]
				  ["FILE"]]>
		"Report.bug"
		'<ABSTR-BUG>
		"Help.for.node"
		'<CALICO-COMMAND ,GET-HELP
			  	 '[<GET Abstract ALLNODES>
			   	 "named"
			   	 ["
Name of the node for which information is sought" ""]
			   	 ["SYM"]]>]>>>

<ADDTABLE ,COMTAB>

<ENDPACKAGE>
