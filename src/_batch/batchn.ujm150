<PACKAGE "BATCHN">

<ENTRY	QUEUE
	NAME-OF-SCRIPT BATCH-SCRIPT-LEVEL

	BATCHN SAVER
	BATCH-SCRIPT NIGHT? NEXT-NIGHT
	UPDATE-QUEUE DELETE-FROM-DISK-Q
	REMOVE-TASK SOONEST-TIME READ-TASK-ACT
	TASK-DESCRIPTOR INSERT-TASK
	WRITE-TASK WRITE-QUEUE FIND-NEXT-TASK BATCHQ-OBL>

<USE	"BATCHQ"	;"task descriptor atoms"
	"TASKM"		;"ACKNOWLEDGE DEBUG-MODE NORMAL-MODE NQUEUES
			   SETUP-ERROR-INTERRUPT-HANDLER SETUP-INTERRUPT-HANDLERS
			   SETUP-SYSTEM-LOCATIONS START-RUNNING TASK-ABORT"
	"TCHECK"	;"TASK-CHECK"
	"TEMPLT"	;"INDIRECT-MOD TASK-FIELDNAMES TASK-TEMPLATE"

	"CHARAP"	;"CHARAPPEND CR"
	"DATIME"	;"RTIME"
	"DIR"		;"GET-DIRECTORY PARSE-DIRECTORY"
	"DOW"		;"DOW"
	"ITS"		;"ITS-CALL"
	"NOW"		;"NOW"
	"QPUT"		;"READ-PUTAWAY UNPUTAWAY-WRITE MAKE-TEMPLATE"
	"STR"		;"STRTOX"
	"TIMFCN"	;"BEFORE? DATE-DOW DTADD DTDIFF DTNORM DTNOW HOLIDAY? PAST?">

<GDECL	(QUEUE) <VECTOR LIST [REST LIST]>
	(TASKS-IN-QUEUE) <LIST [REST FIX]>
	(NAME-OF-SCRIPT) <OR <VECTOR [REST STRING]> STRING>
	(BATCH-SCRIPT-LEVEL) FIX
	(START-TIME) <LIST LIST LIST STRING>>

<SETG BATCHQ-OBL (<GET INITIAL!- OBLIST>
		  <MOBLIST BATCHQ!-PACKAGE!- >
		  <ROOT>)>
<GDECL (BATCHQ-OBL) LIST>

;"<PACKAGE \"AB-QUE\">"

;<USE "BATCHQ" "QPUT">

;<ENTRY	AB-FIELDS AB-TEMPLATE AB-T-LENGTH>

;<MANIFEST AB-TEMPLATE AB-FIELDS AB-T-LENGTH>

<GDECL (AB-TEMPLATE) VECTOR (AB-FIELDS) UVECTOR>

<SETG AB-TEMPLATE
      <MAKE-TEMPLATE
 '[TASK-ID-NUMBER		0
   ORIGINATOR			<>
   TASK-NAME			<>
   TASK-STATE			<>
   TIME-OF-NEXT-RUN		<>
   NIGHT-RUN-SWITCH		<>]>>

<SETG AB-FIELDS
 '![TASK-ID-NUMBER
   ORIGINATOR
   TASK-NAME
   TASK-STATE
   TIME-OF-NEXT-RUN
   NIGHT-RUN-SWITCH]>

<SETG AB-T-LENGTH <LENGTH ,AB-TEMPLATE>>

;"<ENDPACKAGE>"


<DEFINE TASK-TORDER (TSK1 TSK2
		     "AUX" (TIME1 <TIME-OF-NEXT-RUN .TSK1>)
			   (TIME2 <TIME-OF-NEXT-RUN .TSK2>))
    #DECL ((TSK1 TSK2) VECTOR (TIME1 TIME2) <OR STRING LIST>
	   (VALUE) <OR ATOM FALSE>)
    <COND (<TYPE? .TIME1 STRING> <SET TIME1 <DTNOW>>)>
    <COND (<TYPE? .TIME2 STRING> <SET TIME2 <DTNOW>>)>
    <BEFORE? .TIME1 .TIME2>>

<DEFINE BATCH-SCRIPT ("TUPLE" MSGS
		      "AUX" (OLD-INT-LEVEL <INT-LEVEL 1000>) (LEV <1 .MSGS>))
    #DECL ((MSGS) TUPLE
	   (OLD-INT-LEVEL VALUE) FIX
	   (LEV) ANY)
    <COND (<NOT <TYPE? .LEV FIX>>
	   <B-SCRIPT !.MSGS>)
	  (<L? .LEV ,BATCH-SCRIPT-LEVEL>)
	  (<G=? .LEV 300>
	   <B-SCRIPT CR CR !<REST .MSGS> CR CR>)
	  (ELSE <B-SCRIPT !<REST .MSGS>>)>
    <INT-LEVEL .OLD-INT-LEVEL> >

<DEFINE B-SCRIPT ("TUPLE" MSGS "AUX" NOS)
    #DECL ((MSGS) TUPLE (NOS) <OR STRING <VECTOR [REST STRING]>> (VALUE) ANY)
    <COND (<GASSIGNED? NAME-OF-SCRIPT>
	   <COND (<TYPE? <SET NOS ,NAME-OF-SCRIPT> STRING>
		  <CHARAPPEND .NOS 0 T <LOGTIME> !.MSGS CR>)
		 (<TYPE? .NOS VECTOR>
		  <MAPF <>
			#FUNCTION ((A) #DECL ((A) STRING)
				   <CHARAPPEND .A 0 T <LOGTIME> !.MSGS CR>)
			.NOS>)>)>>

<DEFINE LOGTIME ()
	<MAPR ,STRING
	      <FUNCTION (T)
		#DECL ((T) <LIST FIX>)
		<MAPRET <REST <UNPARSE <+ <1 .T> 100>>>
			<COND (<LENGTH? .T 1> !\ ) (T !\:)>>>
	      <RTIME>>>

<DEFINE WHICH-QUEUE (TSK "AUX" (TTYPE <TASK-TYPE .TSK>))
    #DECL ((TSK) VECTOR (TTYPE) <OR FALSE STRING> (VALUE) FIX)
    <COND (<1? ,NQUEUES> 1)
	  (<OR <NOT .TTYPE> <=? "SHORT" .TTYPE>> 1)
	  (ELSE 2)>>



<DEFINE TASK-DESCRIPTOR (ID "OPTIONAL" (UPDATED-ALREADY? <>) "AUX" GT)
   #DECL ((VALUE GT) <OR FALSE VECTOR>
	  (ID) <OR FIX <LIST STRING STRING>> (UPDATED-ALREADY?) <OR ATOM FALSE>)

   <COND (<SET GT <GET-TASK .ID>>)
	 (<=? .GT #FALSE ("FAKE TASK")> <>)
	 (.UPDATED-ALREADY? <>)
	 (<UPDATE-QUEUE> <GET-TASK .ID>)>>


<DEFINE GET-TASK (ID "AUX" A-TASK Q-TASK)
   #DECL ((VALUE A-TASK) <OR FALSE VECTOR> (Q-TASK) VECTOR
	  (ID) <OR <LIST STRING STRING> FIX>)
   <MAPF <>
	 #FUNCTION ((SQ)
	     #DECL ((SQ) LIST)
	     <REPEAT ()
		 <COND (<LENGTH? .SQ 1> <RETURN <>>)
		       (<T-MATCH .ID <SET Q-TASK <2 .SQ>>>	;"THAT'S THE GUY"
			<COND (<==? <LENGTH .Q-TASK> ,AB-T-LENGTH>
						;"IN ABBREVIATED FORM"
						;"SPLICE OUT THE SHORT AND .."
			       <PUTREST .SQ <REST .SQ 2>>
			       <AND <SET A-TASK <READ-TASK <TASK-ID-NUMBER .Q-TASK>>>
				    <INSERT-TASK .A-TASK>
				    <MAPLEAVE .A-TASK>>
			       <MAPLEAVE #FALSE ("FAKE TASK")>)
			      (<MAPLEAVE .Q-TASK>	;"IN FULL LENGTH FORM")> )>
		 <SET SQ <REST .SQ>>>)
	 ,QUEUE>>

<DEFINE T-MATCH (IDN P-TASK)
   #DECL ((VALUE) ANY (IDN) <OR <LIST STRING STRING> FIX> (P-TASK) VECTOR)
   <COND (<TYPE? .IDN FIX>
	  <==? <TASK-ID-NUMBER .P-TASK> .IDN>)
	 (<AND <=? <ORIGINATOR .P-TASK> <1 .IDN>>
	       <=? <TASK-NAME .P-TASK> <2 .IDN>>>)>>


<DEFINE UPDATE-QUEUE ("AUX" (S <PROCESS-SPECS>)
			    (M <PROCESS-MODS>))
   #DECL ((S) <OR ATOM FALSE> (M) <OR UVECTOR FALSE>)
   <AND .S <NOT .M> <WRITE-QUEUE>>
   <OR .S .M>>

<DEFINE PROCESS-SPECS ("AUX" (NEWS <>) (SPEC-NOS <GET-TASK-NUMS>))
    #DECL ((VALUE NEWS) <OR ATOM FALSE> (SPEC-NOS) <OR <UVECTOR [REST FIX]> FALSE>)

   <COND (.SPEC-NOS
	  <MAPF <>
		#FUNCTION ((N "AUX" TSK)
		      #DECL ((N) FIX (TSK) ANY)
		      <COND (<NOT <MEMQ .N ,TASKS-IN-QUEUE>>
			     <SETG TASKS-IN-QUEUE (.N !,TASKS-IN-QUEUE)>
			     <AND <SET TSK <READ-TASK .N>>
				  <SET NEWS T>
				  <INSERT-TASK .TSK>>)>)
		.SPEC-NOS>)
	 (ELSE
	  <BATCH-SCRIPT "*** ERROR from GET-TASK-NUMS: " .SPEC-NOS " ***">)>
    .NEWS>

<DEFINE GET-TASK-NUMS ("AUX" D)
 #DECL ((VALUE D) <OR FALSE UVECTOR>)
 <COND (<SET D <GET-DIRECTORY ".BATCH">>
	<MAPF ,UVECTOR
	      <FUNCTION (V "AUX" N (TAGS <8 .V>))
			#DECL ((V) VECTOR (N) ANY (TAGS) LIST)
			<COND (<AND <=? <1 .V> "SPECS">
				    <TYPE? <SET N <PARSE <2 .V>>> FIX>
				    <NOT <MEMQ !\C .TAGS>>
				    <NOT <MEMQ !\W .TAGS>>>
			       <MAPRET .N>)
			      (T <MAPRET>)>>
	      <PARSE-DIRECTORY .D>>)>>

<SETG MODIFIER-TABLE
     '![TASK-STATE		CHANGE-STATE
	TIME-OF-NEXT-RUN	CHANGE-TIME-OF-NEXT-RUN
	TASK-TYPE		CHANGE-TASK-TYPE
	TASK-ID-NUMBER		DUMMY-FCN
	BY-WHOM-MODIFIED	DUMMY-FCN
	WHEN-MODIFIED		DUMMY-FCN]>
<GDECL (MODIFIER-TABLE) <UVECTOR [REST ATOM]>>
;<MANIFEST MODIFIER-TABLE>

<DEFINE PROCESS-MODS ("AUX" C D X TASK MOD-USER FIELD F NEW WQ?
			    (ACKN IF-MODIFIED) (REWRITE-Q? <>) (OBLIST ,BATCHQ-OBL))
    #DECL ((VALUE REWRITE-Q? WQ?) <OR FALSE UVECTOR> (D X FIELD NEW) ANY (F) FIX
	   (C) <OR FALSE CHANNEL> (MOD-USER) STRING
	   (TASK) <OR FALSE VECTOR>
	   (ACKN) <SPECIAL <OR ATOM FALSE>> (OBLIST) <SPECIAL LIST>)

    <REPEAT ()
	<COND (<NOT <SET C <OPEN "READ" "DSK:.BATCH;MODS <">>>	;"OPEN MODS FILE"
	       <RETURN .REWRITE-Q?>)				;"NONE (LEFT)"
	      (<AOSED? <8 .C>>			;"DELETE MODS OPEN WHEN ITS CRASHED"
	       <BATCH-SCRIPT "Deleting AOSed MODS file on channel " .C>
	       <CLOSE .C>
	       <RENAME "MODS" <QUOTED <8 .C>> "DSK" ".BATCH">)
	      (<AND <SET D <READ .C <>>>		;"VALID MODS FILE?"
		    <CLOSE .C>
		    <TYPE? .D VECTOR>
		    <SET X <MEMQ TASK-ID-NUMBER .D>>	;"GET TASK DESCRIPTOR"
		    <G=? <LENGTH .X> 2>
		    <DECL? <SET X <2 .X>> '<OR <LIST STRING STRING> FIX>>
		    <SET TASK <TASK-DESCRIPTOR .X T>>>

	       <SET WQ? <>>
	       <COND (<AND <SET X <MEMQ BY-WHOM-MODIFIED .D>> ;"NAME OF USER"
			   <G=? <LENGTH .X> 2>
			   <TYPE? <SET X <2 .X>> STRING>>
		      <SET MOD-USER .X>)
		     (ELSE <SET MOD-USER "UNKNOWN">)>

	       <BATCH-SCRIPT 100 "Modifying task " <TASK-ID-NUMBER .TASK>
			     " for " .MOD-USER>

	       <REPEAT	()				;"MODIFY THE TASK"
		   <COND (<L? <LENGTH .D> 2> <RETURN T>)>
		   <BATCH-SCRIPT 0 "    " <SET FIELD <1 .D>> "  " <SET NEW <2 .D>>>
		   <COND (<AND <MEMQ .FIELD ,TASK-FIELDNAMES>
			       <NOT <MEMQ .FIELD ,INDIRECT-MOD>>>
			  <SET F ,.FIELD>
			  <PUT .TASK .F .NEW>
			  <SET WQ? <OR .WQ? <MEMQ .FIELD ,AB-FIELDS>>>)
			 (<SET X <MEMQ .FIELD ,MODIFIER-TABLE>>
			  <APPLY ,<2 .X> .NEW .TASK .MOD-USER>
			  <SET WQ? <OR .WQ? <MEMQ .FIELD ,AB-FIELDS>>>)
			 (ELSE
			  <BATCH-SCRIPT 200 "BUM MODS REQUEST:  "
					.FIELD " " .NEW
					", PUNTING REST OF MODS FILE">
			  <RETURN <>>)>
		   <SET D <REST .D 2>> >

	       <SET REWRITE-Q? <OR .REWRITE-Q? .WQ?>>
	       <COND (.ACKN
		      <ACKNOWLEDGE .TASK
				   .ACKN
				   <STRING "By " .MOD-USER>>)>
	       <WRITE-TASK .TASK .WQ?>
	       <RENAME "MODS" <8 .C> "DSK" ".BATCH"> )

	      (ELSE			;"FILE HAD BAD STUFF IN IT"
	       <BATCH-SCRIPT "Deleting bad MODS file containing " .D " on channel " .C>
	       <CLOSE .C>		;"DELETE IT! "
	       <RENAME "MODS" <8 .C> "DSK" ".BATCH">)> >>


<DEFINE AOSED? (FNAME2)				;"OK IS DIGITS FOLLOWED BY SPACES"
   #DECL ((VALUE) <OR ATOM FALSE> (FNAME2) STRING)
   <PROG ()
	 <COND (<EMPTY? .FNAME2> <>)		;"EMPTY NOW IF ALL WERE DIGITS"
	       (<MEMQ <1 .FNAME2> "0123456789">	;"FIRST CHAR A(NOTHER) DIGIT?"
		<SET FNAME2 <REST .FNAME2>>	;"YEP, SKIP IT"
		<AGAIN>)
	       (<==? <1 .FNAME2> !\ >		;"A SPACE -- "
		<REPEAT ()			;"CHECK REST FOR SPACES ONLY"
		   <COND (<EMPTY? <SET FNAME2 <REST .FNAME2>>>	;"GOOD, ONLY SPACES"
			  <RETURN <>>)
			 (<N==? <1 .FNAME2> !\ >	;"NOPE, SOMETHING ELSE HERE"
			  <RETURN T>)> >)
	       (T)> >>				;"OTHER GARBAGE IN FILE NAME ..."

<DEFINE QUOTED (FNAME)
   #DECL ((VALUE FNAME) STRING)
   <MAPF ,STRING
	 #FUNCTION ((CHR)
		    #DECL ((CHR VALUE) CHARACTER)
		    <COND (<MEMQ .CHR " :;"> <MAPRET !\ .CHR>)>
		    .CHR)
	 .FNAME> >


<DEFINE READ-TASK (IDNUM
		   "AUX" (TASK %<>) C
			 (FILE <STRING "DSK:.BATCH;SPECS " <UNPARSE .IDNUM>>))
    #DECL ((IDNUM) FIX (TASK VALUE) <OR FALSE VECTOR>
	   (C) <OR CHANNEL FALSE> (FILE) STRING)
    <COND (<AND <SET C <OPEN "READ" .FILE>>
		<BATCH-SCRIPT 1 "Reading in task " .IDNUM>
		<SET TASK <READ-TASK-WITH-ACT .C>>
		<PUT .TASK ,TASK-ID-NUMBER .IDNUM>
		<CLOSE .C>>)
	  (<RENAME .FILE TO <STRING "DSK:.BATCH;BADDIE " <UNPARSE .IDNUM>>>
	   <AND .C <CLOSE .C>>)>
    <COND (.TASK <TASK-CHECK .TASK>)>>

<DEFINE READ-TASK-WITH-ACT READ-TASK-ACT (C)
	#DECL ((VALUE) <OR VECTOR FALSE> (C) CHANNEL
	       (READ-TASK-ACT) <SPECIAL ACTIVATION>)
	<READ-PUTAWAY ,TASK-TEMPLATE .C ,BQERR ,BATCHQ-OBL>>

<DEFINE BQERR ("TUPLE" STUFF)
   #DECL ((VALUE) ANY (STUFF) TUPLE)
   <BATCH-SCRIPT 100 "*   Bad specs/mods field: " !.STUFF>
   T>

<DEFINE INSERT-TASK (TSK "OPTIONAL" (SQ-N <WHICH-QUEUE .TSK>)
				    (SQ <NTH ,QUEUE .SQ-N>))
    #DECL ((TSK) VECTOR (SQ) LIST (VALUE) ANY (SQ-N) FIX)
    <REPEAT ()
	    <COND (<OR <L? <LENGTH .SQ> 2>
		       <TASK-TORDER .TSK <2 .SQ>>>
		   <PUTREST .SQ (.TSK !<REST .SQ>)>
		   <RETURN .TSK>)
		  (ELSE <SET SQ <REST .SQ>>)> >
    .TSK>


<DEFINE REMOVE-TASK (TSK "AUX" (Q ,QUEUE))
    #DECL ((TSK) VECTOR (Q) <VECTOR [REST LIST]>
	   (VALUE) ANY)

   <PROG ()
	 <COND (<EMPTY? .Q> <>)
	       (<REPEAT ((SQ <1 .Q>))
			#DECL ((SQ) LIST)
		        <COND (<L? <LENGTH .SQ> 2>
			       <RETURN <>>)
			      (<==? .TSK <2 .SQ>>
			       <PUTREST .SQ <REST .SQ 2>>
			       <RETURN T>)>
			<SET SQ <REST .SQ>>>)
	       (ELSE
		<SET Q <REST .Q>>
		<AGAIN>)> >>


<DEFINE FIND-NEXT-TASK (QN "AUX" (SUB-Q <REST <NTH ,QUEUE .QN>>) BT)
    #DECL ((VALUE BT) <OR FALSE VECTOR> (QN) FIX (SUB-Q) <LIST [REST VECTOR]>)

    <REPEAT ()
	<COND (<OR <EMPTY? .SUB-Q>	;"END OF Q OR TIME NOT RIPE FOR FIRST JOB?"
		   <NOT <TIME-YET? <SET BT <1 .SUB-Q>>>>>
					;"THEN ABANDON SEARCH IN THIS SUB-Q"
	       <COND (<1? .QN> <RETURN <>>)	;"TRY SUB-Q 1 (IF NOT ALREADY)"
		     (ELSE <RETURN <FIND-NEXT-TASK 1>>)>)
	      (<RUNNABLE-NOW? .BT>
	       <COND (<N==? <LENGTH .BT> ,AB-T-LENGTH>
		      <RETURN .BT>)
		     (<SET BT <TASK-DESCRIPTOR <TASK-ID-NUMBER .BT>>>
		      <RETURN .BT>)
		     (ELSE <SET SUB-Q <REST .SUB-Q>>)>)
	      (ELSE <SET SUB-Q <REST .SUB-Q>>)> >>

<DEFINE TIME-YET? (B-TASK "AUX" (RT <TIME-OF-NEXT-RUN .B-TASK>))
   #DECL ((VALUE) ANY (B-TASK) VECTOR (RT) <OR STRING LIST>)
   <OR <TYPE? .RT STRING> <PAST? .RT>>>


<DEFINE SOONEST-TIME ("OPTIONAL" (WHEN <NEXT-NIGHT>)
		      "AUX" (Q ,QUEUE)
			    TASK TASK-TIME)
   #DECL ((VALUE WHEN) LIST (Q) VECTOR
	  (TASK) <OR VECTOR FALSE> (TASK-TIME) <OR LIST STRING>)

   <REPEAT ()
	 <COND (<EMPTY? .Q> <RETURN .WHEN>)
	       (<SET TASK <FIRST-TASK-TO-RUN <1 .Q>>>
		<COND (<TYPE? <SET TASK-TIME <TIME-OF-NEXT-RUN .TASK>>
			      STRING>
		       <RETURN <DTNOW>>)
		      (<BEFORE? .TASK-TIME .WHEN>
		       <SET WHEN .TASK-TIME>)>)>
	 <SET Q <REST .Q>> >>

<DEFINE FIRST-TASK-TO-RUN (SUB-Q)
   #DECL ((VALUE) <OR FALSE VECTOR> (SUB-Q) LIST)
   <MAPF <>
	 #FUNCTION ((TSK) #DECL ((TSK) VECTOR)
		    <AND <RUNNABLE-THEN? .TSK> <MAPLEAVE .TSK>>)
	 <REST .SUB-Q>>>

<DEFINE RUNNABLE-THEN? (TSK "AUX" (TIME-OF-RUN <TIME-OF-NEXT-RUN .TSK>))
    #DECL ((VALUE) ANY (TSK) VECTOR
	   (TIME-OF-RUN) <OR <LIST LIST LIST STRING> STRING>)
    <AND <=? <TASK-STATE .TSK> "RUNNABLE">
	 <OR <NOT <NIGHT-RUN-SWITCH .TSK>>
	     <NIGHT? <COND (<TYPE? .TIME-OF-RUN STRING> <DTNOW>)
			   (<PAST? .TIME-OF-RUN> <DTNOW>)
			   (.TIME-OF-RUN)>> > >>

<DEFINE RUNNABLE-NOW? (TSK)
    #DECL ((VALUE) <OR ATOM FALSE> (TSK) VECTOR)
    <AND <=? <TASK-STATE .TSK> "RUNNABLE">
	 <OR <NOT <NIGHT-RUN-SWITCH .TSK>>
	     <NIGHT?>> >>

<DEFINE QUEUE-START ("AUX" (DSK-Q <OPEN "READ" ".BATCH;BATCHN QUEUE">)
			   (TSKS-IN-Q '()) (RUNNG '())
			   Q N QDATE)
    #DECL ((VALUE) <OR FALSE 'T> (Q QDATE) ANY (DSK-Q) <OR CHANNEL FALSE>
	   (N) FIX (TSKS-IN-Q RUNNG) LIST)
    <BATCH-SCRIPT 200 "Initializing queue">
    <PROG ()
    <COND (<AND .DSK-Q
		<SET Q <READ .DSK-Q <>>>
		<KEEP-IT? <SET QDATE <READ .DSK-Q <>>>>
		<TYPE? .Q VECTOR>
		<DECL? .Q '<VECTOR LIST [REST LIST]>>
		<==? <LENGTH .Q> ,NQUEUES>>
	   <CLOSE .DSK-Q>
	   <SETG QUEUE .Q>
	   <MAPF <>
		 #FUNCTION ((SQ)
		     #DECL ((SQ) LIST)
		     <MAPF <>
			   #FUNCTION ((TK) #DECL ((TK) VECTOR)
			     <SET TSKS-IN-Q (<TASK-ID-NUMBER .TK> !.TSKS-IN-Q)>
			     <AND <=? <TASK-STATE .TK> "RUNNING">
				  <SET RUNNG (<TASK-ID-NUMBER .TK> !.RUNNG)>>)
			   <REST .SQ>>)
		 .Q>
	   <SETG TASKS-IN-QUEUE .TSKS-IN-Q>
	   <RETURN>)>
    <COND (.DSK-Q
	   <CLOSE .DSK-Q>
	   <RENAME ".BATCH;BATCHN LOG" TO "OLDLOG >">)>
    <COND (<1? ,NQUEUES>
	   <SETG QUEUE [("All jobs")]>
	   <SETG TASKS-IN-QUEUE '()> )
	  (<==? ,NQUEUES 2>
	   <SETG QUEUE [("Short jobs") ("Unlimited jobs")]>
	   <SETG TASKS-IN-QUEUE '()> )
	  (ELSE
	   <SET N 0>
	   <SETG QUEUE
		 <IVECTOR ,NQUEUES
			  '(<STRING "Sub queue " <UNPARSE <SET N <+ .N 1>>>>)>>
	   <SETG TASKS-IN-QUEUE '()>)>>
    <MAPF <>
	  #FUNCTION ((ID) #DECL ((ID) FIX)
	      <TASK-DESCRIPTOR .ID T>)
	  .RUNNG>
    <UPDATE-QUEUE>
    <BATCH-SCRIPT "Queue contains tasks:  " ,TASKS-IN-QUEUE>
    <OR <NOT <ASSIGNED? QDATE>> <G? <DTDIFF (.QDATE ())> <* -30 24 60.0>>>;"
If no queue update in a month, system clock must be wrong => DON'T RUN TASKS.">

<DEFINE KEEP-IT? (CDATE)
   #DECL ((VALUE CDATE) ANY)
   <OR <N==? <DOW> 0>
       <NOT .CDATE>
       <NOT <DECL? .CDATE '<LIST FIX FIX FIX>>>
       <=? <1 <DTNOW>> .CDATE>>>

<DEFINE WRITE-TASK (TSK
		    "OPTIONAL" (Q-TOO? T)
		    "AUX" (TN <UNPARSE <TASK-ID-NUMBER .TSK>>)
			  (FN <STRING "DSK:.BATCH;_TASK_ " .TN>)
			  (FFN <STRING "DSK:.BATCH;SPECS " .TN>)
			  C)
    #DECL ((TSK) VECTOR (C) <OR FALSE CHANNEL>
	   (TN FN FFN) STRING
	   (VALUE Q-TOO?) ANY)

    <BATCH-SCRIPT 1 "Writing out task " <TASK-ID-NUMBER .TSK>>

    <RENAME .FN>
    <COND (<=? <TASK-STATE .TSK> "REMOVED">
	   <DELETE-FROM-DISK-Q .TSK>
	   <REMOVE-TASK .TSK>
	   <WRITE-QUEUE>
	   T)
	  (<SET C <OPEN "PRINT" .FN>>
	   <UNPUTAWAY-WRITE <REST ,TASK-FIELDNAMES> .TSK .C ,BQERR ,BATCHQ-OBL>
	   <RENAME .C .FFN>
	   <ITS-CALL "SAUTH" '![] .C <STRTOX <ORIGINATOR .TSK>>>
	   <CLOSE .C>
	   <AND .Q-TOO? <WRITE-QUEUE>>
	   T)
	  (ELSE
	   <BATCH-SCRIPT 200 "WRITE-TASK:  Can't open output file: "
			 <CHTYPE .C LIST>>
	   .C)>>


<DEFINE WRITE-QUEUE ("OPTIONAL" (Q2 <>)
		     "AUX" (OUTCHAN <OR .Q2 <OPEN "PRINT" "DSK:.BATCH;BATCHN _QUE_">>))
   #DECL ((VALUE) ANY (Q2 OUTCHAN) <OR CHANNEL FALSE>)

   <BATCH-SCRIPT 1 "Writing queue">
   <COND (.OUTCHAN
	  <PRINC !\[>
	  <MAPF <>
		#FUNCTION ((SQ)
		   #DECL ((SQ) LIST)
		   <TERPRI> <PRINC !\(> <PRIN1 <1 .SQ>>
		   <MAPF <>
			 #FUNCTION ((T-TSK)
			     #DECL ((T-TSK) VECTOR)
			     <COND (<==? <LENGTH .T-TSK> ,AB-T-LENGTH>
				    <TERPRI> <PRINC "  "> <PRIN1 .T-TSK>)
				   (ELSE
				    <TERPRI> <PRINC "  [">
				    <MAPF <>
					  #FUNCTION ((X)
					      #DECL ((X) ATOM)
					      <PRIN1 <NTH .T-TSK ,.X>>
					      <PRINC !\ >)
					  ,AB-FIELDS>
				    <PRINC !\]>)>)
			 <REST .SQ>>
		   <PRINC !\)>)
		,QUEUE>
	 <PRINC !\]>			<TERPRI>
	 <PRINC <1 ,START-TIME>>	<TERPRI>
	 <COND (<NOT .Q2>
		<RENAME .OUTCHAN "BATCHN QUEUE">
		<CLOSE .OUTCHAN>)>
	 T)
	(ELSE
	 <BATCH-SCRIPT 200 "WRITE-QUEUE --  Can't open output file: "
		       <CHTYPE .OUTCHAN LIST>>)>>


<DEFINE NIGHT? ("OPTIONAL" (DATE-TIME <DTNOW>)
		"AUX" (HOUR <1 <2 .DATE-TIME>>)
		      (DAY <DATE-DOW <1 .DATE-TIME>>))
    #DECL ((VALUE) ANY (DATE-TIME) <LIST LIST LIST STRING> (HOUR DAY) FIX)
    <OR <AND <L? .HOUR 8> <G=? .HOUR 1>> ;"Night is: between 1 am and 8 am"
	<==? .DAY 0>			 ;"  and Sundays"
	<AND <==? .DAY 1>		 ;"  and Mondays before 8 am"
	     <L? .HOUR 8>>
	<AND <HOLIDAY? <1 .DATE-TIME>> <G=? .HOUR 1>>	 ;"   and MIT holidays"
	<AND <HOLIDAY? <1 <DTADD .DATE-TIME ;"   and before 8, days after holidays"
				 '((1) ())> >>
	     <L? .HOUR 8>> >>


<DEFINE NEXT-NIGHT ("AUX" (DAY <DOW>))	 ;"returns the time of the next NIGHT?"
   #DECL ((VALUE) LIST (DAY) FIX)
   <COND (<OR <==? .DAY 6>		 ;"which starts at 0:00 on sundays"
	      <==? .DAY 0>		 ;"  and mondays"
	      <HOLIDAY?>		 ;"  and day after holidays"
	      <HOLIDAY? <1 <DTADD <DTNOW> '((1) ())>>> >
					 ;"  and holidays"
	  <DTADD '(() ()) '((1) ())>)
	 (ELSE <DTADD '(() ()) '((1) (1))>)>>	;"else at 1:00 tomorrow"



<DEFINE BATCHN ("OPTIONAL" (LOCAL-Q T) "AUX" C OLD (U '![0 0 0 0 0]))
   #DECL ((VALUE LOCAL-Q) ANY (C) <OR CHANNEL FALSE> (OLD) FIX (U) <UVECTOR [REST FIX]>)
    <COND (<OR <LOGGED-IN> <ITS-CALL "LOGIN" '![] <STRTOX ".BATCH"> 0>>	;"LOGIN IF DEMON"
	   <SETUP-ERROR-INTERRUPT-HANDLER>
	   <SNAME ".BATCH">
	   <COND (<NOT <GASSIGNED? BATCH-SCRIPT-LEVEL>>
		  <SETG BATCH-SCRIPT-LEVEL 2>)>
	   <COND (<NOT <GASSIGNED? NAME-OF-SCRIPT>>
		  <SETG NAME-OF-SCRIPT '[".BATCH;BATCHN LOG"]>)>
	   <COND (<TTY?> <DEBUG-MODE .LOCAL-Q>)
		 (ELSE <SETG L-NOISY <>> <NORMAL-MODE>)>
	   <ITS-CALL "SSTATU" .U>
	   <BATCH-SCRIPT CR "[ ******  Batch daemon up " <NOW> "  ******" CR
		"	ITS has been up for " </ <5 .U> 30> " seconds.">
	   <SETG START-TIME <DTNOW>>
	   <SETUP-SYSTEM-LOCATIONS>
	   <COND (<QUEUE-START>
		  <SETUP-INTERRUPT-HANDLERS>
		  <START-RUNNING>)
		 (T
		  <BATCH-SCRIPT "System clock must be wrong; no tasks will run.">)>
	   <BATCH-SCRIPT CR "Batch going down " <NOW> " ******* ]" CR>
	   <COND (<MEMBER ".BATCH;BATCHN LOG" ,NAME-OF-SCRIPT>
		  <SET OLD <INT-LEVEL 1000>>
		  <SET C <OPEN "READ" ".BATCH;BATCHN LOG">>
		  <ITS-CALL "SDMPBT" '![!] .C 1> ;"Don't tape-dump LOG, just OLDLOG.
					    (Also can tell whether daemon went down OK.)"
		  <CLOSE .C>
		  <INT-LEVEL .OLD>)>)
	  (ELSE				;"MUST BE AN EXTRA DEMON, SHOULD NOT BE HERE"
	   <COND (<SET C <OPEN "PRINT" "CLI:TAA HACTRN">>
		  <PRINC "Here I am, your extra daemon. You have
10 minutes to own me." .C>
		  <CLOSE .C>)>
	   <SLEEP <* 10 60>>)>	;"HANG AROUND FOR SOMEONE TO SEE (& NOT BURN CPU)"

   <COND (<TTY?>
	  "That's All, Folks")
	 (ELSE
	  <LOGOUT>
	  <PRINT "Logout failed -- hanging">
	  <HANG>)> >


<DEFINE LOGGED-IN ("AUX" (U <UNAME>))
   #DECL ((VALUE) ANY (U) STRING)
   <OR	<L? <LENGTH .U> 3>
	<N==? <1 .U> !\_>
	<N==? <2 .U> !\_>
	<N==? <3 .U> !\_>>>


<DEFINE SAVER ("OPTIONAL" (PERMANENT <>)
	       "AUX" (SAVVY <SAVE ".BATCH;BATCHN NSAVE" <>>))
	#DECL ((SAVVY) STRING (PERMANENT) ANY)
	<COND (<=? .SAVVY "SAVED">
	       <COND (.PERMANENT
			<RENAME ".BATCH;BATCHN SAVE">
			<RENAME ".BATCH;BATCHN NSAVE" TO ".BATCH;BATCHN SAVE">)>
"BATCH READY --	INVOKE <BATCHN> TO START
		<SAVER permanent?> TO CREATE SAVE FILE")
	      (<=? .SAVVY "RESTORED">
	       <COND (<TTY?> "BATCH READY -- INVOKE <BATCHN> TO START")
		     (ELSE
		      <SETG L-NOISY <>>
		      <BATCHN>)>)
	      (ELSE .SAVVY)>>


<DEFINE DELETE-FROM-DISK-Q (TASK
			    "AUX" (ID <TASK-ID-NUMBER .TASK>)
			    CH
			    (LAST1 <OPEN "READ" "DSK:.BATCH;SPECS >">)
			    (U '![0]) (LASTL <AND .LAST1 <ITS-CALL "FILLEN" .U .LAST1>>)
			    (LAST <AND .LAST1 <PARSE <8 <CLOSE .LAST1>>>>))
   #DECL ((VALUE) ANY (LAST) <OR FALSE FIX> (TASK) VECTOR (ID) FIX
	  (CH LAST1) <OR CHANNEL FALSE> (U) <UVECTOR FIX> (LASTL) <OR FALSE ATOM>)

   <COND (<OR <NOT .LAST> <==? .ID .LAST>>
	  <AND .LASTL
	       <G? <1 .U> 9>
	       <SET CH <OPEN "PRINT" "SPECS" <UNPARSE .ID> "DSK" ".BATCH">>
	       <PRIN1 '[] .CH>
	       <CLOSE .CH>>)
	 (ELSE
	  <RENAME "SPECS" <UNPARSE .ID> "DSK" ".BATCH">)>>

<DEFINE CHANGE-TASK-TYPE (NEW-TYPE TASK HUMAN "AUX" OLDQN NEWQN)
    #DECL ((VALUE) ANY (NEW-TYPE HUMAN) STRING
	   (TASK) VECTOR (OLDQN NEWQN) FIX)

    <COND (<N=? <TASK-TYPE .TASK> .NEW-TYPE>
	   <SET OLDQN <WHICH-QUEUE .TASK>>
	   <PUT .TASK ,TASK-TYPE .NEW-TYPE>
	   <SET NEWQN <WHICH-QUEUE .TASK>>
	   <COND (<N==? .OLDQN .NEWQN>
		  <REMOVE-TASK .TASK>
		  <INSERT-TASK .TASK .NEWQN>)>)>
    T>

<DEFINE CHANGE-STATE (NEWSTATE TASK HUMAN
		      "AUX" ACKN (OLD-STATE <TASK-STATE .TASK>))
    #DECL ((NEWSTATE OLD-STATE HUMAN) STRING
	   (ACKN) ATOM (TASK) VECTOR (VALUE) ANY)

   <COND (<=? .OLD-STATE .NEWSTATE>)
	 (<=? .NEWSTATE "REMOVED">
	  <PUT .TASK ,TASK-STATE "REMOVED">
	  <SET ACKN IF-REMOVED-FROM-QUEUE>)
	 (<=? .NEWSTATE "RUNNING">
	  <BATCH-SCRIPT "Modification to running state attempted on task "
			<TASK-ID-NUMBER .TASK>
			" by " .HUMAN>)
	 (<AND <=? .OLD-STATE "RUNNING">
	       <N=? .NEWSTATE "RUNNABLE">>
	  <TASK-ABORT .TASK .HUMAN .NEWSTATE>)
	 (ELSE
	  <PUT .TASK ,TASK-STATE .NEWSTATE>
	  <COND (<=? .NEWSTATE "RUNNABLE">
		 <SET ACKN IF-MADE-RUNNABLE>)
		(<SET ACKN IF-MADE-UNRUNNABLE>)> )> >


<DEFINE CHANGE-TIME-OF-NEXT-RUN (NEWTIME TASK HUMAN
				 "AUX" (OLD-TIME <TIME-OF-NEXT-RUN .TASK>))
    #DECL ((TASK) VECTOR
	   (VALUE) ANY (HUMAN) STRING
	   (OLD-TIME NEWTIME) <OR STRING LIST>)

   <COND (<N=? .NEWTIME .OLD-TIME>
	  <PUT .TASK
	       ,TIME-OF-NEXT-RUN
	       <COND (<TYPE? .NEWTIME STRING> <DTNOW>)
		     (ELSE <DTNORM .NEWTIME>)> >
	  <REMOVE-TASK .TASK>
	  <INSERT-TASK .TASK>)> >

<SETG DUMMY-FCN ,TIME>

<DEFINE TTY? ()
   #DECL ((VALUE) <OR FALSE ATOM>)
   <G=? <CHTYPE <USET %<> *2*> FIX> 0>>		;"SUSET .RTTY "

<ENDPACKAGE>
