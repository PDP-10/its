;;;-*-LISP-*-
;; These are the assembler DEC compatability pseudo-op directives.  If a
;; pseudo-op returns something non-nil, it is spliced into the code
;; the point where it occurs, just like any opcode (see aplogo;6502 >
;; for examples.) For prefix ops, the argument list is the list of either
;; (TOKLST) or STRING. During the evaluation of the forms, this atom will
;; be bound to the list of tokens or the string constructed from the 
;; remainder of the line on which the pseudo-op was encountered.
;; (def-pseudo-op <name> PREFIX (<TOKEN | STRING>)
;;                <forms>)
;; In the definition of infix ops, the (toklst) or string is the bound to the
;; remainder of line in the same manner; however, there is an additional
;; atom which is bound to the token which was the first token on the line.
;; In the case of ":" and "=", this is the label name.
;; (def-pseudo-op <name> INFIX  (<TOKLST | STRING> <atom>)
;;                <forms>)

(herald decpop)

(defvar silent-running-p)
(defvar *last-subtitle*)

(declare (fixsw t)
	 (special /. assem-ibase *assem-input-stream*)
	 (*expr assemble-code-line assem-symeval eval-expression)
	 (setq defmacros-for-compiling nil))

(eval-when (compile eval)
	   (or (get 'commac 'version) (load "klotz; commac"))
	   (or (get 'defdef 'version) (load "klotz;defdef")))

(defun do-ascii-string (string)		  ;|  "HELLO"   | => HELLO
       (do ((i 1 (1+ i))
	    (charlst)
	    (char (getcharn string 1) (getcharn string i)))
	   ((zerop char) (nreverse charlst))
	   (push char charlst)))

(def-pseudo-op /.ASCII PREFIX (STRING)
	(do-ascii-string string))

(def-pseudo-op /.ASCIZ PREFIX (STRING)
	(nconc (do-ascii-string string) (ncons 0)))

(def-pseudo-op /.BLKB PREFIX (TOKLST)
	       (do ((i (eval-expression toklst) (1- i))
		    (space () (cons 0 space)))
		   ((zerop i) space)))

(def-pseudo-op /.BLKW PREFIX (TOKLST)
	       (do ((i (eval-expression toklst) (1- i))
		    (space () (cons 0 space)))
		   ((zerop i) space)))

;(def-pseudo-op /.BYTE PREFIX (TOKLST)
;	(do ((lst (toklst) (comma-cdr toklst))
;	     (.....))))

(def-pseudo-op /.PAGE PREFIX (STRING)
	       (print-when-talkative string)
	       nil)

(def-pseudo-op /.TITLE PREFIX (STRING) 
	       (print-when-talkative string)
	       nil)

(def-pseudo-op /.PRINT PREFIX (STRING)
	     (princ string tyo) ;Must be important, so print it always.
	     (terpri tyo)
	     nil)

(def-pseudo-op /.RADIX PREFIX (TOKLST)
	       (setq assem-ibase (eval-expression toklst))
	       nil)

(def-pseudo-op /.SUBTTL PREFIX (STRING)
	       (print-when-talkative string)
	       (setq *last-subtitle* string)
	       nil)

(def-pseudo-op /.END PREFIX (STRING)
	       (print-when-talkative string)
	       (close *assem-input-stream*) ;This shouldn't really do this so directly.
	       '*EOF*)

(def-pseudo-op /.ISET PREFIX (STRING)
	       (selectq string
			(|6502| (load "klotz;6502")
				nil)
			(|TI9900| (load "tilogo;9900")
				  nil)
			(otherwise (aerror "Foo I never heard of a " string
					   "machine."))))

; Eval-Expression bashes its argument. If there are undefined labels encountered
; in the expression, they are not changed in the expression; however, a pointer
; to the expression is consed onto the forward-ref property of the undefined
; symbol if it is not already there.

(def-pseudo-op = INFIX (TOKLST label)
	       (cond ((eq label '/.) `(PC-IS-NOW ,(assem-set '/. (assem-symeval toklst))))
		     ((assem-defined-p label)
		      (aerror "Multiply defined equivalence: " label) nil))
	       (assem-set label (assem-symeval-or-eval TOKLST))
	       (handle-forward-references-for label)
	       nil)

(def-pseudo-op : INFIX (NIL label)
	       (cond ((assem-defined-p label) (aerror "Multiply defined label: " label) nil))
	       (assem-set label (assem-symeval '/.))
	       (handle-forward-references-for label)
	       nil)
