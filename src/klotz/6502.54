;;;-*-LISP-*-
; Here is the instruction set and addressing modes for the 6502.

(herald /6502)

(declare
 (*expr eight-bits-p eight-bits-or-defined-p assem-defined-p))

(eval-when (compile eval)
  (or (get 'defdef 'version) (load "klotz;defdef"))
  (setq ibase-save ibase
	ibase 16.
	status-+-save (status +))
  (sstatus + t))

; These are the 6502 addressing modes.
;  IMM - Immediate       ZP - Zero page
;  ZPX - Zero Page, X    ZPY - Zero Page, Y
;  ABS - Absolute        ABX - Absolute, X
;  ABY - Absolute, Y     INDX - (Indirect, X)
;  INDY - (Indirect) ,Y  REL - Relative
;  IMP - Implied         ACC - Accumulator
;  IND - Indirect
; Here is the format for DEFAMODE:
; (DEFAMODE <modename> <number of bytes total>
;           <pattern>
;           <form to be eval'ed.>)
;During the evaluation of the form, the bindings specified in the pattern are
;in effect. In addition, OP is bound to the opcode for the current instruction.
;The form should return a list like this (<opcode> [<arg1> [<arg2>]]).


(defamode IMM 2 (/# (VAL BYTE-OR-UNDEFINED))
  (list op (eval-expression val)))

(defamode ZP 2 ((VAL BYTE))
  (list op (eval-expression val)))

(defamode ZPX 2 ((VAL BYTE) /, X)
  (list op (eval-expression val)))

(defamode ZPY 2 ((VAL BYTE) /, Y)
  (list op (eval-expression val)))

(defamode ABS 3 ((VAL ANY-EXPRESSION))
  (let ((evaled-val (eval-expression val)))
    (list op (lo-8 evaled-val) (hi-8 evaled-val))))

(defamode ABX 3 ((VAL ANY-EXPRESSION) /, X)
  (let ((evaled-val (eval-expression val)))
    (list op (lo-8 evaled-val) (hi-8 evaled-val))))

(defamode ABY 3 ((VAL ANY-EXPRESSION) /, Y)
  (list op (eval-expression val)))

(defamode INDX 2 (/( (VAL BYTE) /, /X /) )
  (list op (eval-expression val)))

(defamode INDY 2 (/( (VAL BYTE) /) /, /Y)
  (list op (eval-expression val)))

(defamode ACC 1 (A)
  (list op))

(defamode IMP 1 ()
  (list op))

(defamode IND 3 (/( (VAL ANY-EXPRESSION) /) )
  (let ((evaled-val (eval-expression val)))
    (list op (lo-8 evaled-val) (hi-8 evaled-val))))

(defamode REL 2 ((VAL ANY-EXPRESSION))
  (list op (eval-expression `(< ,(assem-symeval '/.) - ,val >))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Here are the instructions for the 6502.
; The format is
; (defins <NAME> <CYCLES>
;	  (<MODE> <hex byte>)
;	  (<MODE> <hex byte>) ...)
; The last form returns a fixnum representing the opcode of the instruction.
; [Actually, ther had best be only one form - an atom and a fixnum at that.
; When we need things to be evaluated, I'll fix it.]
; IMM IMP ACC INDX INDY ZPX ZPY ABX ABY ZP ABS IND REL.
(defins ADC 0
  (IMM +69)
  (INDX +61)
  (INDY +71)
  (ZP +65)
  (ZPX +75)
  (ABS +6D)
  (ABX +7D)
  (ABY +79))

(defins AND 0
  (IMM +29)
  (ZP +25)
  (ZPX +35)
  (ABS +2D)
  (ABX +3D)
  (INDX +21)
  (INDY +31))

(defins ASL 0
  (ACC +0A)
  (ZP +06)
  (ZPX +16)
  (ABS +0E)
  (ABX +1E))

(defins BCC 0
  (REL +90))

(defins BCS 0
  (REL +B0))

(defins BEQ 0
  (REL +F0))

(defins BIT 0
  (ZP +24)
  (ABS +2C))

(defins BMI 0
  (REL +30))

(defins BNE 0
  (REL +D0))

(defins BPL 0
  (REL +10))

(defins BRK 0
  (IMP +00))

(defins BVC 0
  (REL +50))

(defins BVS 0
  (REL +70))

(defins CLC 0
  (IMP +18))

(defins CLD 0
  (IMP +D8))

(defins CLI 0
  (IMP +58))

(defins CLV 0
  (IMP +B8))

(defins CMP 0
  (IMM +C9)
  (ZP +C5)
  (ZPX +D5)
  (ABS +DD)
  (ABX +DD)
  (ABY +D9)
  (INDX +C1)
  (INDY +D1))

(defins CPX 0
  (IMM +C0)
  (ZP +E4)
  (ABS +EC))

(defins CPY 0
  (IMM +C0)
  (ZP +C4)
  (ABS +CC))

(defins DEC 0
  (ZP +C6)
  (ZPX +D6)
  (ABS +CE)
  (ABX +DE))

(defins DEX 0
  (IMP +CA))

(defins DEY 0
  (IMP +88))

(defins EOR 0
  (IMM +E6)
  (ZP +45)
  (ZPX +55)
  (ABS +4D)
  (ABX +5D)
  (ABY +59)
  (INDX +41)
  (INDY +51))

(defins INC 0
  (ZP +E6)
  (ZPX +F6)
  (ABS +EE)
  (ABX +FE))

(defins INX 0
  (IMP +E8))

(defins INY 0
  (IMP +C8))

(defins JMP 0
  (ABS +4C)
  (IND +6C))

(defins JSR 0
  (ABS +20))

(defins LDA 0
  (IMM +A9)
  (ZP +A5)
  (ZPX +B5)
  (ABS +AD)
  (ABX +BD)
  (ABY +B9)
  (INDX +A1)
  (INDY +B1))

(defins LDX 0
  (IMM +A2)
  (ZP +A6)
  (ZPY +B6)
  (ABS +AE)
  (ABY +BE))

(defins LDY 0
  (IMM +A0)
  (ZP +A4)
  (ZPX +B4)
  (ABS +AC)
  (ABX +BC))

(defins LSR 0
  (ACC +4A)
  (ZP +46)
  (ZPX +56)
  (ABS +4E)
  (ABX +5E))

(defins NOP 0
 (IMP +EA))

(defins ORA 0
  (IMM +09)
  (ZP +05)
  (ZPX +15)
  (ABS +0D)
  (ABX +1D)
  (ABY +19)
  (INDX +01)
  (INDY +11))

(defins PHA 0
  (IMP +48))

(defins PHP 0
  (IMP +08))

(defins PLA 0
  (IMP +68))

(defins PLP 0
  (IMP +28))

(defins ROL 0
  (ACC +2A)
  (ZP +26)
  (ZPX +36)
  (ABS +2E)
  (ABX +3E))

(defins ROR 0
  (ACC +6A)
  (ZP +66)
  (ZPX +76)
  (ABS +6E)
  (ABX +7E))

(defins RTI 0
  (IMP +40))

(defins RTS 0
  (IMP +60))

(defins SBC 0
  (IMM +E9)
  (ZP +E5)
  (ZPX +F5)
  (ABS +ED)
  (ABX +FD)
  (ABY +F9)
  (INDX +E1)
  (INDY +F1))

(defins SEC 0
  (IMM +38))

(defins SED 0
  (IMM +F8))

(defins SEI 0
  (IMM +78))

(defins STA 0
  (ZP +85)
  (ZPX +95)
  (ABS +8D)
  (ABX +9D)
  (ABY +99)
  (INDX +81)
  (INDY +91))

(defins STX
  (ZP +86)
  (ZPY +96)
  (ABS +8E))

(defins STY
  (ZP +84)
  (ZPX +94)
  (ABS +8C))

(defins TAX 0
 (IMP +AA))

(defins TAY 0
 (IMP +A8))

(defins TSX 0
 (IMM +BA))

(defins TXA 0
 (IMM +8A))

(defins TXS 0
 (IMM +9A))

(defins TYA 0
 (IMM +98))

(eval-when (compile eval)
  (setq ibase ibase-save)
  (sstatus + status-+-save))
