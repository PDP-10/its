Date: Thu, 3 Sep 87 00:47:46 PDT
From: ehl%dewey.SOE.Berkeley.EDU at jade.berkeley.edu (Ed Lay)
To:   boxer-port%dewey.soe.Berkeley.EDU at jade.berkeley.edu
Re:   sprite graphics times

I moved the recursive calls to modified outside of the eval and square
now takes 0.56 seconds (after which it pauses for another .5 second to
handle all of the queued upo calls to modified.

ed

Date: Wed, 2 Sep 87 20:59:14 PDT
From: disessa%cogsci.Berkeley.EDU at jade.berkeley.edu (Andy diSessa)
To:   ehl%dewey.SOE.Berkeley.EDU at jade.berkeley.edu
cc:   boxer-port%dewey.SOE.Berkeley.EDU at jade.berkeley.edu
Re:   Sprite Graphics

My toshiba runs Logo at about 50 turtle commands per second (fd 1 rt 1
counts as two), and LCSI Logo on the mac runs about 40.  Looks like we
have the usual order of magnitude to make up to get into reasonable
range.  30% via pcl code doesn't sound like much of a solution.  Is
this still the interpreter, or is it really the t.g.  commands that
are slow?  It's hard to imagine its in the t.g.  commands.

--Andy

Received: from jade.berkeley.edu (TCP 20010104011) by AI.AI.MIT.EDU  2 Sep 87 06:24:38 EDT
Received: from dewey.soe.berkeley.edu
	by jade.berkeley.edu (5.54 (CFC 4.23)/1.16.16)
	id AA27518; Wed, 2 Sep 87 03:19:22 PDT
Received: by dewey.soe.berkeley.edu (5.51/SMI-3.0DEV3.7)
	id AA00937; Wed, 2 Sep 87 03:18:30 PDT
Date: Wed, 2 Sep 87 03:18:30 PDT
From: ehl%dewey.SOE.Berkeley.EDU@jade.berkeley.edu (Ed Lay)
Message-Id: <8709021018.AA00937@dewey.soe.berkeley.edu>
To: boxer-port%dewey.soe.Berkeley.EDU@jade.berkeley.edu
Subject: Sprite Graphics


I have sprite graphics working in the new boxer along with the trigger
stuff.  It's still horribly slow but getting better (down from 3 seconds 
for square 30 to 2 seconds (the old implementation takes .6 seconds)).

Almost running on the Sun as well (some problems with the different bitmap
representations in the underlying window system).

Stuff left to do includes:
get the shape box to work
speed up !!
Right now, the triggers are calling the evaluator recursively which is
breaking it. (May need to wait for Leigh to fix this one)

I meter'd the square and found that it was spending close to 30 % of the 
time inside of PCL stuff.  Block Compile Meta Class may be of some use here.

ed

Date: Mon, 21 Nov 88 20:05:15 PST
From: ehl%SOE.Berkeley.EDU@jade.berkeley.edu (Edward Lay)
Message-Id: <8811220405.AA24546@dewey.soe.berkeley.edu>
To: disessa%cogsci.Berkeley.EDU@jade.berkeley.edu
Subject: Re:  telling input parameters
Cc: klotz@ai.ai.mit.edu

Leigh, the background is that Andy wants a procedure (called move) that
transfers the bindings of one box into another box and he can't because 
we aren't looking up variables inside of virtual copies

	Date: Mon, 21 Nov 88 19:56:36 PST
	From: disessa@cogsci.berkeley.edu (Andy diSessa)
	Subject:  telling input parameters
	
		you need port flavored input to move or else the "to" variable
		referred to in the else clause of the "if" line will be
		referring to a COPY of "to" and will refer to separate copies
		for each frame in the recursion.
	
	Yes, but I don't care if it is a copy.  The MUTATED copy gets passed
	on to the next recursion of move, Right?  The thing that gets returned
	is a mutated copy of a mutate copy of ..., and that's what I intended.
	I know the bug you mean (I think) and I don't think this is an
	instance of it.  I am not intending to mutate the thing that supplied
	input, only the input that I get before I pass it on for more mutation.

ok, I see.  The problem is that binding information inside of
virtual copies is not implemented because we couldn;t figure out
a good way to do it without slowing other things down.  Perhaps the
lisp error is something Leigh put in.  We sent mail about another aspect 
of this problem last week.  The bug was that named subprocedures inside
a shape were not available.  I think the easiest work around is to
mutate the original (it is likely to be much faster than the variable
lookup inside of virtual copy).  The initial implementation (not curently
installed apparently) for looking up variables inside of VC's loops
through the items of each row of the VC looking for named boxes.

ed

Date: Thu, 5 Jan 89 07:46:39 EST
From: hal@murren.ai.mit.edu (Hal Abelson)
Message-Id: <8901051246.AA01672@murren.ai.mit.edu>
To: klotz@ORION.AI.MIT.EDU
Cc: adis@dewey.soe.berkeley.edu, ehl@dewey.soe.berkeley.edu
In-Reply-To: Leigh L. Klotz's message of Thu, 5 Jan 89 04:56:51 est <8901050956.AA08106@orion>
Subject: lexical dynamic boxer
Reply-To: hal@zurich.ai.mit.edu


I remember talking about this way to gewt lexical scoping long ago,
maybe even with you, certyainly with Andy.  But, sure, go ahead and
attribute it to every one you can -- the more people you attribute an
idea to, the more true it is, right?


Date: Wed, 4 Jan 89 22:41:32 est
From: klotz@ORION.AI.MIT.EDU (Leigh L. Klotz)
Message-Id: <8901050341.AA07891@orion>
To: adis@dewey.soe.berkeley.edu, ehl@dewey.soe.berkeley.edu,
        hal@ORION.AI.MIT.EDU
Cc: klotz@ai.ai.mit.edu
Subject: TOP SECRETE; DO NOT DISSEMINATE

In talking to people about Boxer and in writing my thesis, I am
beginning to find choice of basing Boxer on Logo syntax harder and
harder to defend:

  A. It has problems.
    1. The user can't distinguish procedures from data by looking the syntax of a program.

    2. The interpreter can't distinguish procedures from data by looking
       at the syntax of a program.

    3. The compiler packed up its bags and went home ages ago.

  B. We haven't given the syntax much though except for the following points:
    1. Prompts, which don't quite work.
    2. No parentheses (use boxes instead)
    3. No variable arguments (but maybe we need them).

What would you guys think about thinking hard about some new Boxer syntax?
It needn't be something really different -- I would hope to be able
implement it in my current evaluator.  But maybe with some concerted thinking
about the issues in B we can solve the problems in A.

Does this seem to be a reasonable thing for me to spend at least a
couple of weeks on in Berkeley?

Leigh.

