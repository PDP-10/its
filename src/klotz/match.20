;-*-LISP-*-
;winning simple pattern matcher for parsing losing assembler
;expressions.

;the idea is this. our syntax is roughly like that of winston's
;pattern matcher (the most obvious syntax possible). There is a target
;list and a candidate list. The candidate is the list that is expected
;to fit the pattern; the target is the pattern specification. We only
;match top-level for this application.

;the output of the pattern matcher is T if both inputs were nil, a nil
;if the match fails, and an alist if a match with non-nil target
;succeeded.

;a target is nil, or a list made up of lists and/or atoms. A null
;target will be matched only by a null candidate. Any other target
;will be matched only by a candidate whose members match the target's
;members. To determine if the first member of a candidate matches the
;first member of a target, we use the following rules:
;if the target's first member is an atom, it will match only an atom
;that is eq to it.
;if the target's first member is a two-member list beginning with the
;atom >, it will match any object that is the first member of the
;candidate. In addition, if the entire match succeeds, an alist is
;returned, one of whose members will be the cons of the first member
;of the target and the other the first member of the candidate.
;If the first member of the target is a two-member list beginning with
;the atom *, it will match the first object in the candidate, and all
;succeeding objects until the next member of the target successfully
;matches the next member of the candidate. The alist returned will
;have as one of its members the cons of the second member of the first
;member of the target and a list of all the objects it matched.
;If the target's first member is a list beginning with either the
;symbol > or *, and its second member is an atom, and its third member
;is a predicate that will return t or nil when given an argument of
;the match that was found for that target-atom and candidate, a match
;will first be attempted as above; if it succeeds, the predicate will
;be apply'ed to the target and candidate. If the predicate returns
;non-nil, the match will have succeeded. To determine if the entire
;match has succeeded, we repeat the above procedure on the target and
;candidate, each time removing the members of each that have matched,
;until the target is nil or the candidate is nil. If exactly one of
;the target or candidate is nil at this point, the match will lose and
;nil will be returned. If both are nil, and the alist is non-nil, it
;is returned. If both are nil and the alist is nil, T is returned.

#M(herald match)

(defmacro pred-lose? (match assoc)
	  `(cond ((null (cadr ,match)))
		 ((not (funcall (cadr ,match)
				,assoc))
		  (*throw 'Lost nil))))

(defun match (target candidate)
  (*catch 'Lost
	  (do ((match (car target) (car target))
	       (result))			;the list * saves its result in
	      ((or (null target)
		   (null candidate))
	       (cond (target nil)	;if one of target, candidate
		     (candidate nil)	;non-nil, return nil
		     (t (or result t))))
	    (*catch 'Win
		    (progn
		      (and (atom match)
			   (cond ((eq match (car candidate))
				  (setq target (cdr target)
					candidate (cdr candidate))
				  (*throw 'Win nil))
				 (t (*throw 'Lost nil))))
		      (and (eq (car match) '>)
			   (progn
			     (pred-lose? match (car candidate))
			     (push (car candidate) result)
			     (setq target (cdr target)
				   candidate (cdr candidate))
			     (*throw 'Win nil)))
		      (and (eq (car match) '*)
			   (progn
			     (cond ((null (cadr target))
				    (pred-lose? match candidate)
				    (push candidate result)
				    (setq target nil
					  candidate nil)
				    (*throw 'Win nil)))
			     (let ((foo (get-*-match (cadr target)
						     candidate)))
			       (and foo (progn
					  (pred-lose? match (car foo))
					  (push (car foo)result )
					  (setq target (cdr target)
						candidate (cdr foo))
					  (*throw 'Win nil)))
			       (*throw 'Lost nil)))))))))

(defun next-matches-p (next candidate)
       (cond ((null candidate))
	     ((atom next)
	      (eq next (car candidate)))
	     (t t)))

(defun get-*-match (next candidate)
       (do ((*-list (ncons (car candidate))
		    (push (car candidate) *-list))
	    (candidate (cdr candidate)
		       (cdr candidate)))
	   ((next-matches-p next candidate)
	    (cons (nreverse *-list) candidate))))
