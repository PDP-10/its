; -*- lisp -*-
;; No Tabs!!
;; No Capitals!!

(eval-when (eval compile)
   (and (status feature Multics)
        (or (status macro /#)
            (load ">udd>Mathlab>Lisp>sharpsign"))))

#+Multics (%include "lisp_prelude")
#+Multics (lisp-need-at-compile-time backquote defmacro let
                                     loop)
#+Multics (eval-when (eval compile load)
            (load ">udd>Student>EBarton>errmac"))
#+Multics (declare (*lexpr format))

#+ITS
(eval-when (eval compile)
   (or (get 'loop 'version)
       (load "lisp;loop"))
   (or (get 'errmac 'version)
       (load "eb;errmac")))

#-Multics (herald signal)

(eval-when (eval compile load)
  (and (status feature #+PDP10 complr #+Multics compiler)
       (special *signal-comm-var-1 *signal-comm-var-2
                *signal-return-value)))

(defmacro throw-to-signal-tag ()
   #+Multics '(throw nil signal)
   #+PDP10 '(*throw 'signal nil))

(defmacro catch-with-signal-tag (&rest forms)
   #+Multics `(catch (progn ,@ forms) signal)
   #+PDP10 `(*catch 'signal ,@ forms))

(defmacro condition-handlers (cvar handlers &rest forms)
   (or (eq (typep cvar) 'symbol)
       (er-error "~A supplied as CVAR not a symbol" cvar))
   (or forms (er-error "No forms given: (condition-bind ~A ~A)" cvar handlers))
   (let ((default-segment
            (if (memq (caar (last handlers)) '(t otherwise :otherwise))
                nil
                '((t (setq *signal-comm-var-2 *signal-comm-var-1)
                     (throw-to-signal-tag))))))
    `(let ((*signal-comm-var-1 nil)
           (*signal-return-value nil))
       (let ((*signal-comm-var-2 nil))
         (setq *signal-return-value (catch-with-signal-tag ,@ forms))
         ; A SIGNAL in the FORMS will set our *SIGNAL-COMM-VAR-2.
         ; We must arrange for a SIGNAL in the HANDLERS to set
         ; somebody else's.
         (setq *signal-comm-var-1 *signal-comm-var-2))
       (cond ((null *signal-comm-var-1) *signal-return-value)
             (t (let ((,cvar (car *signal-comm-var-1)))
                  (caseq ,cvar
                     ,@ (loop for (c-or-cs arglist . forms) in handlers
                         collect (or forms
                                     (er-error "Handler has no forms:~%; ~A"
                                                 c-or-cs))
                                `(,c-or-cs
                                   (let
                                    ((,arglist (cdr
                                       *signal-comm-var-1)))
                                   ,@ forms)))
                     ,@ default-segment)))))))

(defmacro signal (condition &rest args)
  `(progn (setq *signal-comm-var-2 (list ,condition ,@ args))
          (throw-to-signal-tag)))

(defmacro apply-signal (condition arglist)
  `(progn (setq *signal-comm-var-2 (cons ,condition ,arglist))
          (throw-to-signal-tag)))

(defun unclaimed-signal-handler (tag)
   (setq tag (car tag))
   (let ((condition (car *signal-comm-var-2))
         (args (cdr *signal-comm-var-2)))
     (cond ((and (eq tag 'signal) *signal-comm-var-2)
            (format #+PDP10 msgfiles #+Multics t
    "~&; A condition has propagated to top level without being handled.~%~
       ; It was signalled with arguments as follows:~%~
       ;     ~S ~S~%" condition (or args "()"))
            nil)
           (t ( #+PDP10 +internal-ugt-break
                #+Multics *internal-unseen-go-tag-break
                    tag)))))

(setq unseen-go-tag #'unclaimed-signal-handler)


