.comment -*- Mode:TEXT; -*-
.comment Menu of available lessons. It is important that  this file be updated
.comment every time a new lesson is added.
.document LESSON - Menu of available lessons (pretty much this stuff).
.tag LESSON						
Lesson LESSON, Version 1                            Victoria Pigman, 9/1/82

This is lesson LESSON. Included herein you will find a list of all the lessons
currently available to you, in the order in which we think it would be useful 
for you to go through them. This ordering is not hard and fast, but it is 
recommended that the first 5 be done in order.

INFO:
	How to use :STUDNT;XTEACH

INTRO:
	Basic lesson. If you're new, start with this lesson.

EVAL: 
	A very quick introduction to the Lisp evaluator. Just enough
	to keep you going until we can get you worked up to a more
	sophisticated discussion of what's really going on.

OBJECT:
	Information about Lisp objects. You need to know about this
	before you can proceed to the other lessons.

DOT:
	A description of the dotted pair formalism for Lisp
	lists. A good way of thinking about CAR, CDR, and CONS. 

SETQ:
	How to use the SETQ function to give variables values.

COND:
	Lesson on predicates and conditionals.

FIB:
	Lesson on defining functions using fibonacci and 
	factorial as examples.

MEMQ:
	Lesson on how to check for membership of elements in a list
	using the functions MEMQ and MEMBER.

ASSQ:
	Lesson on how to make Association lists and how to find 
	info in them using ASSQ and ASSOC.
.pause
LAMBDA:
	What is the magic thing called LAMBDA?

DEFUN:
	Lesson on use of DEFUN and various function types
	(how to write your own "magic" functions which 
	don't eval their arguments; how to write functions 
	which take a variable number of args)

OUTPUT:
	A description of some of the basic Lisp output functions:
	PRINC, PRIN1, PRINT, TYO, TERPRI, FLATC, and FLATSIZE.

INPUT:
	A description of some of the basic Lisp input functions:
	READ, TYI, and READCH.

PROG:
	Lesson on what PROGN does and how/why it came into
	being in the first place.
	Lesson on what PROG2 is and how to use it. Gives an
	example of how to implement stack operations PUSH and
	POP in Lisp.
	Lesson on the Maclisp PROG statement (which allows
	explicit GOTO's, RETURN's, and statement labels). 
	Former FORTRAN hackers are encouraged not to program
	with PROG until they have learned the more elegant
	constructs available (by which time hopefully they
	won't want to use PROG).

DO:
	A lesson in how to use the Maclisp iteration 
	primitive: DO.

TRACE:
	Advanced lesson: How to use the Lisp TRACE package to
	debug your programs.
.eof
