
	;LIST OPERATIONS
;STRING.
;	SO THAT PARENS WILL BE TREATED AS NORMAL CHARS.
STR:	HRLZI	A,STRF	;STRF==COMMTF
	IORM	A,(S)	;OR INTO POINTER ON SPDL.
	POPJ	P,


;LIST
;	CHANGE BACK SO THAT PARENS WILL BE TREATED SPECIALLY AGAIN.
LST:	HRLZI	A,STRF
	ANDCAM	A,(S)
	POPJ	P,


FIRST:
	POP	S,A
	PUSHJ	P,NEWOPS+1	;CHECK EMPTY,SET UP SRCBOT+NEWBOT
	JRST	FSTSNT	;NO, SENTENCE

	ILDB	C,A	;FIRST BYTE
F.1:	IDPB	C,B	;BOMBS HERE ON FULL WORKSPACE

	TRZ	F,NWF	;MEANS WORD.
	JRST	ENDSTR

FSTSNT:	TRZE	F,TF	;SET IF ARGUMENT IS STR.
	JRST	FSTR
	PUSHJ	P,OUTEL	;OUTPUT A SINGLE ELEMENT.
	JRST	ENDSTR
	JRST	ENDSTR

;FIRST OF A STRING.
;	ALL PARENTHESES ARE TREATED JUST AS CHARACTERS.
FSTR:	PUSHJ	P,OEL.ST	;OUTPUT ONE ELEMENT OF A STRING
	JRST	ENDSTR
	JRST	ENDSTR

BUTFIRST:
	POP	S,A
	PUSHJ	P,NEWOPS+1
	JRST	BTFSNT	;NOT A WORD OR EMPTY, IE SENTENCE
	TRZ	F,NWF
	IBP	A		;BUTFIRST OF WORD, SKIP OVER FIRST CHAR
	ILDB	C,A		;THIS IS THE SECOND CHAR
	JUMPN	C,BTFCOP	;MORE THAN ONE CHAR, COPY TO END OF STRING
EMPWRD:		;ANSWER IS THE EMPTY WORD
BTFEMW:	SKIPA A,[W+WORDF\EMPTYF,,0]

EMPSEN:		;ANSWER IS THE EMPTY SENTENCE
BTFEMP:	HRLZI	A,W+SENTF\EMPTYF	;POINTER TO EMPTY SENTENCE
	PUSH	S,A
	POPJ	P,

BTFSNT:	TRZE	F,TF	;SET BY NEWOPS IF ARG IS STR.
	JRST	BTFSTR
	PUSHJ	P,RELM	;THROW AWAY 1 ELEMENT.
	JRST	BTFEMP	;ONLY 1 ELEMENT IN LIST.
BTF.:	TRO	F,NWF	;MEANS SENTENCE

;COPY THE REST OF THE STRING.
BTFCP1:	ILDB	C,A
BTFCOP:
BTFCLO:	IDPB	C,B
	JUMPN	C,BTFCP1
	JRST	ENDST1	;STRING ALL COPIED.

;BUTFIRST OF A STRING.
;	TREAT PARENTHESES AS NORMAL CHARACTERS.
BTFSTR:	PUSHJ	P,REL.ST	;THROW AWAY ONE ELEMENT OF A STRING.
	JRST	BTFEMP	;ONLY HAS ONE ELEMENT.
	JRST	BTF.


;SOME ROUTINES I HAVEN'T CHECKED STILL USE BTFCL1.
BTFCL1:	PUSHJ	P,ENDSTR	;FINISH OFF THE STRING AND SET UP PTRS TO IT.
	POP	S,A
	HRRM	A,(S)	;NEW STRING, OLD TYPE
	POPJ	P,

LAST:
	POP	S,A
	PUSHJ	P,NEWOPS+1
	JRST	LSTSNT

LAST.0:	ILDB	D,A
	JUMPE	D,F.1	;CHARACTER IN C IS LAST.  OUTPUT IT.
	HRRZ	C,D	;SHOVE CHARACTER INTO C.
	JRST	LAST.0

LSTSNT:	TRZE	F,TF	;SET BY NEWOPS IF ARG IS STR.
	JRST	LAST.2
LAST.1:	PUSHJ	P,OUTEL	;OUTPUT A SINGLE ELEMENT.
	JRST	ENDSTR	;THAT WAS LAST ONE.
	MOVE	B,NEWBOT	;NOT LAST. RESET B TO STRART OF NEW STRING.
	JRST	LAST.1

;LAST OF STRING.
;	TREAT PARENTHESES AS REGULAR CHARACTERS.
LAST.2:	PUSHJ	P,OEL.ST	;OUTPUT ONE ELEMENT OF STRING.
	JRST	ENDSTR	;THAT WAS LAST.
	MOVE	B,NEWBOT	;NOT LAST. RESET B.
	JRST	LAST.2

BUTLAST:
	POP	S,A
	PUSHJ	P,NEWOPS+1
	JRST	BTLSNT

	ILDB	C,A	;BUTLAST OF WORD, COPY WORD AND CLOBBER LAST CHAR
	IDPB	C,B
	ILDB	C,A
	JUMPE	C,EMPWRD	;WAS ONE CHARACTER. ANSWER IS EMPTY WORD
	TRZ	F,NWF	;TO TELL ENDSTR THAT ANSWER IS WORD
	IDPB	C,B
	ILDB	C,A
	JUMPN	C,.-2	;COPY REST OF WORD
	DPB	C,B	;CLOBBER LAST CHAR
	JRST	ENDST1

;BUTLAST OF A SENTENCE.
;FIRST THOUGH, IS THE STRING INDICATOR ON
BTLSNT:	TRZE	F,TF
	JRST	BTLSTR	;STRING INDICATOR ON.  TREAT PARENS AS REGULAR CHARS

	PUSHJ	P,COPYEL	;COPY AN ELEMENT
	JRST	EMPSEN	;ONE ELEMENT SENTENCE.
BTL.1:	MOVE	E,B	;E POINTS TO WHERE LATEST ELEMENT IS
	IDPB	C,B	;STORE A SPACE
	PUSHJ	P,COPYEL
	JRST	BTL.2	;TTA WAS LAST ELEMENT
	JRST	BTL.1	;NOT LAST

BTL.2:	TRO	F,NWF	;INDICATES ANSWER IS SENTENCE
	MOVE	B,E	;RESET B TO BEFORE LAST ELEMENT
	JRST	ENDSTR

;ARG  IS A STRING.
;TREAT PARENS AS REGULAR CHARACTERS
BTLSTR:	PUSHJ	P,CEL.ST	;COPY ELEMENT OF STRING
	JRST	EMPSEN	;ONLY ONE ELEMENT
BTL.S1:	MOVE	E,B
	IDPB	C,B	;STORE SPACE
	PUSHJ	P,CEL.ST
	JRST	BTL.2	;THAT WAS LAST
	JRST	BTL.S1
;PUT WORD
;COPY ARGUMENT
;	COPY THE ENTIRE INPUT STRING.
PUTWRD:
CPYARG:
	TLNE	A,EMPTYF
PTW.9:	POPJ	P,
	HRLI	A,010700+W	;TURN A INTO BYTE POINTER
PTW.C:	ILDB	C,A	;NEXT INPUT CHAR
	JUMPE	C,PTW.9	;JUMP TO RETURN IF CHAR IS 0
	IDPB	C,B	;STORE CHAR
	JRST	PTW.C	;CONTINUE COPYING




;PUT SENTENCE.
;	COPY THE ENTIRE INPUT STRING, BUT ENCLOSE IT IN PARENS
PUTSNT:
	IDPB	G,B	;G HAS A (
	TLNE	A,EMPTYF	;IS ARG THE EMPTY SENTENCE
	JRST	PTS.9	;YES. THERE'S NOTHING TO COPY
	HRLI	A,010700+W	;TURN A INTO BYTE POINTER
PTS.C:	ILDB	C,A	;NEXT CHAR
	JUMPE	C,PTS.9
	IDPB	C,B	;PUT CHARACTER
	JRST	PTS.C	;KEEP ON COPYING

PTS.9:	IDPB	H,B	;H HAS A )
	POPJ	P,



;PUT AN ARGUMENT
;	GRAB AN ARGUMENT OFF THE STACK AND PUT IT IN THE NEW STRING
PUTARG:	POP	S,A
	TLNN	A,WORDF	;IS IT A WORD
	JRST	PUTSNT	;NO.
	JRST	PUTWRD	;YES
;;PUT AND JOIN INITIALIZATION
PTJ.IN:	TRZ	F,TF	;ENTERS HERE FOR 2 INPUTS
;EXCHANGE THE 2 ARGS ON THE STACK
	MOVE	A,-1(S)
	EXCH	A,(S)
	MOVEM	A,-1(S)

PTJ.1:	PUSHJ	P,NEWSTR	;ENTERS HERE FOR MULT INPUTS
	HRRZI	G,"(
	HRRZI	H,")
	HRRZI	L," 	;SPACE
	POPJ	P,



;CALLED WITH MULTIPLE INPUTS.
;	INITIALIZE AND SKIP RETURN
MULINP:	PUSHJ	P,REVARG	;REVERSE ARGUMENTS
	PUSHJ	P,PTJ.1	;INITIALIZE
	TRO	F,TF	;TO INDICATE THERE WERE MULTIPLE INPUTS
	MOVE	E,[W+WORDF,,DUMMYV]	;THIS IS WHAT MARKS THE BOTTOM OF STACK
	AOS	(P)	;SO RETURN WILL SKIP
	POPJ	P,

;JOIN
;	OUTPUT THE SENTENCE WHEREIN EACH ARGUMENT IS A SINGLE
;	ELEMENT OF THE SENTENCE
	PUSHJ	P,MULINP	;ENTERS HERE FOR MULTIPLE INPUTS. SKIPS
JOIN:	PUSHJ	P,PTJ.IN	;PUT AND JOIN INITIALIZATION

	TRO	F,NWF	;INDICATES SENTENCE. ANSWER ALWAYS SENTENCE.

J.NXT:	PUSHJ	P,PUTARG	;PUT AN ARG
	TRNE	F,TF	;GET READY TO GET NEXT ARG.
	JRST	J.MUL	;THERE ARE MULTIPLE ARGS

;ONLY 2 INPUTS.  PUT THE SECOND ONE NOW.
	IDPB	L,B	;PUT A SPACE
	PUSHJ	P,PUTARG
	JRST	ENDSTR

;THERE WERE MULTIPLE ARGS. GET THE NEXT ONE
J.MUL:	CAMN	E,(S)	;ALL ARG DONE?
	JRST	ENDSTR	;YES.
	IDPB	L,B	;PUT A SPACE
	PUSHJ	P,PUTARG	;PUT THE NEXT ARG
	JRST	J.MUL

;FIRST PUT
;	PUT THE FIRST N ARGUMENTS AS THE FIRST N ELEMENTS OF THE
;	LAST ARG.
	PUSHJ	P,MULINP	;CALLED WITH MULTIPLE INPUTS.  SKIPS
FPUT:	PUSHJ	P,PTJ.IN	;CALLED HERE IF CALLED WITH 2 INPUTS
	TRO	F,NWF	;ANSWER ALWAYS A SENTENCE
FP.NXT:	PUSHJ	P,PUTARG	;PUT THE NEXT ARG
	TRNE	F,TF	;WERRE THERE MULTIPLE INPUTS
	JRST	FP.MUL	;YES
	IDPB	L,B	;COPY SPACE
FP.9:	POP	S,A	;GET LAST ARGUMENT
	PUSHJ	P,CPYARG	;COPY IT
	JRST	ENDSTR

;THERE WERE MULTIPLE INPUTS. GET NEXT ARG
FP.MUL:	IDPB	L,B	;COPY SPACE
	CAMN	E,-1(S)	;SEE IF THIS IS LAST ARG
	JRST	FP.9	;YES. THIS LAST ONE IS JUST COPIED
	PUSHJ	P,PUTARG
	JRST	FP.MUL
;LAST PUT
;	PUT THE LAST N ARGS AS THE LAST N ELEMENTS OF THE FIRST ARG
	PUSHJ	P,MULINP	;ENTERS HERE FOR MULTIPLE INPUTS.SKIPS
LPUT:	PUSHJ	P,PTJ.IN	;ENTERS HERE FOR 2 INPUTS
	TRO	F,NWF	;ANSWER ALWAYS A SENTENCE
	POP	S,A	;FIRST ARG
	PUSHJ	P,CPYARG	;FIRST ARG IS JUST COPIED
	TRNE	F,TF	;WERE WE CALLED WITH ,MULTIPLE INPUTS
	JRST	LP.MUL	;YES. GET THE NEXT ARG
;ONLY TWO INPUTS.  PUT THE LAST INPUT
	IDPB	L,B	;COPY SPACE
	PUSHJ	P,PUTARG
	JRST	ENDSTR

;MULTIPLE INPUTS.
LP.MUL:	CAMN	E,(S)	;HAS LAST ARG BEEN PUT?
	JRST	ENDSTR	;YES
	IDPB	L,B	;PUT A SPACE
	PUSHJ	P,PUTARG
	JRST	LP.MUL


;ANYPUT
;	FIRST ARG IS A NUMBER.
;	SECOND IS AN ELEMENT.
;	THIRD IS A SENTENCE.
;	PUT THE ELEMENT AS THE NTH ELEMENT OF THE SENTENCE.
APUT:	MOVE	A,-2(S)	;THE NUMBER
	PUSHJ	P,NUMBRQ
	ERROR	PICKE2	;NOT A NUMBER
	SETZ	D,
	TRZ	F,TF
	HRRZ	A,-2(S)
	HRLI	A,010700+W
	PUSHJ	P,MNCONL	;CONVERT THE NUMBER TO BINARY
	SOSGE	D	;D HAS THE NUMBER
	ERROR	PICKE2	;NUMBER WAS <=0
	MOVE	E,D	;E IS NUMBER OF ELEMENTS TO BE COPIED BEFORE PUTTING THE ARG
	PUSHJ	P,PTJ.1	;INITIALIZE
	POP	S,A	;THE SENTENCE
	TLNE	A,EMPTYF	;IS IT EMPTY
	ERROR	PICKE3	;WHATEVER E IS, IT IS > THE LENGTH OF EMPTY
	HRLI	A,010700+W	;TURN A INTO BYTE POINTER

;HERE IS THE LOOP THAT COPIES ELEMENTS OF THE SENTENCE
AP.C:	SOJL	E,AP.PUT	;JUMP IF ALL DONE COPYING
	PUSHJ	P,COPYEL	;COPY AN ELEMENT
	JRST	AP.2	;RETURNS HERE IF THE END OF ARG REACHED
	IDPB	C,B	;COPY SPACE TOO
	JRST	AP.C	;CONTINUE COPYING

;THE END OF THE SENTENCE WAS REACHED WHILE COPYING
AP.2:	SOSL	E
	ERROR	PICKE3	;E WAS > LENGTH OF THE SENTENCE
	IDPB	L,B	;COPY SPACE

;NOW IS THE PART THAT PUTS THE ELEMENT
AP.PUT:	MOVE	E,A	;SAVE WHERE WE WERE IN SENTENCE
	PUSHJ	P,PUTARG	;PUT THE ARG
	MOVE	A,E	;RESET WHERE WE WERE IN SENTENCE
	LDB	C,A	;TO SEE IF END OF SENTENCE REACHED
	JUMPE	C,ENDSTR	;END ALREADY REACHED
	IDPB	L,B	;COPY SPACE
	JRST	BTFCP1	;COPY THRU' END.

LEVEL:	MOVE	A,(S)
	TLNE	A,EMPTYF
	POPJ	P,
	PUSHJ	P,NEWSTR
	SETZ	D,
	MOVE	A,(S)
	HRLI	A,010700+W
	TRZ	F,TF
LEVEL1:	ILDB	C,A
LEVEL3:	CAIN	C," 
LEVEL2:	JSP	D,LEVEL4
	CAIN	C,"(
	JRST	LEVEL5
	CAIE	C,")
	JRST	LVL3.5
LVL2.5:	ILDB	C,A
	CAIN	C,")
	JRST	LVL2.5
	JUMPE	C,LEVEL4
	CAIN	C," 
	JSP	D,LEVEL4
	HRRZI	D," 
	IDPB	D,B
	JSP	D,LEVEL3
LVL3.5:	SETZ	D,
LEVEL4:	TRON	F,TF
	CAIE	C," 
	IDPB	C,B
	JUMPN	C,LEVEL1
	PUSHJ	P,ENDST1
	POP	S,A
	HRRM	A,(S)
	POPJ	P,
LEVEL5:	ILDB	C,A
	CAIN	C,"(
	JRST	LEVEL5
	JUMPN	D,LEVEL3
	HRRZI	D," 
	TRNE	F,TF
	IDPB	D,B
	JSP	D,LEVEL3

MEMBER:	MOVE	A,-1(S)
	MOVE	B,(S)
	TLNE	A,EMPTYF
	JRST	MEMBR0
	TLNN	B,EMPTYF
	JRST	MEMBR1		;NEITHER EMPTY
	JRST	NOTM1		;A NOT EMPTY, B EMPTY
MEMBR0:	TLNE	B,EMPTYF
	JRST	ISMEM1		;BOTH EMPTY
MEMBR1:	TLNN	A,WORDF
	JRST	MBR1.1		;A NOT WORD
	TRZ	F,TF
	HRLI	A,010700+W
	SETZ	D,
	ILDB	C,A
	JUMPE	C,MEMBR2
	AOJA	D,.-2		;COUNT CHARACTERS IN A
MBR1.1:	TRO	F,TF
	HRLI	A,010700+W
	ILDB	C,A
	CAIE	C,"(
	JRST	MBR1.3
	HRRZI	D,1
MBR1.2:	ILDB	C,A
	JUMPE	C,NOTM1
	CAIN	C,"(
	AOJA	D,MBR1.2
	CAIE	C,")
	JRST	MBR1.2
	SOJG	D,MBR1.2
	JUMPL	D,ILLIST
	ILDB	C,A
	HRRZI	D,(E)
	JUMPE	C,MEMBR2
MBR1.3:	PUSHJ	P,NEWSTR
	MOVE	A,-1(S)
	HRLI	A,010700+W
	HRRZI	D,2
	HRRZI	C,"(
	IDPB	C,B
	ILDB	C,A
	CAIE	C,0
	AOJA	D,.-3
	HRRZI	C,")
	IDPB	C,B
	PUSH	P,D
	PUSHJ	P,ENDSTR
	POP	S,A
	MOVEM	A,-1(S)	
	SKIPA
;FALLS THROUGH

;FALLS IN
MEMBR2:	PUSH	P,D		;LENGTH OF A
	PUSH	P,D
	HRRZ	B,(S)
	HRLI	B,010700+W
MEMBR3:	MOVE	E,B
MEM3.0:	MOVE	D,-1(P)
	MOVEM	D,(P)
	SETZB	A,D
	MOVE	B,E
MEM3.1:	ILDB	C,B
	JUMPE	C,MEM3.2
	CAIN	C," 
	JUMPE	D,MEM3.2
	AOJA	A,.+1		;LENGTH
	CAIN	C,"(
	AOJA	D,MEM3.1
	CAIN	C,")
	SOJE	D,MEM3.2
	JUMPL	D,ILLIST
	JRST	MEM3.1
MEM3.2:	EXCH	B,E		;START IN B, END IN E
	CAME	A,(P)		;LENGTHS
	JRST	MEM3.4
	HRRZ	A,-1(S)
	HRLI	A,010700+W
MEM3.3:	SOSGE	(P)
	JRST	ISAMEM
	ILDB	C,A
	ILDB	D,B
	CAIN	C,(D)
	JRST	MEM3.3
MEM3.4:	MOVE	B,E
	ILDB	C,B
	CAIE	C," 
	MOVE	B,E
	JUMPE	C,NOTMEM
	JRST	MEMBR3
NOTMEM:	SUB P,[2,,2]
NOTM1:	POP	S,A
	POP	S,B
	JRST	ISFALS
ISAMEM:	SUB P,[2,,2]
ISMEM1:	POP	S,A
	POP	S,B
	JRST	ISTRUE

	PUSHJ	P,NRMLOP		;FOR MULTIPLE INPUTS
INTERS:	MOVE	A,-1(S)
	TLNE	A,EMPTYF
	JRST	INTEMP		;RESULT EMPTY
	MOVE	B,(S)
	TRZ	F,TF
	TLNE	B,EMPTYF
	JRST	INTEMP
	PUSH	P,[0]		;REL. FIRST OF A
	PUSH	P,[0]		;REL. NEXT OF A
	PUSH	P,[0]		;SIZE OF A
	PUSH	P,[0]		;COUNTER
	PUSH	P,[0]		;REL. NEXT OF B
	PUSHJ	P,NEWSTR
INTR.2:	HRLZI	A,010700+W
	HRR	A,-1(S)
	ADD	A,-3(P)		;NEXT A ELEMENT
	MOVE	C,A
	ILDB	D,C
	JUMPE	D,INTR.4		;NO MORE A ELEMENTS
	PUSHJ	P,GETELM
	MOVEM	C,-2(P)		;SIZE
	MOVEM	C,-1(P)		;COUNTER
	MOVE	A,-3(P)
	MOVEM	A,-4(P)		;NEW FIRST OF A
	HRLZI	C,010700+W
	HRR	C,-1(S)
	SUB	E,C
	MOVEM	E,-3(P)		;NEW NEXT OF A
	SETZM	(P)
INTR.1:	HRRZ	A,(S)
	HRLI	A,010700+W
	ADD	A,(P)		;REL. NEXT OF B
	MOVE	C,A
	ILDB	D,C
	JUMPE	D,INTR.2		;NO MORE IN B---ANY MORE A?
	PUSHJ	P,GETELM
	HRRZ	D,(S)
	HRLI	D,010700+W
	MOVE	A,(P)
	ADD	A,D		;BEGINNING OF B ELEMENT
	SUB	E,D		;NEXT B ELEMENT
	MOVEM	E,(P)

;FALLS IN
INTR.3:	CAME	C,-2(P)
	JRST	INTR.1		;DIFFERENT SIZES
	MOVEM	C,-1(P)		;COUNTER
	HRRZ	C,-1(S)
	HRLI	C,010700+W
	ADD	C,-4(P)		;START OF A ELEMENT
INT3.1:	SOSGE	-1(P)
	JRST	INT315		;ALL CHARACTERS SAME
	ILDB	D,A
	ILDB	E,C
	CAIE	D,(E)
	JRST	INTR.1		;NOT THE SAME
	JUMPN	D,INT3.1
INT315:	HRRZ	A,-1(S)
	HRLI	A,010700+W
	ADD	A,-4(P)
	MOVE	E,-2(P)
	TRON	F,NWF
	JRST	INT3.2
	HRRZI	C," 
	IDPB	C,B
INT3.2:	SOJL	E,INTR.2
	ILDB	C,A
	IDPB	C,B
	JRST	INT3.2
INTR.4:;	POP	P,A		;NEXT B
;	POP	P,A		;COUNTER
;	POP	P,A		;SIZE
;	POP	P,A		;NEXT A
;	POP	P,A		;FIRST A
	SUB P,[5,,5]
	POP	S,A		;B
	POP	S,A		;A
	TRO	F,NWF
	JRST	ENDSTR
INTEMP:	POP	S,A
	HRLZI	A,SENTF+EMPTYF
	MOVEM	A,(S)		;RETURN EMPTY
	POPJ	P,

COUNT:	MOVE	A,(S)	;THING TO COUNT
	MOVEI	B,0	;COUNT INITIALLY ZERO
	TLNE	A,EMPTYF	;IS IT EMPTY?
	JRST	COUNT2	;COUNT=0
	TLNN	A,WORDF	;IS IT A WORD?
	AOJA	B,COUNT1	;NO, IT IS A NON-EMPTY SENTENCE
	HRLI	A,440700+W
	MOVNI	B,1
	ADD	B,@A	;NOW NUMBER OF WORDS -1
	IMULI	B,5	;NUMBER OF CHARS IN ALL BUT LAST WORD
	ADD	A,@A	;NOW A POINTS AT LAST WORD
	ILDB	C,A	;WORD
	JUMPE	C,COUNT2
	AOJA	B,.-2

COUNT1:	HRLI	A,010700+W
	SETZ	D,
	TRZ	F,TF
COUNTL:	ILDB	C,A
COUNL1:	JUMPE	C,COUNT2
	CAIN	C,"(
	AOJA	D,COUN10
	CAIN	C,")
	SOJE	D,COUN12
	JUMPL	D,ILLIST
	CAIN	C," 
	JUMPE	D,COUN11
	TRO	F,TF
	JRST	COUNTL
COUN10:	TROE	F,TF
	CAIE	D,1
	JRST	COUNTL
COUN11:	TRZ	F,TF
	AOJA	B,COUNTL
COUN12:	ILDB	C,A
	JUMPE	C,COUNT2
	TRZ	F,TF
	CAIN	C," 
	AOJA	B,COUNTL
	AOJA	B,COUNL1

COUNT2:
	MOVE	A,B	;ARG TO SNM IN A
	PUSHJ	P,SNM
	MOVSI	C,W+WORDF
	HLLM	C,(S)
	JRST	BTFCL1

RANDOM:	MOVE C,[EXP 1000003]
	IMULB C,RANNO
	ADD C,CRTIM1
	TLZ C,400000	;MAKE IT +
	MULI	C,12
	ADDI	C,"0
	JFCL	10,.+1
	PUSHJ	P,NEWSTR
	IDPB	C,B
	JRST	ENDSTR

	PUSHJ	P,NRMLOP		;FOR MULTIPLE INPUT
UNION:	MOVE	A,-1(S)
	TLNE	A,EMPTYF
	JRST	UNYUNB		;RETURN B
	MOVE	B,(S)
	TLNE	B,EMPTYF
	JRST	UNYUNA		;RETURN A
	PUSHJ	P,NEWSTR
	MOVE	A,-1(S)
	HRLI	A,010700+W
	ILDB	C,A
	IDPB	C,B
	JUMPN	C,.-2
	POP	S,A
	MOVEM	A,(S)
	PUSH	P,[0]		;REL. START OF B
	PUSH	P,[0]		;REL. NEXT B
	PUSH	P,[0]		;SIZE OF B
	PUSH	P,[0]		;COUNTER
	PUSH	P,[0]		;REL. NEXT IN NEW STRING
UNYUN1:	HRRZ	A,(S)
	HRLI	A,010700+W
	ADD	A,-3(P)		;NEXT B ELEMENT
	MOVE	C,A
	ILDB	D,C
	JUMPE	D,UNYUN5		;END
	PUSHJ	P,GETELM
	MOVEM	C,-2(P)		;SIZE
	MOVEM	C,-1(P)		;COUNT
	MOVE	A,-3(P)
	MOVEM	A,-4(P)		;BEGINNING OF B ELEMENT
	HRLZI	C,010700+W
	HRR	C,(S)
	SUB	E,C
	MOVEM	E,-3(P)		;BEGINNING OF NEXT B ELEMENT
	SETZM	(P)
UNYUN2:	HRRZ	A,WTOP
	ADD	A,[010700,,1(W)]
	ADD	A,(P)		;BEGINNING OF ELEMENT
	MOVE	C,A
	ILDB	D,C
	JUMPE	D,UNYUN4		;CURRENT B ELEMENT NOT IN NEW
	PUSHJ	P,GETELM
	HRRZ	D,WTOP
	ADD	D,[010700,,1(W)]
	SUB	E,D
	MOVEM	E,(P)		;REL. BEGINNING OF NEW ELEMENT
	CAME	C,-2(P)
	JRST	UNYUN2		;DIFFERENT LENGTHS---NO MATCH
	MOVEM	C,-1(P)		;COUNTER
	HRRZ	C,(S)
	HRLI	C,010700+W
	ADD	C,-4(P)		;START OF B ELEMENT
;FALLS THROUGH

;FALLS IN
UNYUN3:	SOSGE	-1(P)
	JRST	UNYUN1		;MATCHED
	ILDB	D,A
	ILDB	E,C
	CAIE	E,(D)
	JRST	UNYUN2		;NO MATCH
	JRST	UNYUN3
UNYUN4:	HRRZ	A,(S)
	HRLI	A,010700+W
	ADD	A,-4(P)
	HRRZI	C," 
	DPB	C,B
UNY4.1:	SOSGE	-2(P)
	JRST	UNY4.2
	ILDB	C,A
	IDPB	C,B
	JRST	UNY4.1
UNY4.2:	SETZ	C,
	IDPB	C,B
	JRST	UNYUN1
UNYUN5:	POP	S,A
	SUB P,[5,,5]
	TRO F,NWF
	JRST	ENDSTR
UNYUNB:	POP	S,A
	MOVEM	A,(S)
	POPJ	P,
UNYUNA:	POP	S,A
	POPJ	P,

		;AT ENTRY, A IS BP TO CHARACTER BEFORE FIRST
		;D IS PARENTHESIS LEVEL COUNT
		;E IS CHARACTER COUNT
		;RETURN ENDING BP IN E, COUNT IN C

GETELM:	PUSH	P,[0]
	MOVEM	A,(P)
	SETZB	D,E
GTELM1:	ILDB	C,A
	JUMPE	C,GTELM4		;END OF STRING
	HRRZI	E,1(E)		;COUNT
	CAIN	C,"(
	AOJA	D,GTELM1
	CAIN	C,")
	SOJA	D,GTELM3
	CAIE	C," 
	JRST	GTELM1
	JUMPN	D,GTELM1
GTELM2:	HRRZI	C,-1(E)		;UNCOUNT TRAILING SPACE
	MOVE	E,A
	POP	P,A
	POPJ	P,
GTELM3:	JUMPG	D,GTELM1
	JUMPL	D,ILLIST
	ILDB	C,A
	CAIN	C," 
	AOJA	E,GTELM2
GTELM4:	LDB	D,[360600,,A]
	HRRZI	D,7(D)
	DPB	D,[360600,,A]
	CAIG	D,44
	AOJA	E,GTELM2
	HRRI	A,-1(A)
	TLZ	A,760000
	AOJA	E,GTELM2


;PICK ELEMENT.
;	OUTPUT THE NTH ELEMENT OF THE LIST.
;	N IS THE FIRST ARG.
;	THE LIST IS THE SECOND ARG.
PICKEL:	PUSHJ	P,P.R.IN	;PICK AND REMEL INITIAIZATION.
PICK.2:	SOJLE	L,PICK.3	;DECREMENT COUNT.
	PUSHJ	P,RELM	;THROW AWAY ELEMENT.
	ERROR	PICKE3	;COUNT BIGGER THAN THE LIST.
	JRST	PICK.2

;THE NEXT ELEMENT IS THE ONE TO BE PICKED.
PICK.3:	PUSHJ	P,OUTEL	;OUTPUT THIS ELEMENT.
	JRST	ENDSTR
	JRST	ENDSTR





;REMOVE ELEMENT.
;	REMOVE ELEMENT FROM THE INPUT LIST.
REMEL:	PUSHJ	P,P.R.IN	;PICK AND REMEL INITIALIZATION.
	TRO	F,NWF	;OUTPUT IS ALWAYS A SENTENCE.
	TRZ	F,TF	;SET TO ONE IF OUTPUT STRING NOT EMPTY.

REM.2:	SOJLE	L,REM.3	;DECREMENT COUNT.
	TRO	F,TF
	PUSHJ	P,COPYEL	;COPY ELEMENT
	ERROR	PICKE3	;COUNT > LIST.
	IDPB	C,B	;ALSO COPY THE SPACE AFTER ELEMENT
	JRST	REM.2

REM.3:	PUSHJ	P,RELM	;THIS ELEMENT IS REMOVED.
	JRST	REM.8	;IF RETURNS HERE, THEN END REACHED.
	JRST	BTFCP1	;OTHERWISE, COPY THROUGH END OF STRING.

;THE ELEMENT REMOVED WAS THE LAST OF THE STRING.
;SO GET RID OF THE SPACE THAT WAS COPIED AFTER LAST ELEMENT.

REM.8:	TRZN	F,TF	;SKIP IF OUTPUT STRING NOT EMPTY.
	JRST	BTFEMP
	DPB	C,B	;C HAS A ZERO.
	JRST ENDST1


;PICK AND REMEL INITIALIZATION.
;	SET UP BYTE POINTER TO LIST.
;	GET COUNT AND PUT IN REGISTER L.
P.R.IN:	MOVE	A,-1(S)
	PUSHJ	P,NUMARG	;TURN TO BINARY
	ERROR PICKE2		;NOT NUMBER
	JUMPG	D,.+2	;D HAS THE NUMBER IN BINARY.
	ERROR	PICKE2
	MOVE	L,D	;PUT COUNT IN L.
	POP	S,A
	TLNN	A,EMPTYF
	TLNN	A,SENTF
	ERROR	PICKE1
	TLNE	A,STRF	;IS ARG STRING. I.E. DO WE IGNORE PARENS.
	ERROR	PICKE1	;THAT IS AN ERROR.
	HRLI	A,010700+W
	POP	S,E	;THROW AWAY 1ST ARG.
	JRST	NEWSTR	;NEWSTR WILL POPJ TO ROUTINE THAT CALLED THIS ONE.

;REMOVE ELEMENT.
;	CALL WITH A = BYTE POINTER TO CHAR. BEFORE ELEMENT.
;	RETURNS WITH A = BYTE POINTER TO CHARACTER AFTRoER ELEMENT.
;	IT EXPECTS ELEMENTS TO END WITH SP OR 0.
;	IF NOT 0, RETURN SKIPS.
RELM:	SETZ	D,
RELM.1:	ILDB	C,A
	JUMPE	C,RELM.0

	CAIN	C," 
	JUMPE	D,RELM.9	;END OF ELEMENT.

	CAIN	C,"(
	AOJA	D,RELM.1

	CAIN	C,")
	SOSL	D
	JRST	RELM.1
	ERROR	BADLST	;TOO MANY )'S.

;REMOVE ELEMENT FOR STRINGS.
;	TREAT PARENTHESES AS NORMAL CHARACTERS.
REL.ST:	ILDB	C,A
	JUMPE	C,RELM.0	;END OF STRING REACHED.
	CAIE	C," 	;SPACE MARKS END OF ELEMENT.
	JRST	REL.ST

RELM.9:	AOS	(P)	;SO RETURN WILL SKIP.
RELM.0:	POPJ	P,



;COPY ELEMENT.
;	CALL WITH A = BYTE POINTER TO SOURCE STRING.
;	CALL WITH B = BYTE POINTER TO DESTINATION STRING.
;	RETURN SKIPS IF LAST CHAR. OF ELEMENT ISN'T 0.
COPYEL:	SETZ	D,
CELM.1:	ILDB	C,A	;NEXT CHAR.
	JUMPE	C,RELM.0	;0 ENDS ALL STRINGS.

	CAIN	C," 
	JUMPE	D,RELM.9	;JUMP IF ELEMENT ENDED.

	IDPB	C,B	;DEPOSIT CHAR.
	CAIN	C,"(
	AOJA	D,CELM.1	;INC. NUMBER OF PARENS.

	CAIE	C,")
	JRST	CELM.1
	SOJGE	D,CELM.1
	ERROR	BADLST	;TOO MANY )'S.

;OUTPUT ELEMENT
;	COPY AN ELEMENT FROM AN INPUT STRING
;	BUT DELETE BEGINNING AND ENDING PARENTHESES.
;	SET NWF TO 1 IF SENTENCE, TO 0 IF WORD.
OUTEL:	SETO	D,	;-1
	TRZ	F,NWF

OELM.1:	ILDB	C,A	;NEXT INPUT CHAR.
	JUMPE	C,RELM.0	;END OF STRING REACHED.

	CAIN	C," 
	JRST	OELM.3

	CAIN	C,")
	SOJL	D,OELM.1	;IF LESS THAN, THEN MATCHES 1ST (

	CAIE	C,"(
	JRST	OELM.2
	AOJE	D,OELM.1	;IF 0, THEN THIS IS OUTER (
	TRO	F,NWF

OELM.2:	IDPB	C,B
	JRST	OELM.1

OELM.3:	JUMPL	D,RELM.9	;IF < 0,THE PARENS MATCHED.
	JRST	OELM.2-1

;OUTPUT ELEMENT FROM STRING.
;	PARENTHESES ARE TREATED AS NORMAL CHARACTERS.
;	THIS ROUTINE ALSO COPIES ELEMENTS OF STRINGS.
OEL.ST:
CEL.ST:	TRZA	F,NWF	;OUTPUT ALWAYS A WORD.
OEL.S1:	IDPB	C,B
	ILDB	C,A
	CAIN	C," 	;SPACE MARKS END OF ELEMENT
	JRST	RELM.9
	JUMPN	C,OEL.S1
	JRST	RELM.0	;END OF STRING REACHED.




ILLIST:	ERROR BADLST
