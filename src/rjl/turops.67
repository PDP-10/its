
MOTOR:	PUSHJ P,NUMVAL
	PUSH P,E
	PUSHJ P,NUMVAL
	JUMPLE E,[ERROR .]
	CAILE E,5
	ERROR .
	SKIPE MOTORX
	JRST MOTOR1
	.SUSET [.RUNAM,,PDP6O+1]
	.OPEN CSC,PDP6O
	ERROR .
	MOVE A,[2400+CSC,,740001]
	.CBLK A,
	ERROR .
	SETOM MOTORX
	.CLOSE CSC,
MOTOR1:	MOVEI A,1
	.SLEEP A,
	SKIPE DISTAN
	ERROR .
	MOVEM E,MOTORN
	POP P,DISTAN
	JRST COMEX

MOTORN=340*2000
DISTAN=340*2000+1
	IFE TBOX,[
;THE ROUTINES TO DO THE TURTLE COMMANDS.

;WHICHTUR DETERMINES WHICH TURTLE IS IN USE.
;IF EITHER THE OLD TURTLE OR THE DISPLAY TURTLES ARE IN USE, IT
;JUMPS TO THE ADDRESS.  THOSE ADDRESSES ARE THE APPROPRIEATE PLACES
;THE PREVIOUSLY WRITTEN TURTLE ROUTINES.

DEFINE WHICHTUR ADDR
	IFN DFLAG,[
	HRRZ	B,TURT	;TELLS WHICH TURTLE IN USE
	CAIN	B,DTURTL	;THE 340 DISPLAY TURTLE IN USE.
	JRST	ADDR
]
	MOVE	B,TURT
	TLNN	B,OPENF	;IS THERE A LINE OPEN FOR TURTLE?
	ERROR TUNOLN
	HRRZS	B	;JUST KEEP THE PART THAT HAS WHICH TURTLE
	CAIE	B,NTURT
	JRST	ADDR
TERMIN

;AGET GETS ARGUMENT FOR TURTLE MOVE.  IF NEGATIVE, JUMPS TO ALTADD
DEFINE AGET ALTADD
	PUSHJ	P,NUMARG-1	;CONVERT ARG TO BINARY IN D.
	ERROR	ZERERR	;RETURNS HERE IF NON-NUMERIC
	JUMPL	D,ALTADD
TERMIN



;MOVETUR ISSUES THE MOVE COMMANDS FOR THE SMALL TURTLE.
;THE ARGUMENTS ARE THE TELETYPE CHARACTERS THAT ARE THE COMMANDS.
DEFINE MOVETUR C1,C2,C3
	MOVMS	D	;ABSOLUTE VALUE OF ARG.
	HRRZI	E,"C1
	HRRZI	G,"C2
	HRRZI	H,"C3
	JRST	TURMOV
TERMIN


;CONTUR ISSUES COMMANDS TO SMALL TURTLE THAT DO CONTROL THINGS LIKE 
;PENUP, PENDOWN, ETC.
DEFINE CONTUR C
	HRRZI	M,"!C!
	JRST	TURCON
TERMIN


;HERE ARE THE TURTLE COMMANDS.

FORWAR:	WHICHTUR FOR1
	AGET B1
F1:	MOVETUR C,K,S
BACK:	WHICHTUR BAC1
	AGET F1
B1:	MOVETUR @,H,P
LEFT:	WHICHTUR LEF1
	AGET R1
L1:	MOVETUR A,I,Q
RIGHT:	WHICHTUR RIG1
	AGET L1
R1:	MOVETUR B,J,R

PENUP:	WHICHTUR PU1
	CONTUR 8
PENDOW:	WHICHTUR PD1
	CONTUR 0
LAMPON:	WHICHTUR TUERR1
	CONTUR "
LAMPOF:	WHICHTUR TUERR1
	CONTUR !






WHISTL:	WHICHTUR WHI1
;TOOT TAKES AN ARGUMENT - NAMELY THE NUMBER OF TOOTS DESIRED.
	PUSHJ	P,NUMARG-1	;CONVERT ARG ON STACK TO BINARY
	ERROR	ZERERR	;NOT A NUMBER.
	PUSHJ	P,TURON
	HRRZI	E,"(	;TOOT CHARACTER
	HRRZI	G," 	;THIS LOSER NEEDS ANOTHER CHARACTER BETWEEN TOOTS.
	JRST	TOOT.1

;LOOP OUTPUTTING TOOTS (ARGH)
TOOT:	HRRZI	L,1
	MOVE	M,E
	PUSHJ	P,TUROUT	;CALL WITH L=COUNT, M=COMMAND CHARACTER
	HRRZI	L,1
	MOVE	M,G
	PUSHJ	P,TUROUT
TOOT.1:	SOJGE	D,TOOT	;D GOT ANSWER FROM NUMARG
	PUSHJ	P,TUROFF
	JRST	COMEX
î

TUERR1:	ERROR	RONGT1	;THERE ARE LAPMPS ONLY ON THE SMALL TURTLES.

;THIS PROGRAM OUTPUTS MOVE CHARACTERS TO THE SMALL TURTLE.
;CALL WITH E CONTAINING COMMAND FOR ONE STEP
;	G CONTAINIG CODE FOR TWO STEPS
;	H CONTAONING CODE FOR FOUR STEPS.

TURMOV:	PUSHJ	P,TURON	;TURN TURTLE ON.
	CAIGE	D,4	;D HAS NUMBER OF STEPS
	JRST	TURC.8

	CAIGE	D,12.
	JRST	TURC.3

	SUBI	D,12.	;IF D>12., THEN THERE WILL BE 12 STEPS USED TO
		;ACCELERATE AND DECELERATE.
	MOVE	B,D
	IDIVI	B,4	;QUOTIENT IS NUMBER OF 4-STEPS. IT IS IN B.
	IDIVI	C,2	;C GOT REMAINDER ABOVE.  QUO NOW IS NUMBER OF
		;ADDITIONAL 2-STEPS THERE ARE DUE TO REMAINDER.
	ADDI	C,2	;THERE ARE ALWAYS AT LEAST TWO 2-STEPS
	ADDI	D,2	;D GOT REMAINDER ABOVE.  SAME COMMENT AS FOR C.
;NOW OUTPUT THE ACCELERATING SEQUENCE: 2 1-STEPS, 2 2-STEPS.
	HRRZI	L,2
	MOVE	M,E
	PUSHJ	P,TUROUT
	HRRZI	L,2
	MOVE	M,G
	PUSHJ	P,TUROUT

;LOOP OUTPUTTING THE 4-STEPS.
	MOVE	L,B
	MOVE	M,H
	PUSHJ	P,TUROUT
	JRST	TURC.5

;PROGRAM JUMPS HERE IF FEWER THAN 12. STEPS SPECIFIED.
;THE ACCELERATION SEQUENCE IS JUST 2 2-STEPS.
;A TOTAL OF 4 STEPS ARE USED TO ACCELERATE AND DECELERATE.
TURC.3:	SUBI	D,4
	MOVE	C,D
	IDIVI	C,2	;C GETS QUOTIENT=# OF 2-STEPS
	ADDI	D,2	;D GOT REMAINDER ABOVE.  ALWAYS AT LEAST TWO 2-STEPS.
	HRRZI	L,2
	MOVE	M,E
	PUSHJ	P,TUROUT

;LOOP OUTPUTTING THE 2-STEPS.
TURC.5:	MOVE	L,C
	MOVE	M,G
	PUSHJ	P,TUROUT

;LOOP OUTPUTTING THE NUMBER OF 1-STEPS.
TURC.8:	MOVE	L,D
	MOVE	M,E
	PUSHJ	P,TUROUT
	PUSHJ	P,TUROFF	;TURN THE  TURTLE OFF.
	JRST	COMEX

;ROUTINE TO OUTPUT A CHARACTER TO TURTLE
TURCON:	PUSHJ	P,TURON	;TURN THE TURTLE ON.
	HRRZI	L,1
	PUSHJ	P,TUROUT
	PUSHJ	P,TUROFF	;TURN THE TURTLE OFF.
	JRST	COMEX


;TURN THE TURTLE ON.
;	OUTPUT CORRECT CHARCTER TO MINI-CONTROLLER.
TURON:	HRRZI	C,143	;TURN PRINTER OFF
	.IOT	TUOC,C
	HRRZI	C,151	;TURN TURTLE ON
	.IOT	TUOC,C
	POPJ	P,


;TURN THE TURTLE OFF.
TUROFF:	HRRZI	C,150	;TURN TURTLE OFF
	.IOT	TUOC,C
	HRRZI	C,142	;TURN PRINTER ON.
	.IOT	TUOC,C
	POPJ	P,


;TURTLE OUTPUT
;	OUTPUT CHARACTERS TO TURTLE.
;	CALL WITH CHARACTER IN M. AND COUNT IN L.
;	CALL WITH PUSHJ P,TUROUT (NOT TOUT.1)!!!!!!!
TOUT.1:	TLZE	F,BREAKF	;DID THE USER TYPE ^G?
	ERROR	BREAK
	.IOT	TUOC,M
TUROUT:	SOJGE	L,TOUT.1	;THIS IS ENTRY POINT!!!!
	POPJ	P,

FOR1:	JSP A,TURTLE
BAC1:	JSP A,TURTLE
LEF1:	JSP A,TURTLE
RIG1:	JSP A,TURTLE
PU1:	JSP A,TURTLE
PD1:	JSP A,TURTLE
WHI1:	JSP A,TURTLE
TURTLE:	SETZM SNULLS
	HRRZS A
	SUBI A,FOR1+1
	ADD A,B	;B HAS THE PART OF TURT THAT SPECIFIES WHICH TURTLE.
	MOVE B,(A)
	PUSH P,A
	TLNE B,TUARG
	PUSHJ P,NUCONV
	POP P,A
	TLNE B,TUSARG
	PUSHJ P,TUSCAL
	TLNN B,TUNULL
	JRST TURTL1
	MOVE D,NNULLS
	MOVEM D,SNULLS
TURTL1:	TRNE B,777400
	JRST (B)
	TLNN B,TUARG
	MOVEI E,1
	HRR H,B
	MOVEI B,NULLC
TURTL4:	MOVE C,SNULLS
	JUMPLE E,COMEX
	PUSHJ P,TURIOT
	EXCH H,B
	JUMPLE C,TURTL2
TURTL3:	PUSHJ P,TURIOT
	SOJG C,TURTL3
TURTL2:	EXCH H,B
	SOJA E,TURTL4
TUSCAL:	PUSH P,B
	MOVE G,A
	MOVE A,E
	PUSHJ P,FLOAT
	FMPR A,NTUCOM(G)
	FADR A,NTUCOM+NTUCOM(G)
	MOVE D,A
	PUSHJ P,FIX
	MOVE E,A
	PUSHJ P,FLOAT
	FSBR D,A
	MOVEM D,NTUCOM+NTUCOM(G)
	MOVE A,G
	POP P,B
	POPJ P,
TURIOT:	.IOT TUOC,H
	TLNE F,BREAKF
	ERROR BREAK
	POPJ P,

SMALLT:	HLLZ	A,TURT
	TLNE	A,TTYF	;TTYF IS 1 IF TURTLE ON TTY.
	SETOM	COF	;THE SMALL TURTLE REQUIRES THE CONTROLLER
	HRRI	A,NTURT	;INDICATES NEW, IE SMALL TURTLE
	JRST	BIGT.1

BIGTUR:	SETZM	COF	;THE BIGTURTLE CANNOT USE THE CONTROLLER.
	HLLZ	A,TURT	;LH OF TURT HAS TTYF IN IT.
	HRRI	A,OTURT	;INDICATES OLD, IE BIG TURTLE
BIGT.1:
IFN NOVA,[
	SKIPE	SNAPX
	ERROR	NVSNAP
]
	MOVEM A,TURT
IFN DFLAG,[
	SKIPE DISONF
	JRST TURTO
]	JRST COMEX
SETTUR:	CAIE H,(SIXBIT \TTY\)
	JRST SETTR1
NOTURT:
IFN NOVA,[
	SKIPE	SNAPX
	ERROR	NVSNAP
]
	.CLOSE TUOC,	;CLOSES TURTLE CHANNELS
	.CLOSE TUIC,
	HRLZI	C,TTYF+OPENF
	ANDCAM	C,TURT	;TURN OFF TTYF AND OPENF AND CLEAR RIGHT HALF
	SETZM	COF	;AND TURN OFF CONTROLLER.
	SKIPGE TOUCHA
	SETZM TOUCHA
	SETZM SEPTUR
	JRST COMEX

SETTR1:	MOVEI D,H
	PUSHJ P,GETFLN
	HRRI H,4
	MOVSS H
	.OPEN TUIC,H
	ERROR INVTTY
	HRLI H,5
	.OPEN TUOC,H
	ERROR INVTTY
	HRRZ	C,TURT	;OLD OR NEW TURTLE?
	CAME	H,[646471,,0]	;THAT IS (SIXBIT \TTY\) IN LEFT HALF.
	JRST	SETT.1	;TTY NOT SPECIFIED FOR TURTLE
	CAIN	C,NTURT
	SETOM	COF	;NEW TURTLE AND TTY REQUIRES CONTROLLER
	TLOA	C,TTYF	;AND SET TTYF

SETT.1:	SETZM	COF	;TURN OFF CONTROLLER FLAG
	TLO	C,OPENF	;INDICATE A LINE OPEN FOR TURTLE
	MOVEM	C,TURT

	SETZM SEPTUR
	SETOM SEPTUR
	SETOM TOUCHA
	JRST COMEX


;TURN THE CONTROLLER FLAG ON.
CO:	SETOM	COF
	JRST	COMEX

;TURN THE CONTROLLER FLAG OFF.
NOCO:	SETZM	COF
	JRST	COMEX

TOUCH:	PUSHJ P,NUCONV
	SKIPE E
	MOVEM E,TOUCHT
	MOVEI A,1
	MOVEM A,TOUCHA
	JRST COMEX
NOTOUC:	SETZM TOUCHA
	JRST COMEX
IRPS X,,FT RFT RT RBT BT LBT LT LFT
X:	JSP A,TOUCHX
TERMIN
RBRIGHT=FT
RDIM=RFT
FBRIGHT=RT
FDIM=RBT
LBRIGHT=BT
LDIM=LBT
TOUCHX:	SKIPN SEPTUR
	.STATUS TYOC,D
	SKIPE SEPTUR
	.STATUS TUOC,D
	TRNE D,2002
	JRST TOUCH1
	MOVEI D,1
	.SLEEP D,
	JRST TOUCHX
TOUCH1:	SUBI A,FT+1
	MOVE B,TURT
	MOVE B,-1(B)
	JUMPL B,(B)
	.RDTIM B,
	SUB B,TOUCHS(A)
	CAMG B,TOUCHT
	JRST ISTRUE
	JRST ISFALSE
ANYT:	.RDTIM B,
	SUB B,LTOUCH
	CAMGE B,TOUCHT
	JRST ISTRUE
	JRST ISFALSE
IFE SNAPFL,IFN DFLAG-NOVA,DTOUCH:	JRST ISFALSE
]
	IFN TBOX,[

PCLEAR:	MOVEI C,40	;PENUP BITTFOR LONG VECTORS
	MOVEM C,PLOTPS
	SETZM PLOTX
	SETZM PLOTY
	JRST PLTXYL

GET2NM:	MOVE L,(S)
	PUSHJ P,DNM
	 ERROR ZERERR
	POP S,L
	MOVE D,M	;SAVE Y IN D
	MOVE L,(S)
	PUSHJ P,DNM
	 ERROR ZERERR
	POP S,L
	POPJ P,

PLOTXY:	PUSHJ P,GET2NM
	MOVM A,D
	MOVM B,M
	TDNN A,[-4000]
	TDNE B,[-4000]
	 ERROR PLTBIG
	SUB M,PLOTX	;GET THE DELTA
	ADDM M,PLOTX	;SET THE NEW POSITION
	SUB D,PLOTY
	ADDM D,PLOTY
	MOVM A,D
	MOVM B,M
	TRNN A,-1000	;IS IT TOO BIG FOR SHORT VECTOR?
	TRNE B,-1000
	JRST PLTXYL	;YES GO DO LONG
	MOVEI C,37	;SHORT VECTOR CODE
	PUSHJ P,PLTTYO
	MOVE C,M	;X
	LSH C,-4
	PUSHJ P,PLTOUT
	MOVE C,D
	LSH C,-4
	PUSHJ P,PLTOUT
	JRST COMEX
PLTXYL:	MOVEI C,35
	PUSHJ P,PLTTYO
	MOVE C,PLOTX
	PUSHJ P,PLT2
	MOVE C,PLOTY
	PUSHJ P,PLT2
	MOVEI C,0
	MOVEI A,10
	PUSHJ P,PLTTYO
	SOJG A,.-1
	JRST COMEX

PLT2:	LSH C,-4
	MOVE M,C
	PUSHJ P,PLTOUT
	MOVE C,M
	LSH C,-6
	TRZ C,-4
	TDO C,PLOTPS
PLTOUT:	TRZ C,-100
	TRNN C,40
	TRO C,100
	JRST PLTTYO
PLOTUP:	SKIPA D,[40,,141]
PLOTDOWN:	MOVEI D,140
	MOVEI C,0
	PUSHJ P,PLTTYO
	MOVE C,D
	PUSHJ P,PLTTYO
	HLRZM D,PLOTPS
	JRST COMEX



MCLEAR:	MOVE A,[440700,,[ASCIZ /g    b/]]
MCLER1:	ILDB C,A
	JUMPE C,MCLER2
	PUSHJ P,MUSTYO
	JRST MCLER1
MCLER2:	MOVE A,[V1INIT,,V1PNT]
	BLT A,VCNT
	SETZM MBUF
	MOVE A,[MBUF,,MBUF+1]
	BLT A,MBUF+MBUFL+2
	JRST COMEX
V1INIT:	341000,,MBUF
	241000,,MBUF
	141000,,MBUF
	041000,,MBUF
	-MBUFL
	-MBUFL
	-MBUFL
	-MBUFL
	V1PNT
	V1CNT

PM:	MOVE A,[440700,,[ASCIZ /g/]]
PM1:	ILDB C,A
	JUMPE C,PM2
	PUSHJ P,MUSTYO
	JRST PM1
PM2:	MOVE A,[441000,,MBUF]
PM3:	MOVEI D,5
PM4:	ILDB C,A
	JUMPE C,PM5
	PUSHJ P,MUSTYO
	JRST PM3
PM5:	SOSN D
	JRST MCLEAR
	MOVEI C,40
	PUSHJ P,MUSTYO
	JRST PM4

SING:	PUSHJ P,GET2NM
	MOVEI M,74(M)
	CAIL M,40	;LOWEST LEGAL PITCH
	CAIL M,140	;HIGHEST
	 ERROR PTCHBG	;PITCH OUT OF RANGE
SING1:	JUMPLE D,COMEX
	DPB M,@VPNT
	AOS @VPNT
	AOSL @VCNT
	ERROR TMCHMS
	SOJA D,SING1

VOICE:	MOVE L,(S)
	PUSHJ P,DNM
	 ERROR ZERERR
	POP S,L
	CAIL M,1
	CAILE M,4
	 ERROR NSCHV	;NO SUCH VOICE
	MOVEI A,V1PNT-1
	ADD A,M
	MOVEM A,VPNT
	ADDI A,4
	MOVEM A,VCNT
	JRST COMEX
VLEN:	MOVE B,@VCNT
VLEN1:	ADDI B,MBUFL
	JRST COUNT2

MLEN:	MOVEI A,V1CNT
	MOVE B,(A)
MLEN1:	ADDI A,1
	CAMGE B,(A)
	MOVE B,(A)
	CAIE A,V4CNT
	JRST MLEN1
	JRST VLEN1

TBOXON:	MOVE A,[.IOT TYOC,C]
	MOVEM A,TBXOUT
TBOXO1:	SETZM TBXDEV
	MOVEI C,22
	PUSHJ P,TYO
	JRST COMEX

TBOXOFF:	MOVE A,[JFCL]
	MOVEM A,TBXOUT
	JRST COMEX

TBOXDEBUG:	MOVE A,[PUSHJ P,OCTOUT]
	MOVEM A,TBXOUT
	JRST TBOXO1
BACK:	JSP A,TURD
LEFT:	JSP A,TURD
RIGHT:	JSP A,TURD
FORWARD:	JSP A,TURD
TURD:	SUBI A,BACK+1
	MOVE L,(S)
	PUSHJ P,DNM
	 ERROR ZERERR
	POP S,L
	JUMPGE M,.+3
	MOVNS M
	XORI A,3
	IMULI A,@MFUDGE(A)
	IDIVI A,@DFUDGE(A)
	MOVE C,TURDC(A)
	SUBI M,6
	JUMPL M,TURD3
	IDIVI M,4
	AOS N
	PUSHJ P,TUROUT
	ADDI C,10
	PUSHJ P,TURTYO
	MOVE N,M
	ADDI C,10
	PUSHJ P,TUROUT
	SUBI C,10
	PUSHJ P,TURTYO
	SUBI C,10
	PUSHJ P,TURTYO
	JRST COMEX
TURD3:	MOVEI N,6(M)
	PUSHJ P,TUROUT
	JRST COMEX
MFUDGE:	1
	1
	1
	1
DFUDGE:	1
	1
	1
	1
TURDC:	100
	102
	101
	103

TUROUT:	JUMPLE N,CPOPJ
	PUSHJ P,TURTYO
	SOJA N,TUROUT
LAMPON:	MOVEI C,41
	JRST TURDX
LAMPOFF:	MOVEI C,42
	JRST TURDX
TOOT:	MOVE L,(S)
	PUSHJ P,DNM
	 ERROR ZERERR
	POP S,L
	MOVE N,M
	MOVEI C,50
	PUSHJ P,TUROUT
	JRST COMEX
PENDOWN:	MOVEI C,60
	JRST TURDX
PENUP:	MOVEI C,70
TURDX:	PUSHJ P,TURTYO
	JRST COMEX
TOUCH:	PUSHJ P,GTOUCH
	MOVE B,C
	JRST COUNT2

FTOUCH:	MOVEI B,20
	JRST TOUCHX
BTOUCH:	MOVEI B,4
	JRST TOUCHX
LTOUCH:	MOVEI B,10
	JRST TOUCHX
RTOUCH:	MOVEI B,40
	JRST TOUCHX
LFTOUC:	MOVEI B,30
	JRST TOUCHX
RFTOUC:	MOVEI B,60
	JRST TOUCHX
LBTOUC:	MOVEI B,14
	JRST TOUCHX
RBTOUCH:	MOVEI B,44
TOUCHX:	PUSHJ P,GTOUCH
	TDNE C,B
	JRST ISFALSE
	JRST ISTRUE
GTOUCH:	MOVEI C,43
	PUSHJ P,TURTYO
	XCT CHIN
	POPJ P,
]
IFN DFLAG,[
PLOT:	.OPEN CSC,[SIXBIT /  %IPL/]
	ERROR .
	.IOT CSC,[-1]
	.IOT CSC,[DLIST,,547]
	.CLOSE CSC,
	JRST COMEX

DISPLA:	PUSHJ P,NUCONV
	CAILE E,320.
	ERROR 340TML
	IMULI E,6
	SKIPG E
	PUSHJ P,TURTO
	MOVEM E,.DTOP
	SKIPE MOBYLS
	PUSHJ P,CLRLI1
	HRRZI	E,DTURTL
	HRRM	E,TURT	;LEFT HALF OF TURT HAS TTYF AND OPENF.
	SETZM DCUR
	SETZM DPENST
	SETOM DISONF
	SETZM ANGLE
	SETZM X0
	SETZM Y0
	JRST DINIT
RESTAR:	SETOM DISONF
	HRRZI	E,DTURTL
	HRRM	E,TURT	;LEFT HALF OF TURT HAS TTYF AND OPENF.
	JRST DSET
TURTO:	SETZM DISONF
	.DCLOSE
	SKIPN MOBYLS
	JRST COMEX
	MOVEI E,<DPOS_11>+DPOS
	.CBLK E,
	ERROR PUNT
	ADDI E,1001
	.CBLK E,
	ERROR PUNT
	SETZM MOBYLS
	JRST COMEX

DPEN1:	SETOM DPENST
	SKIPE MOBYLS
	JRST COMEX
	MOVE E,[<4400,,400000+<DPOS_11>>]
	.CBLK E,
	JRST NDCOR1
	ADDI E,1000
	.CBLK E,
	JRST NDCORE
CLRLIS:	PUSH P,[COMEX]
CLRLI1:	MOVEI A,3767
	MOVE B,[3000,,3000]
	MOVEM B,DVECS(A)
	SOJGE A,.-1
	MOVE A,[117,,0]
	MOVEM A,DVECS-1
	SETOM MOBYLS
	POPJ P,

NDCORE:	MOVEI E,<DPOS_11>
	.CBLK E,
	ERROR .
NDCOR1:	SETZM	DPENST
	ERROR 	PUNT
DPEN2:	SETZM DPENST
	JRST COMEX
DSET:	.DSTOP
	.F GVEC0<X1,Y1>
	HRLM A0,DTURT+2
	TRC A0,500200
	HRLM A0,DTURT+4
	.F GVEC<X2,Y2,X1,Y1>
	IORI A0,200000
	HRRM A0,DTURT+2
	.F GVEC<X3,Y3,X2,Y2>
	IORI A0,200000
	HRLM A0,DTURT+3
	.F GVEC<X1,Y1,X3,Y3>
	IORI A0,200000
	HRRM A0,DTURT+3
.F X0+512.0,0.0,Y0+512.0
	PUSHJ P,FIX
	MOVEI D,0
	EXCH A0,A2
	PUSHJ P,FIX
	DPB A2,[221200,,D]
	DPB A0,[1200,,D]
	IOR D,[20000,,300000]
	MOVEM D,DTURT+1
	HRRZS TURTPT
	HRRZS MOBYPT
	MOVN A,.DTOP
	SUBI A,2
	MOVNI B,6
	SKIPE MOBYLS
	HRLM A,MOBYPT
	SKIPE HIDEF
	HRLM B,TURTPT
	SKIPE NODISF
	JRST NODIS
	.DSTART DLIST
	JRST DERR
NODIS:	JRST COMEX
DERR:	SETZM DISONF
	ERROR 340NDS

GVEC:	FSBR A0,A2
	FSBR A1,A3
GVEC0:	PUSHJ P,FIXBY
	SETZM A3
	DPB A0,[1000,,A3]
	MOVE A0,A1
	PUSHJ P,FIXBY
	DPB A0,[101000,,A3]
	MOVE A0,A3
	POPJ P,
FIXBY:	PUSH P,A1
	MULI A0,400
	TSC A0,A0
	ASH A1,-243(A0)
	MOVE A0,A1
	POP P,A1
FIXBY1:	JUMPGE A0,CPOPJ
	MOVNS A0
	IORI A0,200
	POPJ P,
DRIGHT:	MOVNS E
DLEFT:	TLC E,232000
	FADR E,E
	FADB E,ANGLE
DINIT:
.F Y3=SIND<ANGLE+240.0>*25.0
.F Y2=SIND<ANGLE-60.0>*25.0
.F Y1=SIND<ANGLE+90.0>*25.0
.F X3=COSD<ANGLE+240.0>*25.0
.F X2=COSD<ANGLE-60.0>*25.0
.F X1=COSD<ANGLE+90.0>*25.0
	JRST DSET
DBACK:	MOVNS E
DFORWA:	JUMPE E,COMEX
	MOVE A0,E
	PUSHJ P,FLOAT
	MOVEM A0,DFBME
	SKIPE DPENST
	JRST DPENDW
	.F X0=X0+DFBME*COSD<ANGLE+90.0>
	.F Y0=Y0+DFBME*SIND<ANGLE+90.0>
	JRST DSET


DPENDW:	.F NX0=DFBME*COSD<ANGLE+90.0>
	.F NY0=DFBME*SIND<ANGLE+90.0>
	MOVE A,DCUR
	CAMGE A,.DTOP
	JRST .+3
	SUB A,.DTOP
	JRST .-3
	MOVE D,[442200,,DVECS]
	ADD D,A
	ADDI A,6
	MOVEM A,DCUR
	MOVEI A,20000
	IDPB A,D
	HLR A,DTURT+1
	IDPB A,D
	HRR A,DTURT+1
	IDPB A,D
	MOVEI A,400000
	MOVEI B,11
	IDPB A,D
	SOJG B,.-1
	.F X0=NX0+X0,Y0=NY0+Y0
	.F FOON=FIX<MAX<MAG<NX0/128.0>,MAG<NY0/128.0>>>
	.I FX=FIX<NX0>/(FOON+1),FY=FIX<NY0>/(FOON+1)
	.I FIXBY1<FX>,FIXBY1<FY>
	MOVEI D,0
	DPB A,[1000,,D]
	DPB B,[101000,,D]
	IORI D,200000
	MOVE E,[222200,,DVECS-5]
	ADD E,DCUR
	MOVE C,FOON
	SOJL C,.+3
	IDPB D,E
	JRST .-2

	.I FIXBY1<(FIX<NX0>-FX*FOON)>,FIXBY1<(FIX<NY0>-FY*FOON)>
	MOVEI D,0
	DPB A,[1000,,D]
	DPB B,[101000,,D]
	IORI D,600000
	IDPB D,E
	JRST DSET
XCOR:	SKIPA A,X0
YCOR:	MOVE A,Y0
	SKIPN DISONF
DISER:	ERROR DISNOT
	PUSHJ P,FIX
	JRST NUMRET

SETX:	SKIPA B,[X0]
SETY:	MOVEI B,Y0
	PUSHJ P,NUCONV
	SKIPN DISONF
	ERROR DISNOT
	MOVE A,E
	PUSHJ P,FLOAT
	MOVEM A,(B)
	JRST DSET
HEADIN:	MOVE A,ANGLE
	PUSHJ	P,FIX
	IDIVI A,360.
	SKIPGE B
	ADDI B,360.
	MOVE A,B
	JRST NUMRET

SETHEA:	PUSHJ P,NUCONV
	MOVE A,E
	PUSHJ P,FLOAT
	MOVEM A,ANGLE
	JRST DINIT
HIDETU:	SETZM HIDEF
	JRST DINIT
SHOWTU:	SETOM HIDEF
	JRST DINIT
MAX:	CAMG A0,A1
	MOVE A0,A1
	POPJ P,
MAG:	MOVMS A0
	POPJ P,
REAL:	MOVE E,[350000,,SCHED]
	.REALT E,
	ERROR .
	JRST COMEX
UNREAL:	MOVSI E,400000
	.REALT E,
	JRST COMEX
]

;WINNING SIN, COS ROUTINES, LIFTED, MINUS COMMENTS, FROM LIB

IFN DFLAG+NOVA+LFLAG+PHY,[
COSD:	MOVEM	B, SB		
	MOVE	B, A		
	FADR	B, [90.0]		
	FDVR	B, [57.295779]		
	JRST	S1X		
SIND:	MOVEM	B, SB		
	MOVE	B, A		
	FDVR	B, [57.295779]		
	JRST	S1X		
S1X:	MOVEM	B, SX		
	MOVMS	B		
	CAMG	B, [170000,,0]		
	JRST	S3A		
	MOVEM	C, SC		
	FDV	B, [1.5707963]		
	CAMG	B, [1.0]		
	JRST	S2		
	MULI	B, 400		
	ASH	C, -202(B)	
	MOVEI	B, 200		
	ROT	C, 3		
	LSHC	B, 33		
	FAD	B, [0]		
	JUMPE	C, S2		
	TLCE	C, 1000		
	FSB	B, [1.0]		
	TLCE	C, 3000		
	TLNN	C, 3000		
	MOVNS	B		
S2:	SKIPGE	SX		
	MOVNS	B		
	MOVEM	B, SX		
	FMPR	B, B		
	MOVE	A, [0.00015148419]		
	FMP	A, B		
	FAD	A, [-0.00467376557]		
	FMP	A, B		
	FAD	A, [0.07968967928]		
	FMP	A, B		
	FAD	A, [-0.64596371106]		
	FMP	A, B		
	FAD	A, [1.5707963]		
S2B:	FMPR	A, SX		
	SKIPA	C, SC		
S3A:	MOVE	A, SX		
	MOVE	B, SB		
	POPJ P,
]
	IFN NOVA+PHY,[
;MODULO 360--
;RETURN INTEGER ANGLE MOD 360
;ARG AND RETURN IN E

MOD360:	IDIVI	E,360.
	CAIGE	E+1,0
	ADDI	E+1,360.
	MOVE	E,E+1
	POPJ	P,
]
	IFN PHY,[

;PHYSICS HACK--USES PDP6

	P6R==3002
	P6XPOS==3007
	P6YPOS==3010
	P6XVEL==3003
	P6YVEL==3004
	P6X1POS==3015
	P6Y1POS==3016
	P6X1VEL==3011
	P6Y1VEL==3012
	P6XAC==3000
	P6YAC==3001
	P6JR==3031
	P6JS==3033
	P6LR==3032
	P6LS==3036
	P6JVX==3017
	P6JVY==3020
	P6JX==3021
	P6JY==3022
	P6RS==3034
	P6RV==3035
	P6XAAC==3037
	P6YAAC==3040

P6IOB:	0,,(SIXBIT/USR/)
	SIXBIT/HAL/
	SIXBIT/PDP6/

P6OOB:	1,,(SIXBIT/USR/)
	SIXBIT/HAL/
	SIXBIT/PDP6/


PHYSICS:	.OPEN	TUIC,P6IOB
	.VALUE
	.OPEN	TUOC,P6OOB
	.VALUE
	SETOM	PHYS
	MOVE	A,[0.01]
	MOVEM	A,PSCALF
	SETZM	PANG
	SETZM	PSIN
	MOVE	A,[1.0]
	MOVEM	A,PCOS
	JRST	COMEX


NOPHY:	.CLOSE	TUIC,
	.CLOSE	TUOC,
	SETZM	PHYS
	JRST	COMEX

PCHK:	SKIPN	PHYS
	ERROR	PHINIT
	POPJ	P,

PSCALE:	PUSHJ	P,PCHK
	PUSHJ	P,NUCONV
	MOVE	A,E
	PUSHJ	P,FLOAT
	FDVR	A,[100.0]
	MOVEM	A,PSCALF
	JRST	COMEX

	IRP	Z,,[,1]
PY!Z!VEL:	MOVE	B,[P6Y!Z!VEL]
	SKIPA
PX!Z!VEL:	MOVE	B,[P6X!Z!VEL]
	PUSHJ	P,PCHK
	.ACCESS	TUIC,B
	.IOT	TUIC,A
	FDVR	A,PSCALF
	PUSHJ	P,FIX
	JRST	NUMRET

PY!Z!POS:	MOVE	B,[P6Y!Z!POS]
	SKIPA
PX!Z!POS:	MOVE	B,[P6X!Z!POS]
	PUSHJ	P,PCHK
	.ACCESS	TUIC,B
	.IOT	TUIC,A
	FDVR	A,PSCALF
	PUSHJ	P,FIX
	JRST	NUMRET
TERMIN

PUSHXY:	PUSHJ	P,PCHK
	PUSHJ	P,PSH3
	PUSH	P,A
	PUSHJ	P,PSH3
	POP	P,B
	.ACCESS	TUOC,[P6XAC]
	.IOT	TUOC,A
	.ACCESS	TUOC,[P6YAC]
	.IOT	TUOC,B
	JRST	COMEX

PUSHA:	PUSHJ	P,PCHK
	PUSHJ	P,PSH3
	PUSH	P,A
	PUSHJ	P,PSH3
	POP	P,B
	.ACCESS	TUOC,[P6XAAC]
	.IOT	TUOC,A
	.ACCESS	TUOC,[P6YAAC]
	.IOT	TUOC,B
	JRST COMEX

PSH3:	PUSHJ	P,NUCONV
	MOVE	A,E
	PUSHJ	P,FLOAT
	FMPR	A,PSCALF
	POPJ	P,

PR:	PUSHJ	P,PCHK
	.ACCESS	TUIC,[P6R]
	.IOT	TUIC,A
	FDVR	A,PSCALF
	PUSHJ	P,FIX
	JRST	NUMRET


	IRP	Z,,[JR,JS,LR,LS,JVX,JVY,JX,JY,RS,RV]
!Z:	PUSHJ	P,PCHK
	.ACCESS	TUIC,[P6!Z]
	.IOT	TUIC,A
	FDVR	A,PSCALF
	PUSHJ	P,FIX
	JRST	NUMRET
	TERMIN
]

;NOVA DISPLAY COMMANDS
;WILL ASSEMBLE IF NOVA IS NON-ZERO
;WHICH HAPPENS IF ONE TYPES 2 AT DFLAG.

IFN NOVA,[		;COMMAND CODES TO NOVA
	NSNAP==100	;SNAP (NOVA "SHIP")
	NESNAP==120	;END SNAP (ENDSHIP)
	NSSNAP==140	;SHOW SNAP (DST)
	NRSNAP==160	;REMOVE SNAP (DREM)
	NFRAME==240	;FRAME ELAPSED (NFRM)
	NMVTO==200
	NPTAT==220
	NPDWN==260
	NHIDE==320
	NSHOW==300
	N.RESET==360
	NWIPE==340

;DISPLAY--
;INITIALIZE VARIABLES
;.RESET VARIABLES, WIPE OUT LISTS
;SHOW POINTER AT CENTER

DISPLA:	.RESET	TUOC,
	SETZM	SNAPN	;INITIALIZE SNAP NUMBERS
	PUSHJ	P,RESTA1	;OPEN DISPLAY
	MOVEI	A,ACK	;IF NOVA HUNG WAITING FOR ERROR,
	.IOT	TUOC,A	;ACKNOWLEDGE IT
	MOVEI	A,N.RESET
	PUSHJ	P,SEND	;SEND .RESET CODE
	MOVE A,[W+WORDF+EMPTYF,,EMPTYV]	;TO CLOOBER OLD DISPLAY LISTS
	MOVE N,VP
	MOVSI G,DISPF
FSNAP1:	TDNE G,1(N)
	MOVEM A,1(N)
	ADDI N,2
	SKIPE (N)
	JRST FSNAP1
	MOVEI	A,5
	.SLEEP	A,	;THIS HORRIBLE LINE OF CODE
	;REQUIRES A WORD OF EXPLANATION
	;THE STUPID NOVA, AFTER GETTING THE RESET CODE,
	;GOES INTO A LONG ROUTINE WHERE IT CAN'T BE INTERRUPTED
	;AND THUS MISSES THE NEXT WORD FROM THE
;10 UNLESS THIS SLEEP IS HERE
	SETZM	PENM	;SET PEN MODE TO 0
	PUSH	P,[COMEX]
DISPL1:	MOVE	A,ORIG
	MOVEM	A,CURX
	MOVEM	A,CURY
	SETZM	CURA	;POINTER ANGLE TO 0
DISPL2:	SETZM	NEWA
	MOVEM	A,NEWX	;SET CURRRENT LOC TO CENTER OF SCREEN
	MOVEM	A,NEWY
	PUSHJ	P,MVTO	;SEND ALL THIS GOOK TO NOVA
	PUSHJ	P,NEWPT
	JRST	SHOWT1


;RESTART--
;SEND TURTLE COMMANDS TO DISPLAY
RESTAR:	PUSH	P,[COMEX]	;RETURN ADDRESS
RESTA1:	PUSHJ	P,DCHKR	;CHANNEL TO DISPLAY OPEN?
	SKIPE	SNAPX
	ERROR	NVSNAP	;NOT LEGAL WHILE SNAPPING
	HRRZI	E,DTURTL	;CHANGE DISPATCH
	HRRM	E,TURT	;LEFT HALF OF TURT HAS TTYF AND OPENF.
	POPJ	P,

;HOME--
;PUT TURTLE AT STARTING POS BUT DO NOT
;CLEAR SCREEN
HOME:	PUSHJ	P,DCHKR1	;MAKE SURE WE HAVE DISPLAY
	SKIPE	SNAPX
	ERROR	NVSNAP
	PUSHJ	P,TINVS	;TURTLE INVISIBLE & PENUP
	PUSHJ	P,DISPL1	;TURTLE AT CENTER AND SHOW
	PUSHJ	P,TVIS	;TURTLE VISIBLE & PEN RESTORED
	JRST	COMEX

;DISPLAY CHECKER--
;SEES IF CHANNEL TO TNM IS OPEN
;SEES IF USER HAS DISPLAY
DCHKR:	.STATUS	TUOC,B
	ANDI	B,77	;MASK ALL BUT DEVICE CODE
	SKIPE	B
	CAILE	B,2
	ERROR	TUNOLN	;YOU HAVE TO DO A SETTURTLE
	POPJ	P,

DCHKR1:	HLRZ	B,TURT	;IS THERE A LINE OPEN?
	TRNN	B,OPENF
	ERROR	TUNOLN	;YOU HAVE TO DO A SETT.
	HRRZ	B,TURT	;SEE IF RIGHT GOOK IN DISPATCH TABLE
	CAIE	B,DTURTL
	ERROR	DISNOT
	POPJ	P,


;CONVERT--
;CONVERTS TO (0,0) CENTER OF SCREEN
CONVER:	MOVE	B,SKLIM	;MAGNITUDE OF APPARENT SCREEN BORDER
	CAMLE	A,B	;T<= LIMIT?
	ERROR	NVNOFF
	MOVNS	B
	CAMGE	A,B	;T>= -LIMIT?
	ERROR	NVNOFF
	ADDI	A,512.	;CONVERT TO REAL SCOPE COORD
	POPJ	P,


;T INVISIBLE
;PUTS PENUP AND MAKES TURTLE TEMPORARILY INVISIBLE
TINVS:	SETZ	E,
	PUSHJ	P,PEN4	;PENUP
	PUSHJ	P,HIDET1	;HIDETURTLE
	POPJ	P,

;RESTORE PEN AND SHOWTURTLE
TVIS:	MOVE	E,PENM
	PUSHJ	P,PEN4	;RESTORE PEN
	PUSHJ	P,SHOWT1	;SHOW TURTLE
	POPJ	P,

;SETXY--
;MOVE TO NAMED X & Y COORDINATES
;IN CURRENT PEN MODE
;X IN E, Y IN A

SETXY:	PUSHJ	P,DCHKR1
	PUSHJ	P,NUCONV	;GET VALUE FOR E/Y
	PUSH	P,E
	PUSHJ	P,NUCONV
	POP	P,A	;A/Y, X/E
	EXCH	A,E
	PUSHJ	P,CONVER	;CHANGE A/X TO REAL COORD, SEE IF OFF SCREEN
	PUSHJ	P,FLOAT	;FLOAT X

SETXY1:	EXCH	A,E	;A/Y, E/X
	PUSHJ	P,CONVER	;CHANGE E/Y TO REAL COORD, SEE IF OFF SCREEN
	PUSHJ	P,FLOAT	;FLOAT Y
SETXY2:	CAMN	A,NEWY
	CAME	E,NEWX
	JRST	SETXY3
	JRST	COMEX	;IF NO CHANGE IN COORDS, DON'T DO ANYTHING

SETXY3:	MOVEM	A,NEWY	;SAVE NEW COORDS
	MOVEM	E,NEWX
SETXY4:	PUSHJ	P,MVTO	;MOVE PNTR
	SKIPE	SNAPX	;IF NOT SNAPPING, STORE NEWX AND Y AS CURRENT COORDS
	JRST	COMEX
	MOVE	A,NEWX
	MOVE	B,NEWY
	MOVEM	A,CURX
	MOVEM	B,CURY
	JRST	COMEX

;SETX--
;CHANGE ONLY X COORDINATE
SETX:	PUSHJ	P,DCHKR1	;E/X
	PUSHJ	P,NUCONV
	MOVE	A,E
	PUSHJ	P,CONVER	;CHANGE TO REAL COORD, SEE IF OFF SCREEN
	PUSHJ	P,FLOAT	;FLOAT X
	MOVE	E,A
	MOVE	A,NEWY	;GET Y
	JRST	SETXY2	;A/Y, E/X

;SETY--
;CHANGE ONLY Y
SETY:	PUSHJ	P,DCHKR1
	PUSHJ	P,NUCONV
	MOVE	A,NEWX	;GET X
	JRST	SETXY1

;FORWARD--
;GO FORWARD (AT PRESENT ANGLE) ARG (IN T)
;(BACK--BACKWARDS)

DBACK:	MOVNS	E
DFORWA:	PUSHJ	P,NEWPOS
	JRST	SETXY4
;SETHEAD--
;MAKE ANGLE = TO ARG IN E

SETHEA:	PUSHJ	P,DCHKR1
	PUSHJ	P,NUCONV
SETHE1:	PUSHJ	P,MOD360
	CAMN	E,NEWA	;SKIP IF CHANGE
	JRST	COMEX
	MOVEM	E,NEWA
	SKIPE	SNAPX
	JRST	COMEX	;IF SNAPPING, DON'T CHANGE ANYTHING
	PUSHJ	P,NEWPT
	MOVE	A,NEWA
	MOVEM	A,CURA	;SAVE CURRENT ANGLE
	JRST	COMEX

;LEFT--
;ROTATE POINTER ANTI-CLOCKWISE
;(RIGHT--CLOCKWISE)
;ARG DEGREES.  ARG IN E

DLEFT:	MOVNS	E
DRIGHT:	ADD	E,NEWA
	JRST	SETHE1

;XCOR
;OUTPUTS CURRENT X COORDINATE

XCOR:	PUSHJ	P,DCHKR1
	MOVE	A,NEWX
XCOR1:	PUSHJ	P,FIX
	SUBI	A,512.
	JRST	NUMRET

;YCOR--
;OUPUTS Y COORDINATE

YCOR:	PUSHJ	P,DCHKR1
	MOVE	A,NEWY
	JRST	XCOR1


;HEADING--
;OUTPUTS CURRENT POINTER ANGLE

HEADIN:	PUSHJ	P,DCHKR1
	MOVE	A,NEWA
	JRST	NUMRET
DXDY:	PUSHJ	P,DCHKR1	;GET DX AND DY
	PUSHJ	P,NUCONV	;E/Y
	MOVE	A,NEWY
	PUSHJ	P,FIX
	SUBI	A,512.
	SUB	E,A	;E/DY=Y-NEWY
	PUSH	P,E
	PUSHJ	P,NUCONV	;E/X
	MOVE	A,NEWX
	PUSHJ	P,FIX
	SUBI	A,512.
	SUB	E,A	;E/DX=X-NEWX
	POP	P,B	;B/DY
	POPJ	P,


DXDYC:	MOVE	A,E	;CONVERT TO FLOATING POINT
	PUSHJ	P,FLOAT
	MOVE	E,A	;E/DX
	MOVE	A,B
	PUSHJ	P,FLOAT	;A/DY
	POPJ	P,

;DISTANCE
;OUTPUT DISTANCE TO (X,Y)

DIST:	PUSHJ	P,DXDY
	PUSHJ	P,DXDYC	;E/DX  A/DY
	FMPR	E,E
	FMPR	A,A
	FADR	A,E
	PUSHJ	P,SQRT
	PUSHJ	P,FIX
	JRST	NUMRET

;TOWARDS--
;OUTPUT DIRECTION TO (X,Y)

TWD:	PUSHJ	P,DXDY
	MOVEI	C,0
	CAIGE	B,0	;FUTZ DIRECTION OF ANGLE
	MOVEI	C,1
	JUMPN	E,TWD2
	JUMPN	B,TWD1
	MOVE	A,NEWA	;DX=DY=0, OUTPUT CURRENT ANGLE
	JRST	NUMRET

TWD1:	MOVEI	A,0	;DX=0, DY>0, OUTPUT 0
	CAIG	B,0	;DX=0, DY<0, OUTPUT 180
	ADDI	A,180.
	JRST	NUMRET

TWD2:	JUMPN	B,TWD3
	MOVEI	A,90.	;DY=0, DX>0, OUTPUT 90
	CAIG	E,0	;DY=0, DX<0, OUTPUT 270
	ADDI	A,180.
	JRST	NUMRET

TWD3:	PUSHJ	P,DXDYC
	FDVRM	E,A	;DX/DY
	PUSHJ	P,ATAN
	FMPR	A,TWDEG	;CONVERT TO DEGREES
	PUSHJ	P,FIX
	CAIE	C,0
	ADDI	A,180.	;FIX ANGLE
	JRST	NUMRET

TWDEG:	57.295779513
;ARCTAN FUNCTION FROM LIBRARY
ATAN:	MOVEM	B, SB
ATAN1:	MOVM	B, A	
	CAMG	B, A1A	
	POPJ P,		
	MOVEM	D, SD1	
	HLLO	D, A	
	CAML	B, A2A	
	JRST	AT4	
	MOVEM	C, SC	
	MOVSI	C, 201400
	CAMG	B, C	
	TRZA	D, -1	
	FDVM	C, B	
	TLC	D, (D)	
	MOVEM	B, SX	
	FMP	B, B	
	MOVE	C, KB3	
	FAD	C, B	
	MOVE	A, KA3	
	FDVM	A, C	
	FAD	C, B	
	FAD	C, KB2	
	MOVE	A, KA2A	
	FDVM	A, C	
	FAD	C, B	
	FAD	C, KB1	
	MOVE	A, KA1A	
	FDV	A, C	
	FAD	A, KB0	
	FMP	A, SX	
	TRNE	D, -1	
	FSB	A, PIOT	
	SKIPA	C, SC	
AT4:	MOVE	A, PIOT	
	SKIPGE	D	
	MOVNS	A	
	MOVE	D, SD1	
	MOVE	B, SB
	POPJ P,

A1A:	145000000000	
A2A:	233000000000	
KB0:	0.1746554388
KB1:	6.762139240
KB2:	3.316335425
KB3:	1.448631538
KA1A:	3.709256262
KA2A:	-7.106760045
KA3:	-0.2647686202
PIOT:	201622077325	


;HIDE--
;HIDE POINTER
HIDETU:	PUSHJ	P,DCHKR1	;SEE IF DISPLAY ON
	PUSH	P,[COMEX]
HIDET1:	MOVEI	A,NHIDE
	JRST	SHOWT2

;SHOW--
;SHOW POINTER
SHOWTU:	PUSH	P,[COMEX]
	PUSHJ	P,DCHKR1	;SEE IF DISPLAY ON
SHOWT1:	MOVEI	A,NSHOW
SHOWT2:	SKIPN	SNAPX
	PUSHJ	P,SEND	;DON'T SEND IF SNAPPING
	POPJ	P,

;WIPE--
;CLEAR SCREEN
WIPE:	PUSHJ	P,DCHKR1	;SEE IF DISPLAY ON
	MOVEI	A,NWIPE
	PUSHJ	P,SHOWT2
	JRST	COMEX


;FRAME
;FRAME HAS ELAPSED
FRAME:	PUSHJ	P,DCHKR1
	MOVEI	A,NFRAME
	PUSHJ	P,SHOWT2
	JRST	COMEX

;PEN--
;SHOW LIST FOR ARG FRAMES
;PENDOWN-- ARG=7777 SHOW FOR INFINITY
;PENUP--DON'T SHOW

;PEN--
PEN:	PUSHJ	P,DCHKR1
	PUSHJ	P,NUCONV
	SKIPL	E
	CAILE	E,4000.
	ERROR	NVWARG
PEN2:	SKIPE	SNAPX
	JRST	PEN5

	MOVEM	E,PENM	;SAVE PEN MODE
PEN3:	PUSH	P,[COMEX]
PEN4:	MOVE	A,E
	LSH	A,-8.
	ADDI	A,NPDWN
2SEND:	PUSHJ	P,SEND	;SENDS A, THEN E
	MOVE	A,E
	PUSHJ	P,SEND
	POPJ	P,

PEN5:	CAIE	E,0	;IF SNAPPING, PEN MUST BE UP OR DOWN(7777)
	CAIN	E,7777
	JRST	PEN3
	ERROR	NVSNAP

;PENDOWN--
DPEN1:	MOVEI	E,7777
	JRST	PEN2

;PENUP--
DPEN2:	SETZ	E,
	JRST	PEN2



IFN SNAPFL,[
;SNAP--
;STARTS DEFINITION OF DISPLAY LIST
;CALLED HERE WITH 8 BIT "NAME" OF LIST IN E

SNAP:	PUSHJ	P,DCHKR1
	SKIPE	SNAPX
	ERROR	NVSNAP	;ILLEGAL WHILE SNAPPING
	AOS	E,SNAPN	;GET NEXT AVAILABLE #
	CAIL	E,200
	ERROR	NVTMS	;TOO MANY SNAPS FOR CRETIN LOGO

	PUSHJ	P,NEWSTR
	IDPB	E,B	;NUMBER IN E
	PUSHJ	P,ENDSTR
	MOVEI	A,W+DISPF	;INDICATE THIS IS SNAP DATA TYPE
	HRLM	A,(S)
	MOVEI	A,NSNAP
	PUSHJ	P,2SEND	;SENDS A, THEN E TO NOVA
	SETOM	SNAPX	;TURN ON SWITCH
	JRST	MAKE


;END SNAP
;ENDS SNAP DEFINITION

ESNAP:	PUSHJ	P,DCHKR1
	SKIPN	SNAPX	;ILLEGAL WHILE NOT SNAPPING
	ERROR	ENDERR
	SETZM	SNAPX	;OFF FLAG
	MOVE	A,CURX	;CHANGE NEW LOCS TO ACTUAL POINTER LOCS
	MOVE	B,CURY
	MOVE	C,CURA
	MOVEM	A,NEWX
	MOVEM	B,NEWY
	MOVEM	C,NEWA
	MOVEI	A,NESNAP	;SEND CODE TO NOVA
	PUSHJ	P,SEND
	JRST	COMEX


;SHOW SNAP--
;SHOW SNAP NAMED BY 8 BITS OF E

SSNAP:	PUSHJ	P,DCHKR1
	SKIPE	SNAPX
	ERROR	NVSNAP	;ILLEGAL WHILE SNAPPING
	PUSHJ	P,GSNPN	;GET NAME OF LIST
	MOVEI	A,NSSNAP
	PUSHJ	P,2SEND	;SEND CODE TO NOVA
	JRST	COMEX


;REMOVE SNAP--
;REMOVE LIST NAMED BY E FROM NOVA

RSNAP:	PUSHJ	P,DCHKR1
	SKIPE	SNAPX
	ERROR	NVSNAP	;ILLEGAL WHILE SNAPPING
	PUSHJ P,THING
	PUSHJ	P,GSNPN	;GET NAME OF LIST
	MOVE A,[W+WORDF+EMPTYF,,EMPTYV]
	MOVEM A,1(N)
	MOVEI	A,NRSNAP
	PUSHJ	P,2SEND	;SEND CODE TO NOVA
	JRST	COMEX

;DISPLAY TOUCH--
;INTERRUPT FROM TUIC

DTOUCH:	MOVEI	A,TUIC	;GET CHARACTER FROM NOVA
	.ITYIC	A,
	JRST	DISINT
	SUBI	A,100	;REMOVE HIGH BIT
	MOVEM	A,NVERCD	;SAVE
	TLO	F,BREAKF	;FOR USE BY NEXT SUBR (NVERR)
	.STATUS	TUIC,A
	TRNN	A,1000	;IF BUFFER NOT EMPTY
	.IOT	TUIC,A	;GET OUT A CHAR
	JRST	DISINT

	ACK==6	;NOVA INTERRUPT ACKNOWLEDGE
	MXNVER==4	;HIGHEST NOVA ERROR CODE

;NOVA ERROR--
;JRSTS HERE FROM BRAKER

NVERR:	.RESET	TUOC,	;WIPE OUT ANY CHARS IN THIS BUFFER
	.DISMISS [.+1]
	TLO	F,BROKE
	MOVEI	A,ACK
	.IOT	TUOC,A	;TELL NOVA TO START PAYING ATTN AGAIN
	PUSHJ	P,TINVS	;TELL NOVA WHERE 10 THINKS IT IS
	PUSHJ	P,MVTO1
	PUSHJ	P,PTOUT
	PUSHJ	P,TVIS
	MOVE	A,NVERCD	;GET ERROR
	SETZM	NVERCD	;ERASE
	CAIG	A,MXNVER
	XCT	NVEROR(A)
	ERROR	.	;NO SUCH CODE

NVEROR:	ERROR	NVTML	;1, TOO MANY LINES
	ERROR	NVLTL	;2, LINES TOO LONG
	ERROR	NVSTL	;3, SNAP TOO LONG
	ERROR	NVSTL	;4, SNAP TOO LONG

GSNPN:	POP	S,A	;GET POINTER TO NUM
	TLNN	A,DISPF
	ERROR	NVNTSP	;NOT A SNAP
	HRLI	A,10700+W	;BYTE POINTER
	MOVEM	A,SRCBOT
	ILDB	E,A	;GET NUMBER IN E
	POPJ	P,
]

;MOVE POINTER--
;MOVE POINTER TO NEW LOC
;X IN E, Y IN A

MVTO:	MOVE	A,NEWX
	PUSHJ	P,FIX
	MOVEM	A,NOVX
	MOVE	A,NEWY
	PUSHJ	P,FIX
	MOVEM	A,NOVY
	MOVEI	A,1777	;MASK SO HIGH BITS WONT CLOBBER CODE WORD
	ANDM	A,NOVX
	ANDM	A,NOVY
MVTO1:	MOVEI	A,NMVTO	;SEND TO NOVA
	LSH	A,6
	ADD	A,NOVX
	LSH	A,2
	MOVE	B,NOVY
	LSH	B,-8.
	ADD	A,B
	PUSHJ	P,ASEND
	MOVE	A,NOVY
	ANDI	A,377
	PUSHJ	P,SEND
	POPJ	P,

;NEW POSITION--
;CALCULATES NEW X & Y COORDS FOR
;FORWARD COMMAND
;ARG IS DISTANCE FORWARD

NEWPOS:	MOVE	A,E	;DISTANCE
	PUSHJ	P,FLOAT
	MOVE	E,A
	MOVE	C,NEWX
	MOVE	D,NEWY
	MOVE	A,NEWA
	PUSHJ	P,FLOAT
	MOVE	G,A
	PUSHJ	P,SIND
	FMPR	A,E
	FADR	A,C	;X+T SIN A
	MOVE	C,A	;TEMP STORE NEWX
	PUSHJ	P,FIX
	SUBI	A,512.
	PUSHJ	P,CONVER	;SEE IF COORD IS ON SCREEN
	MOVE	A,G
	PUSHJ	P,COSD
	FMPR	A,E
	FADR	A,D	;Y+ T COS A
	MOVE	D,A	;TEMP STORE Y
	PUSHJ	P,FIX
	SUBI	A,512.
	PUSHJ	P,CONVER	;SEE IF COORD IS ON SCREEN
	MOVEM	C,NEWX	;BOTH COORDS ALRIGHT, STORE
	MOVEM	D,NEWY
	POPJ	P,
;NEW POINTER--
;CALCULATE NEW POINTER COORDS
;BASED ON CURRENT ANGLE, AND X AND Y COORDS

NEWPT:	MOVE	A,NEWA
	PUSHJ	P,FLOAT
	MOVE	B,A
	PUSHJ	P,SIND
	EXCH	A,B	;SAVE SIN IN B, ANGLE IN A
	PUSHJ	P,COSD
	MOVE	G,A	;COS A IN G
	MOVE	A,PTL	;POINTER LENGTH
	FMPR	A,G
	PUSHJ	P,NFIX	;L COS A
	MOVEM	A,PTC
	MOVNM	A,PTC+2
	MOVE	A,PTL
	FMPR	A,B
	PUSHJ	P,NFIX	;L SIN A
	MOVEM	A,PTC+3
	MOVNM	A,PTC+1
	MOVE	A,PTH	;POINTER HEIGHT
	FMPR	A,B
	PUSHJ	P,NFIX	;H SIN A
	MOVEM	A,PTC+4
	MOVE	A,PTH
	FMPR	A,G
	PUSHJ	P,NFIX	;H COS A
	MOVEM	A,PTC+5
	MOVE	A,NEWY
	PUSHJ	P,NFIX
	MOVE	B,A
	MOVE	A,NEWX
	PUSHJ	P,NFIX
	IRPS	X,,0 2 4
	ADDM	A,PTC+X
TERMIN
	IRPS	X,,1 3 5
	ADDM	B,PTC+X
TERMIN

;FALLS THROUGH

;POINTER OUT--
;SENDS OUT POINTER COORDS CALCULATED
;BY NEWPT

PTOUT:	MOVEI	G,0
	MOVEI	A,1777
PTOUT0:	ANDM	A,PTC(G)
	AOS	G,
	CAIG	G,5
	JRST	PTOUT0
	MOVEI	A,NPTAT
	MOVEI	G,0
PTOUH:	MOVE	B,PTC(G)
	LSH	B,-6
	ADD	A,B
	PUSHJ	P,SEND
	MOVE	A,PTC(G)
	LSH	A,2
	MOVE	B,PTC+1(G)
	LSH	B,-8.
	ADD	A,B
	PUSHJ	P,SEND
	MOVE	A,PTC+1(G)
	PUSHJ	P,SEND
	CAIE	G,0
	POPJ	P,

	MOVE	A,PTC+2
	LSH	A,-2
	PUSHJ	P,SEND
	MOVE	A,PTC+2
	LSH	A,6
	MOVE	B,PTC+3
	LSH	B,-4
	ADD	A,B
	PUSHJ	P,SEND
	MOVE	A,PTC+3
	LSH	A,4
	MOVEI	G,4
	JRST	PTOUH

;SEND--
;ASSEMBLES IF OUTPUT IS TO NOVA
;TAKES 8 BITS IN A, AND SENDS OUT AS
;2 WORDS WITH PROPER FLAGS
IFN FNV,[
SEND:	ANDI	A,377
	MOVE	B,A
	LSH	A,-3
	TRO	A,1
	PUSHJ	P,NOUT
	ANDI	B,17
	LSH	B,1
	MOVE	A,B
NOUT:	TRO	A,100
	.IOT	TUOC,A
	POPJ	P,

ASEND:	PUSH	P,A
	LSH	A,-8.
	PUSHJ	P,SEND
	POP	P,A
	PUSHJ	P,SEND
	POPJ	P,

]

;SEND--
;ASSEMBLES IF OUTPUT TO TTY
;PRINTS WHAT WOULD BE SENT TO NOVA
IFN FTY,[
SEND:	ANDI	A,377
	MOVE	B,A
	PUSH	P,B
	LSH	A,-3
	TRO	A,1
	PUSHJ	P,NOUT
	POP	P,B
	ANDI	B,17
	LSH	B,1
	MOVE	A,B
NOUT:	TRO	A,100
	PUSHJ	P,NOUH
	POPJ	P,

ASEND:	PUSH	P,A
	LSH	A,-8.
	PUSHJ	P,SEND
	POP	P,A
	PUSHJ	P,SEND
	POPJ	P,
NOUH:	MOVE	B,A
	PUSHJ	P,CRR
	MOVE	A,B
	PUSHJ	P,NPNT
	POPJ	P,

;CRUMMY NUMBER PRINT OUT ROUTINES
;FOR PRINTING WORDS ORDINARILY
;SENT TO NOVA.
;SNARFED FROM RG WITHOUT COMMENT

NPNT:	MOVE	B,A
NPNH:	IDIVI	B,10
	HRLM	C,(P)
	SKIPE	B
	PUSHJ	P,NPNH
	HLRZ	A,(P)
	ADDI	A,"0
	JRST	NTYO

CRR:	MOVEI	A,15
	PUSHJ	P,NTYO
	MOVEI	A,12
NTYO:	.IOT	TYOC,A
	POPJ	P,
]
]
FLOAT:	TLC	A0,232000
	FADR	A0,A0
	POPJ	P,

FIX:	FADR	A0,[0.5]
NFIX:	PUSH	P,A1
	MULI	A0,400
	TSC	A0,A0
	ASH	A1,-243(A0)
	MOVE	A0,A1
	SKIPG	A0
	AOS	A0
	POP	P,A1
	POPJ	P,

