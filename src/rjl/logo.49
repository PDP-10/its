TITLE LOGO
;         TM
;(C) COPYRIGHT,1970,BOLT BERANEK AND NEWMAN INC., CAMBRIDGE, MASS.???????
;LARRY KRAKAUER:  MICRONETICS:  204 ARSENAL ST. WATERTOWN  926-2570
;WALLY WEINER:  BBN:  491-1850   EXT. 423
DEFINE EXP
TERMIN
IF1 EXPUNGE WORD
HCORE==0	;HAIRY CORE STUFF
;ACCUMULATOR ASSIGNMENTS

F=0	;FLAGS AND BITS
A=1
B=2
C=3
D=4
E=5
G=7
H=10
L=12
M=13
N=14
W=15
S=16	;ARGUMENT PUSHDOWN STACK
P=17	;CONTROL PUSHDOWN STACK
TA==D
TB==TA+1
TC==TA+2
TD==TA+3
TE==TA+4

TYOC==1
TYIC==2
DKOC==3
TUIC==4
TUOC==5
DCHN==6
DRIBC==7
CSC==10
FD=600000
ENDFIL==0
CH==C
;FLAGS FOR THE LH OF F

LDONF==1	;LINE DONE FLAG FOR EDIT MODE
EDITF==2
UPFF==4	;COMEXR CALLED FROM RETURN CODE, NOT FROM COMEX
TIF==10
BREAKF==20
ERRORF==40	;CALLING UPROD FROM ERROR PROCESSOR
GOF==100	;USER TYPED  DIRECT GO
RQF==200	;A REQUEST IN PROGRESS
COMF==400	;1 IF USER PROCEDURE BEING LEFT SHOULD BE TREATED LIKE COMMAND
GCF==1000	;1 IF THIS K HAS NOT BEEN GARBAGE COLLECTED YET
TITLEF==2000	;DOING TITLE DURING A TO
BROKE==4000	;ERROR WAS NON-TYI BREAK KEY
GETF==10000	;GET IN PROGRESS
SAVEF==20000	;SAVE IN PROGRESS, FOR ALTERNATE FORMS OF TYPEOUT
SNAPAR==40000	;SNAP GOT AS ARG TO PROC

;FLAGS FOR THE RIGHT HALF OF F

TF==1	;A TEMPORARY FLAG FOR MANY ROUTINES
PMF==2	;+- SIGN
NWF==4	;NOT WORD INPUT
CRF==10
FSYMF==20	;0 IF FIRST ELEMENT OF LINE BEING COMPILED,USED W NNUMF
TISLF==40	;TIS LITERAL FLAG
NOLSPF==100	;IN LSTPLN, SUPPRESS LEADING SP., ALSO IN COMPIL
NNUMF==40	;NON-NUMERIC INPUT
PREFIX==200	;FOR PWORD
SUFFIX==400	;ALSO FOR PWORD
MAKEF==1000	;COMPIL CALLED WITH THIS=1 MEANS CALLED FROM MAKE
STORED==2000
FLUSHF==4000	;GETTING AN ALREADY DEFINED PROCEDURE
EABBRF==10000	;DOING LIST ENTRY ABBREVIATIONS
ECONTF==20000	;  "    "     "   CONTENTS
EENTRF==40000	;  "    "     "   ENTRY
ENAMEF==100000	;  "    "     "   NAMES

;FLAG DEFINITIONS FOR LH OF STRING POINTER

DISPF==40	;DISPLAY LIST NAME (SNAP)
WORDF==100	;STRING IS A WORD
SENTF==200	;SENTENCE
EMPTYF==400	;EMPTY
UNBOUN==1000	;UNBOUND (NEVER IN A COMPILED ELEMENT)

;FLAG DEFINITIONS FOR LH OF COMPILED ELEMENT

MPF==400000
UPRF==200000
VARF==100000
LITF==40000
COMMTF==20000	;IS A COMMENT
STRF==COMMTF	;STRING FLAG.
LPARF==10000
RPARF==4000
INFF==2000	;INFIX OPERATNR
ANDF==1000	;USED IN TO LINES, IMPLIES THIS DUMMY PRECEDED BY AND
MAKESC==40	;INDIRECT BIT MEANS 2 LINE MAKE AND END OF NAME:
;ALSO IN THE LEFT HALF OF COMPILED ELEMENT ACAN BE STRING POINTER BITS

;FLAG DEFINITIONS FOR LEFT HALF OF FIRST WORD OF RP PAIR

TRACEF==400000	;THIS PROCEDURE IS BEING TRACED
HIDEPF==200000

;FLAG DEFINITION FOR LH OF 2ND WORD OF MACHINE NAME PAIR

COMPUT==400000	;IF ONE, THIS NAME MUST BE COMPUTED, ADDR IN RH

;FLAG DEFINITION FOR LEFT HALF OF VALUE WORD IN VP

GLOBLV==100000	;IF ONE, THIS IS THE GOBAL VALUE FOR THE VARIABLE
;UUO DEFINITIONS

ERROR=1000,,0
EXPAND=2000,,0
GARBAGE=3000,,0
SQUEZE=4000,,0

IF1 [	;STANDARD FLAGS
TBOX==0
TURTAS==1
OMFLAG==0	;OLDMUSIC FLAG
PHY==0	;PHYSICS HACK WITH PDP6
LFLAG==0
VFLAG==0	;VECTOR FLAG.
DFLAG==0
NOVA==1
FTY==0
FNV==1
SNAPFL==1
PRINTC \STANDARD=\
.TTYMAC FLAG
STAND==FLAG
TERMIN
IFE STAND,[
PRINTC \TBOX=\
.TTYMAC FLAG
TBOX==FLAG
TERMIN
PRINTC \TURTLE=\
.TTYMAC FLAG
TURTAS==FLAG
TERMIN
PRINTC \PHYSICS=\
.TTYMAC FLAG
IFE FLAG,PHY==0
IFN FLAG,PHY==1
TERMIN
PRINTC \LFLAG=\
.TTYMAC FLAG
IFE FLAG,LFLAG==0		;NO LIST OPERATIONS INCLUDED
IFN FLAG,LFLAG==1	;LIST OPERATIONS INCLUDED
TERMIN
IFN LFLAG,[
PRINTC \VECTORS=\
.TTYMAC FLAG
IFE FLAG,VFLAG==0
IFN FLAG,VFLAG==1
TERMIN
]
PRINTC \OLDMUSIC=\
.TTYMAC FLAGîIFE FLAG,OMFLAG==0
IFN FLAG,OMFLAG==1
TERMIN
NOVA==2
PRINTC \DFLAG=\
.TTYMAC FLAG
IFE FLAG,[DFLAG==0	;NO DISPLAY
SNAPFL==0
NOVA==0]
IFN FLAG,[	;DISPLAY
IFN FLAG-NOVA,[	;340 DISPLAY
DFLAG==1
SNAPFL==0
NOVA==0]
IFE FLAG-NOVA,[DFLAG==0
	NOVA==1]
]
TERMIN
IFN NOVA,[
	;NOVA DISPLAY
	FTY==0
	FNV==0
PRINTC /OUTPUT TO=/	;OUTPUT TO DISPLAY OR
.TTYMAC	FLAG	;PRINT OUTPUT FOR DEBUGGING PURPOSES
IFE FLAG,FTY==1
IFN FLAG,FNV==1
TERMIN
PRINTC /SNAPFLAG=/	;SNAPS
.TTYMAC FLAG
IFE FLAG,SNAPFL==0
TERMIN
]]IFN DFLAG,PRINTC /340 DISPLAY FLAVOR 
/
IFN NOVA,[
PRINTC /NOVA DISPLAY FLAVOR
/
IFN FTY,PRINTC /(DISPLAY OUTPUT TO CONSOLE)
/
IFN FNV,PRINTC /(DISPLAY OUTPUT TO NOVA)
/
IFN SNAPFL,PRINTC /SNAPS!!
/]
IFN PHY,PRINTC /PHYSICS HACK WITH PDP6
/]
A0==1	;AC'S FOR ARITHMETIC HACK
A1==2
A2==3
A3==4
A4==5

;STORAGE AREA SIZES
.RPL==40
.VPL==40
.UAL==40
.PSL==200
.CSL==200
.DPL==200
.SPL==40
.PPL==200
.WSL==2000
.INITA==.RPL+.VPL+.UAL+.PSL+.CSL+.DPL+.SPL+.PPL+.WSL
MSS==400

JOBUUO=40
JOB41=41

;STORAGE ALLOCATION TABLE DEFINITIONS

DEFINE TABLES
TT RP,.RPL,GCN1	;THESE THREE MAY BE IN ANY ORDER
 TT VP,.VPL,GCN1.1
 TT UA,.UAL
 TT PS,.PSL,GCN2	;THESE THREE MUST BE IN THIS ORDER
 TT CS,.CSL,GCN3
 TT DP,.DPL,GCN3.1
 TT SP,.SPL,GCN4	;THESE TWO MUST OCCUR IN THE SAME ORDER AS IN ACS
 TT PP,.PPL,GCN5
 TT WS,.WSL,GCN6	;THIS ONE MUST ALWAYS BE LAST SO MEM TRAP CAN BE USED AS END TEST
TERMIN
DEFINE POINTR
MM RP,A
 MM VP,C
 MM PS,A
 MM PS,D
 MM PS,M
 MM CS,A
 MM CS,D
 MM CS,M
 MM DPX,B
 MM WS,D
 MM WS,B
TERMIN
DEFINE U A1
UU A1,1
TERMIN
DEFINE UU A1,A2
A1:	BLOCK A2
.ZZZ=.ZZZ+A2
TERMIN


LOC 41
	JSR UUOTRP
	JSR TSINT

LOC 100
;THIS STUFF MUST BE HERE FOR MONITOR
MONCOM:
UNAME:	0
VALRET:	ASCIZ \:VP \
MONITX:	0	;UNDER MONITOR IF NON-ZERO
TTIME:	0
ONTIME:	0
GCTIME:	0
CRTIME:	0
NGCS:	0
GCTIM1:	0
CRTIM1:	0
LOGDBG:	0	;NON-ZERO=>LOGO BEING DEBUGED
NWSCHK:	0	;NUMBER OF TIMES WS CHECKED
VERS:	.FNAM2

DEFINE TT A1,A2,A3
NAL!A1:	0
TERMIN
TABLES	;NUMBER OF TIMES THIS SPACE EXPANDED
UUOTRP:	0
	JRST DOUUO
TSINT:	0
	0
	JRST PTSINT
JOBSA:	LOGEND,,LOGO
TIMEC:	0	;TIME LAST REST OR STARTED
;INTAIL CORE ASS AND GETS INCREMENTED AND DECREMENTED
LCORE:	<BEGSTO+.INITA>/2000+1
CORMAX:	15	;DON'T GO   OVER THIS, PLEASE.
ACORE:	0
	JRST .ACORE
CCORE:	0
	JRST .CCORE
COREA:	0
COREB:	0
COREC:	0
MOTORX:	0	;NON ZERO=>PDP6 PAGE ATTACHED FOR ESP
PDP6O:	SIXBIT \   USR      PDP6\
NVOICE:	-1
SILENT:	0
UNITS:	0
MUSTEM:	BLOCK 5
MUSONC:	141
TTYONC:	142
BOTHOC:	143
VOICEC:	143
MBLGTH==1200.	;MUSIC BUFFER SIZE (ONE MINUTE FOR FOUR VOICES)
MBUFP:	0	;MUSIC BUFFER POINTER
MBPOS:	0	;MUSIC BUFFER POSITION
MBMAX:	0	;MUSIC BUFFER MAXIMUM POSITION
NBRAKS:	0
LSTCH:	0
PUREX:	0	;NON-ZERO => PURIFY WHEN MOVING WORLD
READYX:	0	;NON-ZERO => WORLD HAS BEEN MOVED
SICKN:	4	;NUMBER OF TIMES TO BE SICK BEFORE YOU START DIEING

EOFJMP:	[ERROR .]	;WHERE TO GO ON EOF
FINOP:	SIXBIT /   DSK/
FINN1:	0
FINN2:	0
FOUTOP:	SIXBIT /  !DSK/
FOUTN1:	0
FOUTN2:	0
FILLNG:	0	;LENGTH OF FILE BEING WRITTEN
FILBFX:	0
FILOX:	0
FILEO:	SIXBIT /   DSK/
	0
	SIXBIT /FILES/
FILTEM:	0
FILTM1:	0
FILACC:	0
FILBYT:	0
FILNCH:	0
FILNFL:	0
FILPLX:	0
FSNAME:	SIXBIT \LOGO\	;SNAME FOR FILES
DSNAME:	SIXBIT \.LOGO.\	;SNAME FOR DRIBLE
LSNAME:	SIXBIT /IPG/
LFILEO:	SIXBIT /   DSK/
	0
	SIXBIT /LESSON/
DFILEO:	SIXBIT \  !DSK\
	0
	SIXBIT \DRIBLE\
DFILEI:	SIXBIT \   DSK\
	0
	SIXBIT \DRIBLE\
DRIBX:	0
TBL:	BLOCK 3
PATCH:	BLOCK 100
MBUFL==2000
TTYDEV==200
PLTDEV==205
MUSDEV==212
TURDEV==217
TBXDEV:	0
TBXOUT:	JFCL
CHOUT:	.IOT TYOC,C
CHIN:	.IOT TYIC,C
V1PNT:	0
V2PNT:	0
V3PNT:	0
V4PNT:	0
V1CNT:	0
V2CNT:	0
V3CNT:	0
V4CNT:	0
VPNT:	0
VCNT:	0
PLOTX:	0
PLOTY:	0
PLOTPS:	0
NOCTPR:	0
MBUF:	BLOCK MBUFL+4

.ZZZ=.

;UNSHARED AREA, NON-ZERO STUFF FIRST

FURST==.ZZZ	;IN CASE DIFFERENT SYSTEMS PUT DATA IN DIFFERENT PLACES
DEFINE MM A1,A2
A1!A2:	0
TERMIN
POINTR
PTOP:	0	;ORDER OF THE NEXT THREE IS EXTREMELY IMPORTANT, MUST BE
CTOP:	0	; THE SAME AS THEIR CORRESPONDING TABLES IN TT
DTOP:	0
WTOP:	0
CDBOT:	0	;BASE OF ALL DIRECT LINES
CBOT:	0	;BASE OF DIRECT LINE
RANNO:	0		;STUFF TO COMPUTE PSEUDO-RANDOM DIGIT
COF:	0	;CONTROLLER FLAG.  SET TO NON-ZERO WHEN CONTROLLER IN USE.


DEFINE TT A1,A2,A3
A1:	0
TERMIN
TABLES
LINEL:	72.	;LINE LENGTH.  CAN BE SETBY PRETTY
MINLNL:	10.	;MINIMUM LINEL CAN BE
LINRET:	67.	;SPACE OR TAB CAUSES RETURN IF CHARNO>LINRET
CHARNO:	0	;THESE FOR INPUT SECTION,
BCHAR:	0
TRACEM:	0	;LIKE BCHAR BUT ONLY FOR TRACE OUTPUT,
SCOUNT:	0
CHGNO:	0		;XWD SEQNO,CBOT; FOR CURRENT LINE. REPLACE WHEN COMING BACK TO THAT LEVEL,
NUMCNT:	0	;COUNT OF NUMBERS CHECKED BY NUMBRQ (FOR STRING MULT)
LINENO:	0
PRODNM:	0	;NAME OF PROCEDURE IN PROGRESS,
TRUTH:	0
CPP:	0		;POINTER INTO COMPILED LINE,
SSP:	0		;CONTENTS OF S AT START OF LINE,
SPP:	0		;     "   "  P,
		;ALSO DTOP ABOVE,
LINBOT:	0
SRCBOT:	0
NEWBOT:	0
NXLINE:	0	;PTR TO NEXT LINE IN CURRENT PROCEDURE,
THISPR:	0	;MACHINE PROCEDURE LAST IN, PTR TO 2ND ENTRY IN CMPT,
TOPROD:	0	;NAME OF PROCEDURE BEING DEFINED,
BRKTEM:	0	;TEM STORAGE FOR BREAKY ROUTINE,
SEQNO:	0		;VERSION NUMBER OF LAST LINE INPUTTED OR EDITED,
CRADIX:	0		;RADIX FOR CURRENT NUMBER CONVERSION,
GODEPT:	0	;THE NUMBER OF GO'S IN THE STACK,
BSS:	0	;SSP AXXOCIATED WITH GODEPTH, STACK AT LAST SAVED BREAK
BSP:	0	;SPP SIMILARLY
GCTEM:	0		;TEM STORAGE FOR GC AND ALLOCATOR,
UUOACS:	BLOCK 20
BLAST=.ZZZ-1
Z=0
IFE TBOX,[

TUARG==400000
TUSARG==200000
TUWAIT==100000
TUNULLS==40000
NULLC=="X
LTOUCH:	0
TOUCHA:	0
TOUCHS:	BLOCK 20
TOUCHT:	5
TTYF==1
OPENF==2
TURT:	NTURT
TURTP1:	0
TURTP2:	0
TURTC:	0
SEPTUR:	0
SNULLS:	0	;NUMBER OF NULLS TO BE SENT
NNULLS:	4	;NUMBER OF NULLS TO BE SENT AFTER A MOTION COMMAND
NTUCOM==7
	1000,,NTOUCH-1
NTURT:
NTOUCH:	.BYTE 10
	"A?"B?"C?"D?"E?"F?200
	.BYTE
	1000,,OTOUCH-1
OTURT:	TUARG+TUSARG,,35
	TUARG+TUSARG,,37
	TUARG+TUSARG,,34
	TUARG+TUSARG,,36
	TUWAIT,,33
	TUWAIT,,32
	TUARG,,7
	4.0
	4.0
	3.81
	3.81
	REPEAT 3,0
	REPEAT 7,.5
OTOUCH:	.BYTE 10
	20?21?22?23?24?25?26?27?200
	.BYTE

IFN DFLAG-NOVA,[
IFN NOVA	400000,,DTOUCH
IFN DFLAG	400000,,DISINT
DTURTL:	TUARG,,DFORWAR
	TUARG,,DBACK
	TUARG,,DLEFT
	TUARG,,DRIGHT
	DPEN2
	DPEN1
	TUARG,,7
]

]

IFN DFLAG,[
IRP X,,[X0,Y0,X1,Y1,X2,Y2,X3,Y3,X4,Y4]
X:	0
TERMIN
ANGLE:	0
SCHED:	4
	1
DTURT:	117,,20000
	21000,,301000
	3000,,3000
	3000,,3000
	3000,,3000
	3000,,3000
MOBYLS:	0
NODISF:	0
DPOS==100
DVECS=<DPOS_12>+10
DLIST:	TURTPT,,.+1
	MOBYPT,,0
TURTPT:	DTURT-1
MOBYPT:	DVECS-2
NX0:	0
NY0:	0
DCUR:	0
FX:	0
FY:	0
FOON:	0
HIDEF:	-1
DISONF:	0
DBASE:	0
DPENST:	0
.DTOP:	20
DFBME:	0
]



IFN DFLAG+NOVA+LFLAG+PHY,[
SX:	0	;VARIABLES FOR SIN-COS
SC:	0
SB:	0
SD1:	0
SQS1:	0.8125
	0.578125
SQS2:	0.302734
	0.421875
]
IFN NOVA,[		;VARIABLES FOR NOVA
PENM:	0	;PEN MODE
PTC:	BLOCK 6
CURA:	0
CURX:	0
CURY:	0
NEWA:	0
NEWX:	0
NEWY:	0
NOVX:	0
NOVY:	0
PTL:	12.0	;CONSTANTS FOR POINTER SIZE
PTH:	40.0
ORIG:	512.0	;REAL COORDS OF CENTER
SKLIM:	450.	;MAGNITUDE OF APPARENT SCREEN LIMIT
SNAPX:	0	;SNAP SWITCH
SNAPN:	0	;LAST USED SNAP NUMBER
NVERCD:	0	;ERROR CODE FROM NOVA
]

IFN PHY,[
PHYS:	0
PSCALF:	0.01
PSIN:	0
PCOS:	1.0
PANG:	0
]

IFN HCORE,BEGSTO:

IFN HCORE,[
LOC 4000
OFFSET 400000-4000
]
PURE::
PTSINT:	EXCH A,TSINT
	TLZE A,400000
	JRST CHNINT
	TRZE A,20000
	JRST MPVINT
	TRZN A,200000
	.DISMIS [ILLINT]
	EXCH A,TSINT
	JRST ALLOCP

MPVINT:	MOVE A,TSINT+1
	SUBI A,1
	HLRZ A,@A
	ANDI A,777000
	CAIE A,(IDPB)
	.DISMIS [ILLMPV]
	EXCH A,TSINT
	JRST ALOCWS

CHNINT:	TRZN A,1_<TYIC>
	JRST CHNIN1
	MOVEI A,TYIC
	.ITYIC A,
	JRST DISINT
	MOVEM A,LSTCH
	CAIN A,^G
	JRST BREAKY
DISINT:	MOVE A,TSINT
	.DISMISS TSINT+1
CHNIN1:	TRZN A,1_TUIC
	JRST DISINT
	MOVE A,TURT
	MOVE A,-1(A)
	JUMPL A,(A)
	MOVEM A,TURTP1
	MOVEI A,TOUCHS-1
	MOVEM A,TURTP2
	MOVEI A,TUIC
	.ITYIC A,
	JRST DISINT
	MOVEM A,TURTC
	.STATUS TUIC,A
	TRNN A,1000
	.IOT TUIC,A
CHNIN2:	ILDB A,TURTP1
	TRNE A,200
	JRST DISINT
	CAME A,TURTC
	JRST CHNIN2
	.RDTIM A,
	MOVEM A,@TURTP2
	JRST DISINT
WSCHEC:	SKIPN LOGDBG
	POPJ P,
	AOS NWSCHK
	PUSH P,A
	PUSH P,B
	PUSH P,C
	PUSH P,D
	MOVE A,W
	MOVE B,LCORE
	LSH B,12
WSCH1:	MOVE C,(A)
	JUMPE C,WSCHE
	SKIPG C
	.VALUE
	CAIL C,10000.
	.VALUE
WSCH2:	ADDI A,1
	MOVE D,(A)
	TRNE D,1
	.VALUE
	SOJG C,WSCH2
	ADDI A,1
	CAMN A,B
	JRST DCBAPJ
	CAML A,B
	.VALUE
	JRST WSCH1
WSCHE:	CAIL A,B
	JRST DCBAPJ
	SKIPE (A)
	.VALUE
	AOJA A,WSCHE
DCBAPJ:	POP P,D
	POP P,C
	POP P,B
	POP P,A
	POPJ P,

LOGOIN:	HRRZ A,JOBSA
	CAIE A,LOGO
	JRST (A)
	.RDTIME A,
	MOVEM A,TIMEC	;TIME STARTED
	MOVEM A,ONTIME
	MOVEM A,CRTIM1
	SKIPN MONCOM
	SETOM DFILEO+1
	SKIPN MONCOM
	SETOM MONITX
	.SUSET [.RUNAME,,TBL]
	MOVEI F,0
	.OPEN TYIC,[SIXBIT \  $TTY\]
	JRST	.-1	;SINCE MAY BE RUNNING UNDER MONITOR --SEE JBR
	.OPEN TYOC,[SIXBIT \  %TTY\]
	.VALUE
	JRST LOGO+1

LOGO:	JRST LOGOIN
	MOVEI A,BEGSTO
	HRLI	A,(A)
	ADDI	A,1
	MOVE B,LCORE
	LSH B,12
	SUBI B,1
	SETZM	-1(A)
	BLT	A,(B)	;CLEAR FROM JOBFF TO TOP OF ASSIGNED CORE

	MOVE	A,[XWD FURST,FURST+1]
	SETZM	FURST
	BLT	A,BLAST	;CLEAR FROM START OF CORE TO EITHER DDT OR JOBFF

	MOVE	A,[XWD SPFRST,FURST]
	BLT	A,FURST+SPLLEN-1 ;SET UP NON-ZERO PART OF UNSHARED CORE

	MOVEI A,BEGSTO
	HRRZI	B,ALOCTB
	HRRZI	C,RP

	HRRZM	A,(C)
	ADD	A,(B)
	ADDI	B,1
	CAIE	C,WS
	AOJA	C,.-4	;SET UP ALL INITIAL ALLOCATIONS


	MOVE	A,RP	;SET UP RIGHT HALVES OF SPACE POINTERS
	HRRM	A,RPA
	MOVE A,VP
	HRRM A,VPC
	MOVE	A,PS
	HRRM	A,PSA
	HRRM	A,PSD
	HRRM	A,PSM
	MOVE	A,CS
	HRRM	A,CSA
	HRRM	A,CSD
	HRRM	A,CSM
	MOVE A,DP
	HRRM A,DPXB
	MOVE	W,WS
	HRRM	W,WSB
	HRRM	W,WSD
	MOVE	P,PP

	HRRZI	A,(W)
	HRLI	A,.WBASE
	BLT	A,.WTOP-.WBASE-1(W)
	HRRZI	A,RESET
	HRRM	A,JOBSA	;DON'T REDO THE INITIAL STORAGE ALLOCATION
	MOVE A,LCORE
	LSH A,12
	SUBI A,1
	CAIGE	A,@WTOP	;IS WTOP INSIDE CURRENT ALLOCATION?
	EXPAND	WS	;NO, GET A K SO WS WILL FIT
	MOVEI	A,220000
	MOVEI B,1_<TYIC>
	.SETM2 A,
;REQUEST PDL AND ILL MEM REF TRAPS


	MOVEI	B,[ASCIZ /
LOGO./]
	SETZM	MBUFP
	TRZE	F,TF	;1 IF CALLED BY ERASE ALL
	JRST RESET
	PUSHJ	P,TOSS
	PUSHJ P,VERSN
	POP S,A
	PUSHJ P,PTOSS
	PUSHJ P,CRLF
	TRO F,TF	;GET HEADLINE NEWS
	TRZ F,TISLF
	PUSHJ P,PNEWS

;FALLS THROUGH
RESET:	SETZM NBRAKS
	SETZM SRCBOT
	MOVE A,BSS
	MOVE B,BSP
	JSP C,SETPDL
	MOVE A,CDBOT
	MOVEM A,CBOT
	SETZB	F,PRODNM
	MOVE	A,CBOT	;MAKE THE BASE OF THIS DIRECT LINE
	MOVEM	A,CTOP	;THE TOP OF ALL COMPILED LINES
	SETZM	TRACEM	;TRACE MARGIN 
	HRRZ	W,WS	;W INDEXES TO BASE OF WORK SPACE
	MOVEI	B,2
	PUSHJ P,DUMRES	;RESTORE GLOBAL VALUES
	MOVEM	B,DTOP	;FLUSH ALL DUMMIES
	MOVEI A,220000
IFE SNAPFL,MOVEI B,1_<TYIC>
IFN SNAPFL,MOVEI B,1_<TYIC>+1_<TUIC>
	.SETM2 A,
	SQUEZE	;COMPACT THE WORLD

MAINL:	MOVEI	B,[ASCIZ /?/]
	SKIPE	TOPROD	;ARE WE DEFINING A PROCEDURE NOW?
	MOVEI	B,[ASCIZ />/]	;YES
	SKIPN DFILEO+1
	MOVEI B,[ASCIZ \PLEASE LOG IN
?\]
IFN SNAPFL,[
	SKIPE	SNAPX
	MOVEI	B,[ASCIZ /_/]
]	PUSHJ	P,TIS
	 JRST	MAINL
	PUSHJ	P,COMPIL
	 JRST	MAINL	;GOT A STORED LINE
	PUSHJ P,EXECUT
	JRST MAINL

DOUUO:	MOVEM	17,UUOACS+17
	HRRZI	17,UUOACS
	BLT	17,UUOACS+16
	MOVE	17,UUOACS+17
	HLRZ	A,JOBUUO
	ASH	A,-11	;FLUSH AC, IF ONE
	CAILE	A,4	;SQUEZE IS THE HIGHEST KNOWN UUO
	JRST	ILLUUO
	JRST	@.+1(A)	
	 ILLUUO
	 ERRORR
	 ALLOCATOR
	 CALGAR
	 CMPRSS
CALGAR:	JSP	P,GARCOL	;NO PUSHES OR POPS IN GC
	JRST	UUORET

CALDDT:	.VALUE
	JRST COMEX


BREAKY:	EXCH	A,TSINT
	.IOPDL
	TLNE	F,TIF	;LEAVE IT SET FOR BRAKER ROUTINE
	ERROR	BREAK	;BREAK IMMEDIATELY BECAUSE TYPE IN HUNG.
	TLO	F,BREAKF	;OTHERWISE, JUST FLAG IT FOR LATER
	.DISMISS TSINT+1

;TABLE FOR INFIX OPERATORS

%%%==400000	;NOT AN INFIX OPERATOR
%%==200000	;IMMEDIATE, NOT DISPATCHED

INFCTB:	[ERROR .]		;SPACE, SHOULDN'T GET HERE
	GNSCOM			;41	!
	GNSLIT			;42	"
REPEAT 3,%%%,,GNSB		;43,44,45	#$%
	%%,,[INFF,,INCNKL+1]	;46	&	CONCATINATE
	GNSLIT			;47	'
	%%,,[LPARF,,LPREN+1]	;50	(
	%%,,[RPARF,,RPREN+1]	;51	)
	%%,,[INFF,,INTMSL+1]	;52	*
	GNSPLS			;53	+
	%%%,,GNSB		;54	,
	GNSMNS			;55	-
	%%%,,GNSB		;56	.
	%%,,[INFF,,INDIVL+1]	;57	/
REPEAT 10.,%%%,,GNSNUM		;60-71	0-9
	GNSVAR			;72	:
	GNSMWV			;73	;
	%%,,[INFF,,INLSTL+1]	;74	<
	%%,,[INFF,,INEQL+1]	;75	=
	%%,,[INFF,,INGRTL+1]	;76	>
	%%%,,GNSB		;77	?
IFN .-INFCTB-40,PRINTX ;INFIX TABLE LOST
;

COMPIL:	TRZ	F,STORED
	MOVE A,CTOP	;CTOP=NEXT AVAIL IN CS
	MOVEM A,CBOT	;CBOT=BASE OF CURRENT DIREC LINE
CMCOMP:	TRZ F,FSYMF	;ENTER HERE FROM CMAKE
	POP	S,L	;GET BYET POINTER TO INPUT STRING INTO L
	MOVEI	M,0		;NNUMF=NON-NUMERIC INPUT FLAG
COMPAB:	HRLI	L,10700+W	;PMF=PLUS/MINUS FLAG
	MOVEM	L,LINBOT	;NO LEADING SPACE PRINTED(FOR LSTPLN)
	IBP	L
GNS:	TRZ	F,NNUMF\PMF\NOLSPF	;NOLSPF SET BY LEAD. SP. AND SOME OTHER BREAK CHARS
	SETZB	N,SCOUNT	;CLEAR TYPE OF SYMBOL (N) AAND CHAR COUNT
	PUSHJ	P,NEWSTR
GNS1:	LDB	C,L	;PICK UP PREVIOUS TERMINATOR, MAY BE RELEVANT
	JRST	GNS3
GNS2:	TRO F,NOLSPF	;LEADING SPACE SEEN
	ILDB	C,L
GNS3:	CAIN	C," 
	JRST	GNS2
	JUMPE	C,ABBJ	;END OF STRING
	CAIN C,"_
	JRST GNSMKE
	CAIGE C,100
	CAIGE C,40
	JRST GNSB
	CAIN C,")
	TRZ F,NOLSPF
	MOVE D,INFCTB-40(C)
	TLZE D,%%
	JRST GNSINA
	JRST (D)
GNSA:	CAIL C,"0
	CAILE C,"9
GNSB:	TRO	F,NNUMF	;NOT NUMBER-SET NON NUMBER FLAG
GNSNUM:	IDPB	C,B		;STORE THE CHARACTER
	AOS	SCOUNT	;COUNT CHARACTER
	ILDB	C,L
	JSP D,SKPNAM
	JRST GNSEND
	JRST GNSA
;COME HERE AT END OF A POSSIBLE NAME. C HOLDS CHAR WHICH TERMINATED SCAN

GNSEND:	PUSH	P,WTOP		;IN CASE WE WANT TO FLUSH NEW SYMBOL
	PUSHJ	P,ENDSTR	;GOT A SYMBOL, FINISH IT
	POP	S,A		;THIS IS IT
	TRNN	F,NNUMF	;MIGHT IT BE A NUMBER, IE A LITERAL
	JRST	GNSN	;IT IS A POSSIBLE LINE NUMBER
;FALLS THROUGH!!
;FALLS THROUGH!!

;CHECK ELEMENT TO SEEE IF IT IS AN ABBREVIATION

ABBA:
	HRRZ	B,UA	;USER DEFINED ABBREVIATIONS FIRST
	PUSHJ	P,LOOKUP
	 JRST	ABBC
	MOVE	C,1(N)
	CAMN	C,[EXP -1]
	JRST	NOABBS	;A DELETED ABBREVIATION
	POP	P,WTOP	;THIS ELEMENT EXISTS, DON'T NEED ANOTHER COPY
	PUSH	S,LINBOT
	SUB	L,LINBOT
	PUSH	P,L	;SAVE RELATIVE POINTER INTO SOURCE STRING
	HRRZ	L,1(N)	;USE THE VALUE OF THE ABBREV AS THE NEW SOURCE
	AOJA	M,COMPAB	;WE ARE NOW ONE LEVEL DEEPER IN ABBREVS

ABBC:	MOVE	A,NEWBOT
	HRRZI	B,ABBT	;NOT USER ABBREV, TRY SYSTEM ABBREVS
	PUSHJ	P,SYSLUK
	 JRST	NOABBS	;NOT AN ABBREVIATION
	POP	P,WTOP
	PUSH	S,LINBOT
	SUB	L,LINBOT
	PUSH	P,L
	HRRZ	L,1(N)
	HRLI	L,350700
	SETZM	LINBOT
	AOJA	M,GNS


ABBJ:	JUMPE	M,CMPLA	;TOP LEVEL,DONE WITH WHOLE INPUT,ADD TERMINATOR
	POP	S,LINBOT	;NOT TOP LEVEL
	POP	P,L
	ADD	L,LINBOT
	SOJA	M,GNS1	;UP A LEVEL

CMPLA:	PUSHJ	P,CSTORE
	TRO	F,FSYMF	;NO LONGER FIRST ELEMENT
	JUMPN N,GNS
CMPEND:	TRNE	F,MAKEF
	POPJ P,
	TRZE	F,STORED
	JRST	TOLINE
	MOVE A,CBOT
	MOVEM	A,CPP	;WILL START EXECUTING HERE
	SUB	A,CDBOT	;MAKE IT RELATIVE TO BASE OF DIRECT LINES
	EXCH	A,0(P)	;PUT IT ON THE STACK
	JRST	1(A)	;R2 TO DENOTE IT NEEDS EXECUTION

;NOT AN ABBREVIATION, CHECK FOR EXISTING PROCEDURE NAMES

NOABBS:	MOVE	A,NEWBOT	;GET SYMBOL TO BE LOOKED UP IN RP(USER PROCEDURE SPACE)
	HRRZ	B,RP
	PUSHJ	P,LOOKUP
	 JRST	GNSP2
	POP	P,WTOP	;FLUSH	THE SYMBOL
GNSP1:	SUB	N,RP	;GET REL ADDR
	TLO	N,UPRF
	AOJA	N,CMPLA	;TO POINT SECOND WORD

GNSP2:	PUSH	P,N	;SAVE POINTER TO END OF USER TABLE
	MOVE	A,NEWBOT
	MOVEI	B,CMPT	;MACHINE PROCEDURE TABLE FOR COMPILER
	PUSHJ	P,SYSLUK
	 JRST	GNSP3
	POP	P,A	;FLUSH THE POINTER TO END OF USER TABLE, NOT NEEDED
	POP	P,WTOP	;FLUSH THE SYMBOL
	TLO	N,MPF	;CALL IT A MACHINE PROCEDURE
	SKIPL	(N)	;IS IT SPECIAL (MAKE)
	AOJA	N,CMPLA	;TO POINT TO SECOND WORD
	JRST	CMAKE	;WHY, YES

GNSP3:	POP	P,N	;POINTER TO END OF USER PROCEDURE TABLE
	POP	P,E	;FLUSH OLD WTOP, LEAVE NEW ONE, SAVE THE NEW SYMBLO
	MOVEI	E,2(N)	;SPACE FOR THE NEW ENTRY IN TABLE
	CAML	E,RP+1	;IS IT THERE ALREADY?
	EXPAND	RP
	MOVE	A,NEWBOT
	MOVEM	A,(N)	;NAME OF NEW PROCEDURE
	SETOM	1(N)	;NOT YET TO'D
	SETZM	2(N)	;NEW END OF TABLE
	JRST	GNSP1

GNSN:	MOVEI	A,1
	TRNE	F,PMF	;SAW A SIGN?
	CAME	A,SCOUNT	;YES, WAS IT THE ONLY CHARACTER?
	SKIPA			;NO TO EITHER
	JRST	ABBA		;YES TO BOTH, "+" OR "-" ONLY
	POP	P,A	;FLUSH THE OLD WTOP
	HRLZI	N,LITF\WORDF+W
	HRR	N,NEWBOT
	TRNN	F,FSYMF\MAKEF\PMF  ;IS IT FIRST ELEMENT AND UNSIGNED?
	TRO	F,STORED	;YES, NUMBER+FIRST_STORED LINE
	JRST	CMPLA

GNSPM:	TRO	F,PMF	;SET PLUS-MINUS FLAG
	JRST	GNSB

;COMMENTS, LITERALS, AND VARIABLE NAMES GET COPIED AND EXTRA SPACES FLUSHED

GNSCOM:	TLOA	N,COMMTF
GNSLIT:	TLO	N,LITF
WEFA:	MOVEI	D,(C)	;SAVE THE PROPER TERMINATOR
	PUSHJ	P,WEFS
	POP	S,B
	IOR N,B
	IBP	L
	JRST	CMPLA

GNSVAR:	TLO N,VARF
	TRZ F,TF	;SET BY NON-#
WEFV:	ILDB C,L
	JSP D,SKPNAM
	JRST VAREND	;DONE
	CAIL C,"0	;IS IT A NUMBER?
	CAILE C,"9
	TRO F,TF	;NO, NOTE
	IDPB C,B	;OK, STORE IT
	JRST WEFV

VAREN1:	IBP L
VAREND:	CAMN B,NEWBOT	;IS THIS LOSER EMPTY?
	ERROR NMERR5	;YES, CAN'T BE NAME
	TRNN F,TF	;NO, IS IT ALL NUMBERS?
	ERROR NMERR6	;YES, ALSO ILLEGAL AS NAME
	PUSHJ P,ENDSTR	;OK, FINISH STRING
	PUSH P,N
	MOVE A,(S)
	MOVEI B,MV	;SEE IF IT IS A MACHINE VAR
	PUSHJ P,SYSLUK
	JRST VAREN2	;NO
	POP P,N	;YES, JUST STORE NAME
	POP S,B	;EVAL WILL DO A PUSHJ TO THING
	IOR N,B
	JRST CMPLA
VAREN2:	MOVE B,VP	;NOT SYS, IS IT IN VP?
	MOVE A,(S)	;GET NAME
	PUSH S,A	;THIS SO MAKEN WILL WORK
	PUSHJ P,LOOKUP	;IN VP?
	 PUSHJ P,MAKEN	;NO, MAKE A NEW GLOOBAL
	POP S,A	;CLEAN UP
	POP S,A
	MOVEI B,1(N)	;POINTER TO VALUE CELL IN VP
	SUB B,VP
	POP P,N
	IOR N,B
	JRST CMPLA

WEFS:	TRZ	F,TF\NWF
	IFN LFLAG,[
	SETZ	H,
]
WEFC:	ILDB	C,L
	IFN LFLAG,[
	CAIN	C,"(
	AOJA	H,WEFC1
	CAIN	C,")
	SOJA	H,WEFC2
	JUMPN	H,WEFC2
]
	CAIN C," 
	IFN LFLAG,[WEFC1:
]
	TRO F,NWF	;SPACE MEANS MORE THAN ONE WORD
	IFN LFLAG,[WEFC2:
]
	CAIN	C,(D)	;DONE YET?
	JRST	WEFB
	JUMPE	C,WEFD	;NO SECOND " / OR ;
	TRO	F,TF	;HAVE SEEN A REAL CHAR
	IDPB	C,B
	JRST WEFC

WEFD:	TLNN N,COMMTF	;IF A COMMENT, EOL IS OK
	ERROR INERR1	;BUT NOT LITS OR VARS
WEFB:	TRNE	F,TF	;IS THIS THING EMPTY?
	JRST	ENDSTR	;NO, FINISH THE STRING NORMALLY
	PUSH	S,[XWD W+WORDF\EMPTYF,0]	;EMPTY
	POPJ	P,

GNSMNS:	SKIPA N,[INFF,,INMNSL+1]
GNSPLS:	MOVE N,[INFF,,INPLSL+1]
	TRON F,NOLSPF	;SPACES BEFORE?
	JRST GNSIN	;NO, INFIX
	ILDB C,L	;YES, AFTER?
	CAIE C," 
	ADD N,[MPF-INFF,,2]	;NO, CONVERT OPERATOR FROM INFIX TO PREFIX
	JRST GNSTOR

GNSMKE:	SKIPA N,[INFF,,IMAKEL+1]
GNSINA:	MOVE N,(D)
GNSIN:	IBP L
GNSTOR:	PUSHJ P,CSTORE	;STORE THIS ONE, LEAVE B AS IS
	TRO F,FSYMF	;NO LONGER FIRST ELEMENT
	SETZB N,SCOUNT
	JRST GNS1	; ... AND SKIP CALL TO NEWSTR

;CALL WITH JSP D,
;SKIP UNLESS CHAR IN C IS RESERVED (NOT LEGAL NAME CONSTITUENT)
SKPNAM:	CAIGE C,100
	CAIGE C,40
	JRST SKPNM1
	SKIPL INFCTB-40(C)
	JRST (D)
	JRST 1(D)
SKPNM1:	CAIN C,24	;^T, LIKE "
	JRST 1(D)
	CAIN C,^_	;ACCEPT ^_ AS NAME CONST (KLUDGE FOR LONG-FORM MAKE)
	JRST 1(D)
	CAILE C," 
	CAILE C,172	;SMALL Z
	JRST (D)
	JRST 1(D)	;IT'S OK, SKIP

GNSMWV:	TLO N,VARF\SENTF
	TRZ F,TF
GNMWV1:	ILDB C,L
	CAIN C,";
	JRST VAREN1
	JUMPE C,[ERROR .]
	CAIL C,"0
	CAILE C,"9
	TRO F,TF
	IDPB C,B
	JRST GNMWV1

CMAKE:	TRNE	F,MAKEF	;ALREADY IN A 2 LINE MAKE?
	AOJA	N,CMPLA	;YES
	LDB	C,L
	JUMPE	C,CMAKE2
	MOVE	A,L
	ILDB	C,A
	CAIN	C," 
	JRST	.-2	;SAD SPC
	CAIE	C,"!	;MAKE-COMMENT-CR
	AOJA	N,CMPLA
	PUSHJ	P,NEWSTR
	MOVE	C,LINBOT
	MOVEM	C,SRCBOT	;FOR GC
	PUSH	S,[XWD W+COMMTF,0]
	PUSHJ	P,BTFCP1
	ADDI N,1
	PUSHJ	P,CSTORE
	POP	S,N
	JRST	CMAKE3
CMAKE2:	ADDI N,3	;ADD 2 MORE TO CONVERT TO 2 LINE MAKE
CMAKE3:	TRO	F,MAKEF
	PUSHJ	P,CSTORE
	MOVEI	B,[ASCIZ /   NAME /]
	PUSHJ	P,TIS		;ASK FOJ IT
	JRST	.-2
	PUSHJ	P,CMCOMP
	SOS	A,CTOP
	MOVE N,[MPF,,MAKL2+1]
	PUSHJ P,CSTORE
	MOVEI	B,[ASCIZ /   THING /]	;CONTINUE TO ASK
	PUSHJ	P,TIS
	JRST	.-2
	PUSHJ	P,CMCOMP
	TRZ	F,MAKEF
	JRST	CMPEND

CSTORE:	MOVE	A,CTOP
	MOVEM	N,@CSA
	AOS	A,CTOP
	MOVEI	A,@CSA
	CAML	A,CS+1
	EXPAND	CS
	POPJ	P,

EXECUTE:
	HRRZI	A,(S)
	SUB	A,SP
	MOVEM	A,SSP
	HRRZI	A,(P)
	SUB	A,PP
	MOVEM	A,SPP
EXECU0:	HRROS (P)	;SIMULATE FIRST INST. OF INVAL
	PUSH	P,[EXP [EXP [ERROR NOCMD]]]
	TLZE	F,BREAKF
	ERROR	BREAK
	MOVE	A,CPP
EXECU1:	SKIPN	C,@CSA	;IS IT EOL?
	JRST NULEX	;YES, EXIT
	TLNN	A,COMMTF	;IS IT A COMMENT?
	JRST	GARGS		;NO, GO TO IT
	AOS	A,CPP
	JRST	EXECU1		;IGNORE COMMENT

NULEX:	SOS CPP
	JSP D,COMXR2
	POPJ P,

EVAL:	AOS A,CPP	;LOAD A AND C
	MOVE C,@CSA
	PUSHJ P,INVAL
	SOS CPP	;OLD EVAL DIDN'T AOS POINTER
	POPJ P,

;FOR INVAL, A MUST HAVE COPY OF CPP
;C MUST HAVE CURRENT ELEMENT
;C RETURNS NEXT ELEMENT AFTER EXPRESSION
INFLP:	PUSH P,C
EXCTCM:	AOS A,CPP
	SKIPA C,@CSA
INVAL:	HRROS (P)	;LH -1 IS NULL INFIX OPERATOR
	JFFO C,.+2
	ERROR ERMSSG
	JRST @.+1(D)
	EXCTMP
	EXCTUP
	EXCTV
	EXCTL
	EXCTCM
	EXCTLP
	[ERROR PRNER1]
	[ERROR INFER1]

EXCTMP:	HLL C,(C)	;FETCH # OF ARGS
XCTMP1:	TLZ C,340000
	PUSH P,C
	JUMPL C,EXCTP4	;JUMP IF TAKES NO ARGS
XCTMP2:	AOSA A,CPP
XCTMP3:	MOVE A,CPP
	MOVE C,@CSA
	CAMN C,[MPF,,OFL+1]	;IS IT "OF"?
	JRST XCTMP2	;YES, SKIP IT
GARGS:	PUSHJ P,INVAL	;GET ARGS TO PREFIX EXPRESSIONS
	HRLZI C,-1
	ADDB C,(P)	;COUNTS ARG; ALSO GETS COMPILED ELEMENT
	JUMPGE C,ANDCHK
	SOS CPP		;FOR COMPATIBILITY W. OLD EVAL
EXCTP4:	POP P,THISPR
	TLZE F,SNAPAR	;HAS A SNAP BEEN GOBBLED?
	PUSHJ P,SNAPCK	;YES, CHECK THAT THAT'S GOOD.
	MOVE C,(C)	;FETCH ADDRESS OF ROUTINE
	PUSHJ P,(C)	;CALL PROCEDURE
	MOVSI A,DISPF
	TDNE A,(S)
	TLO F,SNAPAR
	AOS CPP
	JRST XCTINF

SNAPCK:	MOVE A,THISPR
	MOVE A,(A)
	TLNN A,40000
	ERROR NOSNAP
	POPJ P,

ANDIG:	AOSA A,CPP
ANDCHK:	MOVE A,CPP
	MOVE C,@CSA
	CAMN C,[MPF,,ANDL+1]	;IS IT AND?
	JRST ANDIG
	JRST GARGS

EXCTUP:	MOVEI A,(C)
	HLL C,@RPA	;FETCH NO. OF ARGS
	PUSH P,C
	HRRI C,[UPROD]	;PRESERVE NO. OF ARGS IN LEFT HALF
	JRST XCTMP1

EXCTV:	PUSH S,C
	TLNE C,W	;SEE IF IT IS A POOINTER TO A NAME
	JRST .+4	;YES, DO A THING
	MOVE A,@VPC	;NO, GET VALUE OUT OF VP
	MOVEM A,(S)	;AND PUT IT ON STACK
	JRST .+2	;SKIP THE THING
	PUSHJ P,THING	;MACHINE VARIABLE, OR OTHERWISE NOT INTERNED
	MOVSI A,DISPF
	TDNE A,(S)
	TLO F,SNAPAR
	JRST OPEX

EXCTL:	PUSH S,C
OPEX:	AOSA A,CPP
XCTINF:	MOVE A,CPP	;RESTORE A
	SKIPL (P)	;- (P) MEANS NO OP.
	JRST INFDO
NXTINF:	MOVE C,@CSA
	TLNE C,INFF
	JRST INFLP
	SKIPGE (P)	;CHECK AT VALID RETURN
	POPJ P,
	ERROR .	;NO (THIS SHOULD NOT HAPPEN)

INFDO:	POP P,C
	MOVEM C,THISPR
	MOVE C,(C)
	PUSHJ P,(C)
	MOVE A,CPP	;RESTORE A
	JRST NXTINF

EXCTLP:	AOS A,CPP
	MOVE C,@CSA
	TLNE C,MPF
	JRST MULTAR
XCTLP1:	PUSHJ P,INVAL
	TLNN C,RPARF	;CHECK MATCHING RIGHT PAREN
	ERROR PRNER2
	JRST OPEX

SPECWD:	ERROR	EVER5
EXIT:	ERROR	XITERR

SCOMEX:	SOS	CPP
COMEX:	JSP	D,COMEXR
	POPJ	P,

COMEXR:	POP	P,A	;THE RETURN FROM THE COMMAND
	TLNN A,-1
	JRST (A)
COMXRA:	POP	P,A	;RET. FROM INVAL
COMXR2:	POP P,A	;SHOULD BE FAKED NOCMD ERROR
	CAIE	A,[EXP [ERROR NOCMD]]
	ERROR COMERR
COMXRC:	PUSHJ	P,GNE	;NEXT ELEMENT
	 JRST	COMXRD	;NO MORE
	CAME A,[MPF,,ELSEL+1]	;IS LINE ENDED BY ELSE?
	JRST EXECUTE	;GO DO NEXT COMMAND ON LINE
	AOS A,CPP	;YES, SCAN TO ACTUAL EOL
	SKIPE @CSA
	AOJA A,.-1
	JRST .+2
COMXRD:	AOS	A,CPP
	ANDI	A,-1	;NOT NECESSARY IF ALL SETS OF CPP ARE HRRZM'S
	CAME	A,CTOP	;DID WE JUST FINISH A DIRECT LINE?
	JRST (D)
	MOVE	A,-1(P)	;YES
	POP	P,-1(P)
	ADD	A,CDBOT
	MOVEM	A,CBOT
	MOVEM	A,CTOP
	JRST	(D)


CALLDO:	JSP	D,COMEXR ;CHECK IF AT BEG OF LINE, IF NOT DON'T RETURN
	PUSHJ	P,COMPIL
	 POPJ	P,	;STORED THE LINE, NO NEED TO EXECUTE
	MOVE	A,(P)
	EXCH	A,-1(P)
	MOVEM	A,(P)	;PUT PTR TO "DIRECT" LINE IN BEHIND THE RETURN
	JRST	EXECU0


MULTAR:	MOVSI B,200000
	TDNE B,(C)
	JRST XCTLP1
	PUSH P,C
	PUSH S,[W+WORDF,,DUMMYV]
	AOS A,CPP
	MOVE C,@CSA
MULAR1:	JUMPE C,[ERROR ERMSSG]
	TLNE C,RPARF
	JRST MULAR2
	PUSHJ P,INVAL
	JRST MULAR1
MULAR2:	POP P,THISPR
	MOVE C,THISPR
	MOVE C,(C)
	PUSHJ P,-1(C)
	AOS CPP
	JRST XCTINF

;TABLE ADDRESS IN B
;SYMBOL POINTER IN A
;INDEX FOR ENTRIES IN TABLE B IN LH OF C IF NECESSARY
;OUTPUT IS ABS ADDR OF ENTRY (IN N)

LOOKBK:	MOVEI	N,-2(B)	;SEARCH BACKWARDS, POINT AT LAST ENTRY
	HRROI	E,-2	;NOT JUST AFTER IT
	HRLZI	C,W
	JRST	LOOK1


SYSLUK:	MOVEI	C,0
	JRST	LOOK0

LOOKUP:	HRLZI	C,W
LOOK0:	MOVEI	E,2
	MOVEI	N,(B)	;USE N FOR STEPPING THRU TABLE

LOOK1:	ADDI	A,(W)	;MAKE A ABSOLUTE
	MOVN	B,(A)	;GET THE LENGTH OF THE WS ELEMENT
	HRLI	A,-1(B)	;PUT -L-1 OF WS ELEMENT IN LH OF A
	TLNN	C,W
	AOBJN	A,.+1

LOOKL:	MOVE	B,A	;USE B FOR CHANGING A
	HRR	C,(N)	;GET THE NAME OF THIS ENTRY IN THIS TABLE
	TRNN	C,-1	;0 AT END OF TABLE
	POPJ	P,

LOOKL1:	MOVE	D,@C	;GET A WORD OF THIS ENTRY
	XOR D,(B)
	TDNE D,[-2]	;DON'T CARE ABOUT LAST BIT
	JRST	LOOKN	;NO, NOT A MATCH FOR THIS SYMBOL
	ADDI	C,1	;POINT AT NEXT WORD OF THIS ENTRY
	AOBJN	B,LOOKL1	;IF NOT DONE WITH THIS ELEMENT, GO BACK
	JRST	CPOPJ1	;DONE WITH THIS SYMBOL, COMPLETE MATCH

LOOKN:	ADD	N,E
	JRST	LOOKL	;NEXT ENTRY

UPROD:	MOVE	A,-1(P)
	POP	P,-1(P)
	MOVNI	B,1
	CAMN	B,@RPA	;IS THE PROCEDURE DEFINED?
	 ERROR	EVER3	;NO, X NEEDS A MEANING
	MOVEI	B,(A)
	CAMN	B,TOPROD	;IS THIS THE ONE BEING DEFINED?
	 ERROR	EVER4	;YES, X HAS NOT BEEN COMPLETELY DEFINED
	TLZE F,SNAPAR
	 ERROR NOSNAP

UPROD1:	PUSH	P,PRODNM	;PUSH THIS FIRST SO IT CAN BE LAST OFF
				; FOR COMERR IN A STORED LINE
	PUSH	P,CHGNO
	PUSH	P,LINENO
	PUSH	P,DTOP
	PUSH	P,TRUTH
	HRRZ	B,CPP
	CAMGE	B,CDBOT
	JRST	.+4
	SUB	B,CDBOT
	TLO	B,400000	;NOTE THIS ONE RELATIVE TO CDBOT
	JRST	.+3	;INSTEAD OF RELATIVE TO BASE OF THIS LINE
	SUB	B,CHGNO	;LINE GENERATION NO AND LOCATION REL TO CS
	HRRZI	B,(B)	;MAKE SURE LH IS ZERO
	PUSH	P,B
	PUSH	P,SSP
	PUSH	P,SPP

	SETZM	TRUTH
	SETZM	LINENO
	HRRZM	A,PRODNM

	TLZE	F,ERRORF	;WAS UPROD CALLED BY ERROR
	JRST	MAINL

	MOVE	B,DP	;LOC OF DUMMY ARG TABLE
	HLRE	C,A	; + NO OF ARGS AT SCAN TIME -1
	ADDI	C,1
	MOVEI	E,(C)
	ADDI	E,1(C)
	ADD	B,DTOP	;PART OF TABLE ALREADY USED
	ADDI	B,(E)	;AMT FOR DUMMY NAMES
	CAML	B,DP+1	;ALL FIT IN DP?
	EXPAND	E,DP	;EXPAND THE TABLE AT LEAST THIS MUCH

	ADDM	C,DTOP
	ADDM	C,DTOP	;UPDATE AMT USED

	HRRZ D,@RPA
	PUSH	P,BCHAR	;SAVE CURRENT STATE OF MARGIN
	MOVE	E,TRACEM	;MARGIN FOR TRACE
	ANDI	E,17		;INDENT AT MOST 14 SPACES
	MOVEM	E,BCHAR
	TRZ	F,TF	;IF SET WILL DENOTE THAT THIS PROC IS TRACED
	MOVEI	A,-1(A)
	SKIPGE	A,@RPA	;FETCH NAME OF PROCEDURE AND SKIP IF NOT TRACED
	TRO	F,TF		;TRACEF IS THE SIGN BIT
	PUSH	P,C
	TRNE	F,TF
	SKIPN	CHARNO
	SKIPA		;NOT TRACING OR AT MARGIN
	PUSHJ	P,CRLF	;NOT AT MARGIN, GET THERE
	TRNE	F,TF
	PUSHJ	P,INDENT
	POP	P,C
	TRNE	F,TF
	PUSHJ	P,CALPTS	;TRACED, TYPE OUT THE NAME


	MOVEI	D,1(D)	;POINT TO PTR. TO "TO" LINE
	MOVE D,@PSD	;FETCH PTR TO TO LINE
	MOVN	E,C	;-N
	MOVEI	C,1(S)	;STACK LOCATION
	ADD	C,E	;LOCATION IN STACK OF FIRST DUMMY
	HRL	C,E	;-COUNT OF DUMMIES
	HRRZ	G,DP
	ADD	G,-5(P)	;OLD VALUE OF DTOP
	JUMPGE	C,UPFRST	;NO DUMMIES, GET FIRST LINE

	MOVE	A,[440700,,[ASCIZ / OF /]]
UPDVCL:	TRNE	F,TF
	PUSHJ	P,CLPTS1	;IF TRACED, TYPE "OF" OF " AND "
	MOVEI	E,042		;TO QUOTE INPUTS IF TRACING

	MOVE	A,@CSD	;LOOP TO COPY INTO DP, GET DUMMY NAME
	TLNN A,VARF	;IS IT A DUMMY NAME?
	AOJA D,.-2	;NO, TRY NEXT ELEMENT
	MOVEM	A,(G)	;INTO DUMMY VAR TABLE
	SETZM 2(G)
	MOVE	B,(C)	;VALUE OFF S STACK
	ADD A,VP
	EXCH	B,(A)	;INTO VALUE CELL IN VP
	MOVEM B,1(G)	;STORE OLD VALUE IN DP
	MOVE A,(C)	;FOR TRACE
	TRNE	F,TF		;TRACING?
	PUSHJ	P,CLPTS0	;YES, TYPE INPUT QUOTED
	MOVEI	G,2(G)
	POP	S,0(S)	;POP 1 THING OFF S STACK WITHOUT CLOBBERING
	MOVEI	D,1(D)
	AOBJN	C,UPDVCL	;UPROD DUMMY VAR COPY LOOP

	TRNE	F,TF
	PUSHJ	P,CRLF		;NEATEN UP

	MOVEI	A,2
	TRZE	F,TF	;TRACING? ALSO, FLAG NO LONGER NEEDED
	ADDM	A,TRACEM	;NEXT TRACED CALL SHOULD BE INDENTED TWO MORE SPACES


UPFRST:	POP	P,BCHAR		;RESTORE OLD MARGIN
UPNEXT:	JSP	C,SRCHLN
	 CAMG	B,LINENO
	 JRST	OUTPTA
	MOVEM	A,NXLINE
UPNXT1:	MOVEM	B,LINENO	;FOUND A LINE NO > PREVIOUS LINE
	AOS	A,NXLINE
	MOVE	A,@PSA	;GET COMPILE PTR & CHANGE NO
	MOVEM	A,CHGNO

	MOVEM A,CPP
	PUSHJ P,EXECUTE

	AOS	A,NXLINE	;DONE WITH THE LINE, GET NEXT ONE
	JUMPE	A,UPNEXT	;DO IT THE LONG WAY IF ANY PROCEDURES CHANGED
	MOVE	B,@PSA	;FETCH THE LINE NO
	JUMPN	B,UPNXT1	;LINE NO<>0_MORE TO DO
	JRST	OUTPTA	;NO MORE LINES, DONE WITH PROCEDURE

CLPTS0:	TRO	F,PREFIX\SUFFIX
CALPTS:	HRLI	A,010700+W	;WORKSPACE ELEMENT
CLPTS1:	PUSH	P,B
	PUSH	P,C
	PUSH	P,D
	PUSHJ	P,PTOS		;FINALLY!
	POP	P,D
	POP	P,C
	POP	P,B
	POPJ	P,

OUTPTA:	TLO	F,COMF	;DENOTE THAT THERE IS NO OUTPUT
	JRST	RETA

RETTRN:	SKIPE	PRODNM
	ERROR		;"GO" ALONE CAN ONLY BE DIRECT
	SKIPG	GODEPTH
	ERROR	GOERR9	;NOPLACE TO GO
	SOS	GODEPTH	;TEST ABOVE SO IT DOESN'T GO NEGATIVE
GETOUT:	TLO	F,GOF	;GO AND GET TREATED MUCH THE SAME
	POP P,A
	POP P,A
	JRST RET0
ESTOP:	SKIPN	PRODNM
	ERROR	GOERR4		;STOP CAN ONLY BE STORED
	TLO	F,COMF
	JRST	RETURN

DUMRES:	MOVE D,DTOP	;START RESTOOREING
	ADD D,DP	;HERE
	SUBI D,1
DUMRS1:	CAIG D,@DPXB
	POPJ P,	;YES
	MOVE C,-1(D)	;VARIABLE NUMBER
	MOVE E,(D)	;OLD VALUE
	TRNE C,1	;DON'T CLOBBER NAMES
	MOVEM E,@VPC	;POP OOLD VALUE
	SUBI D,2	;NEXT!
	JRST DUMRS1

OUTPUT:	SKIPN	PRODNM
	ERROR	GOERR4
RETURN:	JSP D,COMEXR	;DO TH ENDOF LINE CHECKS
RET0:	POP	P,0(P)
RETA:	POP	P,SPP
	POP	P,SSP
	POP	P,A	;CPP
	POP	P,TRUTH
	POP	P,B
	PUSHJ P,DUMRES	;RESTORE VALUES
	MOVEM B,DTOP
	POP	P,LINENO
	POP	P,CHGNO
	JUMPGE	A,.+3	;RELATIVE TO BASE OF THIS LINE ?
	ADD	A,CDBOT	; NO, RELATIVE TO CDBOT
	JRST	.+2
	ADD	A,CHGNO
	HRRZM	A,CPP
	TLNE	F,GOF\GETF		;IS THIS RETURN UNTRACEABLE?
	JRST	RETD		;YES IT IS, SKIP TRACE STUFF


	MOVE	A,PRODNM
	MOVEI	A,-1(A)	;DON'T CHANGE PRODNM, COMERU MAY NEED IT
	SKIPL	A,@RPA	;ENDING A TRACED PROCEDURE?
	JRST	RETD	;NO
	MOVNI	B,2
	ADDB	B,TRACEM
	PUSH	P,BCHAR
	ANDI	B,17
	MOVEM	B,BCHAR
	PUSHJ	P,INDENT
	PUSHJ	P,PTOSS	;TYPE PROCEDURE NAME
	MOVEI	A,[ASCIZ / OUTPUTS /]
	TLNE	F,COMF	;DID IT OUTPUT?
	MOVEI	A,[ASCIZ / STOPS/]	;NO, IT STOPPED
	PUSHJ	P,PTOSSM
RETB:	TLNE	F,COMF
	JRST	RETC	;NO NEED TO TYPE WHAT IT OUTPUTTED, IT STOPPED
	TRO	F,PREFIX\SUFFIX
	MOVEI	E,042
	MOVE	A,(S)
	PUSHJ	P,PTOSS
RETC:	POP	P,BCHAR
	PUSHJ	P,CRLF

RETD:	MOVE E,PRODNM
	POP P,PRODNM
	TLZE	F,COMF	;DID THIS PROCEDURE OUTPUT?
	JSP	D,COMEXR	;NO, TREAT IT LIKE A COMMAND
	SETOM	NXLINE	;DON'T TRY TO REMEMBER WHERE WE WERE

	TLZN	F,GOF	;WAS RETURN CALLED BY GO
	SKIPN	PRODNM	;DIRECT COMMAND?
	POPJ P,
	JSP	C,SRCHLN	;SEARCH FOR THAT LINE AGAIN
	 CAME	B,LINENO	;THIS TIME FOR =
	 ERROR		;NO LONGER EXISTS, PROBABLY AN ERROR
	MOVEI	A,1(A)
	MOVE	B,CHGNO
	SUB	B,@PSA	;NEW POSITION OF SAME LINE IS ALWAYS <= OLD POS
	TLNE	B,-1	;ONLY CHECK THE SEQUENCE NUMBERS FOR EQUALITY
	 ERROR		;LINE CHANGED WHILE IN IT
	MOVN	B,B	;THE AMOUNT THE SAME LINE GOT MOVED BACK OR 0
	ADDM	B,CPP	;THAT THE RUNNING POINTER NEEDS TO BE OFFSET
	POPJ	P,	;OPERATIONS ALL EXIT WITH POPJ
			;  COMMAND DOES TOO AFTER JSP D,COMEXR


SRCHLN:	HRRZ	A,PRODNM	;THIS IS THE PROCEDURE TO SEARCH
SRCHL1:	HRRZ	A,@RPA	;GET RELATIVE PTR INTO PS SPACE
	CAIN	A,-1	;ERASED?
	ERROR	NOPROD	;THERE IS NO PROCEDURE X

SRCHLL:	MOVEI	A,2(A)	;POINT TO NEXT LINE NO
	HRRZ	B,@PSA	;GET THE LINE NO
	JUMPE	B,1(C)	;R1, FOUND END BEFORE THE LINE
	XCT	(C)	;ARG TO ROUTINE IS THE COMPARE
	JRST	SRCHLL	;CONTINUE ON NO COMPARE
	JRST	2,2(C)	;GOOD COMPARE, R2



GOTO:	PUSHJ	P,GNE
	 JRST	RETTRN
	SKIPN	PRODNM	;ERROR IF NOT STORED
	ERROR GOERR4
	CAME	A,[XWD MPF,TOL+1]
	JRST GONUM
	AOS	A,CPP
	MOVE	A,@CSA	;FETCH NEXT WORD
	CAMN	A,[XWD MPF,LINELL+1]
	AOSA A,CPP
GONUM:	MOVE A,CPP
	PUSHJ	P,NMEVL1

	JSP	C,SRCHLN	;IS THERE THAT LINE IN THIS PROCEDURE
	 CAIE	B,(M)
	 ERROR	GOERR3	;THERE IS NO LINE X
	MOVEI	A,-1(A)
	MOVEM	A,NXLINE	;SO STEP TO NEXT LINE WILL FIND THIS ONE WITHOUT SEARCHING
	JRST	COMEX

NUMEVL:	AOS	A,CPP
NMEVL1:	MOVE	L,@CSA	;FETCH LINE NUMBER
	TLNE	L,LITF	;IF THIS, DOES NOT NEED TO BE EVALED
	JRST	GOTO1	;IS A LITERAL, COULD BE A NUMBER
	SOS CPP
	PUSHJ	P,EVAL	;NOT A LITERAL, MUST EVALUATE
	POP	S,L	;VALUE RETURNED
GOTO1:	MOVEI	D,(L)	;SAVE POINTER FOR ERROR COMMENT
	TLNE	L,SENTF
	ERROR	GOERR2	;CANNOT BE A NUMBER IF IT IS A SENTENCE
	HRLI	L,010700+W
	PUSHJ	P,DNM
	ERROR	GOERR2	;IS NOT A LINE NUMBER
	POPJ	P,


;TYPE IN STRING
;CHECK FOR CONTROL CHARACTERS,EDIT CHARACTERS,ILLEGAL CHARACTERS
;CMDFLG=1_COMMAND STRING,=0_TEXT STRING
;EDITF=1_EDIT MODE, THEN A CONTAINS BYTE POINTER TO BEGINNING OF STRING
;BYTE POINTER TO OUTPUT STRING IN B
;RETURN STRING POINTER TO INPUT ON S-LIST
;R1_FAILURE, TRY AGAIN, R2_SUCCESS.
TIS:	.DISMISS [.+1]	;THIS IS JUST IN CASE
	MOVEI	C,2	;SET CONTINUATION TO SPACE TWO CHARACTERS
	MOVEM	C,BCHAR
	TRZ F,TISLF	;SET IF IN LITERAL
	TLZ	F,LDONF	;CLEAR LINE DONE FLAG FOR EDIT MODE
	TLNN	F,EDITF\GETF	;DON'T TYPE > OR _ IF EDITING
	PUSHJ	P,TOSS	;PRINT OUT COMMENT FROM B
	PUSHJ	P,NEWSTR
	TLNN	F,EDITF	;ARE WE IN EDIT MODE?
	JRST	TISB	;NO
	PUSHJ	P,NEWSRC
	MOVEM	A,LINBOT	;FOR PURPOSES OF GARBAGE COLLECTION
	PUSHJ	P,TEDIT	;AND COPY IT TO THE INPUT STRING
TISB:	PUSHJ	P,TYI	;GET NEXT CHARACTER INTO C
TISB1:	CAIL	C,175	;RUBOUT OR EOM?
	JRST	TISO	;YES
	CAIN C,""
	TRC F,TISLF
	TRNE F,TISLF	;IN A LITERAL?
	JRST TISFF	;YES, ACCEPT ANYTHING
	CAIGE	C,40	;CONTROL CHAR?
	JRST	TISC	;YES
TISF:	IDPB	C,B
	JRST	TISB

TISC:	ROT	C,-1
	HRRZ	D,ITAB(C)
	JUMPL	C,.+2
	HLRZ	D,ITAB(C)
	JUMPN	D,(D)	;DISPATCH IF IT IS A LEGAL CONTROL CHAR
	JRST	TISD	;NOT A LEGAL CONTROL CHAR

DEFINE CC A,B,C,D
XWD A,B
 XWD C,D
TERMIN

ITAB:
CC 0,0,TISG,0	;NUL ABC
CC 0,0,0,TISF,	;DEFG
CC TISJ,TISH,TISI,0,	;H TAB LF K
CC TISB,TISEOL,TISK,0,	;L CR NO
CC 0,0,TISL,0,	;PQRS
CC TISLIT,0,0,TISM,	;TUVW
CC 0,0,TISCZ,TISZ,	;XYZ ALTMODE
CC 0,0,0,ACCEPT


TISFF:	CAIE C,15	;IS IT CR
	JRST TISFF1	;NO
	IDPB C,B	;YES - ADD LF
	MOVEI C,12
	JRST TISF

TISFF1:	CAIN C,^W
	JRST TISC
	TLNN F,EDITF
	JRST TISF
	CAIE C,^N
	CAIN C,^R
	JRST TISC
	JRST TISF

TISD:	.RESET TYIC,
	MOVEI C,7
	PUSHJ P,TYO
	JRST TISB
TISA:	PUSHJ	P,CRLF
TISR1:	TLZE	F,EDITF
	POP	S,A	;CLEAN UP THE PUSH-DOWN LISTS
	POPJ	P,	;GIVE R1
TISG:	MOVEI	C," 	;CONTROL B
	TLNN F,GETF	;NO ECHO IF FROM FILE
	PUSHJ	P,TYO	;TYPE BACK A SPACE
	MOVEI	C,002	;AND PUT CONTROL B IN BUFFER
	JRST	TISF
TISH:	MOVE	D,CHARNO	;CONTROL I-SIMULATE TABS
	ADDI	D,10
	ANDCMI	D,7	;FIND NEXT HIGHER MULTIPLE OF 8
	SUB	D,CHARNO
	MOVEI	C," 	;TYPE THE APPROPRIATE NUMBER OF SPACES
	PUSHJ	P,TYO
	SOJN	D,.-1
	MOVEI	C,011
	JRST	TISF
TISLIT:	TLNN	F,GETF	;^T,DOING A GET?
	JRST	TISD	;NO, ^T NOT LEGAL FROM TERMINAL
	MOVEI C," 	;PUT SPACE BEFORE "
	IDPB C,B
	MOVEI	C,""	;REPLACE  WITH "
	IDPB	C,B	;COPY TEXT BETWEEN ^T'S LITERALLY, NO INTERP
	PUSHJ	P,TYI
	CAIE	C,024	;LOOKING FOR MATCHING ^T
	JRST	.-3	;NOT FOUND
	MOVEI C,""	;REPLACE  WITH "
	JRST	TISF	;BACK TO NORMAL READING

TISI:	MOVE C,CHARNO	;LINEFEED, IS IT FIRST THING ON LINE?
	CAIG C,1	;(ALLOW FOR PROMPT CHARACTER)
	JRST TISB	;YES, IGNORE IT
	MOVEI C,12	;LINEFEED
	JRST TISF	;ACCEPT IT

TISO:	CAIE	C,177	;RUBOUT?
	JRST	TISZ	;NO, EOM
	CAME B,NEWBOT	;AT BEG OF STR?
	JRST TISN	;NO, RUB OUT
	JRST TISA	;YES, R1

TISZ:	PUSHJ	P,CRLF
TISEOL:	SETZB	C,CHARNO
	IDPB C,B
	HRLZI	L,010700+W
	HRR	L,NEWBOT
	MOVEM L,LINBOT
	MOVE	B,L		;SAME SRC AND DEST FOR WELL-FORMING
	MOVEI	D,0		;TERMINATE ON EOL
	PUSHJ	P,WEFS		;REMOVE EXTRA SPACES
	TLZE	F,EDITF	;CLEAR PDL+EDIT FLAG
	POP	S,-1(S)
CPOPJ1:	AOS	0(P)
CPOPJ:	POPJ	P,

TISK:	TLNN	F,EDITF	;^N - TYPE NEXT WORD IN EDIT MODE
	JRST	TISD	;NOT IN EDIT MODE
	PUSHJ	P,TEDIT	;COPY NEXT WORD TO TT AND BUFFER
	JRST	TISB
TISL:	TLNN	F,EDITF	;^R - TYPE REST OF LINE IN EDIT MODE
	JRST	TISD	;NOT IN EDIT MODE
	PUSHJ	P,TEDIT
	TLNN	F,LDONF
	JRST	.-2
	JRST	TISB

TEDIT:	TLNE	F,LDONF	;IF LINE DONE JUST EXIT
	POPJ	P,
	PUSH	P,A	;SAVE POINTERS
	PUSH	P,B	;NO GARBAGE COLLECTION POSSIBLE
	PUSHJ	P,PWORD	;PRINT WORD
	POP	P,B
	POP	P,L
TEDITA:	CAMN	A,L	;HAVE WE CAUGHT UP?
	POPJ	P,
	ILDB	C,L	;COPY THE NEXT CHAR INTO THE INPUT STRING
	JUMPE	C,TEDITB	;IS IT A NULL
	CAIN C,""
	TRC F,TISLF
	IDPB	C,B
	JRST	TEDITA
TEDITB:	TLO	F,LDONF	;SET LINE DONE FLAG
	POPJ	P,	;AND EXIT

TBACK:	CAMN	B,NEWBOT	;ARE WE AT BEGINNING
	JRST	TISB	;OFF BEGINNING OF STRING
	LDB C,B	;GET LAST CHAR
	PUSHJ P,TYO
	CAIN C,""
	TRC F,TISLF
	ADD B,[70000,,]
	SKIPGE B
	SUB B,[430000,,1]
	JRST	2,@D

TISN:	JSP	D,TBACK	;BACK UP ONE CHARACTER
	JRST	TISB

TISMA:	JSP	D,TBACK	;REMOVE ONE MORE CHARACTER
TISM:		;^W - BACK UP ONE WORD
	CAMN	B,NEWBOT	;IS THERE A PREVIOUS CHAR
	JRST	TISB	;NO-SO QUIT
	LDB	C,B	;YES-REMOVE LEADINGS SPACES
	CAIN	C," 
	JRST	TISMA
TISMB:	CAMN	B,NEWBOT	;REMOVE NON-SPACES TIL A SPACE
	JRST	TISB	;OFF BEGINNING OF LINE SO QUIT
	LDB	C,B
	CAIN	C," 
	JRST	TISB
	JSP	D,TBACK
	JRST	TISMB

;THIS CRUD FOR LONG FORM MAKE
TISCZ:	MOVEI C," 	;STORE A SPACE SO OLD KS LOGO FORM WORKS
	IDPB C,B
	MOVEI C,^Z
	IDPB C,B
	MOVEI C," 
	JRST TISF

ACCEPT:	ROT C,1	;RESTORE C
	JRST TISF	;STORE CHARACTER
TISJ:	CAMN B,NEWBOT	;^H - BACK UP ONE CHAR W/O ECHO 
	JRST TISA
	LDB C,B
	CAIN C,""
	TRC F,TISLF
	ADD B,[70000,,0]
	SKIPGE B
	SUB B,[430000,,1]
	JRST TISB

;PRINT WORD
;ENTER WITH BYTE POINTER TO WORK-SPACE IN A
;PRINT WORD AND FOLLOWING SPACE IF EXISTS
;TYO UPDATES CHARNO AND TAKES INPUT IN C

PWORDH:	PUSHJ	P,TYO	;JUST THE CR, NO LF
PWORD:	MOVEI	D,0	;INITIALIZE COUNT OF PRINTING CHARACTERS
	MOVE	B,A	;COPY POINTER
	TRNE	F,PREFIX	;MUST WE PREFIX " OR / TO THIS WORD?
	MOVEI	D,1	;YES, COUNT THE EXTRA CHAR
PWORDB:	ILDB	C,B	;COUNT PRINTING CHARACTERS
	CAIE	C,002	;CONTROL-B IS A SPACING CHARACTER
	CAIL	C," 
	MOVEI	D,1(D)	;FASTER THAN ADDI D,1
	CAIE	C,015	;STOP IF CR
	CAIN	C," 	;STOP IF SPACE
	JRST	PWORDA
	JUMPN	C,PWORDB	;CONTINUE ON NOT NULL
	TRNE	F,SUFFIX	;MUST WE SUFFIX " OR / TO END OF THIS STRING?
	MOVEI	D,1(D)	;YES, COUNT THE EXTRA CHAR AT END
PWORDA:	TLNE F,SAVEF	;WHEN SAVING
	JRST PWORDS	;THE WORD ALWAYS FITS ON A LINE
	MOVE	C,LINEL
	SUBI	C,(D)
	CAMGE	C,BCHAR
	JRST	PWORDC	;YES
	CAMGE	C,CHARNO	;COUNT+CHARNO>72.?
	PUSHJ	P,LINE	;YES-CRLF AND SPACE TO BCHAR
PWORDS:	MOVEI	C,(E)	;PUT PREFIX IN C
	TRZE	F,PREFIX	;SHOULD WE TYPE A PREFIX?
PWORDE:	PUSHJ	P,TYO	;YES
	ILDB	C,A	;OTHERWISE PRINT WORD
	CAME	A,B	;HAVE WE CAUGHT UP
	JRST	PWORDE	;NO

PWORDF:	LDB	C,A	;WHAT WAS THE TERMINATING CHARACTER
	JUMPE	C,PWORDX
	CAIN	C,015
	JRST	PWORDH	;CR- HANDLE REST OF WORD JUST LIKE WORD
	CAIN	C," 
	JRST	PWORDD	;SPACE
	PUSHJ	P,LINE	;OTHER-MEANS WE ARE AT END OF LINE BUT NOT OWRD
	JRST	PWORD	;AND GO PROCESS REST AS WORD

PWORDX:	MOVEI	C,(E)	;AT EOM
	TRZE	F,SUFFIX	;MUST WE AFFIX A SUFFIX?
	PUSHJ	P,TYO	;YES, TYPE IT
	POPJ	P,

PWORDC:	MOVE	D,BCHAR	;IF BCHAR<>CHARNO CRLF AND SPACE
	CAME	D,CHARNO
	PUSHJ	P,LINE
	MOVEI	C,(E)
	TRZE	F,PREFIX
	PUSHJ	P,TYO
PWORDG:	MOVE	C,LINEL	;PRINT TILL CHARNO=LINEL
	CAMN	C,CHARNO
	JRST	PWORDF
	ILDB	C,A
	PUSHJ	P,TYO
	JRST	PWORDG

PWORDD:	MOVE	C,LINEL	;TYPE SPACE IF CHARNO<>LINEL
	CAMN	C,CHARNO	;TYPE CRLF AND SPACES IF CHARNO=LINEL
	JRST	LINE
	MOVEI	C," 
	JRST	TYO


PTYO:	MOVE	C,LINEL
	CAMN	C,CHARNO
	PUSHJ	P,LINE
	MOVEI	C,(B)
	JRST	TYO

PSPACE:	PUSH	P,B
	MOVEI	B," 
	PUSHJ	P,PTYO
	POP	P,B
	POPJ	P,

;THE NEXT SECTION (10-11 PAGES) CONTAINS STORAGE ALLOCATION
;AND GARBAGE COLLECTION ROUTINES FOR THE VARIOUS SPACES

;MOVE A PROCEDURE TO THE END OF THE PROCEDURE SPACE

MOVEPR:	SETOM	NXLINE	;POINTER INTO PS NO LONGER VALID
	HRRZ	D,@RPA	; A CONTAINS A PRODNM
	MOVE B,D	;B&D NOW POINT TO TITLE IN PS (REL)

	MOVEI	D,2(D)	;TWO WORDS PER LINE IN PROCEDURE DIRECTORY
	SKIPE	@PSD	;LINE NO=0?
	JRST	.-2	;NO, NEXT LINE

	MOVEI	D,1(D)	;D POINTS TO 1ST LINE OF NEXT PROC
	HRRZ	C,PTOP	;C POINTS(REL) TO FIRST AVAIL
	CAIN	D,1(C)
	POPJ	P,	;ALREADY THE LAST ONE IN THE SPACE

	SUBI	D,(B)	;D IS NOW THE LENGTH OF THE PROCEDURE
	ADDI	C,@PSD	;C POINTS(ABS) TO FIRST AVAIL + LENGTH
	CAML	C,PS+1
	EXPAND	D,PS

	HRRZ	E,PTOP	;FIX UP RP POINTER TO ABOUT-TO-BE-MOVED PROCD
	HRRM	E,@RPA
	HRLI	E,(B)	;E= <OLD,,NEW>(REL) FOR PROC
	MOVE	C,PS	;BASE ADDR FOR PS
	HRLI	C,(C)
	ADDB	E,C
	MOVE	G,E	;C,E&G = <OLD,,NEW>(ABS) 
	HRLI	D,(D)
	ADD	G,D	;G = <OLD+LENG,,NEW+LENG> (ABS) 
	BLT	C,-1(G)	;MOVE PROC TO TOP
	HLR	G,E	;G = <OLD+LEN,,OLD>(ABS)
	BLT	G,-1(E)	;MOVE ALL ABOVE OLD LOC(INCL MOVED) DOWN BY LENG

	MOVEI	A,0	;SEARCH RP FOR ALL THAT POINT AFTER MOVED DIR.
	MOVNI	D,(D)
MPRL:	SKIPN	@RPA
	POPJ	P,	;DONE
	MOVEI	A,1(A)
	HRRZ	C,@RPA
	CAIN C,-1	;IS THIS ONE DEFINED?
	AOJA A,MPRL	;NO, DON'T OFFSET IT
	CAIL	C,(B)	;B CONTAINS PTR TO OLD BEG OF MOVED PROC
	ADDM	D,@RPA	;OFFSET IT BY AMOUNT MOVED DOWN
	AOJA	A,MPRL

;REMOVE ONE COMPILED LINE FROM CS

GCCS:	HRRZ	C,@PSA
	MOVEI	D,(C)	;BOTH POINT AT AFFECTED COMPILED LINE
	ADD	D,CS
	MOVEI	E,(D)	;D&E POINT OT START OF LINE(ABS)
	SKIPE	(D)	;SEARCH TO END OF LINE
	AOJA	D,.-1


;D POINTS TO EOL (ABS)
	MOVE	G,CTOP
	ADD	G,CS	;G POINTS TO NEXT AVAIL (ABS)
	ADDI	G,-1(E)
	SUBI	G,1(D)	;G=G+(SOL-1)-(EOL+1)=NEW CTOP-1 (ABS)
	HRLI	E,1(D)	;E = <EOL+1,,SOL>(ABS)
	SUBI	D,-1(E)	;D = LOL
	MOVNI	B,(D)
	BLT	E,(G)	;COPY REST OF WORLD BACK OVER THE DELETED ENTRY
	ADDM	B,CTOP	;OFFSET CTOP
	HRRZ	G,CPP
	CAIL	G,(C)	;SHOULD CPP BE OFFSET?
	ADDM	B,CPP	; YES, IT IS ABOVE AFFECTED LINE
	ADDM B,CDBOT	;OFFSET BASE OF ALL DIRECT LINES
	ADDM	B,CBOT	;OFFSET BASE OF DIRECT LINE, IT ALWAYS MOVES
	ADD H,B

;NOW OFFSET ALL THE POINTERS ABOVE THE THING REMOVED

	MOVE	E,RP	;BASE OF ALL PROCEDURE NAMES
TOLNH1:	SKIPN	(E)	;ANY MORE PROCEDURES?
	POPJ	P,	;NO
	MOVEI	E,1(E)	;POINT TO POINTER TO PROCEDURE DIRECTORY
	MOVE	D,(E)	;GET IT
	CAMN	D,[EXP -1]	;IS IT DEFINED?
	AOJA	E,TOLNH1	;NO, DO NEXT PROCEDURE
	MOVEI D,@PSD	;POINT TO THE DIRECTORY ABSOLUTE
	AOJA D,TOLNH3	;DO THE "TO" LINE

TOLNH2:	SKIPN	(D)	;ANY MORE LINES OF THIS PROCEDURE?
	AOJA	E,TOLNH1	;NO, NEXT PROCEDURE
	MOVEI	D,1(D)	;POINT TO SEQNO AND COMPIL PTR
TOLNH3:	HRRZ	G,(D)	;GET THE COMPIL PTR
	CAIL	G,(C)	;IS IT AFTER THE HOLE?
	ADDM	B,(D)	;YES, OFFSET IT
	AOJA	D,TOLNH2	;NEXT LINE THIS PROCEDURE

;GARBAGE COLLECTOR PASS ONE
;SEARCH ALL LISTS AND THINGS, REPLACING START OF ALL GOOD STRINGS
GARCOL:	AOS NGCS
	.SUSET [.RRUNT,,G]
	MOVEM G,GCTIM1
	MOVE	S,UUOACS+S
	SETZM	1(S)	;ALWAYS ROOM FOR ONE ZERO AFTER S LIST, BECAUSE
	MOVEI	G,0	; ... CS ALWAYS STARTS AT ONE
	TLZ	F,GCF	;INDICATE THAT GC WAS DONE FOR THIS K
	MOVEI	N,.WTOP-.WBASE	;BOTTOM OF FLUSHABLE STRINGS
	MOVE	B,VP
	JSP	S,GCMARK
	MOVE B,DP
	ADD B,DTOP
	SETZM (B)
	MOVE	B,DP
	ADDI	B,2
	JSP	S,GCMARK
	MOVE	B,SP
	MOVEI B,1(B)
	JSP	S,GCMARK
	MOVE B,UA
	JSP S,GCMARK	;USER ABBREVIATIONA ALSO
	MOVN	B,LINBOT
	ADDM	B,UUOACS+L	;MAKE L RELATIVE TO LINBOT
	MOVEI	B,LINBOT
	JSP	L,MARK1	;MARK LINBOT
	MOVN	B,SRCBOT
	ADDM	B,UUOACS+A
	MOVEI	B,SRCBOT
	JSP	L,MARK1
	MOVEI	B,MBUFP	;POINTER TO MUSIC BUFFER
	SKIPE	@B	;IF BUFFER NOT ALLOCATED YET
	JSP	L,MARK1	;PROTECT BUFFER
	MOVN	A,CTOP	;LOOP TO MARKED STUFF IN COMPILED STORAGE
	HRLZI	A,(A)	;USE THIS AS END TEST
	MOVE	B,@CSA	;FIRST ONE NEVER LAST ONE BECAUSE CTOP>=1
	TLNN	B,VARF\LITF\COMMTF
	JRST	.+3	;NOTA
	MOVEI	B,@CSA
	JSP	L,MARK1
	AOBJN	A,.-5	;LOOP OVER ALL OF CS STORAGE

	MOVE	A,RP	;MARK PROCEDURES
GCMKP1:	MOVE	B,(A)	;PTR TO PROCEDURE NAME
	JUMPE	B,GCPSS2
	MOVEI	B,(A)
	JSP	L,MARK1	;MARK THE NAME
	MOVEI A,2(A)	;PT. AT NEXT NAME
	JRST GCMKP1

GCMARK:	SKIPN	(B)
	JRST	(S)
	JSP	L,MARK1
	AOJA	B,GCMARK

MARK1:	MOVE	D,(B)	;CALLED WITH MOVEI B,ADDR OR EQUIVALENT
	CAME	D,[EXP -1]
	LDB E,[220500,,D]
	CAIE E,W
	JRST (L)
	CAILE	N,(D)	;IS THIS A FLUSHABLE STRING?
	JRST	(L)	;NO
	HLRZ	C,@WSD	;GET CURRENT BACK POINTER
	HRRM	C,(B)	;PUT IT INTO THIS REFERRER
	HRLM	B,@WSD	;PUT ADDR OF THIS REFERRER AS TOP OF BACK CHAIN
	JRST	(L)


;GARBAGE COLLECTOR PASS TWO

GCPSS2:	HRRZ	E,NEWBOT
	ADDI	E,(W)	;FOR END TEST, QUIT BEFORE NEW STRING
	MOVEI	A,.WTOP-.WBASE(W)	;SOURCE IS ABSOLUTE
	MOVEI	B,.WTOP-.WBASE	;DESTINATION IS RELATIVE
GCPS2A:	CAIN	E,(A)	;IS THE NEXT STRING THE UNFINISHED ONE?
	JRST	GCPS2C	;YES, DO THE UNFINISHED ONE SPECIAL

	MOVE	C,(A)	;GET THE LENGTH WORD
	TLNN	C,-1	;DOES IT HAVE A BACK CHAIN POINTER, IE MARKED?
	JRST	GCPS2B	;NO, SKIP THE BLT

	HLRZ	D,C	;TRACE THE BACK CHAIN
	HRRZ	G,(D)
	HRRM	B,(D)	;REPLACE BACK CHAIN POINTER WITH NEW RELATIVE POINTER
	MOVEI	D,(G)	;PUT THE NEW BACK PTR IN D
	JUMPN	D,.-3	;THE CHAIN CONTINUES

	HRRZM	C,(A)	;CLEAR THE BACK CHAIN POINTER IN LENGTH WORD
	HRLZI	G,(A)	;BLT SOURCE
	HRRI	G,@WSB	;BLT DEST, MAKING IT ABSOLUTE
	ADDI	B,(C)	;DEST+LENGTH=END OF BLT
	BLT	G,@WSB	;MOVE IT
	ADDI	B,1	;MAKE B POINT BEYOND END OF THIS STR, AT BEG OF NEXT
GCPS2B:	ADDI	A,1(C)	;NEXT SOURCE
	JRST	GCPS2A

GCPS2C:	SUBI	E,@WSB	;MAKE E THE AMOUNT COLLECTED
	MOVE H,B
	MOVNI	G,(E)		;USE G TO OFFSET WTOP,ETC
	HRRM	B,NEWBOT	;B IS THE RELATIVE DEST FOR THE STRING
	ADDM	G,UUOACS+B
	ADDM	G,WTOP

	MOVE D,LCORE
	LSH D,12
	SUBI	D,1(E)
	HRLI	B,(A)
	ADDI	B,(W)
	MOVE C,LCORE
	LSH C,12
	SUBI C,1
	CAMGE	A,C	;DON'T GET CAUGHT WITH ILL MEM REF
	BLT	B,(D)

GCPS2D:	CAIG	E,2000	;DID WE RECOVER MORE THAN A FULL K?
	JRST	GCPSS3	;NO
	MOVEI	A,@WTOP		;YES, REMOVE EXTRA K'S
	CAIGE A,@UUOACS+B
	MOVEI A,@UUOACS+B
	LSH A,-12
	ADDI A,1
	JSR ACORE
	JRST ILLCOR

;GARBAGE COLLECTOR PASS THREE

GCPSS3:	MOVEI	D,2(D)
	MOVE C,LCORE
	LSH C,12
	SUBI C,1
	CAMLE	D,C
	JRST	GCPS3B		;AVOID DOING BLT ON FULL ALLOCATION
	SETZM	-1(D)
	HRLI	D,-1(D)
	BLT	D,@C

GCPS3B:	MOVE	G,LINBOT
	ADDM	G,UUOACS+L
	MOVE	G,SRCBOT
	ADDM	G,UUOACS+A
	.SUSET [.RRUNT,,G]
	SUB G,GCTIM1
	ADDM G,GCTIME
	JRST	(P)

ALLOCP:	JUMPG	S,ALOCSP	;PDL TRAP, WAS IT ARG STACK?
	JUMPL	P,[ERROR .]
	EXPAND	PP	;NO, CONTRO STACK
	HRL	P,ALOCTB+PP-RP
	TLC	P,-1
	ADD	P,[XWD 1,0]	;MAKE IT TWO'S COMPLEMENT
	JRST	ALOCAL

ALOCSP:	EXPAND	SP
	HRL	S,ALOCTB+SP-RP
	TLC	S,-1
	ADD	S,[XWD 1,0]
	JRST	ALOCAL

ALOCWS:	EXPAND	WS
	SOS TSINT+1	;REDO IDPB
ALOCAL:	.DISMISS TSINT+1


ALLOCATOR:
	LDB	C,[270400,,JOBUUO]	;GET THE AC NUMBER
	HRRZ	A,JOBUUO	;WHICH SPACE IS IT?
	AOS NALRP-RP(A)
	HRRZ	B,ALOCTB-RP(A)	;HOW MUCH SPACE MUST WE ADD NOW?
	JUMPE	C,.+3	;SKIP NEXT TWO IF NO AC SPECIFIED
	CAMGE	B,UUOACS(C)	;IS THE SPECIFIED AMOUNT GREATER THAN THE NORMAK AMOUNT
	MOVE	B,UUOACS(C)	;REQUESTED AMOUNT GREATER THAN NORMAL
	MOVEM	B,GCTEM
	ADDI	B,@WTOP
	CAIN	A,WS	;IS THE REQUEST FOR MORE WORK SPACE?
	JRST	ALLOC0	;YES
	MOVE C,LCORE
	LSH C,12
	SUBI C,1
	CAMG	B,C	;DOES THE REQUESTED AMOUNT FIT
	JRST	ALLOC1	;YES, DON'T ASK FOR MORE

	ADDI	C,2001	;ALWAYS ASK FOR ONE AT A TIME
	LSH C,-12
	JSR CCORE
	 ERROR PUNT	;NO MORE CORE AVAILABLE
	TLO	F,GCF
	JRST	ALLOC1	;GOT ONE

ALLOC0:	TLNE	F,GCF	;HAS THIS K BEEN GC'ED?
	JRST	ALLC01	;NO, GO DO IT
	MOVE C,LCORE
	ADDI C,1
	JSR CCORE
	 ERROR	PUNT	;CAN'T GET MORE CORE AND CAN'T SAVE BY GC
	TLO	F,GCF	;NEW K HAS NOT YET BEEN GC'ED
	JRST	UUORET	;RETURN


ALLC01:	JSP	P,GARCOL
	HRRZ	A,JOBUUO
	CAIN	A,WS	;WAS IT WORKSPACE CALL?
	JRST	ALLC02	;YES, NOW DONE
	MOVE	C,GCTEM
	ADDI	C,@WTOP
	MOVE B,LCORE
	LSH B,12
	SUBI B,1
	CAMG	C,B	;DID THE GC GIVE US ENOUGH ROOM?
	JRST ALLOC1	;YES
	MOVE P,UUOACS+P	;RESTORE P
	 ERROR	PUNT	;NO

ALLC02:	MOVE A,LCORE
	LSH A,12
	SUBI A,@UUOACS+B	;AMOUNT OF UNUSED WS IN A
	CAIL A,MSS
	JRST UUORET	;MORE THAN MINIMUM
	MOVE A,LCORE
	ADDI A,1
	JSR ACORE
	 ERROR PUNT
	JRST UUORET

ALLOC1:	MOVE	B,GCTEM
	MOVEI	G,(B)
	HRLI	G,(G)
	MOVE	H,1(A)
	MOVE C,LCORE
	LSH C,12
	SUBI C,1
	HRRZI	D,1(C)
	SUBI	D,(B)
	HRLZI	D,(D)
	HRRI	D,1(C)
	JRST	ALLOC3

ALLOC2:	MOVE	E,D
	BLT	E,(C)
	SUBI	C,(B)
ALLOC3:	SUB	D,G
	CAIGE	H,(D)
	JRST	ALLOC2

	HRLZI	D,1(H)
	HRRI	D,2(H)
	SETZM	1(H)
	ADDI	H,(B)
	BLT	D,-1(H)

	MOVEI	A,1(A)
	JSP	D,RPOINT

UUORET:	MOVE	17,[XWD UUOACS+1,1]	;DON'T RESTORE 0
	BLT	17,17
	JRST	2,@UUOTRP
SUUORT:	AOS UUOTRP
	JRST UUORET


RPOINT:	HLRZ	C,ALOCTB-RP(A)	;POINTER TO LIST OF WORDS TO UPDATE
	ADDM	B,(A)		;UPDATE THE BASE IN THE BASE TABLE
	JUMPE	C,ALLOC5	;NO SECONDARY BASE POINTERS
	MOVE	E,(C)		;GET AN ADDRESS OF A SECONDARY BASE PTR
	JUMPE	E,ALLOC5	;NO MORE IN THIS LIST
	ADDM	B,(E)		;UPDATE IT
	AOJA	C,.-3
ALLOC5:	CAIE	A,WS
	AOJA	A,RPOINT	;MORE TO DO IN ALOCTB
	JRST	(D)

;COMPRESS ALL AREAS TO BE AT MOST CURRENTLY USED PLUS INITIAL ALLOCATION

CMPRSS:	HRLZI	G,-3	;THREE PAIR TABLES
CMPRS1:	MOVE	A,RP(G)	;FETCH THE BASE OF THE TABLE
	SKIPN	(A)	;ANY MORE PAIRS?
	JRST	.+3	;NO
	MOVEI	A,2(A)
	JRST	.-3	;TRY NEXT PAIR
	JSP	L,SHORTN	;YES
	AOBJN	G,CMPRS1	;OTHER PAIR TABLES
	HRLI	G,-3	;THREE TABLES WITH TOP POINTERS
CMPRS2:	HRRZ	A,PTOP-3(G)	;PTOP FIRST IN ORDER
	ADD	A,RP(G)		;TOPS ARE RELATIVE, MAKE ABSOLUTE
	JSP	L,SHORTN
	AOBJN	G,CMPRS2	;OTHER TOP TABLES
	HRLI	G,-2	;TWO PDP'S
CMPRS3:	HRRZ	A,UUOACS+S-6(G)	;GET CURRENT TOP OF STACK
	JSP	L,SHORTN		;PDP'S ARE ALREADY ABSOLUTE
	HRRZ A,UUOACS+S-6(G)
	SUB A,RP+1(G)
	HRLM A,UUOACS+S-6(G)	;FIX PDL END TEST
	AOBJN	G,CMPRS3	;OTHER PDP
	MOVE A,LCORE
	LSH A,12
	SUBI A,1
	SUBI	A,@WTOP	;DIFFERENCE BETWEEN LAST STRING AND TOP OF CORE
	CAIG	A,2000	;IS IT MORE THAN A K
	JRST	CMPRS4	;NO, DON'T CONTRACT
	MOVEI	A,@WTOP
	LSH A,-12
	ADDI A,1
	JSR ACORE
	JRST	ILLCOR	;BIG TROUBLE
CMPRS4:	MOVE G,LCORE
	LSH G,12
	SUBI G,1
	MOVEI	A,@WTOP
	HRLI	A,1(A)
	HRRI	A,2(A)
	CAIG G,(A)
	JRST UUORET
	SETZM	-1(A)
	BLT	A,(G)	;CLEAR AFTER WTOP
	JRST	UUORET	;HAVE NOW TO FIT IN CORE

SHORTN:	HRRZ	B,ALOCTB(G)	;SHORTEN THIS SPACE IF IT NEEDS IT
	ADDI	A,(B)
	CAML	A,RP+1(G)	;MORE THAN MINIMUM ALLOC LEFT OVER?
	JRST	(L)		;NO
	HRL	A,RP+1(G)
	HLRZ	B,A	;EVEN IF A CHANGES
	SUBI	B,(A)	;THE TWO HALVES REMAIN RELATIVELY CONSTANT
	MOVNI	B,(B)
	ADD W,B
	BLT	A,@WTOP
	MOVEI	A,RP+1(G)
	JSP	D,RPOINT
	MOVE	W,UUOACS+W	;FOR NEXT @WTOP
	JRST	(L)

.INSRT LOGOPS >

.INSRT TUROPS >

.INSRT MUSOPS >

.INSRT FILES >

;LOGO SYSTEM STUFF - LISTING, EDITING, AND ERASING
LIST:
	PUSH	P,[EXP LISTXT]	;SO ALL SUBRS CALLED MAY EXIT WITH POPJ
	AOS	A,CPP
	MOVE	A,@CSA	;WHAT TO LIST
	TLNE	A,UPRF	;IS IT A USER PROCEDURE NAME?
	JRST	LISTPR	;YES, GO LIST IT
	TLZN	A,MPF
	ERROR	WHTERR
	CAIN	A,ALLL+1
	JRST	LALL
	CAIN	A,CONTNL+1	;IS IT "CONTENTS"?
	JRST	LISTCT	;GO LIST CONTENTS
	CAIN	A,TITLEL+1	;IS IT "TITLE"?
	JRST 	LISTTL
	CAIN	A,LINELL+1	;IS IT "LINE"?
	JRST	LISTLN
	CAIN	A,ENTRYL+1
	JRST	LISTEN
	CAIN	A,NAMESL+1
	JRST	LSTFNM
	CAIN	A,ABRVSL+1
	JRST	LSTFAB
	CAIN A,ABREVL+1	;"ABBREVIATION"?
	JRST LST1AB	;LIST ONE ABBREVIATION
	CAIN A,FILEL+1
	JRST LSTFIL
	ERROR	WHTERR	;YOU CAN'T LIST THAT.
LALL:	PUSHJ	P,GNE
	JRST	LALLJ
	TLZN	A,MPF		;IS ARG A MACHINE NAME?
	ERROR	LSTER2		;NO, ALL THE REST MUST BE WELL KNOWN NAMES
	CAIN	A,PROCDL+1	;ALL PROCEDURES?
	JRST	LISTAP	;YUP
	CAIN	A,NAMESL+1	;ALL NAMES?
	JRST	LISTAN	;YUP
	CAIN	A,ABRVSL+1	;ALL ABBREVIATIONS?
	JRST	LISTAA
	CAIN A,MACHIL+1
	JRST LMACH
	ERROR	LSTER2	;LIST ALL WHAT?

LMACH:	PUSHJ P,GNE
	 JRST LMALLJ
	TLZN A,MPF
	ERROR WHTERR
	CAIN A,NAMESL+1
	JRST LISTMN
	CAIN A,PROCDL+1
	JRST LISTMP
	CAIN A,ABRVSL+1
	JRST LISTMA
	ERROR LSTER2

LMALLJ:	PUSHJ P,LISTMP
	PUSHJ P,LISTMS	;LIST SPECIAL NAMES TOO
	PUSHJ P,LISTMN
	PUSHJ P,LISTMA
	SOS CPP
	POPJ P,

LALLJ:	PUSHJ	P,LISTAP
	PUSHJ	P,LISTAN
	PUSHJ	P,LISTAA
	SOS	CPP
	POPJ	P,


;LIST CONTENTS AND LIST ALL PROCEDURES
LISTCT:	PUSHJ	P,GNE	;IS IT LC FROM AN ENTRY?
	 JRST	LSTCT0
	SOS	CPP
	TRO	F,ECONTF
	JRST	LISTFL
LSTCT0:	MOVEI A,LISTTO
	SOSA CPP
LISTAP:	MOVEI	A,LISTPR
	PUSH	P,A
	PUSHJ	P,CRLF
	MOVEI	A,0	;FOR LOOP OVER ALL PROCEDURES
LSTCT1:	SKIPN	@RPA	;END OF PROCEDURE NAME LIST?
	JRST	APOPJ
	MOVEI	A,1(A)	;MAKE A LOOK LIKE UPROD COMPILE PTR
	MOVNI	B,1
	CAMN	B,@RPA
	AOJA	A,LSTCT1
	PUSH	P,A	;SAVE IT
	PUSHJ	P,@-1(P)	;CALL THE RIGHT ROUTINE
	JFCL		;DON'T CARE IF IT WASN'T DEFINED
	POP	P,A	;REMEMBER WHERE WE WERE IN LIST
	AOJA	A,LSTCT1	;GO GET NEXT PROD NAME

LISTTO:	MOVE	M,@RPA	;GET POINTER TO PROCEDURE DIRECTORY
	CAMN	M,[EXP -1]	;IS THIS PROCED DEFINED?
	POPJ	P,	;NO, R1 EXIT IMMEDIATELY
	MOVEI	A,-1(A)
	MOVEI	B,[ASCIZ /(TRACED) /]
	TLNE F,SAVEF	;DON'T SAVE TRACE
	JRST .+3
	SKIPGE	A,@RPA		;SKIP IF NOT TRACED
	PUSHJ	P,TOSS		;TYPE "(TRACED) " IF IT IS
	AOS 0(P)
	JRST LSTLN1

LISTTL:	MOVE	A,TOPROD	;LIST TITLE
	JUMPE	A,[ERROR NOEDIT]	;MUST HAVE A PROCEDURE OPEN
	PUSHJ	P,LISTTO	;LIST IT
	ERROR	IOPERR	;BIG TROUBLE
	POPJ	P,

;LIST A PROCEDURE
LISTPR:	PUSHJ	P,CRLF	;ONE EXTRA IN FRONT
	PUSH	P,A	;SAVE WHICH PROCEDURE
	PUSHJ	P,LISTTO	;DO THE "TO" LINE
	 ERROR	EVER3	;X NEEDS A MEANING
	MOVEI M,1(M)
	PUSHJ	P,LSTPLN	;DO CURRENT LINE
	AOJA	M,.-1	;DO NEXT LINE
	POP	P,A
	HRRZI	A,(A)
	CAMN	A,TOPROD
;SHOULD WE TYPE "END"? TESTING RH ONLY
	POPJ	P,		;NO, PROCEDURE IS STILL OPEN
	MOVEI	B,[ASCIZ /END/]
	PUSHJ	P,TOSS
	JRST	CRLF

LISTLN:	PUSHJ	P,SNMEVL
	MOVEI	M,(A)	;SRCHLN USES A, LSTPLN USES M
	PUSHJ	P,LSTPLN
	POPJ	P,
	ERROR	IOPERR


SNMEVL:	SKIPN	TOPROD
	ERROR	NOEDIT		;MUST HAVE A PROCEDURE OPEN
	PUSHJ	P,NUMEVL
	MOVE	A,TOPROD
	JSP	C,SRCHL1	;IS IT A LINE NO OF THE CURRENT PROCEDURE?
	 CAIE	B,(M)
	 ERROR	GOERR3
	POPJ	P,

SAVAA:	SKIPA	A,[EXP SAVAAR]
LISTAA:	MOVEI	A,LSTAAR
	PUSH	P,A	;SAVE NAME OF ROUTINE TO CALL
	MOVEI	A,2
	MOVEM	A,BCHAR
	PUSHJ	P,CRLF
	MOVE	G,UA	;POINT AT FIRST ABBREV NAME
LSTAAL:	SKIPN	A,(G)	;ANY MORE ABBREVIATIONS?
	JRST	APOPJ	;NO
	MOVNI	C,1
	CAME	C,1(G)	;IS THIS ONE DEFINED?
	PUSHJ	P,@(P)	;YES, OUTPUT IT
	ADDI	G,2
	JRST	LSTAAL

LSTAAR:	MOVEI	E,":
	TRO F,SUFFIX
	PUSHJ	P,PTOSS	;TYPE NAME
	PUSHJ	P,PTAB
	MOVE	A,1(G)
	PUSHJ	P,PTOSS	;TYPE VALUE
	PUSHJ	P,CRLF	;LINE
	POPJ	P,

LST1AB:	PUSHJ	P,EVAL
	POP	S,A
	HRRZ	B,UA
	PUSHJ	P,LOOKUP	;LOOK UP THAT ABBREVIATION
	 ERROR			;NO SUCH ABBREVIATION
	MOVEI	G,(N)
	MOVE	A,(G)
	JRST	LSTAAR

;LIST ONE LINE OF A PROCEDURE
LSTPLN:	HRRZ	A,@PSM	;GET LINE NO, M SET UP BY LISTTO
	JUMPE	A,CPOPJ1	;NO MORE LINES, GIVE R2
	PUSHJ	P,DECPRT	;TYPE LINE NO., MAX OF 5 CHARS
LSTLN1:	MOVEI	A,1	;ENTER HERE FOR LIST TITLE, DON'T TYPE LINE NO.
	ADD	A,CHARNO
	MOVEM	A,BCHAR
	MOVEI	M,1(M)	;POINT AT PTR TO COMPILED CODE
	HRRZ	D,@PSM	;GET PTR TO COMPILED LINE
	TRZ F,NOLSPF	;"NO LEADING SPACE FLAG"
LSTPLL:	MOVE	A,@CSD	;GET NEXT ELEMENT OF THE LINE
	JFFO	A,.+3	;WHAT KIND OF ELEMENT?
	PUSHJ	P,CRLF	;EOL, TYPE CR
	POPJ	P,		;DONE WITH THIS LINE, GIVE R1
	PUSH	P,D	;REMEMBER WHERE WE ARE IN THE LINE
	SKIPE CHARNO	;SO "TO" WON'T BE " TO"
	TRZE F,NOLSPF
	JRST @LSTDSP(B)	;NO SPACE, DISPATCH ON TYPE
	TLNN A,INFF\RPARF	;ALSO NO SP. IF INFIX OR RT. PAREN.
	PUSHJ	P,PSPACE	;SPACE BEFORE EACH ELEMENT
	JRST	@.+1(B)	;DISPATCH ON TYPE
LSTDSP:	LSTPMP?LSTPUP?LSTPV?LSTPL?LSTPCM?LSTPIN?LSTPMP?LSTPIN

LSTPMP:	CAME A,[MPF,,PRMNSL+1]	;IF OP. IS PREFIX + OR -
	CAMN A,[MPF,,PRPLSL+1]
LSTPIN:	TRO F,NOLSPF	;DON'T SPACE AFTER IT
	TLNE F,SAVEF	;IF NOT IN SAVE
	JRST .+4
	CAME A,[MPF,,LMAKL+1]	;AND PROC. IS LONG MAKE
	CAMN A,[MPF,,MAKL2+1]	;OR LONG MAKE SECOND LINE
	ADDI A,2	;USE LONG FORM
	MOVE	A,-1(A)	;MACHINE PROCEDURE, GET PTR TO NAME
LSTPM1:	PUSHJ	P,PTOSSM	;TYPE ELEMENT
LSTPM2:	POP	P,D
	AOJA	D,LSTPLL	;GO BACK FOR NEXT ELEMENT ON THE LINE

LSTPUP:	MOVEI	A,-1(A)	;USER PROCEDURE, POINT AT NAME PTR
	MOVE	A,@RPA	;GET PTR TO NAME
	HRLI	A,010700+W	;MAKE TEXT PTR
	PUSHJ P,PWORD
	JRST LSTPM2

LSTPV:	TLNE A,W	;IS IT A WORKSPACE ELEMENT?
	JRST .+3	;YES
	ADD A,VP	;NO, POINTER TO VP
	MOVE A,-1(A)	;GET NAME
	MOVEI	E,":	;VARIABLE, AFFIX "/" MARKS
	TRO F,PREFIX
	TLNN A,SENTF
	JRST LSTPL1
	MOVEI E,";
	TRO F,PREFIX\SUFFIX
	JRST LSTPL1

LSTPL:	MOVEI	E,042	;LITERAL
	PUSH P,A
	PUSHJ P,NUMBRQ		;IS IT A NUMBER?
	TRO	F,PREFIX\SUFFIX	;NO, AFFIX QUOTES
	POP P,A
LSTPL1:	PUSHJ	P,PTOSS
	JRST	LSTPM2

LSTPCM:	MOVEI	E,"!	;COMMENT, PREFIX SEMICOLON
	TRO	F,PREFIX\SUFFIX
	JRST	LSTPL1


;LIST ALL NAMES
LISTAN:	MOVEI A,LSTANR
	PUSHJ P,LISTAD
	JRST LISTAG
SAVAN:	MOVEI A,SAVANR

LISTAG:	SKIPA M,[TLNE B,GLOBLV]
LISTAD:	MOVE M,[TLNN B,GLOBLV]
	PUSH P,A
	MOVE A,VP
LSTAN2:	SKIPN (A)
	JRST LSTAN1
	MOVE B,1(A)
	XCT M
	PUSHJ P,@(P)
	ADDI A,2
	JRST LSTAN2
LSTAN1:	MOVE A,DP
	ADD A,DTOP
LSTAN3:	SUBI A,2
	SKIPN (A)
	JRST APOPJ
	MOVE B,1(A)
	XCT M
	PUSHJ P,@(P)
	JRST LSTAN3



LSTANR:	PUSH	P,A	;TYPE ANY KIND OF VALUE
	MOVEI	E,":	;SLASH THE NAME
	TRO	F,PREFIX
	MOVE B,1(A)
	MOVE	A,(A)	;FETCH THE NAME
	TLNE B,UNBOUN
	JRST APOPJ	;NEVER LIST AN UNBOUND VARIABLE
	TLNE A,W	;WORKSPACE ELEMENT
	JRST .+3
	ADD A,VP
	MOVE A,-1(A)
	TLNN A,SENTF
	JRST .+3
	MOVEI E,";
	TRO F,PREFIX\SUFFIX
	PUSHJ	P,PTOSS
	MOVEI	A,[ASCIZ / IS /]
	PUSHJ	P,PTOSSM
	MOVEI E,""	;QUOTE THE VALUE

LSTNR1:	MOVE	A,(P)
	TRO	F,PREFIX\SUFFIX
	MOVE	A,1(A)	;GET THE VALUE
	PUSHJ	P,PTOSS
	PUSHJ	P,CRLF
APOPJ:	POP P,A
	POPJ P,

;LIST X ENTRY NAME WHERE X CAN BE CONTENTS,NAMES,ABBREVIATIONS,ENTRY

LISTEN:	TRO	F,EENTRF
	JRST	LISTFL
LSTFNM:	TROA	F,ENAMEF
LSTFAB:	TRO	F,EABBRF

LISTFL:	TRZ	F,TF
	PUSHJ P,FILGET
	HRLZM E,TBL+1
	PUSHJ P,FILGET
	HRRM E,TBL+1
	MOVEI	A,LEOFIL	;WHERE TO GO ON EOF
	MOVEM A,EOFJMP
	MOVEI TA,TBL
	.SUSET [.SSNAM,,FSNAME]
	PUSHJ P,READF
	JUMPN A,FILERR
	TLO F,GETF
LNLINE:	PUSHJ	P,TIS	;READ A LINE
	 JRST COMEX
	POP	S,A
	TRNE	F,EENTRF
	 JRST	LISTIT	;IF LIST ENTRY, LIST EVERY LINE
	PUSHJ	P,NEWSTR
	PUSHJ	P,NEWSR0
	PUSHJ	P,COPYWD
	 JRST	MBLIST	;NOTHING ON LINE, MAYBE TYPE CRLF
	POP	S,B
	MOVE	A,SRCBOT
	TRZE	F,STORED
	 JRST	LNLINE	;STORED LINES ONLY GET LISTED ON LIST ENTRY
	ADDI	B,1
	MOVE	C,@B	;FIRST WORD OF FIRST SYMBOL
	CAMN	C,[ASCIZ /TO/]
	TRNN	F,ECONTF
	SKIPA
	JRST	LISTIT	;TO LINE AND LIST CONTENETS
	CAMN	C,[ASCIZ /MAKE/]
	TRNN	F,ENAMEF
	SKIPA
	JRST	LISTIT	;NAME AND LIST NAMES
	CAME	C,[ASCII /ABBRE/]
	JRST	LNLINE	;NOT ABBREVIATE, SO NOTA
	ADDI	B,1
	MOVE	C,@B
	CAME	C,[ASCII /VIATE/]
	JRST	LNLINE	;AGAIN NOT ABBREVIATE
	ADDI	B,1
	SKIPN	@B
	TRNN	F,EABBRF
	JRST	LNLINE	;AND AGAIN
LISTIT:	PUSHJ	P,PTOSS	;LIST THE CURRENT LINE
	SKIPE CHARNO
	TROA	F,TF	;DENOTE THAT A LINE WAS TYPED SINCE LAST MBLIST
;FALLS THROUGH

;FALLS IN

MBLIST:	SKIPE CHARNO
	TRZN	F,TF
	SKIPA
	PUSHJ	P,CRLF
	JRST	LNLINE
LSTFIL:	POP P,A
	SETZM TBL+1
	.SUSET [.SSNAM,,FSNAME]
	MOVEI TA,TBL
	PUSHJ P,LISTFD
	JUMPN A,FILERR
	JRST COMEX

;LIST MACHINE PROCEDURES

LISTMP:	MOVEI N,CMPT-2
LSTMP1:	ADDI N,2
	CAIGE N,DONTSH
	SKIPN (N)
	JRST CRLF
	MOVE H,1(N)
	CAMN H,[-1,,SPECWD]
	JRST LSTMP1
	CAIGE N,LMAKL
	JRST LSTMP3
	CAIG N,MAKL2+2
	JRST LSTMP1
LSTMP3:	MOVEI B,[ASCIZ \
TO \]
	PUSHJ P,TOSS
	MOVEI B,@(N)
	PUSHJ P,TOSS
	MOVEI G,"A
	TLZ H,340000
LSTMP2:	JUMPL H,LSTMP1
	PUSHJ P,PSPACE
	MOVEI C,":
	PUSHJ P,TYO
	MOVE C,G
	PUSHJ P,TYO
	SUB H,[1,,]
	ADDI G,1
	JRST LSTMP2

;LIST MACHINE SPECIAL WORDS

LISTMS:	MOVEI N,CMPT-2
LSTMS1:	ADDI N,2
	SKIPN (N)
	JRST CRLF
	MOVE H,1(N)
	CAME H,[-1,,SPECWD]
	JRST LSTMS1
	PUSHJ P,CRLF
	MOVEI B,@(N)
	PUSHJ P,TOSS
	JRST LSTMS1

;LIST MACHINE ABBREVIATIONS
LISTMA:	MOVEI N,ABBT-2
LSTMA1:	ADDI N,2
	SKIPN (N)
	JRST CRLF
	MOVEI E,":
	TRO F,SUFFIX
	HRRZ A,1(N)
	PUSHJ P,PTOSSM
	PUSHJ P,PTAB
	HRRZ A,(N)
	PUSHJ P,PTOSSM
	PUSHJ P,CRLF
	JRST LSTMA1
;LIST MACHINE NAMES
LISTMN:	POPJ P,

COPYWD:	ILDB	C,A
	CAIN C," 
	JRST COPYWD
COPYW2:	JUMPE	C,CPOPJ
	CAIN	C," 
	JRST	COPYW1
	IDPB	C,B
	ILDB C,A
	JRST	COPYW2
COPYW1:	AOS	(P)
	JRST	ENDSTR

LEOFIL:	POP P,A
	POP P,A
	JRST PPGETF

EDIT:	PUSHJ P,GNE
	ERROR EDTER1
	TLNE	A,UPRF	;IS THAT WHAT A USER PROCEDURE?
	JRST	EDITPR	;YES
	CAMN	A,[XWD MPF,LINELL+1]	;IS THAT WHAT "LINE"?
	JRST	EDITLN	;YES
	CAMN	A,[XWD MPF,TITLEL+1]	;IS IT "TITLE"?
	JRST	EDITTL	;YES
	ERROR	EDTER1	;YOU CANNOT EDIT THAT

EDITPR:	SKIPE	TOPROD	;IS THERE A PROCEDURE OPEN?
	ERROR	EDTER2	;YES, YOU ARE ALREADY EDITING X
	MOVNI B,1
	CAMN B,@RPA	;IS THEPROCEDURE DEFINED?
	ERROR EVER3	;CAN EDIT DEFINED PROCEDURES ONLY
	MOVEI A,-1(A)
	MOVSI B,HIDEPF
	TDNE B,@RPA
	ERROR EDTER1
	MOVEI A,1(A)
	HRRZM	A,TOPROD	;THE PROCEDURE IS NOW OPEN
	PUSHJ	P,MOVEPR	;MAKE IT LAST
	SOS PTOP	;PROCEDURE NO LONGER CLOSED
	JRST	COMEX

EDITLN:	PUSHJ	P,SNMEVL
	PUSHJ	P,LINGEN	;GENERATE THE TEXT OF THAT LINE FOR TIS

EDTLN1:	JSP D,COMEXR	;DO END OF LINE CHECKING
	TLO	F,EDITF	;WE ARE NOW EDITING
	POPJ	P,

EDITTL:	SKIPN	M,TOPROD	;CURRENTLY IN A PROCEDURE?
	ERROR	NOEDIT
	PUSHJ	P,NEWSTR
	MOVEI	D,TITLEL+1	;"TITLE"
	PUSHJ	P,LNGMP		;COPY MACHINE PROCEDURE NAME
	MOVEI	A,(M)
	MOVE	D,@RPA
	MOVEI	D,1(D)
	MOVE M,@PSD
	PUSHJ P,LINGE0
	JRST EDTLN1

DSPACE:	MOVEI	C," 
	IDPB	C,B
	POPJ	P,



LINGEN:	PUSHJ	P,NEWSTR
	MOVEI	D,1(A)	;POINTER TO POINTER TO COMPILED CODE FOR LINE
	MOVEI	A,(M)	;LINE NUMBER
	PUSHJ	P,SNM	;IS THE FIRST WORD OF THE GENERATED LINE
	MOVE	M,@PSD
LINGE0:	MOVE	D,@CSM	;GET NEXT ELEMENT
	JFFO	D,LINGE1	;DIPATCH ON TYPE
	JRST	ENDSTR		;WHICH WILL EXIT FROM LINGEN WITH POPJ

LINGE1:	MOVEI	C," 
	IDPB	C,B	;BEFORE ALL BUT FIRST ELEMENT PUT A SPACE
	PUSHJ	P,@.+2(E)
	AOJA	M,LINGE0	;BACK FOR NEXT ELEMENT
	LNGMP?LNGUP?LNGV?LNGL?LNGCMT?LNGMP?LNGMP?LNGMP

LNGMP:	MOVE	A,-1(D)	;FETCH POINTER TO TEXT NAME OF PROCEDURE
	HRLI	A,440700
LNGALL:	MOVEM	A,SRCBOT
	TRZE	F,PREFIX
	IDPB	E,B	;AFFIX PREFIX IF THERE IS ONE
	ILDB	C,A		;COPY THE WHOLE ELEMENT
	JUMPE	C,LNGALE	;DONE IF EOM
	IDPB	C,B
	JRST	.-3	;NEXT CHAR
LNGALE:	TRZE	F,SUFFIX
	IDPB	E,B	;AFFIX SUFFIX IF ONE TOO
	POPJ	P,		;DONE WITH THIS ELEMENT

LNGUP:	MOVEI	A,-1(D)
	MOVE	A,@RPA	;GET NAME OUT OF TABLE
LNGUP1:	HRLI	A,010700+W	;IT IS A WORKSPACE ELEMENT
	JRST	LNGALL

LNGV:	TLNE D,W
	JRST .+3
	ADD D,VP
	MOVE D,-1(D)
	MOVEI	E,":
	TRO F,PREFIX
	TLNN D,SENTF
	JRST LNGL1
	MOVEI E,";
	TRO F,PREFIX\SUFFIX
	JRST LNGL1
LNGL:	MOVEI	E,042	;LITERAL, AFFIX QUOTES
	TRO	F,PREFIX\SUFFIX
LNGL1:	MOVEI	A,(D)
	JRST	LNGUP1

LNGCMT:	MOVEI	E,"!	;COMMENT PRECEDED BY SEMICOLON
	TRO	F,PREFIX\SUFFIX
	JRST	LNGL1

ERASE:	PUSH	P,[EXP ERASXT]
	AOS	A,CPP
	MOVE	A,@CSA	;ERASE WHAT?
	TLNE	A,UPRF	;IS IT A UPROD
	JRST	ERASPR	;YES, ERASE ONE PROCEDURE
	TLZN	A,MPF	;ALL OTHER PARAMETERS MUST BE MACHINE NAMES
	 ERROR	WHTERR
	CAIN	A,LINELL+1	;IS IT "LINE"
	JRST	ERASLN	;YES, ERASE LINE
	CAIN	A,ALLL+1	;IS IT ALL?
	JRST	ERSALL
	CAMN	A,ABREVL+1
	JRST	ERSABB
	CAIN	A,TRACEL+1
	JRST	ERASTR	;ERASE TRACE
	ERROR	WHTERR	;NONE OF THE ABOVE

ERASXT:	SQUEZE	;SEE IF WE CAN REDUCE THE STORAGE ALLOCATION
	JRST	COMEX

ERSALL:	PUSHJ	P,GNE	;ALL WHAT?
	 JRST	ERASAL	;ALL PERIOD
	TLZN	A,MPF	;MUST BE A MACHINE NAME
	 ERROR	WHTERR
	CAIN	A,NAMESL+1	;IS IT "NAMES"
	JRST	ERSALN
	CAIN	A,PROCDL+1	;IS IT "PROCEDURES"
	JRST	ERSALP
	CAIN	A,ABRVSL+1
	JRST	ERSALA	;ALL ABBREVIATIONS
	CAIN	A,TRACSL+1	;"TRACES"?
	JRST	ERSALT
	ERROR	WHTERR

ERASAL:
	MOVEI	F,TF	;DON'T TYPE STARTUP MESSAGE AGAIN
	JRST	LOGO+1

ERSALA:	SETZM	@UA
	POPJ	P,
ERSALN:	MOVEI A,2
	MOVEM A,DTOP	;FLUSH LOCALS
	MOVE A,[XWD W+EMPTYF\WORDF\GLOBLV\UNBOUN,0]	;CLOBBER GLOBALS
	MOVE B,VP
ERALN1:	SKIPN (B)
	POPJ P,
	MOVEM A,1(B)	;CLOBBER TO EMPTY
	ADDI B,2
	JRST ERALN1
	POPJ	P,
ERSALP:	SETZM	@RP	;FLUSH ALL PROCEDURE NAMES
	SETZM	PTOP	;FLUSH ALL PROCEDURE DIRECTORIES
	MOVEI	A,1
	MOVEM	A,CTOP	;FLUSH ALL COMPILED CODE
	MOVEI	A,2
	MOVEM	A,DTOP	;FLUSH ALL DUMMY ARGS
	MOVE	S,SP	;CLEAR ARG STACK
	MOVE	P,PP	;CLEAR PUSHDOWN STACK
	JRST	RESET


ERSABB:	AOS	A,CPP
	PUSHJ	P,EVAL
	EXP	.+1
	POP	P,A
	MOVE	A,(S)
	MOVE	B,UA
	PUSHJ	P,LOOKUP
	 JRST	ERSAB1		;NOT A USER ABBREVIATION
	SETOM	1(N)
	POP	S,A
NOSQZE:	POP	P,A
	JRST	COMEX

ERSAB1:	MOVE	A,(S)
	HRRZI	B,ABBT
	PUSHJ	P,SYSLUK
	 ERROR
	PUSH	S,(S)
	SETOM	-1(S)
	POP	P,A
	JRST	ABBREVIATE


ERASTR:	PUSHJ	P,GNE	;ERASE TRACE ON WHAT PROCEDURE?
	 ERROR
	TLNN	A,UPRF	;ONLY USER DEFINED PROCEDURES ARE TRACED
	 ERROR
	MOVEI	A,-1(A)
	HRLZI	B,TRACEF
	ANDCAM	B,@RPA	;CLEAR THE APPROPRIATE BIT
	JRST	NOSQZE

ERSALT:	MOVE	A,RP	;ERASE ALL TRACES
ERSLT1:	HRLZI	B,TRACEF
	ANDCAB	B,(A)	;CLEAR THE BIT
	MOVEI	A,2(A)	;POINT AT NEXT ENTRY
	JUMPN	B,ERSLT1	;NAME NON-ZERO IF NOT AT END OF TABLE
	JRST	NOSQZE

ERASLN:	PUSHJ	P,SNMEVL	;ERASE LINE, WHAT LINE?
ERSLN1:	MOVEI	A,1(A)	;POINT AT POINTER TO COMPILED CODE
	PUSHJ	P,GCCS	;FLUSH COMPILED CODE FOR LINE
	SUBI A,1	;ERASPR EXPECTS A AS WAS
	MOVEI	C,@PSA
	MOVE	B,2(C)	;COPY ALL THE REST OF THE LINES BACK TWO
	MOVEM	B,(C)
	MOVEI	C,1(C)
	JUMPN	B,.-3	;TERMINATE ON ZERO LINE NUMBER

	MOVNI	B,2
	ADDM	B,PTOP
	POPJ	P,

ERASPR:	MOVNI	B,1	;ERASE PROCEDURE
	CAMN	B,@RPA	;IS THE PROCEDURE DEFINED?
	ERROR EVER3	;NO
	MOVEI	A,-1(A)	;CLEAR LH OF A
	HRLZI B,HIDEPF
	TDNE B,@RPA
	ERROR WHTERR
	HRLZI	B,TRACEF
	ANDCAM	B,@RPA	;ERASE THE TRACE ON IT IF ANY
	MOVEI	A,1(A)
	CAMN	A,TOPROD	;IS IT THE PROCEDURE CURRENTLY BEING DEFINED
	SETZM	TOPROD	;YES, WHEN WE'RE DONE, NO PROCEDURE OPEN
	PUSH	P,TOPROD
	MOVEM	A,TOPROD
	PUSHJ	P,MOVEPR	;MAKE THIS ONE LAST TEMPORARILY
	MOVE	A,TOPROD
	MOVE	A,@RPA
	JRST .+3

	SKIPN @PSA	;ANY MORE LINES?
	JRST .+3	;NO
	PUSHJ P,ERSLN1
	JRST .-3	;GO BACK FOR NEXT LINE
	MOVE	A,TOPROD
	MOVNI	B,1
	EXCH	B,@RPA	;MARK AS UNDEFINED AND FETCH PTR TO BEGINNING
	HRRM	B,PTOP	; OF THE STORAGE WE JUST FREED UP
	POP	P,TOPROD	;RESUME EDITING THE PROCEDURE THAT HAD BEEN
	POPJ	P,

;FILE STUFF
READ:	MOVEI D,FINN1
	PUSHJ P,GETFLN
	MOVEI D,FINN2
	PUSHJ P,GETFLN
	MOVEI A,EOFILE
	PUSHJ P,OPENR
	TLO F,ERRORF
LOGGET:	PUSHJ P,UPROD1	;CALL MAIN LOOP
PPGETF:	POP P,A	;POP GETF
	JUMPE A,COMEX
	TLZ F,GETF
	JRST COMEX

OPENR:	HRRZM A,EOFJMP
	.IOPUSH TYIC,
	.SUSET [.SSNAM,,TBL]
	.OPEN TYIC,FINOP
	JRST OPENRF
	TLOE F,GETF	;PUSH NON-0 IF GETF 0 (ALSO SET GETF)
	MOVEI A,0	;PUSH 0 IF GETF NON-0
	EXCH A,(P)	;POPJ WITH AND INTERVENING PUSH
	JRST (A)
OPENRF:	.IOPOP TYIC,
	ERROR FNF

EOFILE:	POP P,A	;RET. TO TISB1
	POP P,A	;RET. TO MAINL+4
	.IOPOP TYIC,
	JRST RETA

;GET A FILE NAME AND STORE IT IN LOC. SPECIFIED BY RH(D)
GETFLN:	PUSHJ	P,GNE	
	 ERROR	FILER2
FILGT1:	TLNN	A,UPRF	
	JRST FILNU	;FILE NAME NOT USER PROC
	MOVEI	A,-1(A)
	MOVE E,@RPA	;GET PT. TO STRING IN WS
	HRLI E,000700+W	;MAKE A BYTE PT.
GETSCN:	HRLI D,440600	;SET TO STORE SIXBIT IN PROPER LOC.
	SETZM (D)
FLNSET:	ILDB C,E
	JUMPE C,CPOPJ	;IF NULL, DONE
	SUBI C,40	;ELSE CONVERT TO SIXBIT
	IDPB C,D
	TLNE D,770000	;FILLED OUT? IF SO DONE
	JRST FLNSET	;NO, DO MORE
	POPJ P,	;DONE, RETURN

FILNU:	TLNN A,MPF
	JRST FILNU1
	MOVE E,-1(A)
	HRLI E,440700	;MAKE PT TO STRING IN CONSTANTS AREA
	JRST GETSCN
FILNU1:	TLNN A,LITF
	 ERROR FILER1
	HRRZ E,A
	HRLI E,000700+W
	JRST GETSCN

WRITE:	MOVEI D,FOUTN1
	PUSHJ P,GETFLN
	MOVEI D,FOUTN2
	PUSHJ P,GETFLN
	PUSHJ	P,OPENW		;OPEN FILE FOR WRITING
SAVE1:	TLO F,SAVEF	;DENOTE A SAVE IN PRIGRESS
	PUSHJ	P,LISTAP	;TYPE ALL PROCEDURES TO FILE
	PUSHJ	P,SAVAN		;TYPE ALL GLOBAL NAMES TO FILE
	PUSHJ	P,SAVAA		;ALL ABBREVIATIONS TO FILE
	TLZ F,SAVEF	;NO MORE TYPING IN THE SAVE
	PUSHJ	P,CLOSEF
	MOVE A,FILLNG
	PUSHJ P,DECPRT
	MOVEI B,[ASCIZ / CHARACTERS SAVED.
/]
	PUSHJ P,TOSS
	JRST COMEX

SAVANR:	MOVE B,1(A)
	TLNE B,UNBOUN
	POPJ P,
	PUSH	P,A
	MOVEI	A,[ASCIZ /MAKE/]
	PUSHJ	P,PTOSSM
	MOVE	A,(P)	;WHAT NAME
	MOVE	A,(A)	;NAME OF THING
	MOVEI	E,024	;PSEUDO-QUOTE
	TRO	F,PREFIX\SUFFIX
	PUSHJ	P,PTOSS
	PUSHJ	P,PSPACE
	JRST	LSTNR1

SAVAAR:	MOVEI	A,[ASCIZ /ABBREVIATE /]
	PUSHJ	P,PTOSSM
	MOVEI	E,042
	TRO	F,PREFIX\SUFFIX
	MOVE	A,1(G)
	PUSHJ	P,PTOSS
	MOVEI	A,[ASCIZ / AS /]
	PUSHJ	P,PTOSSM
	MOVE	A,(G)
	TRO	F,PREFIX\SUFFIX		;QUOTE THIS ONE TOO
	PUSHJ	P,PTOSS
	JRST	CRLF

OPENW:	.IOPUSH TYOC,
	.SUSET [.SSNAM,,TBL]
	.OPEN TYOC,FOUTOP
	ERROR .
	POPJ P,

CLOSEF:	MOVEI CH,ENDFIL
	SKIPE FILOX
	JRST WRITEC
	.IOPOP TYOC,
	POPJ P,
USE:	PUSHJ P,GNE
	 ERROR ERMSSG
	MOVEI D,TBL
	PUSHJ P,FILGT1
	JRST COMEX

GET:	PUSHJ P,FILGET
	HRLZM E,TBL+1
	PUSHJ P,FILGET
	HRRM E,TBL+1
	MOVEI A,NEOFIL
	MOVEM A,EOFJMP
	PUSHJ P,GNE
	JRST GET1
	MOVEI D,TBL
	PUSHJ P,FILGT1
GET1:	MOVEI TA,TBL
	.SUSET [.SSNAM,,FSNAME]
	PUSHJ P,READF
	JUMPN A,FILERR
	TLO F,GETF\ERRORF
	PUSHJ P,UPROD1
	TLZ F,GETF
	JRST COMEX
NEOFIL:	JRST RESET
FILERR:	MOVE B,[ERROR NFLER1-1]
	ADD B,A
	XCT B

SAVE:	PUSHJ P,FILGET
	HRLZM E,TBL+1
	PUSHJ P,FILGET
	HRRM E,TBL+1
	MOVEI TA,TBL
	.SUSET [.SSNAM,,FSNAME]
	PUSHJ P,WRITEF
	JUMPE A,SAVE1
	CAIE A,NFLER3-NFLER1+1
	JRST FILERR
	MOVEI B,[ASCIZ \FILE ALREADY EXISTS.
DO YOU WANT TO DELETE IT?\]
	PUSHJ P,TOSS
	PUSHJ P,TYI
	MOVE E,C
	PUSHJ P,CRLF
	CAIE E,"Y
	JRST RESET
GBSAVE:	MOVEI TA,TBL
	PUSHJ P,DELETE
	MOVEI TA,TBL
	PUSHJ P,WRITEF
	JUMPN A,FILERR
	JRST SAVE1

FDELET:	PUSHJ P,FILGET
	HRLZM E,TBL+1
	PUSHJ P,FILGET
	HRRM E,TBL+1
	MOVEI TA,TBL
	.SUSET [.SSNAM,,FSNAME]
	PUSHJ P,DELETE
	JUMPN A,FILERR
	JRST COMEX

FILGET:	PUSHJ P,GNE
	 ERROR FILER2
	TLNN A,UPRF
	JRST FILGT2
	MOVEI A,-1(A)
	MOVE E,@RPA
	ADDI E,1(W)
	POPJ P,
FILGT2:	TLNN A,MPF
	JRST FILGT3
	MOVE E,-1(A)
	POPJ P,
FILGT3:	TLNN A,LITF
	ERROR FILER1
	MOVEI E,1(A)
	ADDI E,(W)
	POPJ P,
LESSON:	.SUSET [.SSNAM,,LSNAME]
	.IOPUSH TYIC,
	.OPEN TYIC,LFILEO
	JRST OPENRF
	MOVEI A,EOFILE
	MOVEM A,EOFJMP
	TLO F,GETF\ERRORF
	PUSHJ P,UPROD1
	TLZ F,GETF\ERRORF
	JRST COMEX

.ACORE:	MOVEM A,COREA
	MOVEM B,COREB
	MOVEM C,COREC
	MOVE C,ACORE
	JRST ..CORE
.CCORE:	MOVEM A,COREA
	MOVEM B,COREB
	MOVEM C,COREC
	MOVE A,C
	MOVE C,CCORE
..CORE:	CAILE A,BEGSTO/2000	;MAKE SURE IT DOESN'T WIPE ITSELF OUT
	CAILE A,200
	JRST ILLCOR
	.RDTIME B,
	SUB B,CRTIM1
	IMUL B,LCORE
	ADDM B,CRTIME
	.RDTIME B,
	MOVEM B,CRTIM1
	CAMLE A,CORMAX
	JRST CORE4	;YOU LOSE (SNINCKER)
	CAMN A,LCORE	;IS IT FOR THE AMOUNT WE NOW HAVE?
	JRST CORE3	;YES, WIN
	MOVE B,LCORE
	CAML A,LCORE
	JRST CORE1	;GO CORE UP
	SUBI B,1	;WANT TO CORE DOWN
	IMULI B,1001
	.CBLK B,	;DELETE A BLOCK
	JRST ILLCOR	;FAIL??????
	SOS LCORE
	JRST ..CORE	;UNTIL WE HAVE THE RIGHT AMOUNT
CORE1:	IMULI B,1001
	IOR B,[5400,,400000]	;GET A BLOCK
	.CBLK B,
	JRST CORE4	;NO CORE LEFT
	AOS LCORE
	JRST ..CORE
CORE3:	AOS C
CORE4:	MOVE A,COREA
	MOVE B,COREB
	EXCH C,COREC
	JRST 2,@COREC


ERRORR:	SKIPE	CHARNO
	PUSHJ	P,CRLF
	HRRZ	C,JOBUUO
	CAIL	C,MAXERR
	JRST	ERR0
	HLRZ	A,ERRORS(C)	;GET TEXT MESSAGE
	HRLI	A,440700
	HRRZ	B,ERRORS(C)	;GET DISPATCH FOR COMPUTATIONAL ERRORS
	JUMPN	B,(B)	;DISPATCH IF A COMPUTATIONAL ERROR
ALLERP:	PUSHJ	P,PTOS	;TYPE GENERAL MESSAGE
ALLERR:	PUSHJ	P,CRLF
	SKIPN A,PRODNM	;WERE WE INSIDE A USER PROCEDURE?
	JRST	ERROUT
	ADD A,RP
	CAML A,VP
	JRST ERROUT	;DON'T GET CAUGHT WITH YOUR PANTS DOWN
	MOVEI	A,[ASCIZ /I WAS AT LINE /]
	PUSHJ	P,PTOSSM
	MOVE	A,LINENO
	PUSHJ	P,DECPRT
	MOVEI	A,[ASCIZ / IN /]
	PUSHJ	P,PTOSSM
	JSP	N,PUNAME	;PRINT PROCEDURE NAME
	PUSHJ	P,CRLF
ERROUT:	TLO	F,ERRORF
	TLZE	F,TIF
	JRST	ERROT2	;WERE IN TYPEIN AT BREAK
ERROT1:	MOVE	C,CBOT
	MOVEM	C,CTOP	;FLUSH THE DIRECT LINE THAT LAST LOST
	JRST	RESET
	AOS	GODEPTH	;IS ANOTHER GO ON THE STACK
	JRST	UPROD1

ERROT2:	MOVEI	A,TISPOP
	TLZE	F,RQF	;WERE WE IN A REQUEST
	JRST	ERROT1	;YES
TISPOP:	TLZ	F,ERRORF\BROKE
	POP	P,0(P)
	JRST	TISR1

ERR0:	MOVEI	A,[ASCIZ /ERROR AT /]
	PUSHJ	P,PTOSSM
ERR2:	HRRZ	A,UUOTRP
	SUBI	A,1
	PUSHJ	P,OCTPRT
	JRST	ALLERR

NONAME:	PUSHJ	P,PTOS
	JRST	ERR2

MATCHG:	PUSHJ	P,PTOS
	MOVE	C,UUOACS+D	;THE OFFENDING TERMINATOR
	PUSHJ	P,TYO
MATCG1:	MOVEI	C,"?
	PUSHJ	P,TYO
	JRST	ALLERR

ILLCOR:	SKIPA B,[[ASCIZ \ILL COR REQ. HELP!!\]]
ILLINT:	MOVEI B,[ASCIZ \ILL INT. HELP!!\]
	JRST .+3
ILLMPV:	SKIPA B,[[ASCIZ \ILL MEM REF. HELP!!\]]
ILLUUO:	MOVEI	B,[ASCIZ /ILL INS. HELP!!/]
	PUSHJ	P,TOSS
	PUSHJ P,CRLF
	SOSGE SICKN
	.VALUE
	JRST RESET

PUNTER:	MOVE H,A
	MOVE A,BSS
	MOVE B,BSP
	JSP C,SETPDL	;SO WE DON'T SCREW THE WORLD GETTING HERE RANDOMLY
	MOVE A,H
	PUSHJ	P,PTOS
	PUSHJ	P,CRLF
	JRST	RESET

.INER3:	MOVEI B,[ASCIZ \WHAT SHOULD I DO WITH \]
	PUSHJ P,TOSS
	MOVE	A,CDBOT
	MOVE	A,@CSA
	PUSHJ	P,PTOSS
	JRST MATCG1

.TOER8:	MOVE	E,A
	MOVE	A,UUOACS+1	;GET POINTER TO RP
	ADD	A,RP
	MOVE	A,-1(A)
TR3.1:	HRLI	A,010700+W
TYPAFT:	PUSHJ	P,PTOS
	MOVE	A,E
	JRST	ALLERP

.TOER6:	MOVE	E,A
	MOVE	A,UUOACS+1
	JRST	TR3.1

.TOER3:	MOVE	E,A
	MOVE	A,UUOACS+1
	MOVE	A,-1(A)
	HRLI	A,440700
	JRST	TYPAFT

CANTBA:	SKIPA	E,UUOACS+A
CANTBT:	MOVE	E,THISPR
	EXCH	A,E
	JSP	H,ETYPIT
	MOVEI	A,[ASCIZ / CAN'T BE A /]
CANTB1:	HRLI	A,440700
	JRST	TYPAFT

.GOER2:	MOVE	E,A
	MOVE	A,UUOACS+D
	JRST	TYPAFT-1

.GOER3:	PUSHJ	P,PTOS
	SKIPA	A,UUOACS+D
.XITER:	POP S,A
.GOERR4:	HRLI	A,010700+W
	JRST	ALLERP

.NOPRO:	PUSHJ	P,PTOS
	SOS	A,UUOACS+A
	HRRZ	A,@RPA
	JRST	.GOERR4

.TNAME:	PUSHJ	P,PTOS
	JSP	N,TUNAME
	JRST	ALLERR
.PMNAM:	JSP	N,PMNAME
	JRST	ALLERP

UNDFND:	MOVE	E,UUOACS+A
	JSP	N,PUNAM1
	JRST	ALLERP

.NOTHN:	PUSH P,A
	MOVE A,(S)
	JSP H,ETLIT
	POP P,A
	JRST ALLERP

TWOARG:	PUSH	P,A
	JSP	N,PMNAME
	MOVEI	B,[ASCIZ / OF /]
	PUSHJ	P,TOSS
	MOVE	A,-1(S)
	JSP H,ETLIT	;ARG ONE OF TWO
	MOVEI	A,[ASCIZ / AND /]
TWARG9:	PUSHJ	P,PTOSSM
	MOVE	A,(S)	;GET SECOND ARG OF TWO OR ONLY ARG IF ONE
	JSP H,ETLIT
	PUSHJ	P,CRLF
	POP	P,E
	JRST	TYPAFT+1

ONEARG:	PUSH	P,A
	JSP	N,PMNAME
	MOVEI	A,[ASCIZ / OF /]
	JRST TWARG9



.NOCMD:	PUSHJ P,PTOS
	POP S,A
	JSP H,ETLIT
	JRST MATCG1

TUNAME:	SKIPA	E,TOPROD
PUNAME:	MOVE	E,PRODNM
PUNAM1:	EXCH	A,E
	MOVEI	A,-1(A)
	MOVE	A,@RPA
	PUSHJ	P,PTOSS
	MOVE	A,E
	JRST	(N)

PMNAME:	MOVE	B,THISPR
	MOVE	B,-1(B)
	PUSHJ	P,TOSS
	JRST	(N)

BRAKER:
IFN SNAPFL,[
	SKIPE NVERCD	;FIRST SEE IF THIS IS DUE TO NOVA ERROR
	JRST	NVERR
]	.RESET TYOC,
	.RESET TYIC,

;SEE IF CONTROLLER IS ON. AND IF IT IS, RESET IT.
	SKIPN	COF	;CONTROLLER FLAG
	JRST	BRK.1	;CONTROLLER OFF.
	HRRZI	C,143	;CHARACTER TO TURN PRINTER AND MUSIC BOX OFF
	PUSHJ	P,TYOI

	HRRZI	C,150	;CHARACTER TO TURN OFF TURTLE
	PUSHJ	P,TYOI

	HRRZI	C,142	;CHARACTER TO TURN PRINTER ON.
	PUSHJ	P,TYOI

BRK.1:	PUSHJ	P,PTOS
	.DISMISS [.+1]
	PUSHJ P,LISTFF
	TLO	F,BROKE
	JRST	ALLERR

REDO:	MOVE	A,BSS
	MOVE	B,BSP
	JSP	C,SETPDL
	JRST	RESET

SETPDL:	ADD	A,SP
	HRRZI	S,(A)
	SUB	A,SP+1
	HRLI	S,1(A)

	ADD	B,PP
	HRRZI	P,(B)
	SUB	B,PP+1
	HRLI	P,1(B)
	JRST	(C)

ETYPIT:	JFFO	A,.+2
	JRST	(H)
	JRST	@.+1(B)
	ETMP
	ETUP
	ETVAR
	ETLIT
	ETCOM

ETMP:	HRLI	A,440700
	JRST	ETUP1
ETUP:	HRLI	A,010700+W
	ADD	A,RP
ETUP1:	HRR	A,-1(A)
	PUSHJ	P,PTOS
	JRST	(H)

ETVAR:	SKIPA G,[":]
ETCOM:	MOVEI	G,"!
	TRO F,PREFIX\SUFFIX
	JRST	ETLIT1
ETLIT:	MOVEI	G,042
	TRO F,PREFIX\SUFFIX
ETLIT1:	EXCH	G,E
	PUSHJ	P,PTOSS
	MOVE	E,G
	JRST	(H)

DEFINE EE NAME,TEXT,CODE
NAME==.-ERRORS
[ASCIZ *TEXT*],,CODE
TERMIN

ERRORS:
EE .BARF,ERROR ,NONAME,
EE ARGWNG,WRONG INPUT TO ,.PMNAM,
EE 340NDS,DISPLAY NOT AVAILABLE.,,
EE 340TML,YOU CAN'T DRAW THAT MANY LINES.,,
EE BADLST,IMPROPER LIST STRUCTURE IN INPUT,,
IFN VFLAG,[
EE BADPNT,IMPROPERLY DESIGNATED POINT,,
EE BDSCLR,IMPROPER SCALAR IN VECTOR OPERATION.,,
]
EE COMERR, CANNOT BE USED AS AN INPUT. IT DOES NOT OUTPUT.,.PMNAM,
EE DISNOT,YOU DON'T HAVE THE DISPLAY.,,
EE DIVBY0,YOU CAN'T DIVIDE BY 0.,,
EE EDTER1,YOU CANNOT EDIT THAT.,
EE EDTER2,YOU ARE ALREADY EDITING ,.TNAME,
EE EMPARG, OF AN EMPTY THING?,.PMNAM
EE ENDERR,END WHAT? YOU ARE NOT DEFINING ANYTHING.,
EE ERXTRA,SOMETHING EXTRA.,,
EE ERMSSG,SOMETHING MISSING.,,
EE EVER3, NEEDS A MEANING.,UNDFND,
EE EVER4, HAS NOT BEEN COMPLETELY DEFINED.,UNDFND,
EE EVER5,PROCEDURE NAME.,CANTBT,
EE FILER1,FILE NAME.,CANTBA,
EE FILER2,TWO FILE NAMES NEEDED.,,
EE FNF,FILE NOT FOUND.,,
EE GOERR1,GO WHERE?,
EE GOERR2, IS NOT A LINE NUMBER.,.GOER2,
EE GOERR3,THERE IS NO LINE ,.GOER3,
EE GOERR4, MUST BE USED IN A DEFINED PROCEDURE.,.PMNAM,
EE GOERR9,NO PLACE TO GO.,
EE IFERR,IF WHAT?,
EE INERR1,MATCHING ,MATCHG,
EE INERR2,LINE NUMBER IS TOO LARGE.,,
EE INERR3,LINE ,.INER3,
EE INERR4,YOU CAN'T HAVE A LINE 0.,,
EE INFER1,INFIX OPERATOR LACKS AN INPUT.,,
EE IOPERR,I AM IN TROUBLE. TELL YOUR TEACHER.,PUNTER,
EE INVTTY,INVALID TELETYPE NAME.,,
EE LCERR1,LOCAL.,CANTBA,
EE LOCNIP,LOCAL MUST BE IN A PROCEDURE.,,
EE LSTER2,LIST ALL WHAT?,
EE MBDUR,NEGATIVE DURATIONS ARE NOT ALLOWED.,,
EE MBFOR,YOU CAN ONLY MOVE THE MUSIC BUFFER FORWARD.,,
EE MBFULL,MUSIC TOO LONG.,,
EE MBNOTE,NOTE OUT OF MUSIC BOX RANGE.,,
EE MBNOTI,YOU HAVEN'T DONE STARTMUSIC YET.,,
EE MBVOC,THERE ARE ONLY 4 VOICES.,,
EE MBVOC2,YOU CAN ONLY SET VOICE TO 1 2 3 OR 4.,,
EE MINERR,INPUT TO - MUST BE A NUMBER.,,
EE NFLER1,THERE IS NO FILE DIRECTORY.,,
EE NFLER2,FILE NOT FOUND.,,
EE NFLER3,FILE ALREADY EXISTS.,,
PTCHBG==MBNOTE
TMCHMS==MBFULL
NSCHV==MBVOC

EE NFLER4,FILES LOST. HELP!!,,
EE NFLER5,THAT DIRECTORY IS NOT AVAILABLE.,,
EE NFLER6,FILE DIRECTORY FULL.,,
EE NFLER7,STORAGE FULL.,,
EE NFLER8,PROTECTION VIOLATION.,,
EE NMERR5,DON'T USE THE EMPTY WORD FOR A NAME.,,
EE NMERR6,DON'T USE A NUMBER FOR A NAME.,,
EE NOCMD,WHAT SHOULD I DO WITH ,.NOCMD,
EE NOEDIT,YOU CAN NOT DO THAT IF YOU ARE NOT EDITING.,,
EE NOPROD,THERE IS NO PROCEDURE ,.NOPRO,
EE NOTPAR,THERE ARE AN ODD NUMBER OF ARGUMENTS.,,
IFN LFLAG,[EE NORP,TOO FEW RIGHT PARENTHESES IN LIST,,]
EE NOSNAP, CANNOT TAKE SNAPS AS INPUTS.,.PMNAM,
EE NOTHNG, HAS NO THING.,.NOTHN,
EE NOTHER,I CAN'T FIND THAT NAME. ARE YOU SURE YOU TYPED IT RIGHT?,,
IFN VFLAG,[EE NOTVEC,IMPROPER FORM FOR VECTOR,,]
EE NUMBIG, IS TOO BIG.,.NOTHN,
EE NUMSML, IS TOO SMALL.,.NOTHN,
EE NUMVOI,HOW MANY VOICES?,,
IFN NOVA,[
EE NVLTL,TOO MANY LINES AND SNAPS.,,
EE NVNOFF,YOU CAN'T MOVE OFF THE SCREEN.,,
EE NVNOLN,NO LINE OPEN TO THE NOVA.,,
EE NVNTSP,THAT'S NOT A SNAP.,,
EE NVSNAP,YOU CAN'T DO THAT WHILE SNAPPING.,,
EE NVSTL,LINES AND SNAPS TOO LONG.,,
EE NVTML,TOO MANY LINES AND SNAPS.,,
EE NVTMS,YOU'VE HAD TOO MANY SNAPS.,,
EE NVWARG,INPUT TO PEN MUST BE BETWEEN 0 AND 4000.,,
]
EE PLTBIG,PLOT OFF SCALE.,,
IFN PHY,[
EE PHINIT,YOU MUST TYPE PHYSICS FIRST.,,
]
IFN LFLAG,[
EE PICKE1,SECOND INPUT MUST BE NON-EMPTY LIST,,
EE PICKE2,FIRST INPUT MUST BE POSITIVE NUMBER,,
EE PICKE3,FIRST INPUT IS BIGGER THAN THE LIST,,
]
EE PREDR1,INPUT MUST BE "TRUE" OR "FALSE".,ONEARG,
EE PREDR2,INPUTS MUST BE "TRUE" OR "FALSE".,TWOARG,
EE PRNER1,MATCHING (?,
EE PRNER2,MISSING )?,
EE PRTER1,INPUT FOR PRETTY MUST BE GREATER THAN OR EQUAL TO 10.,,
EE QTOV,NUMBER TOO BIG TO MULTIPLY.,,
EE RONGT1,YOU CAN TURN THE LAMP ON AND OFF ONLY IF IT IS THE SMALL TURTLE,,
EE STOERR, MUST BE STORED.,.PMNAM,
EE SUMERR,INPUTS MUST BE NUMBERS.,TWOARG,
EE TOERR2,YOU NEED : BEFORE EACH INPUT.,,
EE TOERR3, IS USED BY LOGO.,.TOER3,
EE TOERR4,DON'T TRY TO DEFINE ANOTHER PROCEDURE INSIDE THIS ONE.,,
EE TOERR5,"TO" MUST HAVE A PROCEDURE NAME.,,
EE TOERR6, IS NOT A LEGAL PROCEDURE NAME.,.TOER6,
EE TOERR7,TITLE MUST BE FOLLOWED BY "TO".,,
EE TOERR8, IS ALREADY DEFINED.,.TOER8,
EE TOERR9,INPUT.,CANTBA,
EE TUNOLN,YOU HAVE TO DO A SETTURTLE,,
EE USEDNM,THAT NAME IS ALREADY IN USE.,,
EE WHTERR, WHAT?,.PMNAM,
EE WRDERR,YOU CAN'T MAKE A WORD OUT OF A SENTENCE.,TWOARG,
EE XITERR,,.XITER  ;NO SYSTEM ERROR MESSAGE, ONLY THAT SUPPLIED BY USER,
EE ZERERR,INPUT MUST BE A NUMBER.,ONEARG,
EE BREAK,BREAK,BRAKER,
EE PUNT,STORAGE FULL,PUNTER,
BLOCK 5	;FOR PATCHING THIS LIST
MAXERR==.-ERRORS
CON1:	CONSTANTS

GCN1:	RPA
	0
GCN1.1:	VPC
	0
GCN2:	PSA
	PSD
	PSM
	0
GCN3:	CSA
	CSD
	CSM
	0
GCN3.1:	DPXB
	0
GCN4:	UUOACS+S
	0
GCN5:	UUOACS+P
	0
GCN6:	WSB
	WSD
	UUOACS+W
	0
GCN8:	067764306424
	0

IFE HCORE,BEGSTO:
LOGEND:
PUREC==<LOGEND-<PURE\1777>>/2000
IFE HCORE,PURIFY:	MOVEI A,401001
IFN HCORE,PURIFY:	MOVEI A,600200
	MOVEI B,PUREC
	.CBLK A,
	.VALUE
	ADDI A,1001
	SOJG B,.-3
	.VALUE .+1
	ASCIZ \:PURIFIED\
IFE HCORE,[
LOC BEGSTO+.INITA
69.

	END LOGO
]
IFN HCORE,END GOGO
