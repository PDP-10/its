	.SBTTL IMPURE STORAGE
	VERSIO

FOO=.
.IFNZ TS
.=34
	ERRBRK
	.=40
.IFF
.=0
	.REPT 60
	.+2
	BPT
	.ENDR
.=40
	ERRBRK		;KLUDGE, TRAPS GO TROUGH USER 40 ON LSI
.=300
	JMP START	;MAGIC START/RESTART PLACE (300
	JMP START1	;HERE IS WE WANT TO CLEAR THE WORLD (304)
	MOV PC,IGNERR	;START HERE TO IGNORE PATCHES
	BR 300
.ENDC
.=FOO

LVERNF:	VERNF
PAT:
PATCH:	.=.+400	;PATCH AREA
PATEND=.

.SBTTL LSI UTILITY FILES (VARIABLES)

.IFNZ LSI

;XOR TABLES FOR THE SYSTEM
XORFLG:	0	;NON-ZERO => XOR S SHOULD BE CORRECT
SYSXOR:	0	;XOR OF WHOLE SYSTEM
SYSTAB:	.BLKW 16.	;XOR OF ADDRESS+2 FOR EACH BIT
WRNGBT:	0	;SAVED WRONG BITS
WRNGAD:	0	;SAVED WRONG ADDRESS
WRNGCN:	0	;COUNT OF CORRECTED ERRORS
IGNERR:	0	;TOO MANY ERRORS, IGNORE ALL
INCNT:	0	;SAVED COUNT FOR INCREMENTAL CHECK
INADDR:	0	;SAVED ADDRESS
INXOR:	0	;SAVED XOR
.ENDC
	.SBTTL USER VARIABLES
.IFZ SITS
	IIS=LOGEND
	IIP=IS-<2*SPDLL>
INITTB:	ERTXTL
	RERTXT
.IF Z RKDSK
	1024.			;BYTES IN A DISK BLOCK
	LSDBAD
.ENDC
	GCBTL
	GCBITA			;THE BIT TABLE
.IF NZ LSMAP
	0
	LOWPAG
INITMP:			;STUFF ABOVE HERE GETS ALLOCATED IN HIGH MEMORY
			;IF WE HAVE A MAP
.ENDC
	0
	S
	0
	SPOPL
	0
	IS
	PDSLOP/3
	SPOPLM
	SPDLL+<PDSLOP/3>	;TO SET LIMIT ON PDL
	SPUSHL
	<2*SPDLL>-<SPDLL+<2*<PDSLOP/3>>>	;GET TO THE TOP OF THE P PDL
	IP
	0
	PPOPL
	PDSLOP/3
	POPLM
	PPDLL+<PDSLOP/3>
	PPUSHL
	<2*PPDLL>-<PPDLL+<2*<PDSLOP/3>>>
	PPDTOP
.IF NZ RKDSK
	1024.			;BYTES IN A DISK BLOCK
	LSDBAD
.ENDC

INITTE::
.ENDC
SPMSWP:	0	;THE PLACE WE ARE MARKING IN GHT ESWAPPED OUT PDL
PDLEMR:	0	;PDL EMERGENCY FLAG
IS:	IIS
S:	IIS
SPOPL:	IIS
SPUSHL:	IIS-<SPDLL+<2*PDSLOP/3>>
SPDLCP:	0
SPEMR:	0	;S PDL EMERGENCY FLAG
SPLIMT:	20000	;LIMIT ON S PDL
SCRBLK:	0
IP:	IIP
PPOPL:	IIP
PPUSHL:	IIP-<PPDLL+<2*PDSLOP/3>>
PPDLCP:	0
PPEMR:	0	;P PDL EMERGENCY FLAG
PPLIMT:	40000	;LIMIT ON P PDL
PPDTOP:	IIP-<2*PPDLL>	;DSK=0 PDL BUFFER TOP (BOTTOM)
.IFNZ FILDSK
DC NDISKS,4
DC MXNAME,10.	;MAX LENGTH OF NAME IN WORDS
DNAME:	.BLKW 5	;BITS, LENGTH, DATE, TIME
DNAM:	.BLKW MXNAME	;ACTUAL NAME
DNAMEP:	.REPT NDISKS	;NDISKS IS MAX NUBMER OF DISKS WHEN PUT IN .EVAL
	DNAMES+<.RPCNT*MXNAME*2>
	.ENDR
	0
DNAMES:	.BLKW MXNAME*NDISKS
DISKS:	NDISKS	;NUMBER OF DISKS
.IFTF
REDFLG:	0
WRTFLG:	0
.IF Z UNIX
NAME:	.BLKW 10.
.IFF
NAME:	.BLKW 200.
.FLDSC: .BLKW NCHNS

.APEND:	SYS OPEN
	#NAME
.APMOD:	0			;THIS IS FILLED IN FOR READ OR READ/WRITE

.LSEEK:	SYS LSEEK		;RESTORE FILE POSITION AFTER CHECKING EOF
.LSOF1:	0			;ALSO USED FOR EXPLICIT USER SEEK
.LSOF2:	0
	0

.FTIME:				;BUFFER FOR RESULTS OF TIME SYS CALL
.STIM1:	0			;HIGH-ORDER PART OF TIME IN SECS
.STIM2:	0			;LOW-ORDER DITTO
.MSTIM:	0			;EXTRA TIME IN MILLISECS
	0			;TIMEZONE
	0			;DAYLIGHT SAVINGS FLAG

.GTTY:	0
	0
	0

RDBYTE:	0			;BUFFER FOR SINGLE-CHAR TRANSFERS
.ENDC
MAXPLN==40.
PATH:	.BLKB MAXPLN
NPATH:	.BLKB MAXPLN
DC FILRED,1		;FLAG FOR READING
DC FILWRT,2		;FLAG FOR WRITING
DC FILDIR,4		;FLAG FOR DIRECTORY
DC FILNDK,10		;FLAG FOR NON-DISK CHANNEL
FILFLG:	.BLKW NCHNS	;THE ABOVE FLAGS ARE SET IN HERE
FILFLP:	FILFLG		;POINTER TO FILE FLAG FOR THIS CHANNEL
CHAN:	0	;NUMBER OF CHANNEL THIS COMMAND IS HACKING
.IFT
DIRFLG:	0	;NONZERO <=> NOTHING LEFT TO .FILER FROM OPEN DIRECTORY
DIRIGN:	0	;NUMBER OF CHARS TO IGNORE ON THIS PASS OF POIING
DIRIGC:	0	;NUMBER OF CHARS TO IGNORE ON NEXT PASS
DIRIGP:	0	;SAVED PDL POINTER FOR NON LOCAL RETURN
DIRCAP:	TMPCP	;PTR TO TMPCP OR CURCAP FOR .POI
MWCOUT:	0
MWCNT:	0
MWTTY:	0
MWFLAG:	0
.IIF NZ LSI,	BITS:	.ASCIZ /BITS/
	.EVEN
DSKERW:	0	;PALCE TO SAVE SITS ERROR WORD

CURROT:	0	;CURRENT ROOT
DEFROT:	0	;DEFAULT ROOT
.IF NZ LSI
ROTCPS:	.BLKW NDISKS	;CAPABILITYS TO ROOTS. 0=> WE DON'T HAVE ONE FOR THIS DISK
ROTBLK:	0	;"BLOCK" FOR CREATING ROOT CAPS WITH
.ENDC
CURCAP:	.BLKW NCHNS	;CURRENT FILE CAP
CURCPP:	CURCAP		;POINTER TO REAL CURRENT CAP
CURCPE:	FILERR		;ERROR ADDRESS TABLE
FILERR:	.BLKW NCHNS
DEFCAP:	0	;DEFAULT DIRECTORY CAP
DISCAP:	0
FREEBL:	0
DSKNUM:	0
;FOLLOWING MUST BE IN ORDER, COPY OF ENTRY
ENTRY:	0	;HEADER WORD
TVERN:	0	;VERSION NUMBER
ENTEFH:	0	;HIGH ORDER EOF WORD
ENTEOF:	0	;LOW ORDER EOF WORD
DATE:	0
TIME:	0
ENNAME:	.BLKW 10.	;NAME AND DESCRIPTOR
FILBLK==ENNAME		;ALSO USED FOR .FARI
MXENLN==.-ENTRY		;MAX ENTRY LENGTH IN BYTES
ENTEND:	.BLKW 4		;FOR VERSION NUMBER
	-1		;FENCEPOST
CAPSP:	CAPSTK
CAPSTK:	.BLKW 20.
TMPCP:	0
;DISPATCH TABLE FOR POTREE (INDEXED OFF OF DISK ENTRY TYPES)
PODIRC:	0					;CURRENT DIRECTORY BEING POTREE'D
DBUF:	.BLKB DBUFL
DBUFP:	0		;POINTER INTO THE DISK BUFFER
DBDEND:	0		;POINTER TO ONE PAST THE LAST VALID DATA BYTE
BCHNG:	0		;0 => BUFFER NOT MODIFIED, 1=> BUFFER MODIFIED
DBUFST:	.BLKW 2		;START OF THE BUFFER IN THE FILE
.ENDC
.IIF NZ ENG&FR,LANG:	FRFLG!PFRFLG
PRMTCH:	'?	;PROMPT CHAR
GTLBUF:	.BYTE 33,0,0,0
TYICP:	2
TYOCP:	3
RNSEED:	27.	;FOR RANDOM
MUCWRD:	100	;CONTROL CHAR FOR CURRENT MUSIC BOX MODE
GCHR:	0	;SOURCE OF CHARS
PCHR:	0	;PLACE WHERE OUTPUT CHARS GO (TYO, BLST, ...)
OTTYST:	0
TTYST:	0
DFLAGS:	.WORD 0
DRIBF:	SRTSPC	;ADDRESS OF DRIBBLE ROUTINE
.IFNZ CPF	;CENTRONICS PRINTER STUFF
DC CPSELC,21	;SELECT CHAR
DC CPDSLC,23	;DESELECT
.ENDC
.IF NZ TIMCLK
SSTATS::	;THE SITS STATUS AREA
SVERN:	0	;SITS VERSION
STIME:	.BLKW 2	;TIME SINCE SYS START IN 60THS
SCSR:	0	;CONSLOE SWITCHS
LOOKSW:	0
RANDS:	.BLKW 10	;POTENTIALLY THERE ARE MORE
SECOND:	0
MINUTE:	0
HOUR:	0
DAY:	0
MONTH:	0
YEAR:	0
.ENDC
.IIF NZ TIMCLK!FILDSK,GOTSMS:	0	;IF NON-ZERO WE HAVE SMS FLOPPY CONTROLLER
.IIF NZ LSMAP,GOTMAP:	0
.IF NZ METERS
METERP:	MTTYI
DC MTZER,.		;PALCE TO START ZEROING METERS. ALSO METER ZERO
MTGCCN:	.BLKW 2		;GC COUNT
MTCLK:	.BLKW 2		;TIME SINCE METERS ZEROED
MTEVAL:	.BLKW 2		;TIME RANDOMLY IN EVAL (NOT IN PRIMITIVES, OR GC)
MTPRIM:	.BLKW 2		;TIME SPENT IN PRIMITIVES (BUT NOT IN LSITS OR GC)
MTGCOL:	.BLKW 2		;TIME SPENT IN GC
MTLSIT:	.BLKW 2		;TIME SPENT IN LSITS (NOT IN TYI OR DISK XFER)
MTTYI:	.BLKW 2		;TIME SPENT HANGING AROUND FOR TYPEIN
MTDISK:	.BLKW 2		;TIME SPENT DOING REAL DISK TRANSFERS
MTDSKC:	.BLKW 2		;COUNT OF DISK XFERS
MTSPR1:	.BLKW 2		;SPARE #1
MTSPR2:	.BLKW 2		;SPARE #2
MTFLAG:	.BLKW 2		;IF ZERO, RUN THE METERS
PCMETR:	.BLKW 2*32.	;TIME SPENT AT PC, INDEX ON 5 HIGH BITS
DC MTZERE,.
.ENDC
ZEROS:	;BEGINNING OF STUFF THAT GETS ZEROED
;**************
;WARNING!!! ON RESTART, EVERYTHING ON THIS PAGE IS SET TO ZERO !!!!
;**************
PCRBLK:	0
ERRPT:	0
ERRPNT:	0
PRBAO:	0	; = 0,374,770, ... N*PDSWOP
SPRBAO:	0	;WHERE N = # P OR S PDL BLOCKS SWAPPED OUT
PRB:	0	;LIKE PRBAO, BUT NOTHING ACTUALLY SWAPPED OUT
SPRB:	0	; PRB AND SPRB ARE USED WHEN DSK=0, IE NO DISK
NNGC:	0	;NUMBER OF NODES GARBAGE COLLECTED
NNIFSL:	0	;NO. NODES IN FREE STORAGE LIST
FREE:	0	;START OF FREE NODES
GCP1:	0
GCP2:	0
GCPREV:	0
;ARRAY HEADER DEFS
DC LIMIT,3
DC HEADER,20.			;THIS INCLUDES EVERYTHING POSSIBLY IN A HEADER
DC RHEADR,HEADER-8.		;REAL HEADER IS THE ARRAY HEADER WITHOUT THE WINDOW STUFF
DC FHEADR,6			;THIS IS ALL YOU NEED TO HAVE A FREE BLOCK
DC BKPTR,4
DC SIZE,2

DC PROCAR,4	;TYPE OF ARRAY FOR PROCEDURES
DC PROTYP,4	;PLACE WHERE THE TYPE IS STORED
DC PROATM,6	;PLACE WHERE THE POINTER TO THE PNAME OF THIS PROCEDURE
DC PROSTK,10	;COUNT OF REFERENCES TO THIS PROCEDURE ON THE STACK
DC PROEND,12	;OFFSET TO THE END OF THIS PROCEDURE FROM THE START OF THE ARRAY
DC PROSTR,14	;THIS IS WHERE THE PROCEDURE ACTUALLY STARTS

PARRYS:	0	;POINTER TO START OF PROCEDURE ARRAY WE ARE EDITING
PARRYF:	0	;NUMBER OF FREE BYTES IN THE PROCEDURE BEFORE WE NEED TO EXPAND

;THE LENGTH OF USED PROCEDURE IS STORED IN THE FIRST DIMENSION OF THE ARRAY
DC PRSIZE,60.	;NUMBER OF BYTES TO ALLOW FOR INITIAL PROCEDURE ALLOCATION
DC PROINC,60.	;NUMBER OF BYTES TO ADD EVERY TIME WE ADD MORE CORE TO THE PROC
;**************
;WARNING!!! ON RESTART, EVERYTHING ON THIS PAGE IS SET TO ZERO !!!!
;**************
;DOUBLE WARNING!!!!! ON ERRORS, EVERYTHING ON THIS PAGE GETS SET TO ZEROS
;****************
	DC ERCLR1,.	;ON ERROR, START ZEROING HERE
OLFUN:	0	;USED FOR REDEFINING SYS. FUN
TOPS:	0	;GC MARK FROM HERE IF NON 0
TOPS1:	0	;   "
TOPS2:	0	; "	(SIGH)
	;THE FOLLOWING ARE PUSHED BY PEVAL
CPBND:	0	;POINTER TO THE CURRENT PROCEDURE'S BINDING NODE
		;SEARCH FOR THE LINE)
CTP:	0	;POINTER TO THE NEXT TOKEN
CLCNT:	0	;NUMBER OF TOKENS LEFT ON THIS LINE
CPLN:	0	;CURRENT LINE NUMBER
CPP:	0	;POINTER TO THE CURRENT PROCEDURE NAME
IFLEV:	0	;IF LEVEL
NOPAR:	0	;NUMBER OF PARENS SEEN BY STNE
CPDLP:	0	;CURRENT PDL PTR AFTER LAST PEVAL PUSH
CSPDLP:	0	;CURRENT S PDL PTR AFTER LAST PEVAL PUSH
	;END OF PEVAL PUSHES EXCEPT
	;CO, CO+2, FLAGS + ERPROC ARE ALSO PUSHED
FUNLEV:	0	;FUNCTION LEVEL
	;THE FOLLOWING ARE PUSHED (SOMETIMES) BY EVAL
CO:	0	;CURRENT OPERATOR
NOR:	0	;NO. OF OPERANDS STILL NEEDED BEFORE CO CAN EXECUTE
COF:	0	;FLAGS FOR THE CURRENT OPERATOR
LO:	0	;LAST OPERATOR
CT:	0	;CURRENT TOKEN
RDFLAG:	0	;FOR READ
LISTBD:	0	;LIST BUILD DEPTH
PSTOPR:	0	;RETURN ADDR FOR PSTOP
DOFRET:	0
TEMP:	0
TMPBLK:	.BLKW 7
.IFNZ SARITH
;THIS IS THE MAXIMUM LENGTH OF STRING NUMBERS ALLOWED (MUST BE EVEN)
DC MXNUML,24.

NUM1:	.BLKB MXNUML+2
NUM1EN==.
NUM2:	.BLKB MXNUML+2
NUM2EN==.
NUM3:	.BLKB MXNUML+2
NUM3EN==.
NUM1E:	0			;POINTER TO THE END OF NUMBER 1
NUM2E:	0			;SIMILAR FOR NUMBER 2
NUM3E:	0			;SIMILAR FOR NUMBER 3
NUM1S:	0			;NEGATIVE FLAG OF NUMBER 1
NUM2S:	0			;SIMILAR FOR NUMBER 2
NUM3S:	0			;SIMILAR FOR NUMBER 3
.ENDC
RBRKF:	0	;TEMP FLAGS (ALL TFN'S SHOULD EVENTALLY POINT HERE)
TF3:	0
TF5:	0
TF6:	0
TF7:	0
NCHR:	0	;FOR BLST
ABASE:	0	;(ABASE)+10. IS WHAT ARITHMETIC BASE WE ARE IN
		;(FOR CONVERT TO & FROM STRING ROUTINES)
	DC ERCLR2,.	; ON ERROR STOP CLEARING HERE
;**************
;WARNING!!! ON RESTART, EVERYTHING ON THIS PAGE IS SET TO ZERO !!!!
;**************

FLAGS:	0	;FLAG WORD
EDTIF2:	0	;TEMP EDIT FLAG
ERPROC:	0	;UOE PTR TO PROC TO CALL IF THERE IS AN ERROR
ILINEL:	0	;INPUT LINE PTR GC MARK FROM HERE)
NPROCL:	0	;NAME OF PROC BEING EXECUTED WHEN ERROR OCCURED
NLINEL:	0	;# OF PROC LINE BEING EXECUTED " " "
NTOKEL:	0	;# OF TOKEN BEING EXECUTED " " "
ERRORN:	-1	;ERROR NUMBER
BRAKEL:	0	;VALUE OF BRAKE(U)
BRAKE:	0
TOPRNM:	0	;PTR TO UOE OF PROC. BEING "TO"'ED
FLAGS2:	0	;EVAL FLAGS - NOT PUSHED BY PEVAL
GNCN:	0	;"GET NEXT CHAR" NODE AND USED BY GNOLE
	0
NBKTS:	0	;FOR RDSTR
LASTER:	0	;ADDRESS OF LAST ERROR
LASTPR:	0	;LAST PROC DEFINED
PTBF:	0
PTBTAB:	.BLKW 4
ALEVN:	0	;NON-ZERO MEANS ALLOW N LEVEL BREAK STUFF
ENDWLD:	0
SEXP:	0	;USED FOR SIGN OF EXPONENT IN CONVERT
FNPDL:	0	;AUXILIARY STACK IN CONVERT
	0
	0
	0
	0
	0
	0
	0

;**************
;WARNING!!! ON RESTART, EVERYTHING ON THIS PAGE IS SET TO ZERO !!!!
;**************
.IF NZ MUSBOX
	DC MUSBEG,.	
		;KEEP VARIABLES IN THIS ORDER
MVOC:	.WORD	0,0,0,0	;POINTERS TO VOICE LISTS--ONE FOR EACH VOICE
VLAST:	.WORD	0,0,0,0	;POINTERS TO LAST NODE IN LIST
VOICLN:	.WORD	0,0,0,0	;NUMBER OF NOTES IN EACH VOICE
VOICEN:	0	;INDEX FOR CURRENT ACTIVE VOICE
NVOIC:	0	;NUMBER OF ACTIVE VOICES
	DC MUSEND,.
.ENDC
.IF NZ NPLOT
PLTCHR:	0	;CHAR COMING BACK FROM PLOTTER

DPENP:	.WORD 0
PLPENP:	.WORD 0
;PLOTTER VARIABLES
;THESE MUST BE IN ORDER
DC PORBEG,.
PCURX:	.WORD 0,0	;CURRENT PLOTTER X POS
PCURY:	.WORD 0,0	;PLOTTER CURRENT Y
PCURA:	.WORD 0,0		;CURRENT ANGLE PLOTTER
PCOSA:	.WORD 0,0
PSINA:	.WORD 0,0
RPCURX:	.WORD 0,0,0,0
DC POREND,.
.ENDC
.IF NZ TURFLG
;VARIABLES AND CONSTANTS FOR DISPLAY SYSTEM

;TURTLE VARIABLES
TURDN:	0	;USER'S TURTLE DEVICE NUMBER
TURF:	0	;FUDGE FACTOR FOR TURTLE LEFT AMD RIGHT

DIVOWN:	.WORD 0
.ENDC

.IF NZ GTL!NDISP

;THESE MUST BE IN THIS ORDER
DC DORBEG,.
DCURX:	.WORD 0,0
DCURY:	.WORD 0,0
DCURA:	.WORD 0,0
DCOSA:	.WORD 0,0
DSINA:	.WORD 0,0
RDCURX:	.WORD 0,0,0,0
OLDX:	.WORD 0,0
OLDY:	.WORD 0,0
.IF NZ NDISP 
NADXY:	0	;NUMBER OF EXTRA ADDXY'S WE CAN TRY TO COLLAPSE
ODIREC:	0	;IF NOT EQUAL TO DIREC BREAK INCREMENTS TO NEW OWRD
.ENDC
DC DOREND,.	;MARKS END OF THESE VARIABLES
;END OF ORDER
.IF NZ GTL
DC GTSTRT,170	;FIRST ADDRESS IN 2500 FOR DISPLAY AREA
DC GTMNDS,1800.	;MINIMUM SPACE ALWAYS RESERVED FOR ACTIVE DISPLAY
		;GTSNBT CAN NEVER BE LOWER THAN THIS
		;THIS ALSO HAPPENS TO BE THE MAX LENGTH IN THE NEW CODE
DC GTDEND,5700	;LAST ADDRESS
DC GTNEND,2000	;LAST SNAP ADDRESS, NEW CODE
DC GTSLEN,GTDEND-GTSTRT	;LENGTH OF DISPLAY AREA
DC GTDTOP,64.	;# OF DLIST POINTERS AVAILABLE
GTDPTR:	0	;NEXT DLIST POINTER INDEX
GTLDF:	0	;says if the 2500 is active
GTNEW:	0	;NON-ZERO => NEW 2500
GTLEN:	0	;LENGTH OF CURRENT THING BEING DISPLAYED
GTSNBT:	0	;BOTTOM OF SNAP SPACE (RELATIVE TO START=GTSTRT)
GTSNTP:	0	;TOP OF SNAP SPACE
GTDIZF:	0	;IF NON-ZERO, NEVER CLEAR DIZZY FLAG
GTDIZY:	0	;IF NON-ZERO TURTLE IS DIZZY (SPIN OR MOVE)
GTDLTP:	0	;TOP OF DISPLAY LIST
.IFNZ LSI	;ONLY IMPLEMENTED FOR THE LSI AT THE MOMENT
PTIME:	0,0	;THE TIEM WHEN THE PLOTTER WILL HAVE SETTLED
.ENDC
.ENDC
.IF NZ NDISP
STB:	0	;STATIC AREA BOTTOM
STT:	0	;STATIC AREA TOP.POINTS TO TOP OF STATIC DISPLAY AREA
DYB:	0	;DYNAMIC BOTTOM.  POINTS TO BOT OF DY AREA
DYR:	0	;ROVING POINTER USED BY DISPLAY STORAGE ALLOCATIN ROUTINES
DYT:	0	;POINTER TO DYNAMIC AREA TOP
TUB:	0	;POINTER TO TURTLE AREA BOTTOM
SNLIST:	0	;POINTER TO SNAP LIST
SNABOT:	0	;BOTTOM OF CURRENT SNAP
DFBCNT:	0	;KEEPS TRACK OF # OF FREE BITS IN DISPLAY LIST
PUSHJT:	0	;DISPLAY PUSHJ TO TURTLE
DRELOC:	0	;RELOCATION.  ADD THIS TO VIRTUAL ADDRESS TO GET DISPLAY ADDRESS
DIREC:	0
.ENDC
.ENDC
EZEROS::	;END OF ZEROING

.IIF NZ HALFLG, .INSRT HALVAR >

.IFNZ TVS
;VARIABLES FOR TV TURTLE ROUTINES

WINDAT:	-1.	;Data to be written in TVRWIN register. 0 for B&W eraser mode, else -1.
TVX:	423.
TVY:	152.	;POSITION OF THE TV DRAWER
TVTOP:	2.	;TOP LINE OF THE DISPLAY AREA
TVBOT:	302.	;BOTTOM LINE OF THE DISPLAY AREA
TVLEFT:	273.	;BIT POSITION OF LEFT SIDE OF DISPLAY AREA
TVRIGH:	573.	;BIT POSITION OF RIGHT SIDE OF DISPLAY AREA
TVSIZX:	301.	;SIZE OF DISPLAY AREA IN X DIRECTION
TVSIZY:	301.	;SIZE OF DISPLAY AREA IN Y DIRECTION
TVCENX:	423.	;BIT POSITION OF CENTER OF DISPLAY AREA
TVCENY:	152.	;LINE OF THE CENTER OF DISPLAY AREA
TVMIN:	301.	;MINIMUM DIMENSION OF DISPLAY AREA
TVSIZE:	0	;NUMBER OF LINES IN DISPLAY AREA (DOWN TO ECHO AREA)
TVHIGH:	0	;HEIGHT OF A CHAR LINE IN TV LINES
TVWIDE:	0	;WIDTH OF A CHAR IN BITS

;THE NEXT SET OF VARIABLES REFER TO THE TURTLE PICTURE. IE, THE SCREEN
;AS MEASURED IN TURTLE COORDINATES.
TRMIN:	400.	;MINIMUM DIMENSION OF DISPLAY AREA
TRCENX:	0	;CENTER OF TURTLE SCREEN IN X
TRCENY:	0	;CENTER OF TURTLE SCREEN IN Y

;FLOATING POINT VARIABLES
TRPRTV:	.WORD 0,0	;NUMBER OF TURTLE INCREMENTS PER TV INCREMENT
TRFRAD:	.WORD 0,0	;SIZE OF THE TURTLE FRONT RADIUS
TRSRAD:	.WORD 0,0	;SIZE OF THE TURTLE SIDE RADIUS
TRSIZX:	.WORD 0,0	;SIZE OF TURTLE SCREEN IN X
TRSIZY:	.WORD 0,0	;SIZE OF TURTLE SCREEN IN Y
TRRIGH:	.WORD 0,0	;TURTLE VALUE OF RIGHT BORDER
TRLEFT:	.WORD 0,0	;TURTLE VALUE OF LEFT BORDER
TRTOP:	.WORD 0,0	;TURTLE VALUE OF BOTTOM BORDER
TRBOT:	.WORD 0,0	;TURTLE VALUE OF BOTTOM BORDER
TRSCLX:	.WORD 0,0	;X TURTLE SCALE FACTOR
TRSCLY:	.WORD 0,0	;Y TURTLE SCALE FACTOR


;Definitions of registers relevant to color stuff.

DISOFF == 164100 - DISAD 	;Offset of display addresses.

COLORD == 164102 - DISOFF	;Color data
VIDSW == 164104 - DISOFF	;Video switch
COLORA == 164106 - DISOFF	;Color address

CLRRED  ==  300			;IOR these with color map address into COLORA to set 
CLRGREEN  ==  500		;red, green, blue intensities. 
CLRBLUE  ==  600	

TVINCR == 164140 - DISOFF	;The increment register for the TV's
TVINC == 77			;The mask for the increment
TVRSET == 100000		;The reset bit
TVCLRW == 400			;The color write bit
TVOFLO == 1000			;Mask to handle overflow in increment register

TVSEL == 164142 - DISOFF	;The console select register
TVRCNS == 77			;The console number mask
TVRWMD == 300			;The regular write mode mask
TVNSH == 0			;No shift write mode
TVIOR == 100			;The inclusive or mode
TVXOR == 200			;The XOR mode
TVSET == 300			;The set mode [word moved directly to destination]
TVDCNS == TVRCNS * 400		;The disk console number (same, but in top byte)
TVDWMD == TVRWMD * 400		;The disk write mode mask

TVRADR == 164144 - DISOFF	;The regular address register

TVWDCN == 164146 - DISOFF	;The word count for the block write
TVWDCM == 777			;Mask for word count
TVDADR == 164150 - DISOFF	;The disk transfer address register

TVSHR == 164152 - DISOFF	;The shift register
TVSHCN == 17			;The shift count
TVMAP == 17400			;The start of the 16k page (in 4k blocks)
TVAMAP == 20000			;The activate tvmap bit

TVMSK == 164154 - DISOFF	;The mask register

TVDWIN == 164156 - DISOFF	;The window for disk transfers

TVRWIN == 164160 - DISOFF	;The window for regular transfers

TVCNSO == 164162 - DISOFF	;The console register for the memory
TVCLR == 160000			;The color number


;Magic constants

VSWMC1 == 30_10 + 0 	;Video switch magic constant 1
VSWMC2 == 31_10 + 1	;Video switch magic constant 2
VSWMC3 == 32_10 + 2 	;Video switch magic constant 3
VSWMC4 == 33_10 + 3	;Video switch magic constant 4
CRMC1 == 1_15		;Console register magic constant 1
CRMC2 == 2_15		;Console register magic constant 2
CRMC3 == 3_15		;Console register magic constant 3
CRMC4 == 4_15		;Console register magic constant 4
ROTMC == 35400		;Rotate register magic constant
WORLIN == 36.		;Number of 16 bit words on a TV line [576 bits]
BYTLIN == 72.		;Number of 8 bit bytes on a TV line.
TVXSMN == 20.		;TV X size minimum [args to TVSIZE].
TVXSMX == 570.		;TV X size maximum.
TVYSMN == 20.		;TV Y size minimum.
TVYSMX == 415.		;TV Y size maximum.
PIXMAX == 4.		;Maximum number of bits per pixel.
PALMAX == 1_PIXMAX	;Maximum palette size.


;End of color TV register definitions.


;Variables for color TVs.

PENNUM: 0.		;Pen number in palette [:PENNUMBER in Lisp]
ERANUM: PALMAX-1	;Index of eraser in palette [:ERASERNUMBER]
NCBITS:	PIXMAX		;Number of bits per point in color.
PALSIZ: PALMAX		;Size of the palette.
NCSIGB:	1_<PIXMAX-1>	;High order color bit, used by RTVPN. 

DSCAP:	.BLKW PIXMAX	;Table of capabilities to screen buffers.
DSNUM:	.BLKW PIXMAX	;Table of buffer numbers associated with buffers in DSCAP.

;The Palette is a set of locations holding atomic symbols of colors.
;This must be marked by the garbage collector.
;The palette is initially filled with NIL [list type code, zero pointer].

PALETTE: 
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
	LIST
PALEND:

;For debugging purposes a set of locations which can be used
;to look at the corresponding TV registers, since you can't look
;at them directly as DDT will show you the registers for its process,
;not Logo's.

FAKCLD:	0			;Fake COLORD
FAKCLA:	0			;Fake COLORA
FAKINC:	0			;Fake TVINCR
FAKSEL:	0			;Fake TVSEL
FAKADR:	0			;Fake TVRADR
FAKWDC:	0			;Fake TVWDCN
FAKSHR:	0			;Fake TVSHR
FAKMSK:	0			;Fake TVMSK
FAKWIN:	0			;Fake TVRWIN
FAKCNS:	0			;Fake TCNSO


;TEMPORARY LOCATION USED BY FACSAV
FACTMP:	.WORD 0,0
.ENDC
.IFNZ TS
DC TTYHGH,66	;NUMBER OF TTYS
TTYCPS:	;CAPS OF THE TTYS, 0 IF NOT OPEN
	.BLKB TTYHGH
.EVEN
.IFF
.IF G LSTTY-1
DC TTYHGH,LSTTY
TTYCPS:	.BLKB TTYHGH
.EVEN
.ENDC
.ENDC

	.=.+40	;FOR THE BREAK PROCESS
BRKPDL::
	.=.+20	;FOR RESTARTING
RSTPDL::
;RESTART PDL MUST BE BEFORE REGULAR PDL
.IFNZ DSK
	.=.+PPDLL+PDSLOP
	IIP=.
.=.+4
DC SSWPAD,IIS-PDSWOP
	.=.+SPDLL+PDSLOP
	IIS=.
.=.+4
DC PSWPAD,IIP-PDSWOP
.ENDC
POPLM:	IIP-<PDSLOP/3>
SPOPLM:	IIS-<PDSLOP/3>
DC HCC,67.	;HASH CODE CONSTANT - A PRIME
UHCT:	.=UHCT+<2*HCC>
	-1

DC NNODES,4096.
DC GCBTL, NNODES/8./2.*2.	;GARBAGE COLLECT BIT TABLE LENGTH

.IF Z LSI
GCBITT:	.BLKB GCBTL
.ENDC
DC INLEN,100.		;NUMBER OF TOKENS PERMITTED IN THE INPUT STREAM
CURPNT:	CURLIN		;FAKE BINDING NODE FOR THE CURRENT LINE
CURLIN:	.BLKW INLEN+3+<HEADER/2>	;LENGTH + LINE NUMBER, GENERATION NUMBER, AND ONE FOR SAFETY + HEADER FOR FAKE PROCEDURE
PBASE:	0		;POINTER TO THE BINDING NODE FOR THE PROCEDURE
			;BEING TEXTIFIED OR PRINTED OUT

RAN:	0	;IF NON-ZERO, THIS LOGO HAS BEEN STARTED BEFORE
MAINPR:	0	;CAP TO MAIN PROCESS, FOR BREAK
DEBSW:	1-<LSI!UNIX>	;DEBUG SWITCH, NON-ZERO IF BEING DEBUGGED
NOADDR:	1	;ZERO MEANS PRINT ADDRESS OF ERRORS
ASIZE:	0	;SIZE OF ARRAY SPACE (SHOULD BE ZERO)

.IF Z LSI
GCBITS:	GCBITT
.IFF
LSDBAD:	0		;LSI DISK BUFFER ADDRESS
GCBITA:	0		;EITHER REAL ADDRESS OR PAGE ADDRESS
GCBITS:	0		;ADDRESS OF GC BIT TABLE
RERTXT:	0		;REAL ADDRESS OF ERROR TEXT
.IF NZ LSMAP
HGHPAG:	0		;HIGHEST EXISTING PAGE
LOWPAG:	0		;LOWEST USED PAGE
.ENDC
.ENDC
	.IFNZ NDISP
;DISPLAY SYSTEM VARIABLES
DC DPDLL,60	;LENGTH OF EACH DISPLAY PDL (IN BYTES)
DC TLEN,20	;LENGTH OF EACH TURTLE LIST (IN BYTES)
DC TLIST,DISAD
DC DLIST,TLIST+TLEN
	.ENDC
TUT:	0	;TURTLE TOP.  POINTS TO TOP OF TURTLE DISPLAY LIST
SNPTEM:	0	;USED BY GARBAGE COLLECTOR


	DC CONSO,20
	DC PLOTT,40
	DC PMBOX,100
	DC INITF,1000	;MUSIC BOX INITIALIZED
	DC TURT,200
	DC TBMASK,177417
	dc tabdev,173774

TEM0:	0
TEM1:	0
ANSWER:	.WORD	0,0	;USED BY DOUBLE PRECISION ROUTINES
SHFCNT:	0		;USED BY DOUBLE PRECISION ROUTINES
EXCH1:	0

INITED:	0	;IF NON-ZERO INIT CODE HAS BEEN RUN
ZERO:	0
AFREE:	0	;POINTER TO ARAY SPACE FREE LIST
AROVER:	0	;BOW-WOW
ASPACE:	0	;AMOUNT OF ARAY SPACE STILL FREE
.IFNZ LSI!NOISPACE
MEMTOP:	160000	;FIRST NON-EX LOCATION
RMEMT:	0	;REAL TOP FOR CHAINING
NODTOP:		;IN LSI STORAGE ALLOC, TOP OF NODESP IS BOTTOM OF ARSPACE
ARYAD:	NODESP+2000
ARTOP:	NODESP+2000
.ENDC
.IF NZ SITS
ARTOP:	ARYAD
HALLIM:	10000	;NEVER ALLOW TOTAL IMPURE SPACE TO BE ABOVE THIS
HALLLM:	10000+1+LSUPBL	;HALLLM-HALLIM IS THE AMMOUNT OF SPACE ALLREADY ALLOCATED
.ENDC
;KEEP THE NEXT 3 IN ORDER!!!!
ARRHPG:	ARYPG-1	;HIGHEST PAGE GOBBLED SO FAR
ARRHPL:	7		;LENGTH OF HIGHEST PAGE
ARRHP:	ARYHPG	;HIGEST PAGE TO EVER GOBBLE

.IIF NZ SITS,	NODTOP:	NODESP+2000
;KEEP NEXT 3 IN ORDER!!!
NODEHP:	NODPG	;HIGEST NODE PAGE SO FAR
	0	;LENGTH THEREOF
	NODPG+1	;HIGHEST PAGE TO GRAB
DC SYSHTL,16.		;IF YOU CHANGE THIS YOU ALSO HAVE TO CHANGE THE MASKS IN THE CODE
;END OF VARIABLES
.IIF GT .-PURAD,.ERROR OOOOPS! TOO MUCH IMPURE STUFF
DC LSUPBL,./2000
.IIF NZ SITS,.=PURAD
