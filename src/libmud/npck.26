
<BLOCK <ROOT>>

\ \ F

PACKAGE 

RPACKAGE 

ENTRY 

RENTRY

EXTERNAL 

USE

USE-TOTAL 

USE-DATFILE

DROP 

NULL-OBLIST

ENDPACKAGE 

FILSTR

FILPRS

L-SEARCH-PATH

L-SECOND-NAMES

L-LOAD

L-LOADER 

L-DOITEM 

L-LIBRARY-NAME 

L-DATFILE-NAME

L-DATUM 

USE-DATUM 

L-NO-FILES

L-NO-MAGIC 

L-ALWAYS-INQUIRE 

L-USE-DATFILE

L-MUST-DATFILE

L-HANDLER 

L-UNUSE 

USE-DEFER 

L-GASSIGNED? 

L-NO-DEFER 

L-NOISY 

L-TRANSLATIONS

TRANSLATE

UNTRANSLATE

TRANSLATIONS

IN-COLLECTION

<MOBLIST PACKAGE 29>

<MOBLIST PKG!-PACKAGE 17>

"Set up entries in LIB that we use.  This eliminates the necessity
of previous obscene hacks, and may even make it possible to glue this
crock."
<BLOCK (<MOBLIST LIB!-PACKAGE 17>
	<ROOT>)>
ENTRY-FIND
PACKAGE-FIND
DEFER-FIND
DEFINF
DEF-RP? DEF-PNM DEF-FNM DEF-EL DEF-REL DEF-CRDATE DEF-ACCPTR DEF-ENTLEN
CRDATE
<ENDBLOCK>

<SETG OBLIST (<GET INITIAL OBLIST> <ROOT>)>

<BLOCK (<MOBLIST IPKG!-PKG!-PACKAGE 23>
	<GET PKG!-PACKAGE OBLIST>
	<ROOT>
	<GET LIB!-PACKAGE OBLIST>)>

<PARSE "SEARCH!-PKG!-PACKAGE">	; "Used by L package"

<SETG PKG!-PACKAGE .OBLIST>

<SETG PKG-OB <GET PACKAGE OBLIST>>

<SETG COL-OB <MOBLIST RPACKAGE 7>>

<SETG L-SEARCH-PATH
      <COND (<G? ,MUDDLE 100>
	     '("LIBMUD" [] "PS:<MDLLIB>LIBMUD" ["PS" "MDLLIB"]))
	    ('("LIBMUD" [] "LIBMUD;LIBMUD" ["DSK" "MBPROG"]
	       ["DSK" "MPROG" ">"]))>>

<SETG L-SECOND-NAMES
      <COND (<G? ,MUDDLE 100>
	     '["FBIN" "GBIN" "NBIN" "MUD"])
	    ('["FBIN" "GBIN" "NBIN" ">"])>>
<GDECL (L-SECOND-NAMES) VECTOR
       (L-SEARCH-PATH) <LIST [REST <OR STRING VECTOR>]>
       (MUDDLE) FIX>

<SETG L-LIBRARY-NAME "NLIB">

<SETG L-DATFILE-NAME "DAT">

<SETG L-NO-FILES <>>

<SETG L-NOISY T>

<OR <GASSIGNED? L-TRANSLATIONS> <SETG L-TRANSLATIONS ()>>

<FLOAD "LIBMUD;PCKSBR NBIN">

<DEFINE FILSTR ("TUPLE" T "AUX" (CHN <CHANNEL "READ" !.T>))
  #DECL ((VALUE) STRING (T) <TUPLE [REST STRING]> (CHN) CHANNEL)
  <COND (<G? ,MUDDLE 100>
	 <STRING <9 .CHN> ":<" <10 .CHN> !\> <7 .CHN> !\. <8 .CHN>>)
	(<STRING <9 .CHN> !\: <10 .CHN> !\; <7 .CHN> !\  <8 .CHN>>)>>

<DEFINE FILPRS (FIL "AUX" (CHN <CHANNEL "READ" .FIL>))
  #DECL ((VALUE) <LIST [REST STRING]> (FIL) STRING (CHN) CHANNEL)
  (<7 .CHN> <8 .CHN> <9 .CHN> <10 .CHN>)>

<DEFINE FIND/LOAD FL (STR
		   "OPTIONAL" (L ,L-SEARCH-PATH) (DATFILE? <>)
		   "AUX" CHN CH (TMP <>) (OUTCHAN ,OUTCHAN) (NO-LOAD <>)
		   (OBL .OBLIST) (TSTR "") (DATLEN <>) (TL <>))
	#DECL ((STR) STRING (L) <OR LIST STRING> (OUTCHAN) <SPECIAL CHANNEL>
	       (TSTR) <OR STRING FALSE> (CH) <CHANNEL FIX> (DATFILE?) <OR ATOM FALSE>
	       (DATLEN) <OR FALSE FIX> (TL) <OR FALSE LIST> (NO-LOAD) <SPECIAL ANY>)
	<SET TSTR <TRANSLATE? .STR>>
	<COND (<AND .TSTR <SET TMP <LOOKUP .TSTR ,PKG-OB>> <GASSIGNED? .TMP>
		    <OR .DATFILE? <NOT <GET <SET TL ,.TMP> NOT-LOADED>>>>
	       .TMP)
	      (T
	       <COND (<TYPE? .L STRING>
		      <SET CHN <OPEN "READ" .L>>)
		     (<SET CHN <SEARCH .STR .L .DATFILE?>>)>
	       <COND (<NOT .CHN> <RETURN .CHN .FL>)>
	       <COND (<AND .DATFILE?
			   <NOT <TYPE? .CHN CHANNEL>>>
		      <SET CHN <LOAD-DATFILE .CHN>>)>
	       <COND (.CHN
		      <SET CH .CHN>
		      <COND (,L-NOISY
			     <PRINC "/">
			     <PRINC .STR>
			     <COND (<N==? .STR .TSTR>
				    <PRINC !\=>
				    <COND (<NOT .TSTR>
					   <PRINC "<>">)
					  (<PRINC .TSTR>)>)>
			     <PRINC !\ >)>
		      <COND (.TL <PUTPROP .TL NOT-LOADED>)>)>
	       <UNWIND
		<PROG ((PKO ,PKG-OB) (LOADER <AND <GASSIGNED? L-LOADER>
						  ,L-LOADER>))
		  <COND (<NOT .CHN>)
			(<AND .LOADER <APPLICABLE? .LOADER>>
			 <APPLY .LOADER .CH>)
			(<LOAD .CH>)>
		  <COND (.TSTR
			 <OR <LOOKUP .TSTR .PKO>
			     <PROG ()
				   <SET TMP <INSERT .STR .PKO>>
				   <SETG .TMP .OBL>
				   .TMP>>)
			(T)>>
		<PROG (PCK)
		  #DECL ((PCK) <OR ATOM FALSE>)
		  <COND (<NOT <0? <1 .CH>>> <CLOSE .CH>)>
		  <COND (<AND <SET PCK <GET .OBL IN-COLLECTION>>
			      <OR <AND <NOT .TSTR> <==? .PCK T>>
				  <=? .TSTR <SPNAME .PCK>>>>
			 <PUTPROP .OBL IN-COLLECTION>
			 <ENDBLOCK>)>>>)>>

<DEFINE LOAD-DATFILE L-D (DAT "AUX" DCR OBJ (DEFINF <1 .DAT>) TCH NM2 DATLEN)
  #DECL ((DAT) <VECTOR DEFINF STRING> (DEFINF) DEFINF (TCH) <OR CHANNEL FALSE>
	 (NM2) <SPECIAL STRING> (DATLEN DCR) FIX)
  <COND (<SET TCH <OPEN "READ" <DEF-FNM .DEFINF>>>
	 <COND (<OR <==? <SET DCR <DEF-CRDATE .DEFINF>> -1>
		    <N==? .DCR <CRDATE .TCH>>>
		<COND (<AND <N==? .DCR -1>
			    <GASSIGNED? L-ALWAYS-DATFILE>
			    ,L-ALWAYS-DATFILE>
		       <ERROR CANT-USE-DATFILE-ENTRY
			      <DEF-PNM .DEFINF>
			      FIND/LOAD>)>
		<RETURN .TCH .L-D>)>
	 <CLOSE .TCH>
	 <SET NM2 ,L-DATFILE-NAME>
	 <COND (<SET TCH <OPEN "READ" <2 .DAT>>>
		<ACCESS .TCH <DEF-ACCPTR .DEFINF>>
		<SET DATLEN <CHTYPE <GETBITS <DEF-ENTLEN .DEFINF> <BITS 18 0>> FIX>>
		<REPEAT ((NO-LOAD T))
		  #DECL ((NO-LOAD) <SPECIAL ANY>)
		  <EVAL <READ .TCH>>
		  <COND (<0? <SET DATLEN <- .DATLEN 1>>>
			 <CLOSE .TCH>
			 <RETURN>)>>
		<SET OBJ [<DEF-PNM .DEFINF> <DEF-FNM .DEFINF>]>
		<COND (<DEF-RP? .DEFINF>
		       <ASSOC-HACK .OBJ <DEF-EL .DEFINF>>)
		      (<PUT <GET <LOOKUP <DEF-PNM .DEFINF> ,PKG-OB> OBLIST>
			    USE-DEFER .OBJ>)>
		<ASSOC-HACK .OBJ <DEF-REL .DEFINF>>
		<>)
	       (T
		<COND (,L-ALWAYS-DATFILE
		       <ERROR DATFILE-MISSING .TCH FIND/LOAD>)>
		<OPEN "READ" <DEF-FNM .DEFINF>>)>)
	(<ERROR CANT-FIND-PACKAGE <DEF-PNM .DEFINF> .TCH LOAD-DATFILE>)>>

<DEFINE ASSOC-HACK (OBJ EL "AUX" ATM)
  #DECL ((EL) <LIST [REST STRING]>)
  <MAPF <>
    <FUNCTION (X)
       <SET ATM <LOOKUP .X <ROOT>>>
       <PUT .ATM USE-DEFER .OBJ>>
    .EL>>

<DEFINE SEARCH (IND L "OPTIONAL" (DATFILE? <>))
  #DECL ((L) <LIST [REST <OR STRING VECTOR>]> (DATFILE?) <OR ATOM FALSE>)
  <REPEAT SEARCH (STR CH SPEC DIR DEV (L-NO-FILES ,L-NO-FILES) PCK-IN)
    #DECL ((CH) <OR CHANNEL FALSE> (SPEC) <OR STRING VECTOR>
	   (SEARCH) ACTIVATION (STR) <OR STRING FALSE> (PCK-IN) <OR VECTOR FALSE>)
    <COND (<EMPTY? .L> <RETURN <>>)>
    <COND (<TYPE? <SET SPEC <1 .L>> STRING>
	   <COND (.DATFILE?
		  <COND (<SET PCK-IN <DEFER-FIND .IND .SPEC T>>
			 <RETURN [.PCK-IN .SPEC]>)>)
		 (T
		  <COND (<SET STR <AND <GASSIGNED? PACKAGE-FIND>
				       ; "Don't run it if it's not around"
				       <PACKAGE-FIND .IND .SPEC>>>
			 <RETURN <OPEN "READ" .STR>>)>)>)
	  (<NOT .L-NO-FILES>
	   <COND (<OR <EMPTY? .SPEC>
		      <NOT <1 .SPEC>>>
		  <SET DIR <SNAME>>
		  <SET DEV "DSK">)
		 (<==? <LENGTH .SPEC> 1>
		  <SET DIR <1 .SPEC>>
		  <SET DEV "DSK">)
		 (<SET DIR <2 .SPEC>>
		  <SET DEV <1 .SPEC>>)>
	   <COND (<L=? <LENGTH .SPEC> 2>
		  <SET SPEC ,L-SECOND-NAMES>)
		 (<SET SPEC <REST .SPEC 2>>)>
	   <MAPF <>
	     <FUNCTION (X) #DECL ((X) STRING)
	       <COND (<SET CH <OPEN "READ" .IND .X .DEV .DIR>>
		      <RETURN .CH .SEARCH>)>>
	     .SPEC>)>
    <SET L <REST .L>>>>

<DEFINE PACKAGE (NAME
		 "OPTIONAL" (INAME .NAME) (SIZE 19) (ISIZE 23)
		 "AUX" TNAME ATM IATM OBL IOBL TMP (OBLIS .OBLIST))
	#DECL ((NAME INAME) STRING (SIZE ISIZE) FIX (ATM IATM VALUE) ATOM
	       (OBL IOBL) OBLIST (TNAME) <OR FALSE STRING> (TMP) LIST
	       (OBLIS) LIST)
	<SET TNAME <TRANSLATE? .NAME>>
	<COND (.TNAME
	       <COND (<==? .INAME .NAME> <SET INAME <STRING !\I .TNAME>>)>
	       <SET ATM
		    <OR <LOOKUP .TNAME ,PKG-OB> <INSERT .TNAME ,PKG-OB>>>
	       <SET OBL <MOBLIST .ATM .SIZE>>
	       <SET IATM <OR <LOOKUP .INAME .OBL> <INSERT .INAME .OBL>>>
	       <SET IOBL <MOBLIST .IATM .ISIZE>>
	       <BLOCK <SETG .ATM <SET TMP (.IOBL .OBL <ROOT>)>>>
	       <COND (<AND <ASSIGNED? NO-LOAD> .NO-LOAD>
		      <PUT .TMP NOT-LOADED T>)>)
	      (<BLOCK <SET TMP (<1 .OBLIS> !.OBLIS)>>
	       <SET ATM T>)>
	<COND (.TNAME <PUTPROP .ATM IOBLIST .IATM>)>
	<PUTPROP .TMP IN-COLLECTION .ATM>
	.ATM>

<DEFINE RPACKAGE (NAME
		  "OPTIONAL" (INAME .NAME) (ISIZE 23)
		  "AUX" ATM IATM IOBL TNAME TMP)
	#DECL ((NAME INAME) STRING (ISIZE) FIX (ATM IATM VALUE) ATOM
	       (IOBL) OBLIST (TNAME) <OR FALSE STRING>)
	<SET TNAME <TRANSLATE? .NAME>>
	<COND (.TNAME
	       <COND (<N==? .NAME .INAME> <SET INAME  <STRING !\I .NAME>>)>
	       <SET ATM
		    <OR <LOOKUP .TNAME ,PKG-OB> <INSERT .TNAME ,PKG-OB>>>
	       <SET IATM
		    <OR <LOOKUP .INAME ,COL-OB> <INSERT .INAME ,COL-OB>>>
	       <SET IOBL <MOBLIST .IATM .ISIZE>>
	       <BLOCK <SETG .ATM <SET TMP (.IOBL <ROOT>)>>>
	       <COND (<AND <ASSIGNED? NO-LOAD> .NO-LOAD>
		      <PUT .TMP NOT-LOADED T>)>
	       <PUT .ATM IOBLIST .IATM>)
	      (<BLOCK <SET TMP (<1 .OBLIST> <ROOT>)>>
	       <SET ATM T>)>
	<PUT .TMP IN-COLLECTION .ATM>
	.ATM>

<DEFINE RENTRY ("TUPLE" NAMES)
  #DECL ((NAMES) <TUPLE [REST ATOM]>)
  <DO-ENTRY .NAMES <ROOT>>>

<DEFINE ENTRY ("TUPLE" NAMES)
  #DECL ((NAMES) <TUPLE [REST ATOM]>)
  <DO-ENTRY .NAMES <2 .OBLIST>>>

<DEFINE DO-ENTRY (NAMES OBL "AUX" (OBLIS .OBLIST) (NAME T))
	#DECL ((VALUE NAME) ATOM (NAMES) <TUPLE [REST ATOM]> (OBL) OBLIST
	       (OBLIS) LIST)
  <PUTPROP .OBL USE-DEFER>
  <COND (<NOT <GET .OBLIS IN-COLLECTION>>
	 <ERROR ENTRY NOT-IN-PACKAGE-OR-COLLECTION!-ERRORS>)>
  <REPEAT ()
	  <COND (<EMPTY? .NAMES> <RETURN .NAME>)>
	  <SET NAME <1 .NAMES>>
	  <SET NAMES <REST .NAMES>>
	  <COND (<==? .OBL <ROOT>> <PUTPROP .NAME USE-DEFER>)>
	  <COND (<==? <OBLIST? .NAME> <1 .OBLIS>>
		 <INSERT <REMOVE .NAME> .OBL>)
		(<NOT <==? <OBLIST? .NAME> .OBL>>
		 <ERROR ENTRY .NAME ALREADY-USED-ELSEWHERE!-ERRORS>)>>>

<DEFINE USE-DATFILE ("TUPLE" NAMES "AUX" (SV1 <AND <GASSIGNED? L-USE-DATFILE>
						   ,L-USE-DATFILE>)
		     (SV2 <AND <GASSIGNED? L-ALWAYS-DATFILE> ,L-ALWAYS-DATFILE>))
  <UNWIND
   <PROG (VAL)
     <SETG L-USE-DATFILE T>
     <SETG L-ALWAYS-DATFILE T>
     <SET VAL <USE !.NAMES>>
     <SETG L-USE-DATFILE .SV1>
     <SETG L-ALWAYS-DATFILE .SV2>
     .VAL>
   <PROG ()
     <SETG L-USE-DATFILE .SV1>
     <SETG L-ALWAYS-DATFILE .SV2>>>>

<DEFINE USE ("TUPLE" NAMES "AUX" (OBLIS .OBLIST) NAME PK OBL N M)
   #DECL ((VALUE) ATOM (NAMES) <TUPLE [REST STRING]> (PK) <OR ATOM FALSE>
	  (NAME) STRING (OBL) <OR FALSE OBLIST> (N M) FIX
	  (OBLIS) <LIST [REST OBLIST]>)
   <REPEAT ((L-UD <AND <GASSIGNED? L-USE-DATFILE> ,L-USE-DATFILE>)
	    (L-SP ,L-SEARCH-PATH))
	   <COND (<EMPTY? .NAMES> <RETURN USE>)>
	   <SET NAME <1 .NAMES>>
	   <SET NAMES <REST .NAMES>>
	   <SET PK <FIND/LOAD .NAME .L-SP .L-UD>>
	   <COND
	    (<NOT .PK> <ERROR PACKAGE .NAME NOT-FOUND!-ERRORS>)
	    (<==? .PK T>)
	    (<AND <SET OBL <GET .PK OBLIST>> <NOT <MEMQ .OBL .OBLIS>>>
	     <COND (<NOT <0? <SET N <LENGTH <MEMQ ,PKG-OB .OBLIS>>>>>
		    <PUTREST <REST .OBLIS <- <SET M <LENGTH .OBLIS>> .N 1>>
			     (.OBL !<REST .OBLIS <- .M .N>!>)>)
		   (T
		    <PUTREST <REST .OBLIS <- <LENGTH .OBLIS> 1>> (.OBL)>)>)>>>

<DEFINE USE-TOTAL ("TUPLE" NAMES "AUX" (OBLIS .OBLIST) NAME PK OBL N M)
   #DECL ((VALUE) ATOM (NAMES) <TUPLE [REST STRING]> (PK) <OR ATOM FALSE>
	  (NAME) STRING (OBL) <OR FALSE OBLIST> (N M) FIX
	  (OBLIS) <LIST [REST OBLIST]>)
   <REPEAT ()
	   <COND (<EMPTY? .NAMES> <RETURN USE>)>
	   <SET NAME <1 .NAMES>>
	   <SET NAMES <REST .NAMES>>
	   <SET PK <FIND/LOAD .NAME>>
	   <COND
	    (<NOT .PK> <ERROR PACKAGE .NAME NOT-FOUND!-ERRORS>)
	    (<==? .PK T>)
	    (<AND <SET OBL <GET .PK OBLIST>> <NOT <MEMQ .OBL .OBLIS>>>
	     <COND (<NOT <0? <SET N <LENGTH <MEMQ ,PKG-OB .OBLIS>>>>>
		    <PUTREST <REST .OBLIS <- <SET M <LENGTH .OBLIS>> .N 1>>
			     (.OBL !<REST .OBLIS <- .M .N>!>)>)
		   (T
		    <PUTREST <REST .OBLIS <- <LENGTH .OBLIS> 1>> (.OBL)>)>)>
	<COND
	    (<AND <SET PK <OR	<GET .PK IOBLIST>
				<LOOKUP <STRING !\I <SPNAME .PK>> <GET .PK OBLIST>>>>
			<SET OBL <GET .PK OBLIST>>
			<NOT <MEMQ .OBL .OBLIS>>>
	     <COND (<NOT <0? <SET N <LENGTH <MEMQ ,PKG-OB .OBLIS>>>>>
		    <PUTREST <REST .OBLIS <- <SET M <LENGTH .OBLIS>> .N 1>>
			     (.OBL !<REST .OBLIS <- .M .N>!>)>)
		   (T
		    <PUTREST <REST .OBLIS <- <LENGTH .OBLIS> 1>> (.OBL)>)>)>>>
<SETG L-NO-DEFER <>>

<DEFINE L-GASSIGNED? (ATM "AUX" O TMP)
	#DECL ((O) <OR OBLIST FALSE> (TMP) <OR FALSE <VECTOR [2 STRING]>>)
	<COND (<GASSIGNED? .ATM>)
	      (<COND (<==? <SET O <OBLIST? .ATM>> <ROOT>>
		      <SET TMP <GET .ATM USE-DEFER>>)
		     (.O <SET TMP <GET .O USE-DEFER>>)>
	       <FIND/LOAD <1 .TMP> <2 .TMP>>
	       <USE <1 .TMP>>
	       <COND (<NOT <GASSIGNED? .ATM>>
		      <ERROR PACKAGE "PACKAGE DID NOT DEFINE FUNCTION">)>
	       T)>>

<SETG EXTERNAL ,USE>

<DEFINE DROP ("TUPLE" NAMES "AUX" NAME PK OBL N)
	#DECL ((VALUE) ATOM (NAMES) <TUPLE [REST STRING]> (PK) <OR ATOM FALSE>
	       (N) FIX (NAME) <OR STRING FALSE> (OBL) <OR FALSE OBLIST>
	       (OBLIST) <LIST [REST OBLIST]>)
	<REPEAT ((OBLIS .OBLIST) TMP)
		#DECL ((OBLIS) LIST (TMP) <OR <LIST <OR STRING FALSE>> FALSE>)
		<COND (<EMPTY? .NAMES> <RETURN DROP>)>
		<SET NAME <TRANSLATE? <1 .NAMES>>>
		<SET NAMES <REST .NAMES>>
		<COND (<NOT .NAME> <AGAIN>)>
		<COND (<NOT <SET PK <LOOKUP .NAME ,PKG-OB>>>
		       <ERROR PACKAGE .NAME NOT-PACKAGE-OR-COLLECTION!-ERRORS>)>
		<SET OBL <GET .PK OBLIST>>
		<COND (<NOT <0? <SET N <LENGTH <MEMQ .OBL .OBLIS>>>>>
		       <PUTREST <REST .OBLIS <SET N <- <LENGTH .OBLIS> .N 1>>>
				<REST .OBLIS <+ .N 2>>>)>
		<COND (<AND <SET PK <OR <GET .PK IOBLIST>
					<LOOKUP <STRING !\I <SPNAME .PK>>
						.OBL>>>
			    <SET OBL <GET .PK OBLIST>>>
		       <COND (<NOT <0? <SET N <LENGTH <MEMQ .OBL .OBLIS>>>>>
			      <PUTREST <REST .OBLIS <SET N <- <LENGTH .OBLIS> .N 1>>>
				       <REST .OBLIS <+ .N 2>>>)>)>>>

<SETG NULL-OBLIST <MOBLIST NULL 1>>

<DEFINE ENDPACKAGE ("OPTIONAL" (PKNM <>) "AUX" (OBLIS .OBLIST)
		    PK IATM OBL VAL)
	#DECL ((PK) <OR ATOM FALSE> (VALUE) ATOM (PKNM) <OR FALSE ATOM STRING>
		(IATM) <OR ATOM FALSE> (OBL) <OR OBLIST FALSE>
		(VAL) <OR FALSE LIST> (OBLIS) <OR OBLIST LIST>)
      <REPEAT ()
	<SET PK <GET .OBLIS IN-COLLECTION>>
	<COND (.PK
	       <PUTPROP .OBLIS IN-COLLECTION>
	       <ENDBLOCK>
	       <SET OBLIS .OBLIST>
	       <COND (<AND <N==? .PK T>
			   <SET IATM <OR <GET .PK IOBLIST>
					 <LOOKUP <STRING !\I <SPNAME .PK>>
						 <GET .PK OBLIST>>>>
			   <SET OBL <GET .IATM OBLIST>>
			   <MAPF <>
				 <FUNCTION (L)
					   #DECL ((L) LIST)
					   <COND (<EMPTY? .L>)
						 (ELSE <MAPLEAVE <>>)>>
				 .OBL>>
		      <PUTPROP <PUTPROP .IATM OBLIST> OBLIST>
		      <PUTPROP .PK IOBLIST>
		      <COND (<AND <GASSIGNED? .PK>
				  <TYPE? ,.PK LIST>
				  <SET VAL <MEMQ .OBL ,.PK>>>
			     <PUT .VAL 1 ,NULL-OBLIST>)>)>
	       .PK)
	      (<TYPE? .PKNM ATOM>
	       <RETURN>)
	      (ELSE
	       <ERROR UNMATCHED-ENDPACKAGE-OR-ENDCOLLECTION!-ERRORS>
	       <RETURN>)>
	<COND (<OR <NOT .PKNM>
		   <=? <SPNAME .PK> .PKNM>>
	       <RETURN>)>>>

<DEFINE L-UNUSE (STR "AUX" TMP IATM)
  #DECL ((STR) <OR STRING FALSE> (TMP) ANY (IATM) <OR ATOM FALSE>)
  <SET STR <TRANSLATE? .STR>>
  <COND (<NOT .STR>)
	(<AND <SET TMP <LOOKUP .STR ,PKG-OB>> <GASSIGNED? .TMP>>
	 <DROP .STR>
	 <COND (<SET IATM <OR <PUTPROP .TMP IOBLIST>
			      <LOOKUP <STRING !\I <SPNAME .TMP>> <GET .TMP OBLIST>>>>
		L<PUTPROP <PUTPROP .IATM OBLIST> OBLIST>)>
	 <GUNASSIGN .TMP>
	 <PUTPROP <PUTPROP .TMP OBLIST> OBLIST>
	 <REMOVE .TMP ,PKG-OB>
	 "PACKAGE REMOVED")
	(<SET TMP <LOOKUP .STR ,UDOB>>
	 <REMOVE .TMP ,UDOB>
	 "DATUM REMOVED")
	(T #FALSE ("NOT PACKAGE OR DATUM"))>>

<DEFINE TRANSLATE? (NAME "AUX" (L ,L-TRANSLATIONS))
  #DECL ((NAME) STRING (L) <LIST [REST STRING <OR STRING FALSE>]>)
  <REPEAT ()
    <COND (<EMPTY? .L>
	   <RETURN .NAME>)
	  (<=? <1 .L> .NAME>
	   <RETURN <2 .L>>)>
    <SET L <REST .L 2>>>>

<DEFINE USE-DEFER ("TUPLE" NAMES "AUX" (OBLIS .OBLIST) NAME TMP T1 (POB <>) M N NMVEC
		   (PKG-OB ,PKG-OB))
   #DECL ((NAMES) <TUPLE [REST STRING]> (NAME) STRING (M N) FIX
	  (TMP) <OR FALSE
		    DEFINF>
	  (ATMLST) <LIST [REST ATOM]> (PKG-OB) OBLIST
	  (NMVEC) VECTOR (OBLIS) <LIST [REST OBLIST]>)
   <COND
    (,L-NO-DEFER <USE !.NAMES> USE-DEFER)
    (T
     <REPEAT (RFLIST FLIST TNAME)
       #DECL ((TNAME) <OR STRING FALSE>)
       <COND (<EMPTY? .NAMES> <RETURN USE-DEFER>)>
       <SET NAME <1 .NAMES>>
       <SET NAMES <REST .NAMES>>
       <SET TNAME <TRANSLATE? .NAME>>
       <COND (<NOT .TNAME>	; "Can't use-defer a null translation"
	      <USE .NAME>
	      <AGAIN>)
	     (<AND <SET T1 <LOOKUP .TNAME .PKG-OB>> <GASSIGNED? .T1>>
	      <SET POB <GET .T1 OBLIST>>)
	     (<NOT <SET TMP
			<GDCHN .NAME
			       ,L-SEARCH-PATH
			       ,DEFER-FIND>>>
	      <ERROR PACKAGE .NAME NOT-FOUND!-ERRORS>
	      <AGAIN>)
	     (<OR <NOT <EMPTY? <SET FLIST <DEF-EL .TMP>>>>
		  <NOT <EMPTY? <DEF-REL .TMP>>>>
	      <SET RFLIST <DEF-REL .TMP>>
	      ; "DEFER-FIND returns a vector:  [<OR FALSE ATOM> (T if RPACKAGE)
						STRING (package name)
						STRING (file)
						<LIST [REST STRING]> (entries)
						<LIST [REST STRING]> (rentries)]"
	      <COND (<DEF-RP? .TMP>
		     <SET POB <ROOT>>)
		    (<NOT <EMPTY? .FLIST>>
		     <SET POB <MOBLIST <PARSE .TNAME 10 .PKG-OB>>>)>
	      <MAPR <>
	        <FUNCTION (X) #DECL ((X) <LIST [REST STRING]>)
		  <PUT .X 1 <PARSE <1 .X> 10 .POB>>>
		.FLIST>			; "Make everything entries"
	      <MAPR <>
	        <FUNCTION (X) #DECL ((X) <LIST [REST STRING]>)
		  <PUT .X 1 <PARSE <1 .X> 10 <ROOT>>>>
		.RFLIST>
	      <SET NMVEC <VECTOR .NAME <DEF-FNM .TMP>>> ; "package name and file"
	      <COND (<==? .POB <ROOT>>
		     <MAPF <>
			   <FUNCTION (X) <PUTPROP .X USE-DEFER .NMVEC>>
			   .FLIST>)
		    (<PUTPROP .POB USE-DEFER .NMVEC>)>
	      <MAPF <>
		    <FUNCTION (X) <PUTPROP .X USE-DEFER .NMVEC>>
		    .RFLIST>)>
       <COND (<AND .POB
		   <NOT <==? .POB <ROOT>>>
		   <NOT <MEMQ .POB .OBLIS>>>
	      <COND (<NOT <0? <SET N <LENGTH <MEMQ .PKG-OB .OBLIS>>>>>
		     <PUTREST <REST .OBLIS <- <SET M <LENGTH .OBLIS>> .N 1>>
			      (.POB !<REST .OBLIS <- .M .N>!>)>)
		    (T
		     <PUTREST <REST .OBLIS <- <LENGTH .OBLIS> 1>>
			      (.POB)>)>)>>)>>

<DEFINE L-DATUM (IND "OPTIONAL" (L ,L-SEARCH-PATH) "AUX" CHN TMP)
	<COND (<SET CHN <SEARCH .IND .L>>
	       <SET TMP <READ .CHN '<>>>
	       <CLOSE .CHN>
	       .TMP)
	      (T #FALSE ("DATUM NOT FOUND"))>>

<SETG UDOB <MOBLIST USE-DATUM 17>>

<DEFINE USE-DATUM (IND "AUX" TMP)
	<SET IND <TRANSLATE? .IND>>
	<COND (<SET TMP <LOOKUP .IND ,UDOB>> ,.TMP)
	      (<SET TMP <L-DATUM .IND>> <SETG <INSERT .IND ,UDOB> .TMP>)
	      (T .TMP)>>

<DEFINE TRANSLATE (FROM TO "AUX" (L ,L-TRANSLATIONS))
  #DECL ((FROM) STRING (TO) <OR FALSE STRING>
	 (L) <LIST [REST STRING <OR FALSE STRING>]>)
  <REPEAT ()
     <COND (<EMPTY? .L>
	    <SETG L-TRANSLATIONS (.FROM .TO !,L-TRANSLATIONS)>
	    <RETURN>)
	   (<=? <1 .L> .FROM>
	    <PUT .L 2 .TO>
	    <RETURN>)>
     <SET L <REST .L 2>>>
   .TO>

<DEFINE UNTRANSLATE (NAME "AUX" (L ,L-TRANSLATIONS))
  #DECL ((NAME) STRING (L) <LIST [REST STRING <OR FALSE STRING>]>)
  <REPEAT ((L1 .L) L2)
    #DECL ((L1 L2) <LIST [REST <OR FALSE STRING>]>)
    <COND (<EMPTY? .L1>
	   <RETURN #FALSE ("NOT TRANSLATED")>)
	  (<=? <1 .L1> .NAME>
	   <COND (<==? .L .L1>
		  <SETG L-TRANSLATIONS <REST .L 2>>)
		 (<PUTREST <REST .L2> <REST .L1 2>>)>
	   <RETURN .NAME>)>
    <SET L2 .L1>
    <SET L1 <REST .L1 2>>>>

<DEFINE TRANSLATIONS ("AUX" (L ,L-TRANSLATIONS) (OUTCHAN .OUTCHAN))
  #DECL ((OUTCHAN) CHANNEL (L) <LIST [REST STRING <OR STRING FALSE>]>)
  <COND (<EMPTY? .L>
	 <PRINC "No translations">
	 <CRLF>)
	(<REPEAT ()
	   <PRINC <1 .L>>
	   <PRINC "-->">
	   <COND (<NOT <2 .L>>
		  <PRINC "<>">)
		 (<PRINC <2 .L>>)>
	   <CRLF>
	   <COND (<EMPTY? <SET L <REST .L 2>>>
		  <RETURN>)>>)>>

<DEFINE GDCHN (IND LST "OPTIONAL" (FNC ,PACKAGE-FIND))
	#DECL ((IND) STRING (LST) <OR LIST STRING>)
	<COND (<TYPE? .LST LIST>
	       <REPEAT ((L .LST) TMP SPEC)
		       #DECL ((L) LIST (SPEC) <OR VECTOR STRING>)
		       <COND (<EMPTY? .L> <RETURN <>>)
			     (<AND <TYPE? <SET SPEC <1 .L>> STRING>
				   <SET TMP <GDCHN .IND <1 .L> .FNC>>>
			      <RETURN .TMP>)>
		       <SET L <REST .L>>>)
	      (<APPLY .FNC .IND .LST>)>>

<DEFINE L-LOAD (STR "OPTIONAL" (L ,L-SEARCH-PATH) "AUX" ST CHN)
	<COND (<AND <SET ST <GDCHN .STR .L ,PACKAGE-FIND>>
		    <SET CHN <OPEN "READ" .ST>>> <LOAD .CHN>)
	      (T .CHN)>>

<SETG L-NO-MAGIC <>>

<SETG L-ALWAYS-INQUIRE <>>

<SETG IOB <GET <LOOKUP "INITIAL" <ROOT>> OBLIST>>

<DEFINE L-HANDLER (FRM
		   "TUPLE" JUNK
		   "AUX" ATM POSSIB PN TMP RSLT GOODS FINOB
			 (REDEFINE
			  <COND (<ASSIGNED? REDEFINE> .REDEFINE) (T <>)>)
			 PCK-NAME TPCK-NAME)
   #DECL ((FRM) FRAME (JUNK) TUPLE (ATM) ATOM
	  (POSSIB) <OR FALSE <LIST [2 STRING] <OR ATOM FALSE> <OR ATOM FALSE>
				   [REST STRING STRING
				    <OR ATOM FALSE> <OR ATOM FALSE>]>>
	  (PN) STRING (PCK-NAME) STRING
	  (TPCK-NAME) <OR STRING FALSE>
	  (GOODS) STRING (REDEFINE) <SPECIAL ANY>)
   <PROG ()
	 <COND (<OR <NOT <==? 3 <LENGTH .JUNK>>>
		    <NOT <OR <AND <==? <1 .JUNK> UNASSIGNED-VARIABLE!-ERRORS>
				  <==? <3 .JUNK> GVAL>>
			     <AND <==? <1 .JUNK> UNBOUND-VARIABLE!-ERRORS>
				  <OR <==? <3 .JUNK> VALUE>
				      <==? <3 .JUNK> CALLER>>>>>>
		<RETURN>)>
	 <COND (<L-GASSIGNED? <SET ATM <2 .JUNK>>>
		<INT-LEVEL 0>
		<APPLY ,ERRET ,.ATM .FRM>)
	       (<OR ,L-NO-MAGIC <NOT <==? <OBLIST? .ATM> ,IOB>>> <RETURN>)>
	 <SET PN <SPNAME .ATM>>
	 <COND (<NOT
		 <REPEAT ((L ,L-SEARCH-PATH) (V ()) T)
		   #DECL ((L) <LIST [REST <OR VECTOR STRING>]> (V) LIST
			  (T) <OR FALSE LIST>)
		   <COND (<EMPTY? .L>
			  <COND (<EMPTY? .V> <RETURN <>>)
				(<RETURN <SET POSSIB .V>>)>)>
		   <COND (<TYPE? <1 .L> STRING>
			  <COND (<SET T <ENTRY-FIND .PN <1 .L>>>
				 <PUTREST <REST .T <- <LENGTH .T> 1>> .V>
				 <SET V .T>)>)>
		   <SET L <REST .L>>>>
		<RETURN>)>
	 ; "We get for POSSIB a list:  [REST package-name file-name rpackage? rentry?]"
	 <INT-LEVEL 0>
	 <COND (<OR <G? <LENGTH .POSSIB> 4> ,L-ALWAYS-INQUIRE>
		<SET POSSIB <DISP-CHOICE .POSSIB .PN>>)>
	 <COND (<NOT .POSSIB> <RETURN>)>
	 <SET REDEFINE T>
	 <SET GOODS <NTH .POSSIB 2>>
	 <SET PCK-NAME <NTH .POSSIB 1>>
	 <SET TPCK-NAME <TRANSLATE? .PCK-NAME>>
	 <SET FINOB
	      <COND (<OR <3 .POSSIB> <4 .POSSIB>> <ROOT>)
		    (<NOT .TPCK-NAME> <1 .OBLIST>)
		    (<MOBLIST <PARSE .TPCK-NAME 10 ,PKG-OB> 17>)>>
	 <COND (<NOT .TPCK-NAME>
		<SET RSLT .ATM>)
	       (<SET TMP <LOOKUP .PN .FINOB>>
		<SUBSTITUTE .TMP <REMOVE .ATM>>
		<SET RSLT .TMP>)
	       (<SET RSLT <INSERT <REMOVE .ATM> .FINOB>>)>
	 <PROG ()
	       <FIND/LOAD <1 .POSSIB> <2 .POSSIB>>
	       <USE <1 .POSSIB>>>
	 <COND (<NOT <GASSIGNED? .RSLT>>
		<ERROR "PACKAGE DID NOT DEFINE FUNCTION"
		       .RSLT
		       .PCK-NAME
		       .GOODS>)
	       (T <INT-LEVEL 0> <APPLY ,ERRET ,.RSLT .FRM>)>>>

<DEFINE DISP-CHOICE (POSSIB PN "AUX" (OUTCHAN ,OUTCHAN) IN)
	#DECL ((POSSIB) <LIST [REST STRING STRING <OR ATOM FALSE> <OR ATOM FALSE>]>
	       (OUTCHAN) CHANNEL)
	<PRINC "
To get ">
	<PRINC .PN>
	<PRINC " dynamically load
0	none -- generate error
">
	<REPEAT ((N 1) (POSS .POSSIB))
		#DECL ((N) FIX (POSS) <LIST [REST STRING STRING ANY ANY]>)
		<COND (<EMPTY? .POSS> <RETURN>)>
		<PRINC .N>
		<PRINC "	">
		<PRINC <1 .POSS>>
		<PRINC "  from    ">
		<PRINC <2 .POSS>>
		<CRLF>
		<SET N <+ .N 1>>
		<SET POSS <REST .POSS 4>>>
	<PROG ()
	      <PRINC "# to load?  ">
	      <SET IN <READ ,INCHAN>>
	      <COND (<NOT <TYPE? .IN FIX>> <TERPRI> <AGAIN>)>
	      <TERPRI>>
	<COND (<0? .IN> <>)
	      (<REST .POSSIB <* 4 <- .IN 1>>>)>>

"Load library hackers"
<USE "LIB">

<ENDBLOCK>

<ENDBLOCK>

<SET OBLIST ,OBLIST>

<ON "ERROR" ,L-HANDLER 100>
