<PACKAGE "L">

<ENTRY L-LISTE L-COUNTE L-LISTP L-COUNTP L-PATH L-OBL L-LISTPE L-FILE L-WHERE
       GET-ENTRIES GET-PACKAGES>

<USE "LIB" "PKG" "SORTX">

;"List all entries in a library"

<DEFINE L-LISTE ("OPTIONAL" (LN <COND (<G? ,MUDDLE 100>
				       "<MDLLIB>LIBMUD")
				      ("LIBMUD;LIBMUD")>) (OUTCHAN .OUTCHAN)
		 "AUX" (DB <>))
   #DECL ((LN) STRING (OUTCHAN) CHANNEL)
   <UNWIND
    <COND
     (<SET DB <DB-OPEN .LN>>
      <MAPF <>
       <FUNCTION ("AUX" X) 
	       <COND (<SET X <NEXT-ENTRY .DB>> <PRINT .X>) (<MAPLEAVE>)>>>
      <DB-CLOSE .DB>
      ,NULL)>
    <COND (.DB <DB-CLOSE .DB>)>>>

;"Count all entries"

<DEFINE L-COUNTE ("OPTIONAL" (LN <COND (<G? ,MUDDLE 100> "<MDLLIB>LIBMUD")
				       ("LIBMUD;LIBMUD")>)
		  "AUX" (DB <>) (CT 0)) 
   #DECL ((LN) STRING (DB) <OR DATA-BASE FALSE> (CT) FIX)
   <UNWIND
    <COND
     (<SET DB <DB-OPEN .LN>>
      <MAPF <>
       <FUNCTION () 
	       <COND (<NEXT-ENTRY .DB> <SET CT <+ .CT 1>>)
		     (<MAPLEAVE>)>>>
      <DB-CLOSE .DB>
      .CT)>
    <COND (.DB <DB-CLOSE .DB>)>>>

;"List all packages"

<DEFINE L-LISTP ("OPTIONAL" (LN <COND (<G? ,MUDDLE 100> "<MDLLIB>LIBMUD")
				      ("LIBMUD;LIBMUD")>) (OUTCHAN .OUTCHAN)
		 "AUX" (DB <>))
   #DECL ((LN) STRING (DB) <OR DATA-BASE FALSE> (OUTCHAN) CHANNEL)
   <UNWIND
    <COND
     (<SET DB <DB-OPEN .LN>>
      <MAPF <>
       <FUNCTION ("AUX" X)
         <COND (<SET X <NEXT-PACKAGE .DB>> <PRINT .X>)
	       (<MAPLEAVE>)>>>
      <DB-CLOSE .DB>
      ,NULL)>
    <COND (.DB <DB-CLOSE .DB>)>>>

;"Count packages"

<DEFINE L-COUNTP ("OPTIONAL" (LN <COND (<G? ,MUDDLE 100> "<MDLLIB>LIBMUD")
				       ("LIBMUD;LIBMUD")>)
		  "AUX" (CT 0) (DB <>)) 
   #DECL ((LN) STRING (CT) FIX (DB) <OR DATA-BASE FALSE>)
   <UNWIND
    <COND
     (<SET DB <DB-OPEN .LN>>
      <MAPF <>
       <FUNCTION () 
	       <COND (<NEXT-PACKAGE .DB> <SET CT <+ .CT 1>>)
		     (<MAPLEAVE>)>>>
      <DB-CLOSE .DB>
      .CT)>
    <COND (.DB <DB-CLOSE .DB>)>>>

;"Current path"

<DEFINE L-PATH ("AUX" (OUTCHAN .OUTCHAN)) 
   #DECL ((OUTCHAN) CHANNEL)
   <MAPF <> <FUNCTION (X) #DECL ((X) OBLIST) <PRINT <GET .X OBLIST>>> .OBLIST>
   ,NULL>

;"Oblist name for an atom"

<DEFINE L-OBL (ATM) #DECL ((ATM) ATOM) <GET <OBLIST? .ATM> OBLIST>>

;"List entries for specified package"

<DEFINE L-LISTPE (PN
		  "OPTIONAL" (LN <COND (<G? ,MUDDLE 100> "<MDLLIB>LIBMUD")
				       ("LIBMUD;LIBMUD")>) (OUTCHAN .OUTCHAN)
		  "AUX" PV)
   #DECL ((PN LN) STRING (OUTCHAN) CHANNEL
	  (PV) <OR <VECTOR ANY ANY ANY LIST LIST> FALSE>)
   <COND
    (<SET PV <DEFER-FIND .PN .LN>>
     <COND (<NOT <EMPTY? <4 .PV>>> <LP <4 .PV> "Entries:" .OUTCHAN>)>
     <COND (<NOT <EMPTY? <5 .PV>>> <LP <5 .PV> "Rentries:" .OUTCHAN>)>
     ,NULL)>>

;"List file name"

<DEFINE L-FILE (PN "OPTIONAL" (LN <COND (<G? ,MUDDLE 100> "<MDLLIB>LIBMUD")
					("LIBMUD;LIBMUD")>)) 
	#DECL ((PN LN) STRING)
	<PACKAGE-FIND .PN .LN>>

;"Find real file for package"

<DEFINE L-WHERE (NAM "OPTIONAL" (LP ,L-SEARCH-PATH) "AUX" CH) 
   #DECL ((NAM) STRING (LP) <LIST [REST <OR VECTOR STRING>]> (VALUE) <VECTOR [4 STRING]>
	  (CH) <OR CHANNEL FALSE> (VALUE) <OR FALSE <VECTOR [4 STRING]>>)
   <COND (<SET CH <SEARCH .NAM .LP>>
	  <CLOSE .CH>
	  [<7 .CH> <8 .CH> <9 .CH> <10 .CH>])>>

<DEFINE LP (LST HD CHN) 
   #DECL ((LST) LIST (HD) STRING (CHN) CHANNEL)
   <CRLF .CHN>
   <PRINC .HD .CHN>
   <CRLF .CHN>
   <MAPF <> <FUNCTION (X) <PRINC "  " .CHN> <PRINC .X .CHN> <CRLF .CHN>> .LST>>

<SETG HASH-BITS <BITS 12 24>>

<SETG BUCK-BITS <BITS 24 0>>

<MANIFEST HASH-BITS BUCK-BITS>

;"Generate all entries, one at a time"

<DEFINE NEXT-ENTRY (DB "AUX" HB NB FX UV) 
   #DECL ((DB) DATA-BASE (HB NB FX) FIX (UV) <UVECTOR [REST FIX]>)
   <SET FX <DB-FLEN .DB>>
   <SET UV <DB-HASH-MAP .DB>>
   <COND
    (<0? .FX> <SET HB <+ ,HDRLEN <NTH .UV <+ ,HLEN1 1>>>> <SET NB 0>)
    (<SET HB <CHTYPE <GETBITS .FX ,HASH-BITS> FIX>>	  ;"Current hash bucket"
     <SET NB <CHTYPE <GETBITS .FX ,BUCK-BITS> FIX>>    ;"Current bucket entry")>
   <REPEAT ()
     <COND
      (<0? .NB>				     ;"Empty, so go to next hash bucket"
       <SET UV <DB-HASH-MAP .DB>>
       <COND
	(<G?
	  <SET HB <+ .HB 1>>
	  <+ <NTH .UV <+ ,HLEN2 1>> <NTH .UV <+ ,HLEN1 1>> ,HDRLEN>>
	 <RETURN <>>)
	(T <SET NB <NTH .UV .HB>>		  ;"Beginning of next bucket")>)
      (<SET UV <DB-ACCESS .DB .NB>>
       <SET NB <PTRHACK .UV ,BUCKET>>
       <PUT .DB ,DB-FLEN <CHTYPE <PUTBITS .NB ,HASH-BITS .HB> FIX>>
       <RETURN <MAKE-STRING <REST .UV ,FUNCTION-NAMEBEG> <LENHACK .UV ,BUCKET>>>)>>>

;"Generate all packages, one at a time"

<DEFINE NEXT-PACKAGE (DB "AUX" FX HB NB UV) 
   #DECL ((DB) DATA-BASE (FX HB NB) FIX (UV) <UVECTOR [REST FIX]>)
   <SET FX <DB-FLEN .DB>>
   <COND
    (<0? .FX> <SET HB ,HDRLEN> <SET NB 0>)
    (<SET HB <CHTYPE <GETBITS .FX ,HASH-BITS> FIX>>
     <SET NB <CHTYPE <GETBITS .FX ,BUCK-BITS> FIX>>)>
   <REPEAT ()
     <SET UV <DB-HASH-MAP .DB>>
     <COND
      (<0? .NB>
       <COND
	(<G? <SET HB <+ .HB 1>> <+ ,HDRLEN <NTH .UV <+ ,HLEN1 1>>>> <RETURN <>>)
	(T <SET NB <NTH .UV .HB>>)>)
      (T
       <SET UV <DB-ACCESS .DB .NB>>
       <SET NB <PTRHACK .UV ,BUCKET>>
       <PUT .DB ,DB-FLEN <CHTYPE <PUTBITS .NB ,HASH-BITS .HB> FIX>>
       <RETURN <MAKE-STRING <REST .UV ,PACKAGE-NAMEBEG> <LENHACK .UV ,BUCKET>>>)>>>

<DEFINE GET-PACKAGES ("OPTIONAL" (LN <COND (<G? ,MUDDLE 100> "<MDLLIB>LIBMUD")
					   ("LIBMUD;LIBMUD")>)
		      "AUX" (DB <>) VAL) 
   #DECL ((LN) STRING (DB) <OR FALSE DATA-BASE>)
   <UNWIND
    <COND
     (<SET DB <DB-OPEN .LN>>
      <SET VAL
       <MAPF ,VECTOR
	<FUNCTION ("AUX" X) 
		<COND (<SET X <NEXT-PACKAGE .DB>> <STRING .X>)
		      (<MAPSTOP>)>>>>
      <SORT <> .VAL>
      <DB-CLOSE .DB>
      .VAL)>
    <COND (.DB <DB-CLOSE .DB>)>>>

<DEFINE GET-ENTRIES ("OPTIONAL" (LN <COND (<G? ,MUDDLE 100> "<MDLLIB>LIBMUD")
					  ("LIBMUD;LIBMUD")>)
		     "AUX" (DB <>) VAL) 
   #DECL ((LN) STRING (DB) <OR FALSE DATA-BASE>)
   <UNWIND
    <COND
     (<SET DB <DB-OPEN .LN>>
      <SET VAL
       <MAPF ,VECTOR
	<FUNCTION ("AUX" X) 
		<COND (<SET X <NEXT-ENTRY .DB>> <STRING .X>)
		      (<MAPSTOP>)>>>>
      <SORT <> .VAL>
      <DB-CLOSE .DB>
      .VAL)>
    <COND (.DB <DB-CLOSE .DB>)>>>

<ENDPACKAGE>