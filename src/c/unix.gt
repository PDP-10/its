typenames (char, int, float, double);
regnames (r0, r2, r3, r1, fr0, fr1, fr2, fr3);
memnames (reg, auto, ext, stat, param, label, intlit, floatlit,
	stringlit, ir0, ir2, ir3, ir1);
size 1 (char), 2 (int), 4 (float), 8 (double);
align 1 (char), 2 (int, float, double);
class r (r0, r1, r2, r3), f (fr0, fr1, fr2, fr3);
saveareasize 0;
pointer p0 (1);
offsetrange p0 (,);
returnreg r0 (int, p0), fr0 (double);
type char(r), int(r), float(f), double(f), p0(r);

.sw:				r0|r2,,1[r1,r3];

+i: &: .OR: +p0:		r,r,1; r,M,1; M,r,2;

-i: -p0: -p0p0: <<: >>: 	r,r,1; r,M,1;

*i:				r1,r,r1;
				r3,r,r3;
				r1,M,r1;
				r3,M,r3;
				r0,r,r1[r0];
				r2,r,r3[r2];
				r0,M,r1[r0];
				r2,M,r3[r2];

/i:				r1,r2|r3,r0[r1];
				r3,r0|r1,r2[r3];
				r1,M,r0[r1];
				r3,M,r2[r3];

%:				r1,r2|r3,r1[r0];
				r3,r0|r1,r3[r2];
				r1,M,r1[r0];
				r3,M,r3[r1];

^:				r,r,1;

+d: *d: 			f,f,1; f,~floatlit,1; ~floatlit,f,2;

-d: /d: 			f,f,1; f,~floatlit,1;

=+i: =-i: =&: =OR:
++bp0: --bp0:			M,r,1; M,M,1;

=^:				M,r,1;

.BNOT: -ui:			r,,1;

-ud:				f,,1;

&u0:				M,,r;

++ai: ++ac: --ai: --ac: 	M,,r;

++ap0: --ap0:			M,r,r; M,M,r;

++bi: ++bc:
--bi: --bc:			M,,1;

.ic: .ci: .ip0: .p0i:		r,,1;

.df: .fd:			f,,1;

.cf: .cd:			r,,f;
.if: .id:			r,,f; M,,f;
.fc: .dc: .fi: .di:		f,,r;

==p0: !=p0: <p0: >p0: <=p0: >=p0:
==i: !=i: <i: >i: <=i: >=i:	r,r,label;
				r,M,label;
				M,r,label;
				M,M,label;

==d: !=d: <d: >d: <=d: >=d:	f,f,label; ~floatlit,f,label;

macros

+i: .OR: +p0: +d: *d:

  (r|f,,):	"	#O	#S,#F"
  (M,,):	"	#O	#F,#S"
 
-i: -p0: -p0p0: sb: ^: *i: -d: /d:

		"	#O	#S,#F"
/i: %:

"	tst	#F
	sxt	#F-1
	#O	#S,#F-1"

&:

(r,,):
"	mov	#S,-(sp)
	com	(sp)
	bic	(sp)+,#F"

(M,,):
"	mov	#F,-(sp)
	com	(sp)
	bic	(sp)+,#S"

<<:		"	ash	#S,#F"
>>:
(,intlit,):	"	ash	$-#6.,#F"
(,~intlit,):
"	mov	#S,-(sp)
	neg	(sp)
	ash	+(sp),#F"

=+i: ++bp0:	"	add	#S,#F"
=-i: --bp0:	"	sub	#S,#F"
=OR:		"	bis	#S,#F"
=^:		"	xor	#S,#F"
=&:

"	mov	#S,-(sp)
	com	(sp)
	bic	(sp)+,#F"

.BNOT: -ui: -ud:

		"	#O	#R"

&u0:
(auto,,):
"	mov	sp,#R
	add	$#4.,#R"
(ext|stat|label|stringlit,,):
"	mov	$#F,#R"
(param,,):
"	mov	r4,#R
	add	$#4.,#R"

++ai:

"	mov	#F,#R
	inc	#F"

++ac:

"	movb	#F,#R
	incb	#F"

--ai:

"	mov	#F,#R
	dec	#F"

--ac:

"	movb	#F,#R
	decb	#F"

++ap0:

"	mov	#F,#R
	add	#S,#F"

--ap0:

"	mov	#F,#R
	sub	#S,#F"

++bi:		"	inc	#R"
--bi:		"	dec	#R"
++bc:		"	incb	#R"
--bc:		"	decb	#R"

.ic:
.ip0: .p0i:
.df: .fd:	"\"

.ci:		"	bic	$177400,#R"

.cf: .cd:

"	bic	$177400,#F
	movif	#F,#R"

.if: .id:	"	movif	#F,#R"
.fi: .di:
.fc: .dc:	"	movfi	#F,#R"

==i:
==p0:

"	cmp	#F,#S
	jeq	#R"

!=i:
!=p0:

"	cmp	#F,#S
	jne	#R"

<i:

"	cmp	#F,#S
	jlt	#R"

>i:

"	cmp	#F,#S
	jgt	#R"

<=i:

"	cmp	#F,#S
	jle	#R"

>=i:

"	cmp	#F,#S
	jge	#R"

==d:

"	cmpf	#F,#S
	jeq	#R"

!=d:

"	cmpf	#F,#S
	jne	#R"

<d:

"	cmpf	#F,#S
	jlt	#R"

>d:

"	cmpf	#F,#S
	jgt	#R"

<=d:

"	cmpf	#F,#S
	jle	#R"

>=d:

"	cmpf	#F,#S
	jge	#R"

<p0:

"	cmp	#F,#S
	jlo	#R"

>p0:

"	cmp	#F,#S
	jhi	#R"

<=p0:

"	cmp	#F,#S
	jlos	#R"

>=p0:

"	cmp	#F,#S
	jhis	#R"

.cc:		"	movb	#F,#R"
.ii: .p0p0:	"	mov	#F,#R"
.ff:

  (f,,f):	"	movf	#F,#R"
  (M,,f):	"	movof	#F,#R"
  (f,,M):	"	movfo	#F,#R"

.dd:

(~floatlit,,f):	"	movf	#F,#R"
(,,M):		"	movf	#F,#R"
(floatlit,,f):
"	movf	0f,#R  
.data
0:	%ff(#4)
.text"

in:		"	#0."
ad0:		"	#0"
c:		"	.byte #0."
al:		".even"
ca:		"	jsr	r5,#F; #1.; #0."

end:		"\"
en: ex: 	".globl #0"
ep:

"	jmp	epilog
fs#0=#1."

eq:		"#0:"
go:		"	jbr	#R"
hd:		".globl prolog,epilog"

ln:		"\n/	line #0\n"
p:		"\n%i(#1):	jsr	r0,prolog; fs#0"

rt:		"	jmp	epilog"
st:		"i#0:"
z:		".=.+#0."

f: d:		"	%ff(#0)"
nf: nd: 	"	%nff(#0)"

ts:
"%if(#0,%sb(68,#'F,#'F,-6,#0)
,)	cmp	#F,$#5.-[#0.]
	jhi	#R
	asl	#F
	jmp	*0f(#F)
0:"

ls:
"	mov	$#0.,r1
	mov	$0f,r3
2:	cmp	#F,(r3)+
	beq	1f
	sob	r1,2b
	jbr	#R
1:	jmp	*2*#0.-2(r3)
0:"

lc:		"	l#0"
l:		"l#0:"
sc:		"	s#0"
pu: pd: 	".text"
da:		".data"
im:		".bss"
