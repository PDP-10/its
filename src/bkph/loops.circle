.mllit==1

TITLE gradient space

;OUTPUTS ON TV'S

;tv's have 455. vertical lines of 576. dots each (262080. bits out 'o 262144).

;memory is organized as 9 64.-bit words (equiv to 18. 32.-bit words) per line.
;the pdp10 accesses half of such a word (or two 16.-bit chunks) at once.
;these 32. bits are packed left justified into the 36. bits.

;tvend (or the last word of the tv-memory) has two functions:
;bit  200000 when on, complements the black/white output.
;bits 177760 are a word-counter for which 64.-bit word the frame is to start on.
;for winnage the number ought to be a multiple of 9.

;Characters are 10. lines high and 5 points wide (right and top justified).
;Line-pitch is 12. TV-lines, Character-pitch is 6 TV-points.
;Thats 96. chrs/line exactly and 37. and 11./12. lines (3552. chrs).

A=1
B=2
C=3
D=4
E=5
F=6
G=7

T=10
U=11
V=12
W=13
X=14
Y=15
Z=16

P=17

tv==100*2000			;address of beg of tv buffer
tvend==100*2000+10*2000-1	;black/white bit and frame start number

dtyoc==2
ttyc==3

DEFINE FLOAT AX,AY
	TLC AX,232000+1000*AY
	FADR AX,AX
TERMIN

DEFINE FIX AX,AY
	MULI AX,400
	TSC AX,AX
	ASH <AX+1>,AY-243(AX)
TERMIN

	jrst exit

BEG:	MOVEI P,PDL
	MOVE A,[-10,,100]
	MOVEI B,0
	.CALL [SETZ
		SIXBIT /CORBLK/
		1000,,600000
		1000,,-1
		A
		1000,,-2
		SETZ B]
	.VALUE
	.break 12,[5,,jcl]	;get job control language
	move c,[440700,,jcl]
	ildb a,c
	setzm plsflg
	setzm mnsflg
	movei b,0
	jumpe a,bull	;nothing there, default
	jrst gobsub

goblp:	rot b,3
	ior b,a
gobons:	ildb a,c
gobsub:	caie a,"+
	jrst gobors
	setom plsflg
	jrst gobons

gobors:	caie a,"-
	jrst gobers
	setom mnsflg
	jrst gobons

gobers:	subi a,60
	jumpge a,goblp
	movem b,param	;save parameter given

bull:	.open dtyoc,[sixbit /  1TTY/]
	.value
	.iot dtyoc,[^P]
	.iot dtyoc,["T]	;HOME CURSOR UP
	.iot dtyoc,[^P]
	.iot dtyoc,["B]	;MOVE TO RIGHT OF SCREEN
	.close dtyoc,

	pushj p,clr
	skipe plsflg
	jrst wheel
	skipe mnsflg
	jrst octant
	move a,param
	caige a,64.
	jrst circle
	jrst square

exit:	setzm tvend
	pushj p,clr
	movei a,0
	dpb a,[041400,,tvend]
	.value [asciz /:killî/]

clr:	movsi f,-10*2000+1
	move a,[setzm tv(f)]
	move b,[aobjn f,a]
	move c,[popj p,]
	jrst a

set:	movsi f,-10*2000+1
	movni e,20
	move a,[movem e,tv(f)]
	move b,[aobjn f,a]
	move c,[popj p,]
	jrst a

sidcpy:	movei x,tv	;beginning of line
	movei y,tv+17.	;end of line
	movei w,228.+227.	;number of lines to do
sidlop:	hrli x,-9.	;9. words to do per line
	movei c,0	;right most bit on screen will be zero
sidinl:	move a,(x)	;get word
	lsh a,-5	;squezze out four blanks and one bit
	circ a,44	;reverse and put in b
	trne c,20	;test saved bit
	tro b,20	;put it in
	movem b,(y)	;put in generated word
	move c,(x)	;save the bit
	sos y
	aobjn x,sidinl
	movei x,9.(x)	;to start of next line
	movei y,27.(y)	;to end of next line
	sojg w,sidlop
	popj p,

dwncpy:	move b,[hrli y,-18.]
	move c,[move a,(x)]
	move d,[movem a,(y)]
	move e,[aos x]
	move f,[aobjn y,c]
	move g,[subi x,36.]
	move t,[sojg w,b]
	move u,[popj p,]
	movei x,tv+226.*18.
	movei y,tv+228.*18.
	movei w,227.	;that many lines to copy
	jrst b
	
dotoff:	addi a,287.	;around center
	addi b,227.
	pushj p,dotout
	subi b,227.
	subi a,287.
	popj p,

dotout:	skipl a		;relative to bottom left
	skipge b
	popj p,		;out of range
	caige a,576.
	cail b,454.
	popj p,		;out of range

	push p,a
	push p,b
	push p,c
	subi b,454.	;i (x) in a and j (y) in b
	movn b,b
	imuli b,18.	;18. PDP10 words per line
	move c,a
	lsh c,-5	;32. bits per PDP10 word
	add b,c
	lsh c,5
	sub c,a
	hrrz c,c	;a negative half-word
	hrlzi a,400000
	lsh a,@c	;make one-bit mask
	xorm a,tv(b)	;or iorm
	pop p,c
	pop p,b
	pop p,a
	popj p,

vctoff:	addi a,287.
	addi b,227.
	addi c,287.
	addi d,227.
	pushj p,vctout
	subi d,227.
	subi c,287.
	subi b,227.
	subi a,287.
	popj p,

vctout:	push p,a
	push p,b
	push p,c
	push p,d
	push p,e
	push p,f
	push p,g

	setzm negatx
	camg a,c	;xs > xf?
	jrst vctxps	;no, ok
	movn a,a
	movn c,c
	setom negatx

vctxps:	setzm negaty
	camg b,d	;ys > yf?
	jrst vctyps	;no, ok
	movn b,b
	movn d,d
	setom negaty

vctyps:	move e,c
	sub e,a		;dx ( > 0)
	move f,d
	sub f,b		;dy ( > 0)

	setzm swpflg
	caml e,f	;is dy > dx?
	jrst vctnrm	;no, ok
	exch a,b
	exch c,d
	exch e,f
	setom swpflg
vctnrm:	move g,e
	lsh g,-1	;initial sums
vctlop:	pushj p,dotflt	;first point
	camn a,c	;hit end yet?
	jrst vctend	;yeah
	aos a		;x <- x+1
	sub g,f		;sums <- sums - dy
	jumpge g,vctlop
	aos b		;y <- y+1 
	add g,e		;sums <- sums + dx
	jrst vctlop

dotflt:	push p,a
	push p,b
	skipe swpflg
	exch a,b
	skipe negaty
	movn b,b
	skipe negatx
	movn a,a
	pushj p,dotout
	pop p,b
	pop p,a
	popj p,

vctend:	pop p,g
	pop p,f
	pop p,e
	pop p,d
	pop p,c
	pop p,b
	pop p,a
	popj p,

octant:	move a,param
	movem a,incr
	move c,sizeî
	idiv c,a
	imul c,a
	movem c,size
	setzm d		;y
	movn c,size	;x
	setzm a
	setzm b
octlop:	add c,a
	add d,b
	pushj p,vctoff
	add d,incr
	camge d,size
	jrst octlop

	move d,size
octlup:	add c,a
	add d,b
	pushj p,vctoff
	add c,incr
	skipg c
	jrst octlup

	pushj p,sidcpy
	pushj p,dwncpy
	jrst surlp

square:	setzm konsta	;vary k
	aos konsta
	move a,param
	movem a,radius
squarp:	pushj p,circli	;draw one "circle"
	aos konsta
	move a,konsta
	camge a,radius
	jrst squarp
	jrst surlp

wheel:	movei a,200.
	movem a,radius
	move a,param
	movem a,konsta
	pushj p,corcli
	jrst surlp

circle:	setzm radius	;vary r
	aos radius
	move a,param
	movem a,konsta
circlo:	pushj p,circli	;draw one "circle"
	aos radius
	aos e
	caige e,360.
	jrst circlo

surlp:	.open ttyc,[sixbit /   TTY/]
	.value
	.iot ttyc,a
	cain a,177
	.value	[asciz /:bkph;tvwrit
:vp
/]
	pushj p,clr
	jrst exit

circli:	move e,radius	;x(0)
	setzm f		;y(0)
circlp:	move a,e	;x(n) saved
	move b,f	;y(n) saved
	idiv b,konsta	;y(n)/k
	add a,b		;x(n+1) <- x(n)+y(n)/k
	move e,a	;x(n+1)
	idiv a,konsta	;x(n+1)/k
	move b,f	;y(n)
	sub b,a		;y(n+1) <- y(n)-x(n+1)/k
	move f,b	;y(n+1) saved
	move a,e	;x(n)	
	pushj p,dotoff	;draw it
	skipn f		;is y zero again?
	came e,radius	;back to start?
	jrst circlp	;not yet ...
	popj p,

corcli:	move e,radius	;x(0)
	setzm f		;y(0)
corclp:	move a,e	;x(n) saved
	move b,f	;y(n) saved
	idiv b,konsta	;y(n)/k
	add a,b		;x(n+1) <- x(n)+y(n)/k
	move e,a	;x(n+1)
	idiv a,konsta	;x(n+1)/k
	move b,f	;y(n)
	sub b,a		;y(n+1) <- y(n)-x(n+1)/k
	move f,b	;y(n+1) saved

	setzm a
	setzm b
	move c,e	;x(n)	
	move d,f	;y(n)
	pushj p,vctoff	;draw it
	skipn f		;is y zero again?
	came e,radius	;back to start?
	jrst corclp	;not yet ...
	popj p,

axes:	movei a,576.
	movei b,227.
axelx:	push p,a
	push p,b
	pushj p,dotout
	pop p,b
	pop p,a
	sojg a,axelx
	movei a,288.
	movei b,455.
axely:	push p,a
	push p,b
	pushj p,dotout
	pop p,b
	pop p,a
	sojg b,axely
	popj p,

swpflg:	0	;reverse x and y if set
negatx:	0	;negate x when set
negaty:	0	;negate y when set

plsflg:	-1	;drive vectors instead of points
mnsflg:	-1	;drive octant if non-zero

param:	4.

size:	226.

konsta:	2

radius:	256.

incr:	4

jcl:	block 20
pat:	block 100
pdl:	block 1000


;'LIBRARY ROUTINES' - MAY BE REENTRANT BY NOW AND 'SAFE' (I.E. NO ARITH OVERFL FOR VALID DATA)

;FLOATING POINT SQUARE ROOT FUNCTION

SQRT:	SKIPGE A
	JRST 4,.
	SKIPN A
	POPJ P,
	PUSH P,B
	PUSH P,C
	ASHC A,-33
	SUBI A,201
	ROT A,-1
	HRRZ C,A
	PUSH P,C	;SQ1
	LSH A,-43
	ASH B,-10
	FSC B,177(A)
	MOVE C,B
	FMP B,SQRT1(A)
	FAD B,SQRT2(A)	;LINEAR APPROXIMATION
	MOVE A,C	;THEN TWO ITERATIONS OF NEWTON-RAPHSON
	FDV A,B
	FAD B,A
	FSC B,-1
	MOVE A,C
	FDV A,B
	FADR A,B
	POP P,B		;SQ1
	FSC A,(B)
	POP P,C
	POP P,B
	POPJ P,

SQRT1:	0.8125
	0.578125
SQRT2:	0.302734
	0.421875


	END BEG

COSD:	FADR A,[90.0]
SIND:	FDV A,[57.295779]	;180.0/PI
	JRST .+2	;SKIPA
COS:	FADR A,[1.57079632]	;PI/2
SIN:	PUSH P,B
	PUSH P,C
	MOVE C,A	;SAVE A
	MOVMS A
	CAMG A,[0.019]
	JRST SNSN3	;SMALL ENOUGH, SO SIN(X)=X
	CAML A,[1.0^8 ]
	JRST 4,.
	FDV A,[1.57079632]	;PI/2
	CAMG A,[1.0]
	JRST SNSN2	;SMALL ENOUGH NOT TO REQUIRE ARGUMENT REDUCTION
	MULI A,400	;FIX IT
	LSH B,-202(A)
	MOVEI A,200
	ROT B,3
	LSHC A,33
	FAD A,[0]	;FLOAT IT
	JUMPE B,SNSN2
	TLCE B,1000
	FSB A,[1.0]	;01,11
	TLCE B,3000
	TLNN B,3000
	MOVNS A		;01,10
SNSN2:	SKIPGE C
	MOVNS A
	MOVEM A,C
	FMPR A,A
	MOVE B,[0.00015148419]	;0
	FMP B,A
	FAD B,[-0.00467376557]	;-0.004362476
	FMP B,A
	FAD B,[0.07968967928]	;0.079487663
	FMP B,A
	FAD B,[-0.64596371106]	;-0.645920978
	FMP A,B
	FAD A,[1.57079632]	;PI/2
	FMPR A,C
SINX:	POP P,C
	POP P,B
	POPJ P,
	
SNSN3:	MOVE A,C
	JRST SINX


ATAN:	PUSH P,B
	PUSH P,C
	MOVM B,A
	CAMG B,[0.4^-8 ]
	JRST TANDON	;SMALL ENOUGH SO THAT ATAN(X)=X
	PUSH P,A
	CAML B,[7.0^7 ]
	JRST ATANS4	;LARGE ENOUGH SO ATAN(X)=PI/2
	MOVN C,[1.0]
	CAMLE B,[1.0]	;1.0
	FDVM C,B
	PUSH P,B
	FMPR B,B
	MOVE C,[1.44863154]
	FADR C,B
	MOVE A,[-0.264768620]
	FDVM A,C
	FADR C,B
	FADR C,[3.31633543]
	MOVE A,[-7.10676005]
	FDVM A,C
	FADR C,B
	FADR C,[6.76213924]
	MOVE A,[3.70925626]
	FDVR A,C
	FADR A,[0.174655439]
	POP P,B
	FMPR A,B
	JUMPG B,ATANS5
	FADR A,[1.57079632]	;PI/2
	JRST .+2	;SKIPA
ATANS4:	MOVE A,[1.57079632]
ATANS5:	POP P,B
	SKIPGE B
	MOVNS A
TANDON:	POP P,C
	POP P,B
	POPJ P,

LOG:	SKIPG A
	JRST 4,.
	PUSH P,B
	PUSH P,C
	PUSH P,D
	LDB D,[331100,,A]	;GRAB EXPONENT
	SUBI D,201
	TLZ A,777000
	TLO A,201000
	MOVE B,A
	FSBR A,[1.41421356]
	FADR B,[1.41421356]
	FDVB A,B
	FMPR B,B
	MOVE C,[0.434259751]
	FMPR C,B
	FADR C,[0.576584342]
	FMPR C,B
	FADR C,[0.961800762]
	FMPR C,B
	FADR C,[2.88539007]
	FMPR C,A
	FADR C,[0.5]
	MOVE A,D
	FLOAT A
	FADR A,C
	FMPR A,[0.69314718]	;LOG E OF 2.0
	POP P,D
	POP P,C
	POP P,B
	POPJ P,

IF1 EXPUNGE EXP

EXP:	PUSH P,B
	PUSH P,C
	PUSH P,D
	PUSH P,E
	SETZM B
	PUSH P,A
	MOVMS A
	FMPR A,[0.43429448]
	MOVE D,[1.0]
	CAMG A,D
	JRST RATEX
	MULI A,400
	ASHC B,-243(A)
	CAILE B,43
	JRST 4,.
	CAILE B,7
	JRST EXPR2
EXPR1:	FMPR D,FLOAP1(B)
	LDB A,[103300,,C]
	SKIPE A
	TLO A,177000
	FADR A,A
RATEX:	MOVEI B,7
	SETZM C
RATEY:	FADR C,COEF2-1(B)
	FMPR C,A
	SOJN B,RATEY

	FADR C,[1.0]
	FMPR C,C
	FMPR D,C
	MOVE A,[1.0]
	POP P,B
	SKIPL B
	SKIPN A,D
	FDVR A,D
	POP P,E
	POP P,D
	POP P,C
	POP P,B
	POPJ P,

EXPR2:	LDB E,[030300,,B]
	ANDI B,7
	MOVE D,FLOAP1(E)
	FMPR D,D	;TO THE 8'TH POWER
	FMPR D,D
	FMPR D,D
	JRST EXPR1

COEF2:	1.15129278
	0.662730884
	0.254393575
	0.0729517367
	0.0174211199
	2.55491796^-3
	9.3264267^-4

FLOAP1:	1.0?1.0^1 ?1.0^2 ?1.0^3 ?1.0^4 ?1.0^5 ?1.0^6 ?1.0^7


INTEG:	PUSH P,B	;INTEGER PART
	FIX A
	FLOAT B
	MOVE A,B
	POP P,B
	POPJ P,

FRACT:	PUSH P,B	;FRACTIONAL PART
	PUSH P,A
	FIX A
	FLOAT B
	POP P,A
	FSBR A,B
	POP P,B
	POPJ P,

MOD:	PUSH P,A	;FLOATING MODULUS
	FDVR A,B
	PUSH P,B
	FIX A
	FLOAT B
	FMPR B,(P)	;SAVED B
	MOVE A,-1(P)	;SAVED A
	FSBR A,B
	POP P,B
	SUB P,[1,,1]
	POPJ P,

STARTX:	171622221402
IMPTX:	3125.
PRIMEL:	377777,,777741

RANDOM:	PUSH P,B	;UNIFORM 0.0 - 1.0
	MOVE A,STARTX
	MUL A,IMPTX
	DIV A,PRIMEL
	MOVEM B,STARTX
	MOVE A,B
	LSH A,-8.
	FLOAT A,-33
	POP P,B
	POPJ P,

	end beg
