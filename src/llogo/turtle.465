
;;;			LOGO TURTLE FUNCTIONS

(DECLARE (OR (STATUS FEATURE DEFINE) (FASLOAD DEFINE FASL AI LLOGO))) 

(SSTATUS FEATURE TURTLE) 

(DECLARE (GENPREFIX TURTLE)
	 (*FEXPR PHOTO SNAP PICTURE RESNAP)
	 (*LEXPR ERRBREAK POINT DSCALE SETHOME DISPLAY BLINK UNBLINK MOTION BRIGHT
		 SCALE RANGE BEARING TOWARDS PENSTATE)
	 (*EXPR HOME)
	 (SPECIAL :WRAP :POLYGON FLOAT-DIS :SNAP :TEXTXHOME :TEXTYHOME NEWTURTLE
		  WORLD :SNAPS :DSCALE :RAD3 :PI :TURTLE HOME :HEADING :XCOR :YCOR
		  :PICTURE :PAGE :SHOW :TSIZE :TEXT :SCREENSIZE PI-OVER-180 PLOTS)) 

(COND ((STATUS FEATURE LLOGO)
       (READ-ONLY :WRAP :XCOR :YCOR :SNAP :SNAPS :DSCALE :TURTLE :PI :HEADING 
                  :PICTURE :PAGE :SHOW :TEXT :SCREENSIZE :TSIZE :RAD3)
       (SYSTEM-VARIABLE :POLYGON))
      ((DEFUN ERRBREAK ARGS (PRINC (ARG 1.)) (APPLY 'BREAK (LIST (ARG 2.) T)))
       (DEFUN HOMCHECK (USELESS) USELESS)
       (DEFUN OBTERN (IGNORE THIS) IGNORE)
       (DEFUN TYPE ARGS 
	      (DO ((I 1. (1+ I))) ((> I ARGS) (ARG (1- I))) (PRINC (ARG I))))
       (DEFUN ASK NIL (MEMQ (READ) '(Y YES OK YUP SURE OUI DA)))
       (DEFUN FILESPEC (X) 
	      (OR (APPLY 'AND (MAPCAR 'ATOM X))
		  (SETQ X (ERRBREAK 'FILESPEC
				    (LIST X 'IS/ NOT/ A/ FILE/ NAME))))
	      (COND ((NULL X) (APPEND (STATUS CRFILE) (CRUNIT)))
		    ((NOT (CDR X)) (APPEND X '(>) (CRUNIT)))
		    ((NOT (CDDR X)) (APPEND X (CRUNIT)))
		    ((NOT (CDDDR X))
		     (APPEND (LIST (CAR X) (CADR X)) '(DSK) (CDDR X)))
		    (X))))) 

;;THE TURTLE PACKAGE IS GOING TO EAT LOTS OF FLONUM SPACE, SO IN BIBOP LISP, ASSURE
;;THAT ENOUGH WILL BE AVAILABLE.

(AND (MEMQ 'BIBOP (STATUS FEATURES))
     (ALLOC '(FLONUM (2000. 4000. NIL) FLPDL 2000.))) 

(DEFINE SINE (X) (SIN (TIMES X PI-OVER-180))) 

(DEFINE COSINE (X) (COS (TIMES X PI-OVER-180))) 

(DEFINE ARCTAN (ABB ATANGENT) (X Y) (//$ (ATAN (FLOAT X) (FLOAT Y)) PI-OVER-180)) 

(DEFUN DISPLAY-PRINC (X) 
       (AND :SHOW (DISCUSS :TEXT :TEXTXHOME :TEXTYHOME X))
       (PRINC X))

(DEFUN DISPLAY-TERPRI NIL 
       (AND :SHOW (DISCUSS :TEXT :TEXTXHOME :TEXTYHOME EOL))
       (TERPRI))


(DECLARE (READ))
(READ)
;;COMPILED BUT NOT INTERPRETIVELY.
(SETQ DPRINC (GET 'DISPLAY-PRINC 'SUBR) DTERPRI (GET 'DISPLAY-TERPRI 'SUBR))

(DECLARE (READ) (READ))
;;INTERPRETIVELY BUT NOT COMPILED. [NOUUO=T]
(DEFPROP DPRINC DISPLAY-PRINC EXPR)
(DEFPROP DTERPRI DISPLAY-TERPRI EXPR)


;;THE FREE VARIABLES ":XCOR, :YCOR" ARE NECESSARY FOR FLOATING POINT ACCURACY. 
;;;
;;*PAGE


(DEFINE STARTDISPLAY (ABB SD) ARGS 
	(REMPROP ':PICTURE 'SNAP)
	(REMPROP ':PICTURE 'ORIGINAL)
	(MAPC '(LAMBDA (SNAP) (MAKUNBOUND SNAP) (REMPROP SNAP 'SNAP))
	      :SNAPS)
	(IOC Y)
	(SETQ :SNAPS NIL 
	      NEWTURTLE NIL 
	      WORLD ':PICTURE 
	      :TURTLE 0. 
	      :SNAPS NIL 
	      :HEADING 0.0 
	      :XCOR 0.0 
	      :YCOR 0.0 
	      :SHOW NIL 
	      :TEXT NIL)
	(OR (ZEROP ARGS) (SETQ DEFAULT-TURTLE (ARG 1.)))
	(COND ((ERRSET (DISSTART1) NIL))
	      ;;IF ERROR, FLUSH SLAVE AND TRY AGAIN.
	      (T (DISFLUSH)
		 (TYPE '/;TRYING/ TO/ REGRAB/ DISPLAY/ SLAVE EOL)
		 (SETQ :TURTLE 0.)
		 (DISSTART1)))) 

(ARGS 'STARTDISPLAY '(0. . 1.)) 

(DEFUN DISSTART1 NIL 
       ;;SUBROUTINE OF DISSTART.  NO GLOBAL PURPOSE.  OPENS SLAVE OR FLUSHES CURRENT
       ;;ARRAYS, GUARANTEES ASTATE=0.  ONE DISINI TO START SLAVE, ONE TO SET
       ;;"ASTATE" MODE
       (COND ((EQ DEFAULT-TURTLE 'GT40) (DISINI 0. 'T34)) ((DISINI)))
       (DISINI 0.)
       (SETQ :PICTURE (DISCREATE (CAR HOME) (CADR HOME)))
       (SHOWTURTLE)
       (IOC F)) 

(DEFINE WIPE NIL (OR (= :TURTLE 0.) (SETQ :TURTLE (DISCOPY :TURTLE)))
		 ((LAMBDA (D) (DISFLUSH :PICTURE)
			      (SETQ :PICTURE (DISCREATE (CAR D) (CADR D)))
			      (DISALINE :PICTURE (CADDR D) (CADDDR D) 1.)
			      (DISMARK :PICTURE :TURTLE)
			      (DISET :PICTURE (CADDDR (CDDDR D))))
		  (DISCRIBE :PICTURE))
		 '?) 

(DEFINE WIPECLEAN (ABB WC) NIL 
			       ;;IN ADDITION TO WIPE HIDES ALL SNAPS
			       (WIPE)
			       (MAPC 'HIDE (MAPCAR 'EVAL :SNAPS))
			       '?) 

(DEFINE CLEARSCREEN (ABB CS) NIL (WIPECLEAN) (HOME)) 

(DEFINE NODISPLAY (ABB ND) NIL (SETQ :SHOW NIL) (DISFLUSH) '?) 

;;THE TURTLE

(DEFINE HIDETURTLE (ABB HT) NIL (COND ((NOT (= :TURTLE 0.))
				       (DISMARK :PICTURE 0.)
				       (DISFLUSH :TURTLE)
				       (SETQ :TURTLE 0.)))
				'?) 

(DEFINE SHOWTURTLE (ABB ST) NIL 
	;;:TURTLE IS 0 IF TURTLE IS NOT DISPLAYED.  ELSE IT'S THE NUMBER OF THE
	;;DISPLAY ITEM WHICH IS THE TURTLE.  :PICTURE IS THE ITEM WHICH THE TURTLE
	;;AFFECTS.  DOES NOT INCLUDE SNAPS SHOWN VIA SHOWSNAP.
	(COND ((= :TURTLE 0.)
	       (SETQ :TURTLE (DISCREATE (+ (XHOME) (XCOORD)) (+ (YHOME) (YCOORD))))
	       (DISPLAY :TURTLE NIL)
	       (COND (NEWTURTLE ((LAMBDA (:PICTURE :TURTLE :XCOR :YCOR :HEADING
					  :DSCALE :SCREENSIZE) 
					 (MAPC 'EVAL NEWTURTLE))
				 :TURTLE
				 0.
				 0.0
				 0.0
				 :HEADING
				 NIL
				 512.))
		     ((TURTLE)))
	       (DISMARK :PICTURE :TURTLE)))
	'?) 

(DEFUN TURTLE NIL 
       (PROG (H) 
	     (DISINI 3.)
	     (SETQ H (MINUS (DIFFERENCE :HEADING 90.0)))
	     (DISALINE :TURTLE (//$ :TSIZE :RAD3) H -1.)
	     (DISALINE :TURTLE :TSIZE (SETQ H (+$ H 150.0)))
	     (DISALINE :TURTLE :TSIZE (SETQ H (+$ H 120.0)))
	     (DISALINE :TURTLE :TSIZE (SETQ H (+$ H 120.0)))
	     (DISINI 0.))) 

(DEFINE HOME (ABB H) NIL (OR (= :TURTLE 0.) (DISPLAY :TURTLE NIL))
			 (DISALINE :PICTURE 0. 0. 1.)
			 (SETQ :XCOR 0.0 :YCOR 0.0)
			 (SETHEAD 0.)
			 '?) 

;;;MOVING THE TURTLE.  THE BASIC INTERFACE WITH THE DISPLAY IS "SETXY".

(DEFINE FORWARD (ABB FD) (R) (SETXY (PLUS :XCOR (TIMES R (SINE :HEADING)))
				    (PLUS :YCOR (TIMES R (COSINE :HEADING))))) 

(DEFINE BACK (ABB BK) (R) (FORWARD (MINUS R))) 

(DEFINE SETTURTLE (ABB SETT) (P) 
				 ;;(SETTURTLE '(100 100 90)) SETS THE STATE OF THE
				 ;;TURTLE TO THE POSITION '(100 100) AND HEADING 90. 
				 ;;THE HEADING IS OPTIONAL.  (SETTURTLE (HERE)) IS A
				 ;;NO-OP.
				 (SETXY (CAR P) (CADR P))
				 (AND (CDDR P) (SETHEAD (CADDR P)))) 

(DEFINE SETX (X) (SETXY X :YCOR)) 

(DEFINE SETY (Y) (SETXY :XCOR Y)) 

(DEFINE SETXY (X Y) 
	(AND (NOT :WRAP)
	     (OR (GREATERP (ABS X) :SCREENSIZE) (GREATERP (ABS Y) :SCREENSIZE))
	     (ERRBREAK 'SETXY 'TURTLE/ MOVING/ OFF/ SCREEN!))
	(SETQ :XCOR X :YCOR Y)
	(COND (:DSCALE (DISALINE :PICTURE
				 (ROUND (TIMES X :DSCALE))
				 (ROUND (TIMES Y :DSCALE))))
	      ((DISALINE :PICTURE (ROUND X) (ROUND Y))))
	'?) 

;;;TURNING THE TURTLE

(DEFINE RIGHT (ABB RT) (ANGLE) (SETHEAD (PLUS :HEADING ANGLE))) 

(DEFINE LEFT (ABB LT) (ANGLE) (SETHEAD (DIFFERENCE :HEADING ANGLE))) 

(DEFINE SETHEAD (ABB SH SETHEADING) (ANGLE) 
	;;UPDATES :HEADING AND ROTATES TURTLE.
	(SETQ :HEADING ANGLE)
	(COND ((= :TURTLE 0.)) ((HIDETURTLE) (SHOWTURTLE)))
	'?) 

(DEFINE WRAP NIL (SETQ :WRAP T) '?) 

(DEFINE NOWRAP NIL (SETQ :WRAP NIL) '?) 

;;EXAMINING THE TURTLE'S STATE

(DEFINE XHOME NIL (CAR (DISCRIBE :PICTURE))) 

;;RETURNS ABSOLUTE X SCOPE COORDINATE OF HOME

(DEFINE YHOME NIL (CADR (DISCRIBE :PICTURE))) 

(DEFINE HOMESTATE NIL (LIST (XHOME) (YHOME))) 

(DEFUN XCOORD NIL (CADDR (DISCRIBE :PICTURE))) 

;;ABSOLUTE X COORD

(DEFINE XCOR NIL (ROUND :XCOR)) 

;;SCALED X COORD

(DEFUN YCOORD NIL (CADDDR (DISCRIBE :PICTURE))) 

;;ABSOLUTE Y COORD

(DEFINE YCOR NIL (ROUND :YCOR)) 

;;SCALED Y COORD

(DEFINE HERE NIL (LIST (XCOR) (YCOR) (HEADING))) 

(DEFINE HEADING NIL 
	((LAMBDA (X) (OR (AND (MINUSP X) (+ 360. X)) X)) (\ (ROUND :HEADING) 360.))) 

;;THE PEN

(DEFINE PENDOWN (ABB PD) NIL (DISET :PICTURE -1.) '?) 

(DEFINE PENUP (ABB PU) NIL (DISET :PICTURE 1.) '?) 

(DEFINE PENSTATE ARGS (COND ((= ARGS 0.)
			     ;;(PENSTATE) = STATE OF PEN (PENSTATE <1, -1>) SETS PEN
			     ;;UP OR DOWN (PENSTATE (PENSTATE)) IS A NO-OP
			     (CADDDR (CDDDR (DISCRIBE :PICTURE))))
			    ((= ARGS 1.) (DISET :PICTURE (ARG 1.))))) 

(DEFINE PENP NIL (= (PENSTATE) -1.)) 

;;PENDOWN <=> PENSTATE = -1.  TRIG FNS
;;;
;;GLOBAL VARIABLES - FOLLOWS ANY POSSIBLE REMOBS

(SETQ :WRAP NIL 
      :DSCALE NIL 
      NEWTURTLE NIL 
      :TSIZE 30.0 
      :RAD3 1.7320508 
      :PI 3.1415926 
      PI-OVER-180 (//$ :PI 180.0) 
      :TURTLE 0. 
      ;;TURTLE = DEFAULT CROSS
      HOME '(512. 512.) 
      :SCREENSIZE 512.) 

;;MAX SCALED X,Y COORDINATE
;;*PAGE

;;THE TURTLE

(DEFINE MAKTURTLE (PARSE L) FEXPR (X) (SETQ NEWTURTLE X)
				      ;;MAKTURTLE SHOULD BE FOLLOWED BY A LOGO LINE. 
				      ;;QUOTES ARE NOT NECESSARY.  SHOWTURTLE
				      ;;INSPECTS NEWTURTLE VARIABLE TO DECIDE WHICH
				      ;;TURTLE TO SHOW.
				      (HIDETURTLE)
				      (SHOWTURTLE)) 

(DEFINE OLDTURTLE NIL (SETQ NEWTURTLE NIL) (HIDETURTLE) (SHOWTURTLE)) 

;;MOVING THE TURTLE.  THE BASIC INTERFACE WITH THE DISPLAY IS "SETXY".

(DEFINE DELX (X) (SETXY (PLUS X :XCOR) :YCOR)) 

(DEFINE DELY (Y) (SETXY :XCOR (PLUS :YCOR Y))) 

(DEFINE DELXY (X Y) (SETXY (PLUS :XCOR X) (PLUS :YCOR Y))) 

;;POINTS

(DEFINE POINT ARGS 
	(COND ((= ARGS 0.) (DISAPOINT :PICTURE (XCOORD) (YCOORD) -1.))
	      ((= ARGS 1.)
	       (DISAPOINT :PICTURE (ROUND (CAR (ARG 1.))) (ROUND (CADR (ARG 1.)))))
	      ((= ARGS 2.)
	       (DISAPOINT (ARG 1.) (ROUND (CAR (ARG 2.))) (ROUND (CADR (ARG 2.)))))
	      ((= ARGS 3.) (DISAPOINT (ARG 1.) (ROUND (ARG 2.)) (ROUND (ARG 3.)))))) 

;;EXAMINING THE TURTLE'S STATE

(DEFINE TURTLESTATE NIL (CADDDR (CDDDR (CDR (DISCRIBE :PICTURE))))) 

;;DISPLAYING TEXT

(DEFINE SHOWTEXT NIL 
		     ;;CLEARS TEXT AND DISPLAYS SUBSEQUENT PRINTING.
		     (SETQ :SHOW T)
		     (OR :TEXT (SETQ :TEXT (DISCREATE :TEXTXHOME :TEXTYHOME)))
		     '?) 

(DEFINE HIDETEXT NIL (SETQ :SHOW NIL) '?) 

(DEFINE REMTEXT NIL (ERRSET (DISFLUSH :TEXT) NIL)
		    ;;CLEARS TEXT AND TURNS OFF DISPLAY OF SUBSEQUENT TEXT OFF.
		    (SETQ :SHOW NIL :TEXT NIL)
		    '?) 

(DEFINE MARK (X) 
		 ;;PUTS TEXT AT CURRENT TURTLE POSITION.
		 ((LAMBDA (^W :SHOW :TEXT :TEXTXHOME :TEXTYHOME) (TYPE X EOL))
		  T
		  T
		  :PICTURE
		  (XCOORD)
		  (YCOORD))) 

;;POTS
;;;JOYSTICK = POTS 66 (HORIZ) AND 67 (VERTICAL). MUST BE CALIBRATED.
;;;ORDINARY POTS 0 - 3777

(DEFINE DIALS (X) (QUOTIENT (PROG2 (MPX 1. NIL)
				   ;;RETURNS VALUE OF POT X AS DECIMAL BETWEEN 0 AND
				   ;;1.  LSH USED TO ELIMINATE BAD BIT FROM IMPX.
				   (LSH (LSH (IMPX X) 1.) -1.)
				   (MPX 0. NIL))
			    2047.0)) 

;;PLOTTER FUNCTIONS.

(DEFINE NOPLOT NIL (PLOT 0.) '?) 

;;CLOSES PLOTTER

(SETQ PLOTS NIL) 

;;PROTECTION AGAINST GC.

(DEFINE PLOTTER FEXPR (A) 
 ;;WITH NO ARG, THE CURRENT DISPLAY IS PLOTTED ON A FRESH PAGE; ELSE IT IS PLOTTED
 ;;OVER THE CURRENT PAGE.  ERROR IF PLOTTER UNAVAILABLE, OTHERWISE OPENS PLOTTER. 
 ;;NEW PAGE IF NO ARG.
 (OR (ERRSET (PLOT 63.) NIL) (ERRBREAK 'PLOTTER 'PLOTTER/ UNAVAILABLE))
 (OR A (NEXTPLOT))
 (AND
  PLOTS
  (IOG
   NIL
   ;;ANSWER Y IF PLOTTER IS DONE WITH OLD PLOTS.
   (TYPE '";IS PLOTTER DONE WITH YOUR PREVIOUS PLOTTING? "
	 EOL)
   (AND (ASK) (SETQ PLOTS NIL))))
 (PLOTLIST (SETQ A (MAPCAR '(LAMBDA (X) (GET (DISGORGE X) 'ARRAY))
			   (DISLIST)))
	   '/.)
 ;;POINTS ARE PLOTTED AS "."
 (SETQ PLOTS (APPEND PLOTS A))
 ;;SAVE POINTER TO LIST OF ARRAYS WHICH THE IPL JOB IS PLOTTING TO AVOID ARRAYS
 ;;BEING GC'ED.
 '?) 

;;ANY TTY CHARACTER CAN BE USED.

(DEFINE DISPAGE NIL 
	;;DISPLAYS 7X11 PAGE OUTLINE.
	((LAMBDA (OASTATE) 
		 (SETQ :PAGE (DISCREATE) :SNAPS (PUSH ':PAGE :SNAPS))
		 (DISALINE :PAGE 0. 1023.)
		 (DISALINE :PAGE 791. 1023.)
		 (DISALINE :PAGE 791. 0.)
		 (DISALINE :PAGE 0. 0.)
		 (DISINI OASTATE))
	 (DISINI 1.))
	'?) 

;;GLOBAL STATE
;;;
;;ALL OF THE FOLLOWING COMMANDS CAN TAKE AN OPTIONAL FIRST ARGUMENT EVALUATING TO
;;SOME DISPLAY ITEM.  OTHERWISE, THEY REFER TO THE :PICTURE.

(DEFINE BLINK ARGS (COND ((= ARGS 0.) (DISBLINK :PICTURE T)) ((DISBLINK (ARG 1.) T)))
		   '?) 

(DEFINE UNBLINK ARGS 
	(COND ((= ARGS 0.) (DISBLINK :PICTURE NIL)) ((DISBLINK (ARG 1.) NIL)))
	'?) 

(DEFINE MOTION ARGS (COND ((= ARGS 0.) (DISMOTION :PICTURE -1. -1. 100.))
			  ((DISMOTION (ARG 1.) -1. -1. 100.)))) 

(DEFINE SETHOME ARGS 
	(COND ((= ARGS 0.)
	       (DISLOCATE :PICTURE (+ (XHOME) (XCOORD)) (+ (YHOME) (YCOORD)))
	       (HOME))
	      ((= ARGS 1.) ((LAMBDA (:PICTURE) (SETHOME)) (ARG 1.)))
	      ((= ARGS 2.) (DISLOCATE :PICTURE (ROUND (ARG 1.)) (ROUND (ARG 2.))))
	      ((DISLOCATE (ARG 1.) (ARG 2.) (ARG 3.))))
	'?) 

(DEFINE BRIGHT ARGS 
		    ;;;1 < BRIGHTNESS < 8
		    ;;;(BRIGHT) = BRIGHTNESS OF :PICTURE
		    ;;;(BRIGHT :SCENE) = BRIGHTNESS OF :SCENE
		    ;;;(BRIGHT :SCENE #) SETS BRIGHTNESS OF
		    ;;;:SCENE TO #.
		    (COND ((= ARGS 0.) (CADDR (CDDR (DISCRIBE :PICTURE))))
			  ((= 1. ARGS) (CADDR (CDDR (DISCRIBE (ARG 1.)))))
			  ((BSL (ARG 1.) (ARG 2.) (SCALE (ARG 1.)))))) 

(DEFINE SCALE ARGS 
		   ;;;1 < SCALE < 4
		   ;;;(SCALE) = SCALE OF :PICTURE
		   ;;;(SCALE :SCENE) = SCALE OF :SCENE
		   ;;(SCALE :SCENE #) SETS SCALE OF :SCENE TO #.
		   (COND ((= ARGS 0.) (CADDR (CDDDR (DISCRIBE :PICTURE))))
			 ((= 1. ARGS) (CADDR (CDDDR (DISCRIBE (ARG 1.)))))
			 ((BSL (ARG 1.) (BRIGHT (ARG 1.)) (ARG 2.))))) 

(DEFUN BSL (ITEM BR SCALE) 
       (DISCHANGE ITEM (DIFFERENCE BR (BRIGHT ITEM)) (DIFFERENCE SCALE (SCALE ITEM)))
       (DISET ITEM 0. (LIST BR SCALE))) 

(DEFINE DSCALE ARGS (COND ((= ARGS 0.) :DSCALE)
			  ((= 1. ARGS)
			   (OR :DSCALE (SETQ :DSCALE 1.0))
			   (SETQ :XCOR (TIMES (QUOTIENT :XCOR (ARG 1.)) :DSCALE))
			   (SETQ :YCOR (TIMES (QUOTIENT :YCOR (ARG 1.)) :DSCALE))
			   (SETQ :DSCALE (FLOAT (ARG 1.)))))) 

;;MANIPULATING SCENES

(DEFINE PHOTO (ABB SNAP) (PARSE L) 
 ;;CREATES A NEW COPY OF :PICTURE ON TOP OF THE CURRENT ONE.  THE SNAP HAS A COPY OF
 ;;THE CURRENT TURTLE, WHICH EG (PHOTO "SCENE" SQUARE 100) WILL BE MOVED AROUND AS
 ;;THE PEN POSITION OF THE SNAP MOVES. 
 FEXPR (X)
       (PROG (:SNAP NAME) 
	     (SETQ NAME (READLIST (CONS ': (EXPLODE (EVAL (CAR X))))))
	     (COND ((MEMQ NAME :SNAPS) (ERRSET (DISFLUSH (SYMEVAL NAME)) NIL))
		   ((PUSH NAME :SNAPS)))
	     (COND ((CDR X)
		    ;;IF GIVEN A LINE OF CODE, WILL PRODUCE A SNAP WITH THAT NAME
		    ;;CONTAINING RESULT OF CODE
		    (APPLY 'PICTURE (CDR X))
		    (PUTPROP NAME (GET ':SNAP 'SNAP) 'SNAP))
		   ((DISPLAY (SETQ :SNAP (DISCOPY :PICTURE)) T)
		    (OR (= :TURTLE 0.) (DISMARK :SNAP (DISCOPY :TURTLE)))
		    (PUTPROP NAME (LIST :XCOR :YCOR :HEADING) 'SNAP)))
	     (RETURN (SET NAME :SNAP)))) 

(DEFINE ENTERSNAP (PARSE 1.) FEXPR (X) 
	;;EG (SNAP "SCENE") REBINDS WORLD TO NEW SNAP.
	(APPLY 'PHOTO (LIST (CAR X) '(HIDETURTLE)))
	(SETQ X (READLIST (CONS ': (EXPLODE (EVAL (CAR X))))))
	;;X=NAME OF SNAP.
	(CHANGEWORLD X)) 

(DEFINE ENDSNAP NIL (CHANGEWORLD ':PICTURE)) 

;;RETURNS WORLD TO ORIGINAL :PICTURE

(DEFINE PICTURE (PARSE L) FEXPR (X) 
	;;:SNAP BOUND TO PICTURE
	(SETQ :SNAP (DISCREATE (XHOME) (YHOME)))
	(DISALINE :SNAP (XCOORD) (YCOORD) 1.)
	(DISET :SNAP (PENSTATE))
	((LAMBDA (:PICTURE :TURTLE :XCOR :YCOR :HEADING) 
		 ;;BIND PROTECTS STATE AGAINST ^G.
		 (OR (= :TURTLE 0.) (SETQ :TURTLE (DISCOPY :TURTLE)))
		 (DISMARK :PICTURE :TURTLE)
		 (ERRSET (MAPC 'EVAL X))
		 (SETQ :SNAP :PICTURE)
		 (PUTPROP ':SNAP (LIST :XCOR :YCOR :HEADING) 'SNAP))
	 :SNAP
	 :TURTLE
	 :XCOR
	 :YCOR
	 :HEADING)
	:SNAP) 

;;CREATE A NEW DISPLAY ITEM, BIND :SNAP TO IT, EXECUTE COMMAND LINE, SAVE (HERE) AS
;;SNAP PROPERTY OF :SNAP.  COMMANDS ONLY AFFECT :SNAP, WHICH IS A GLOBAL VARIABLE. 

(DEFINE REMSNAP (:SNAP) 
	(DISFLUSH :SNAP)
	(PROG (SNAPS SNAPNAME) 
	      (SETQ SNAPS :SNAPS)
	 LOOP (COND ((NULL SNAPS) (RETURN :SNAP))
		    ((EQUAL :SNAP (SYMEVAL (SETQ SNAPNAME (CAR :SNAPS))))
		     (REMPROP SNAPNAME 'SNAP)
		     (MAKUNBOUND SNAPNAME)
		     (SETQ :SNAPS (DELETE SNAPNAME :SNAPS))
		     (RETURN :SNAP)))
	      (POP SNAPS)
	      (GO LOOP))) 

(DEFUN CHANGEWORLD (SNAPNAME) 
       ;;EG SNAPNAME = :FOO
       (PROG (STATE) 
	     (SETQ :SNAP (COND ((AND (EQ SNAPNAME ':PICTURE)
				     (GET SNAPNAME 'ORIGINAL)))
			       ((SYMEVAL SNAPNAME))))
	     (OR (ERRSET (DISCRIBE :SNAP) NIL)
		 (ERRBREAK 'CHANGEWORLD
			   (LIST SNAPNAME 'IS/ NOT/ A/ SNAP)))
	     (AND WORLD
		  ;;REMEMBER OLD WORLD IF NAMED.
		  (NOT (NUMBERP WORLD))
		  (COND ((EQ WORLD ':PICTURE)
			 (PUTPROP ':PICTURE :PICTURE 'ORIGINAL))
			((SET WORLD :PICTURE)))
		  (PUTPROP WORLD (LIST :XCOR :YCOR :HEADING) 'SNAP))
	     (SETQ WORLD SNAPNAME 
		   :PICTURE :SNAP 
		   ;;:PICTURE NOW BECOMES :SNAP.
		   STATE (COND ((GET SNAPNAME 'SNAP))
			       ;;STATE OF :SNAP IS FOUND
			       ((LIST (COND (:DSCALE (QUOTIENT (XCOORD) :DSCALE))
					    ((XCOORD)))
				      (COND (:DSCALE (QUOTIENT (YCOORD) :DSCALE))
					    ((YCOORD)))
				      0.0))) 
		   :XCOR (CAR STATE) 
		   :YCOR (CADR STATE) 
		   :HEADING (CADDR STATE) 
		   :TURTLE (TURTLESTATE))
	     ;;TURTLE COMMANDS NOW REFER TO THE TURTLE WHICH RESIDES IN :SNAP. 
	     (RETURN :SNAP))) 

(DEFINE RESNAP (PARSE L) FEXPR (X) 
	;;E.G.  RESNAP :P1 FD 100 EXECUTES CODE WITH COPY OF TURTLE IN THAT SNAP.
	(COND ((CDR X)
	       (PROG (WORLD SNAPNAME :PICTURE :TURTLE :XCOR :YCOR :HEADING) 
		     (CHANGEWORLD (SETQ SNAPNAME (CAR X)))
		     ;;REBINDS STATE TO SNAP.
		     (ERRSET (MAPC 'EVAL (CDR X)))
		     (PUTPROP SNAPNAME (LIST :XCOR :YCOR :HEADING) 'SNAP)
		     (RETURN (SET SNAPNAME (SETQ :SNAP :PICTURE)))))
	      ((CHANGEWORLD (CAR X))))) 

(DEFINE SHOW (DNAME) 
		     ;;SHOW TRANSLATES THE SNAP TO CURRENT TURTLE POSITION AND
		     ;;DISPLAYS IT. 
		     (DISLOCATE DNAME (+ (XHOME) (XCOORD)) (+ (YHOME) (YCOORD)))
		     (DISPLAY DNAME T)) 

(DEFINE HIDE (DNAME) (DISPLAY DNAME NIL)) 

(DEFINE SHOWSNAP (X) 
	;;SHOWSNAP MAKES A COPY OF ITS INPUT, AND ITS INFERIORS, AND DISPLAYS IT AT
	;;THE CURRENT POSITION OF THE TURTLE.  COPY IS LINKED.
	(PROG (C) 
	      (SETQ C (DISCOPY (COND ((DISLIST X) (CAR (DISLIST X))) (X))))
	      (DISLOCATE C (+ (XHOME) (XCOORD)) (+ (YHOME) (YCOORD)))
	      (DISLINK X C T)
	      (DISPLAY C T)
	      (RETURN C))) 

(DEFINE HIDESNAP (X) (COND ((DISLIST X) (MAPC 'DISFLUSH (DISLIST X))))
		     (DISPLAY X NIL)) 

;;GLOBAL NAVIGATION

(DEFINE TOWARDS ARGS 
	;;DIRECTION OF A POINT RELATIVE TO TURTLE HEADING.  +0-360 DEGREES.  POINT =
	;;(X Y).
	(PROG (X Y TEMP) 
	      (COND ((= ARGS 1.) (SETQ X (CAR (ARG 1.))) (SETQ Y (CADR (ARG 1.))))
		    ((SETQ X (ARG 1.)) (SETQ Y (ARG 2.))))
	      (COND ((MINUSP (SETQ TEMP (DIFFERENCE (BEARING X Y) (HEADING))))
		     (RETURN (PLUS 360. TEMP)))
		    ((RETURN TEMP))))) 

(DEFINE BEARING ARGS 
	(PROG (X Y TEMP X1 Y1) 
	      (COND ((= ARGS 1.) (SETQ X (CAR (ARG 1.))) (SETQ Y (CADR (ARG 1.))))
		    ((SETQ X (ARG 1.)) (SETQ Y (ARG 2.))))
	      (SETQ X1 (DIFFERENCE X :XCOR) Y1 (DIFFERENCE Y :YCOR))
	      ;;;+0-360 DEGREES. POINT = (X Y)
	      ;;MADE NECESSARY SINCE (ATAN 0 0) = 45 DEGREES.
	      (AND (LESSP (ABS X1) 0.01) (LESSP (ABS Y1) 0.01) (RETURN 0.))
	      (SETQ TEMP (*$ 180.0
			     (//$ (ATAN (DIFFERENCE (FLOAT X) :XCOR)
					(DIFFERENCE (FLOAT Y) :YCOR))
				  :PI)))
	      (AND (MINUSP TEMP) (SETQ TEMP (DIFFERENCE 360. TEMP)))
	      (RETURN (OR (AND (FIXP X) (FIXP Y) (ROUND TEMP)) TEMP)))) 

(DEFINE RANGE ARGS 
	(PROG (X Y TEMP) 
	      (COND ((= ARGS 1.) (SETQ X (CAR (ARG 1.))) (SETQ Y (CADR (ARG 1.))))
		    ((SETQ X (ARG 1.)) (SETQ Y (ARG 2.))))
	      (SETQ TEMP (SQRT (PLUS (EXPT (DIFFERENCE X :XCOR) 2.)
				     (EXPT (DIFFERENCE Y :YCOR) 2.))))
	      (RETURN (OR (AND (FIXP X) (FIXP Y) (ROUND TEMP)) TEMP)))) 

;;GLOBAL VARIABLES - FOLLOWS ANY POSSIBLE REMOBS

(SETQ :SNAPS NIL) 

(SETQ :TEXTXHOME 0.) 

;;TEXT ARRAY X COORDINATE

(SETQ :TEXTYHOME 1000.) 

;;TEXT ARRAY Y COORDINATE
;;;A TURTLE SCENE CONSISTS OF ANY SUBSET OF FOLLOWING ARRAYS:
;;;	:TURTLE
;;;	:PICTURE
;;;	:TEXT
;;;	AND ANY SNAPS THAT HAVE BEEN CREATED.
;;;
;;;TO SAVE A TURTLE SCENE, 
;;:SNAPS IS A LIST OF ARRAY NAMES BUG IN SLAVE - DISGOBBLE CAUSES SLAVE TO DIE.

(DEFINE SAVESNAPS FEXPR (X) 
	(MAPC '(LAMBDA (X) (PUTPROP X
				    (GET (DISGORGE (SYMEVAL X)) 'ARRAY)
				    'ARRAY))
	      :SNAPS)
	(APPLY 'DUMPARRAYS
	       (LIST :SNAPS
		     (FILESPEC (COND ((CDR X) X) ((LIST (CAR X) 'SNAPS))))))
	(MAPC '(LAMBDA (X) (REMPROP X 'ARRAY)) :SNAPS)) 

(DEFINE GETSNAPS FEXPR (X) 
	(MAPC '(LAMBDA (Y) ((LAMBDA (:PICTURE SNAPNAM) 
				    (SETQ :PICTURE (DISGOBBLE :PICTURE))
				    (SET SNAPNAM :PICTURE)
				    (PUTPROP SNAPNAM
					     (LIST (XCOORD) (YCOORD) 0.0)
					     'SNAP)
				    (COND ((MEMQ SNAPNAM :SNAPS)
					   (TYPE '/;
						 SNAPNAM
						 '" CONFLICTS"
						 EOL))
					  ((PUSH SNAPNAM :SNAPS))))
			    (CAR Y)
			    (CADR Y)))
	      (LOADARRAYS (FILESPEC X)))) 

;;;ARC PROCEDURES

(SETQ :POLYGON 30.) 

(DEFINE ARC (RADIUS DEGREES) 
	(PROG (HT SIDE TURN SIDES CENTER) 
	      (COND ((= :TURTLE 0.)) ((SETQ HT T) (HIDETURTLE)))
	      (SETQ SIDE (TIMES 2. RADIUS (SIN (QUOTIENT :PI :POLYGON))) 
		    TURN (QUOTIENT 360.0 :POLYGON) 
		    SIDES (QUOTIENT DEGREES TURN) 
		    CENTER (HERE))
	      (PENUP)
	      (FORWARD RADIUS)
	      (RIGHT 90.)
	      (PENDOWN)
	 LOOP (COND ((LESSP SIDES 1.)
		     (RIGHT (QUOTIENT TURN 2.))
		     (FORWARD (TIMES SIDES SIDE)))
		    (T (RIGHT (QUOTIENT TURN 2.))
		       (FORWARD SIDE)
		       (RIGHT (QUOTIENT TURN 2.))
		       (SETQ SIDES (DIFFERENCE SIDES 1.))
		       (GO LOOP)))
	      (PENUP)
	      (SETXY (CAR CENTER) (CADR CENTER))
	      (SETHEAD (PLUS (CADDR CENTER) DEGREES))
	      (PENDOWN)
	      (AND HT (SHOWTURTLE))
	      (RETURN '?))) 
