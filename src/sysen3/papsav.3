	TITLE PAPSAV

	; EJS (2018-12-20): Source reconstructed CHANNA;RAKASH PAPSAV binary.
        ; This reconstructed version uses macros from SYSENG; CALRET > as the original
	; source did. The original PAPSAV shared some code with SYSEN1;SYSMSG > (which
	; also inserted SYSENG; CALRET >). Where applicable, the source from SYSMSG was
	; used in this reconstruction.
	;
	; EJS (2018-12-21): This version uses macros from SYSMSG to build table
	; of patches (ABSTB1).

.INSRT SYSENG;CALRET >

;;; DEFINE MACROS SO THAT SYSTEM VARIABLES ACCESSED
;;; THROUGH ABS PAGES CAN BE REFERENCED IN A NATURAL WAY

DEFINE CONC A,B
A!B!TERMIN

DEFINE ABSREF SYMS
DEFINE ABSTAB
IRPW SYM,,[SYMS]
IFSE [SYM]----, IMMEDS:	;FROM HERE DOWN ARE NOT ADDRESSES
.ELSE [  SQUOZE 0,SYM
  CONC ABSRF",\.IRPCNT,ABS
  CONC [EXPUNGE ABSRF"]\.IRPCNT,ABS
]
TERMIN
TERMIN
IRPW SYM,,[SYMS]
IFSN [SYM]----, ABSRF. SYM,\.IRPCNT
TERMIN
TERMIN

DEFINE ABSRF. SYM,CT
ABSRF"!CT!ABS==0
IF1,[DEFINE SYM ?MOD
(MOD)[.,,ABSRF"!CT!ABS]TERMIN
]
IF2,[DEFINE SYM ?MOD
(MOD)<ZZZ==ABSRF"!CT!ABS ? ABSRF"!CT!ABS==[.,,ZZZ] ? ZZZ>TERMIN
]
TERMIN

.BEGIN ABSRF		;PLACE TO KEEP NNNABS SYMBOLS
.END

ABSREF [SYSMBF		;SYSTEM MESSAGE BUFFER
	TOIP		;TTY OUTPUT PTR
	TOBEP		;.., END OF BUFFER
	TOOP		;output buffer output pointer
----
	TOBL		;TTY OUTPUT BUFFER LENGTH
	SYSCON		;SYSTEM TTY NUMBER
	SYSMLNG		;LOG 2 OF NUMBER OF 4-WORD BLOCKS
]

a=4
b=5
c=6
f=7
pt=10
ch=11
count=12

tyic==2 ; tty input channel
tyoc==1 ; tty output channel
tyo=<.iot tyoc,> ; instruction to output a char

	0		;not sure why this is needed

; SYSTEM MESSAGE BUFFER CONTAINS 8-WORD ENTRIES AS FOLLOWS:
;	ABCDEF,,ASCIZ
;	ARG1
;	...
;	ARG6
;	TIME
; A..F = FORMAT OF ARG1..ARG6 RESPECTIVELY, CODED:
FMTBL:	0	;0 END OF MESSAGE
	TYPOCT	;1 FULL WORD OCTAL
	TYPDEC	;2 FULL WD DECIMAL
	TYPHAF	;3  " WITH COMMAS
	TYCRLF	;4 DO CR
	CPOPJ	;5 ?
	TYPSIX	;6 SIXBIT
	TYPASZ	;7 ASCIZ

CPOPJ:	POPJ P,

feep:   ASCIZ/** /
CRLF:	ASCIZ/
/

CMACMA:	ASCIZ/,,/

SEP:	ASCIZ/-----
/

bletch: asciz\
WRONG SYSTEM VERSION - REPURIFY
\

MEMHOL:	ASCIZ\
WARNING: THERE IS A HOLE IN MEMORY
\

;;; MAIN PROGRAM

PROGRAM SYSMSG

	REGISTER A,B,C,F,PT,CH,COUNT

	.call open,[[.uao,,tyoc],[sixbit/DSK/],[sixbit/CDATA/],[360000,,000000],[sixbit/DRAGON/]]
   	  .value
	CALL RITUAL		;ASSURANCE OF PURITY

	MOVEI COUNT, 1		;SET UP COUNT OF MESSAGE SLOTS
	LSH COUNT, SYSMLNG	;instruction patched through abstb1 (SYSMLNG)
	movei pt,SYSMBF         ; instruction patched through abstb1 (SYSMBF)
	jrst papsav

g00002:
	skipn a,(pt)
	  jrst nxloop
	jumpge a,g00002+5
	movei t1,[feep]
	pushj p,type
	hllz f,.prsva
	hrli a,440700
	movei c,t1(pt)
loop1:
	ildb b,.prsva
	jumpe b,g00013
	caie b,"~
	jrst loop1+6
	pushj p,argot
	jrst g00011
	tyo b
g00011:
	jrst loop1
g00013:
	tlnn f,purify"gotit+4
	  jrst g00014
	tyo [" ]
	pushj p,argot
	jrst g00013
g00014:
	movei t1,[crlf]
	pushj p,type
nxloop:
	addi pt,4
	sojg count,g00002
g00003:
	movei t1,[sep]
	pushj p,type

papsav:	MOVEI C, SYSCON		;-> SYSTEM JOB TTY (patched by abstb1 (SYSCON))
	MOVE PT, TOOP(C)	;SCAN THROUGH (patch by abstb1 (TOOP))

SYFNDL:	PUSHJ P,SYGET
	tyo a
	cain a,^M		; is it a CR
	  tyo [^J]		; emit a linefeed
	jrst syfndl

SYGET0:	CAMN PT,TOIP(C)		; patched by abstb1 (TOIP)
	  .hang
	CAMN PT,TOBEP(C)	; get chr from tty buf (patched by abstb1 (TOBEP)
	  SUBI PT,TOBL		; with wrap-around (patched by abstb1 (TOBL))
	ILDB A,PT		; GET char
	POPJ P,

SYGET:	PUSHJ P,SYGET0		; routine to get chr and do %TD hacks
	trnn a,200		; and do special char processing
	  popj p,		; normal char, just return
	CAIN A,%TDFS		; cursor forward one column
	  jrst [movei a,40 ? popj p,]
	CAIN A,%TDMV0		; move cursor, followed by new vert pos, new hor pos
	  JRST SYGET1
	CAILE A,%TDMV1		; dummy command created by TYMOV
	  JRST SYGET
SYGET1: PUSHJ P,SYGET0		; gobble cursor motion
	PUSHJ P,SYGET0		; assuming intr level has processed
	trze a,200
	  jrst syget1
	CAIE A,0		; skip if is probably crlf
	  skipa a,[" ]		; otherwise is probably space
	MOVEI A,^M		; now change cursor motion to crlf
CPOPJ: POPJ P,

KILL:	.BREAK 16,040000

ARGOT:	LDB B,[300300,,F]	; pick up arg type code
	CALL @FMTBL(B),@C	;DISPLAY THE ARGUMENT
	LSH F,3			; advance to next type code
	AOJA C,CPOPJ		; advance to next arg
.end

;;; ROUTINE TO TYPE AN ASCIZ STRING

TYPE:  PROCEDURE STRING

	REGISTER PT,CH

	MOVEI PT, STRING	;SET UP B.P. TO STRING
	TLOA PT, 440700		;..
LOOP:	TYO CH
	ILDB CH, PT		;GET NEXT CHAR
	JUMPN CH, LOOP		;AND IF NOT DONE, TYPE IT
	RETURN
.END

;;; ROUTINES TO FORMAT DATA IN WONDROUS WAYS

TYPOCT:  PROCEDURE DATA

	REGISTER LH,RH

	HLRZ LH,DATA
	HRRZ RH,DATA
	IF [JUMPN LH,][
		CALL TYPNUM,LH,[8.]
		CALL TYPE,CMACMA
		      ]
	CALL TYPNUM,RH,[8.]
	RETURN
.END

TYPDEC:  PROCEDURE DATA

	REGISTER DAT

	IF [SKIPL DAT, DATA][	;PUT MINUS SIGN IF NEEDED
	   TYO ["-]
	   MOVMS DAT
	   ]
	CALL TYPNUM,DAT,[10.]
	RETURN
	.END

TYPNUM:  PROCEDURE DATA,RADIX

	REGISTER NUM,REM

	MOVE NUM, DATA
	PUSHJ P, FROB
	RETURN

FROB:	IDIV NUM, RADIX
	HRLM REM, (P)
	SKIPE NUM
	 PUSHJ P, FROB
	HLRZ REM, (P)
	ADDI REM, "0
	TYO REM
	POPJ P,
	.END

TYPHAF:  PROCEDURE DATA

	REGISTER DAT,LH

	MOVE DAT, DATA
	IF [TLNN DAT,-1][	;IF HAS LEFT HALF
	   HLRZ LH, DAT
	   CALL TYPOCT,LH
	   TYO [",]
	   TYO [",]
	   ]
	HRRZS DAT
	CALL TYPOCT,DAT
	RETURN
	.END

TYCRLF:  PROCEDURE IGNORED

	CALL TYPE,CRLF
	RETURN
	.END

TYPSIX:  PROCEDURE DATA

	REGISTER CH,WRD

	MOVE WRD, DATA
6LOOP:	SETZ CH,
	LSHC CH, 6
	ADDI CH, 40
	TYO CH
	JUMPN WRD, 6LOOP
	RETURN
	.END

TYPASZ:  PROCEDURE PT

	REGISTER A

	MOVE A,PT		;CAN'T INDIRECT PARAM
	CALL TYPE,@A
	RETURN
	.END

;;; PURIFICATION RITUAL

pure:	0

OITSVR:	0			;ITS version purified for
OUSRST:	0			;extra check

RITUAL: PROCEDURE

	skipe pure
	  jrst .+2
	pushj p,purify
	MOVE TT, [SQUOZE 0,ITSVRS]	;SEE IF SYSTEM CHANGED
	.EVAL TT,
	  JFCL
	MOVE T, [SQUOZE 0,USRSTG]	;see if user page map changed
	.EVAL T,
	  JFCL
	CAMN TT,OITSVR		;is ITS version the same>
	  CAME T,OUSRST		;and user page map
	    JRST NOGOOD		; nope, error out
	RETURN			; all good, return

NOGOOD:	CALL TYPE, bletch	; wrong system version, purify
	JRST SYSMSG"KILL
.END

CONSTANTS
VARIABLES

ABSTB1:	ABSTAB
ABSTB2:

PURIFY:  PROCEDURE 

	REGISTER I,L,V,LIM

	MOVEI LIM, IMMEDS-ABSTB1	;LIMIT ON REMAPPABLENESS
	MOVSI I, <ABSTB1-ABSTB2>/2	;SCAN ABSTAB
EVLOOP:	MOVE V,ABSTB1(I)		; get symbol
	.EVAL V,			; evaluate it
	  .VALUE			; not there???
	CAIG LIM,(I)			; skip following code
	  JRST EVLP00			;  if immediate symbol
	CAIGE V,REMAPT			; remap low core
	  SUBI V,REMAPT			; into high core
EVLP00:	ADDI I, 1
	MOVE TT,ABSTB1(I)		; follow patch list
PLOOP:	JUMPE TT,EVLPNX			; jump if end of list
	MOVE L,TT
	HLRZ TT,(L)			;LOC TO PATCH
	HRRM V,(TT)			;PATCH IT
	HRRZ TT,(L)			;LINK TO NEXT
	JRST PLOOP			;AND TRY AGAIN

EVLPNX:	AOBJN I,EVLOOP			; next symbol

; HAVING PATCHED, SET UP PAGE TABLE
; FOR NOW, WE DON'T ACTUALLY PURIFY ANY PAGES...

	setom pure
	MOVE v, [SQUOZE 0,ITSVRS]	; get its version symbol
	.eval v,			; evaluate it
	  .value			; what???
	movem v,oitsvr			; store its version
	MOVE V, [SQUOZE 0,USRSTG]	;see if user page map changed
	.EVAL V,			
	  .VALUE
	MOVEM V,OUSRST

	SETZM V
	MOVEI TT, REMAPT_-10.		;GET ABS PAGES
	HRLI TT, <REMAPT-400000>_-10.	;FROM 0 TO 400000
	MOVE T, TT
GETMOR:
;	.CALL CORBLK,[%climm,,%cbred+%cbndr,%climm,,%jself,TT,%climm,,400000,T]
	.CALL CORBLK,[#210000,#-1,TT,#400000,T]
	  JRST .+2		; error return
	JRST GOTIT

	.SUSET [.RBCHN,,V]	; find out what lost
	.CALL STATUS,V,V	; get error code
	  .VALUE
	LDB V,[270600,,V]
	CAIE V,%eropg		; can't get that address
  	  .VALUE		; no - unclear
	ADD TT,[40,,40]		; yes - biting MD10's have a 32K hole!
	MOVE T,TT
	JUMPL TT,GETMOR

GOTIT:	skipe v
	CALL TYPE,MEMHOL	; type memory hole message
	MOVEI TT, <1000000-REMAPT>_-10.	;DO REMAPPAGE
	HRLI TT, -<REMAPT_-10.>
	SETZ T,
;	.CALL CORBLK,[#%climm,,%cbred+%cbndr,#%climm,,%jself,TT,#%climm,,400000,T]
	.CALL CORBLK,[#210000,#-1,TT,#400000,T]
	  .VALUE
	RETURN
.END PURIFY

CONSTANTS
VARIABLES

REMAPT=<.+1777>&776000	;FIRST NON USED PAGE

END SYSMSG
