;;; -*-MIDAS-*-
TITLE CHAHTB

ifndef its,[
ife .osmid-<sixbit /ITS/>,its==1
.else its==0
]
ifndef 10x,[
ife .osmid-<sixbit /TENEX/>,10x==1
.else 10x==0
]
ifndef 20x,[
ife .osmid-<sixbit /TWENEX/>,20x==1
.else 20x==0
]
ifndef waits,[
ife .osmid-<sixbit /SAIL/>,waits==1
.else waits==0
]

tnx==10x\20x

ifn tnx, .decsav

a=:1
b=:2
c=:3
d=:4
e=:5
h=:7
t=:10
tt=:11
r=:12
s=:13
u=:14
l=:15
x=:16
p=:17

svrskt==:121

lpdl==100
.vector pdl(lpdl)
.vector linbuf(20)


ifn tnx,[

ifn 10x,.insrt <chaos>chasym
ifn 20x,.insrt sys:chasym

go:	reset
	move p,[-lpdl,,pdl-1]
	movsi a,(gj%sht)
	hrroi b,[asciz /CHA:.HOSTAB/]
	gtjfn
	 jsp l,lose
	move b,[080000,,of%rd+of%wr]
	openf
	 jsp l,lose
	movei b,.moopn
	mtopr
	movem a,chajfn'
];ifn tnx



ifn its,[

icpch==:10
chich==:11
choch==:12
dskch==:13

define syscal name,args
.call [setz ? sixbit /name/ ? args ((setz))]
termin

.insrt system;chsdef

$$arpa==1			; could set $$chaos and eliminate lots of
				; code below
$$serve==1
.insrt syseng;netwrk

go:	.close 1,		; close loading channel
	move p,[-lpdl,,pdl-1]
	move t,[jsr tsint]
	movem t,42		; Any IOC error means we should go away,
				; connection gone
	.suset [.smask,,[%piioc]]

.scalar chaosp
	setom chaosp
	.suset [.rjname,,a]
	came a,[sixbit /chaos/]
	 jrst arpa

	syscal chaoso,[1000,,chich ? 1000,,choch ? 1000,,1]	; window size of 1
	 jsp l,lose

;;; Construct and send the LSN packet.

.vector pktbuf(%cpmxw)		; packet buffer

	movei t,%colsn		; opcode = LSN
	dpb t,[pktbuf+$cpkop]
	move t,[.byte 8 ? "H ? "O ? "S ? "T ]
	movem t,pktbuf+%cpkdt
	move t,[.byte 8 ? "A ? "B ]
	movem t,pktbuf+%cpkdt+1
	movei t,6
	dpb t,[pktbuf+$cpknb]
	syscal pktiot,[1000,,choch ? 1000,,pktbuf]
	 jsp l,lose

;;; Wait for the RFC to come.

	movei a,5*30.		; 5 second timeout
	skipe debug
	 hrloi a,177777		; or infinite if debug mode
	syscal netblk,[1000,,choch ? 1000,,%cslsn ? a ? 2000,,b]
				; wait for RFC
	 jsp l,lose
	caie b,%csrfc		; RFC received state
	 jsp l,lose

;;; Read RFC.

	syscal pktiot,[1000,,chich ? 1000,,pktbuf]	; read RFC packet
	 jsp l,lose
 	ldb e,[pktbuf+$cpknb]	; no. of data bytes
	caie e,6
	 jsp l,lose

;;; Open the connection

	movei t,%coopn		; opcode = OPN
	dpb t,[pktbuf+$cpkop]
	movei t,0
	dpb t,[pktbuf+$cpknb]	; no. data bytes = 0
	syscal pktiot,[1000,,choch ? 1000,,pktbuf]	; send OPN
	 jsp l,lose
	jrst endicp

arpa:	setzm chaosp

	movei a,icpch
	movei b,svrskt
	move c,[10040+.uii,,10040+.uio]
	pushj p,netwrk"arpsrv
	 jsp l,lose

endicp:
];ifn its


ifn waits,[

svrrts==-1				; include server routines
errtns==-1				; include error routines
errhan==-1				; include automagic error handling
if2 errins==<jsp l,lose>		; error instruction

if1 expunge getchr,getlin
.insrt netwrk[net,mrc]

go:	jfcl
	reset
	move p,[-lpdl,,pdl-1]
	move ['hostab]
	setnam
	movei [debreak ? jsp l,lose]
	movem jobapr
	clkint 5.*60.*60.		; must die if around too long

;;; Listen for a connection on our socket

	movei svrskt
	movem lsnskt
	pushj p,listen

];ifn waits

	pushj p,hstmap

loop:	pushj p,getlin		;Read host name
	pushj p,hstnam		;Get site from host name
	 jrst nohost		;No such host
	movei b,[asciz /NAME /]
	pushj p,strout
	hlrz b,stlnam(h)
	add b,hstadr
	movem b,name0'
	pushj p,strout
	pushj p,newlin
	hrrz t,strmch(h)
	jumpe t,loop1
	movei b,[asciz /MACHINE-TYPE /]
	pushj p,strout
	add t,hstadr
	movei b,(t)
	pushj p,strout
	pushj p,newlin
loop1:	hlrz t,stlsys(h)
	jumpe t,loop2
	movei b,[asciz /SYSTEM-TYPE /]
	pushj p,strout
	add t,hstadr
	movei b,(t)
	pushj p,strout
	pushj p,newlin
loop2:	hrrz t,stradr(h)
loop3:	add t,hstadr
	move tt,addadr(t)	;Get host address
	ldb d,[331000,,tt]	;Get network number
	movsi e,-nnets
loop4:	hlrz a,nettab(e)
	came d,a
	 aobjn e,loop4
	jumpge e,loop5
	hrrz a,nettab(e)
	pushj p,(a)
loop5:	hrrz t,adrcdr(t)
	jumpn t,loop3
loop6:	move e,hstadr
	move e,namptr(e)	;Name table start
	add e,hstadr
	move t,(e)		;Number of entries
	move tt,1(e)		;Number of words per entry
	addi e,2		;Point to start of table
loop7:	sojl t,loop9		;Count entries checked
	hlrz d,nmlsit(e)	;Get address entry
	add d,hstadr
	came d,h		;Same host?
	 jrst loop8		;No
	hrrz d,nmrnam(e)	;Get host name
	add d,hstadr
	camn d,name0		;Unless official name
	 jrst loop8
	movei b,[asciz /NAME /]
	pushj p,strout
	movei b,(d)
	pushj p,strout
	pushj p,newlin
loop8:	add e,tt
	jrst loop7
loop9:	pushj p,sndeof
	jrst loop

getlin:	move d,[440700,,linbuf]
getln0:	pushj p,getchr
ifn its,skipn chaosp		; on chaosnet accept only 215
	 caie b,15		; on arpanet accept either
	  cain b,215
	   jrst getln1
	cail b,"a
	 caile b,"z
	 skipa
	 subi b,"a-"A
	idpb b,d
	jrst getln0

getln1:	setz b,			;Fill out with nulls to word boundary
getln2:	idpb b,d
	tlne d,760000
	 jrst getln2
	popj p,

nohost:	movei b,[asciz /ERROR No such host/]
	pushj p,strout
	pushj p,newlin
	jrst loop9

;;; The format of the compiled HOSTS2 file is:

hstsid==0	; wd 0	SIXBIT /HOSTS2/
namptr==10	; wd 10 Address in file of NAME table.
sitptr==11	; wd 11	Address in file of SITE table.
netptr==12	; wd 12 Address in file of NETWORK table.

;;NETWORK table
;; wd 0	Number of entries in table.
;; wd 1	Number of words per entry. (2)
netnum==0	; wd 0	network number
ntlnam==1	; wd 1 LH - address in file of name of network
ntrtab==1	; wd 1 RH - address in file of network's address table

;;ADDRESS table(s)
;; wd 0	Number of entries in table.
;; wd 1	Number of words per entry. (2)
addadr==0	; wd 0	Network address of this entry including network number
adlsit==1	; wd 1 LH - address in file of SITE table entry
adrcdr==1	; wd 1 RH - address in file of next ADDRESS entry for this site
		;	    0 = end of list

;;SITE table
;; wd 0	Number of entries in table.
;; wd 1	Number of words per entry. (3)
stlnam==0	; wd 0 LH - address in file of official host name
stradr==0	; wd 0 RH - address in file of first ADDRESS table entry for
		;	    this site.  Successive entries are threaded
		;	    together through ADRCDR.
stlsys==1	; wd 1 LH - address in file of system name (its, tip, tenex, etc.)
		;			may be 0 => not known.
strmch==1	; wd 1 RH - address in file of machine name (pdp10, etc.)
		;			may be 0 => not known.
stlflg==2	; wd 2 LH - flags:
stfsrv==400000	;	4.9 1 => server site (according to nic)
		; wd 2 RH - not used

;;NAMES table:
;; wd 0	Number of entries
;; wd 1	Number of words per entry. (1)
nmlsit==0	; lh	address in file of SITE table entry for this host.
nmrnam==0	; rh	address in file of host name

;;; All names are ASCIZ strings, all letters upper case.
;;; The strings are stored before, after and between the tables.
;;; All strings are word-aligned, and fully zero-filled in the last word.

;;; Network addresses are defined as follows, for purposes of this table:
;;;    4.9     0
;;;    4.8-4.1 network number
;;;    Chaos net (number 7):
;;;	3.9-2.8	0
;;;	2.7-1.1 address (2.7-1.9 subnet, 1.8-1.1 host)
;;;    Arpanet (number 12):	(note, old-format Arpanet addresses
;;;	3.9-3.8	0	 	never appear in the host table.)
;;;	3.7-2.1	IMP
;;;	1.9	0
;;;	1.8-1.1	Host
;;;    Dialnet (number 26):
;;;	3.9-3.1	0
;;;	2.9-1.1	address in file of ASCIZ string of phone number
;;;    LCSnet (number 22)
;;;	3.9 0
;;;	3.8-3.1 host
;;;	2.9-1.9 0
;;;	1.8-1.1 subnet
;;;    SUnet (number 44)
;;;	3.9-2.9 0
;;;	2.8-2.1 subnet
;;;	1.9 0
;;;	1.8-1.1 host

nw%chs==7	;Chaos net
nw%arp==12	;Arpanet
nw%dln==26	;Dialnet
nw%lcs==22	;LCSnet
nw%su==44	;SUnet

hstnam:	movei r,linbuf		;byte pointer to test
	move a,hstadr
	move a,namptr(a)	;pointer to name table
	add a,hstadr
	movei s,0		;low
	move x,(a)		;high
	move c,1(a)		;size of each entry
	movei d,2(a)		;start of name table
hstnm1:	movei u,(x)		;high
	subi u,(s)		;-low
	lsh u,-1		;/2
	jumpe u,hstnmb		;failed to find anything, return
	addi u,(s)		;low+(high-low)/2
	movei e,(u)		;get copy
	imuli e,(c)		;*size
	addi e,(d)		;offset to start of name table
	hrrz a,nmrnam(e)	;get name table entry
	add a,hstadr		;make absolute
	movei b,(r)		;get given string
	pushj p,cmpsnm		;compare the two strings
	 jrst hstnm2		;equal, this is match
	 skipa s,u		;test<given, low_test
	  move x,u		;test>given, high_test
	jrst hstnm1
hstnm2:	hlrz h,nmlsit(e)	;get site entry from name
	add h,hstadr
	aos (p)
hstnmb:	popj p,

;;; compare two site strings in a and b, return +1 a=b, +2 a<b, +3 a>b
;;; strings assumed uppercase, smashes a, b, t, tt
cmpsnm:	move t,(a)
	lsh t,-1		;unsigned comparison
	move tt,(b)
	lsh tt,-1
	camn t,tt
	 jrst [	trnn t,177	;end of string?
		 popj p,	;yes, they match thenn
		addi a,1
		aoja b,cmpsnm]	;so far so good, go on
	caml t,tt		;one skip a<b, two skips a>b
cpop2j:	 aos (p)
cpop1j:	aos (p)
cpopj:	popj p,

nettab:	nw%arp,,arpprt
	nw%chs,,chsprt
	nw%dln,,dlnprt
	nw%lcs,,lcsprt
	nw%su,,suprt
nnets==.-nettab

arpprt:	movei b,[asciz /ARPA /]
	pushj p,strout
	ldb b,[001100,,tt]	;Get host number
	pushj p,decout
	movei b,"/
	pushj p,chrout
	ldb b,[111000,,tt]	;Get IMP number
	pushj p,decout
	jrst newlin

chsprt:	movei b,[asciz /CHAOS /]
	pushj p,strout
	ldb b,[002000,,tt]
	pushj p,octout
	jrst newlin

dlnprt:	movei b,[asciz /DIAL /]
	pushj p,strout
	movei b,(tt)
	add b,hstadr
	pushj p,strout
	jrst newlin

lcsprt:	movei b,[asciz /LCS /]
	pushj p,strout
	ldb b,[001100,,tt]
	pushj p,octout
	movei b,"/
	pushj p,chrout
	ldb b,[221100,,tt]
	pushj p,octout
	jrst newlin

suprt:	movei b,[asciz /SU /]
	pushj p,strout
	ldb b,[111100,,tt]
	pushj p,octout
	movei b,"#
	pushj p,chrout
	ldb b,[001100,,tt]
	pushj p,octout
	jrst newlin

;;; System dependent routines
ifn tnx,[

newlin:	movei b,215
	jrst chrout

strout:	move a,chajfn
	hrli b,440700
	setz c,
	sout
	popj p,

chrout:	move a,chajfn
	bout
	popj p,

decout:	move a,chajfn
	movei c,10.
	nout
	 jfcl
	popj p,

octout:	move a,chajfn
	movei c,8.
	nout
	 jfcl
	popj p,

lose:
done:	haltf

hstloc==200000
hstadr:	hstloc

hstmap:	movsi a,(gj%old!gj%sht)
ifn 20x,hrroi b,[asciz /SYSTEM:HOSTS2.BIN/]
.else	hrroi b,[asciz /<SYSTEM>HOSTS2.BIN/]
	gtjfn
	 jsp l,lose
	movei b,of%rd
	openf
	 jsp l,lose
	sizef
	 jsp l,lose
	hrlz a,a		;start with page 0 of file
	move b,[.fhslf,,hstloc/1000]
ifn 20x,[
	hrli c,(pm%cnt\pm%rd\pm%cpy)
	pmap
]
.else [
	hrrz d,c		;Page count
	movsi c,(pm%rd\pm%cpy)
	pmap
	addi a,1
	addi b,1
	sojg d,.-3
];10x
	popj p,

sndeof:	move a,chajfn
	movei b,.moeof
	mtopr
	popj p,

getchr:	move a,chajfn
	bin
	 erjmp done
	popj p,

];ifn tnx

ifn its,[

newlin:	movei b,215
	skipe chaosp
	 jrst chrout
	movei b,15
	pushj p,chrout
	movei b,12
	jrst chrout

strout: hrli b,440700
strou1:	ildb c,b
	jumpe c,cpopj
	.iot choch,c
	jrst strou1

chrout:	.iot choch,b
	popj p,

decout:	skipa d,[10.]
octout:	 movei d,8
numout:	push p,c
	idivi b,(d)
	skipe b
	 pushj p,numout
	addi c,"0
	.iot choch,c
	pop p,c
	popj p,

done:	skipe debug
	 .value
	.logout 1,

hstloc==200000
hstadr:	hstloc

hstmap:	syscal open,[ 1000,,dskch ? 5000,,.bii ? [sixbit /dsk/] ? [sixbit /hosts2/] ? [sixbit />/] ? [sixbit /sysbin/]]
	 jsp l,lose
	syscal fillen,[1000,,dskch ? 2000,,t]
	 jsp l,lose
	jumpg t,.+2
	 jsp l,lose
	movei t,1777(t)		;(round up)
	lsh t,-10.
	hrloi a,-1(t)		;form aobjn page ptr for corblk
	eqvi a,hstloc/2000	;...
	syscal corblk,[ 1000,,%cbndr	;read-only.
			1000,,%jself	;into self
			a		;as specified
			1000,,dskch]	;from file open on channel.
	 jsp l,lose
	syscal close,[1000,,dskch]
	 jsp l,lose
	move t,hstloc+hstsid	;check that first word of file is really hosts2.
	came t,[sixbit/hosts2/]
	 jsp l,lose
	popj p,


sndeof:	skipn chaosp
	 jrst [	movei b,^C	; on arpanet send ^C as EOF (?)
		pushj p,chrout
		jrst force ]
	pushj p,force
	movei t,%coeof
	dpb t,[pktbuf+$cpkop]
	movei t,0
	dpb t,[pktbuf+$cpknb]	; no. data bytes = 0
	syscal pktiot,[1000,,choch ? 1000,,pktbuf]	; send EOF
	 jsp l,lose
	popj p,

force:	syscal force,[1000,,choch]
	 jsp l,lose	
	popj p,

getchr:	syscal iot,[1000,,chich ? 2000,,b]
	 jrst done
	skipe chaosp		; on arpanet ignore LF so other end can send
	 popj p,		; CR LF due to braindamaged standard
	cain b,12
	 jrst getchr
	popj p,

;;; JSP L,LOSE to lose.
lose:	skipn debug		; don't lose if not debugging
	 .logout 1,		; just go away mad
	syscal lose,[1000,,%lssys ? 1000,,-2(l)]	; lose!

;;; IOC error interrupts to here.
tsint:	0 ? 0
	.logout
	.value
	jrst .-2

];ifn its

ifn waits,[

newlin:	movei 0,15
	pushj p,netoch
	movei 0,12
	jrst netoch

strout: hrli b,440700
strou1:	ildb 0,b
	jumpe 0,cpopj
	pushj p,netoch
	jrst strou1

chrout:	move 0,b
	jrst netoch

decout:	skipa d,[10.]
octout:	 movei d,8
numout:	push p,c
	idivi b,(d)
	skipe b
	 pushj p,numout
	movei 0,"0(c)
	pop p,c
	jrst netoch


hstadr:	block 1

hstmap:	INIT 0,17
	 'DSK,,
	 0
	 JSP L,LOSE
	DMOVE [SIXBIT/HOSTS2BIN/]
	MOVE 3,['NETMRC]
	LOOKUP				; find file HOSTS1.BIN[NET,MRC]
	 JSP L,LOSE
	MOVE 2,JOBFF
	MOVS 3 ? MOVN ? ADDB JOBFF	; get address of highest addr we need
	CORE				; get more core from system maybe
	 JSP L,LOSE
	MOVE 3 ? HRRI -1(2)		; compute IOWD to read host table in
	SETZ 1,
	INPUT
	MOVE (2)			; get first word of host table
	CAME ['HOSTS2]
	 JSP L,LOSE
	MOVEM 2,HSTADR			; remember where host table begins
	RELEAS 0,
	POPJ 17,


sndeof:	movei 0,^C		; on arpanet send ^C as EOF (?)
	pushj p,netoch
	jrst force

force==netsnd

getchr:	pushj p,neticw
	cain 0,12
	 jrst getchr
	move b,0
	popj p,

;;; JSP L,LOSE to lose.
lose:

done:	reset
	exit

];ifn waits

debug:	0

	variables
litter:	constants


end go
  