.lif  z %defin
	.title	Local Net Interface (LNI) support
	.sbttl	Local Net Interface (LNI) support: Definitions, Macros and Code

.iif  z %defin, .nlist		;don't list definitions and macros if not
				;defining them

.if  nz %defin			;only define symbols when we are supposed to

  ;;
;;;;;;	Major prefixes used in this module
  ;;

;;; ;;; LNF$	LNI Frame offsets
;;; ;;; LN%	procotol numbers
;;; ;;; LN.	Hardware I/O page offsets
;;; ;;; %LN	Bits (and such) in the CSR and RSR registers
;;; ;;; LNC	random constants
;;; ;;; LNV	rancom variables
;;; ;;; LN$	Tables of other variables and such
;;; ;;; $LN	LNI object offsets (a network device)
;;; ;;; LNR	Receive  related functions
;;; ;;; LNX	Transmit related functions
;;; ;;; LN	Other randoms.  Only a few of these.

  ;;
;;;;;;	Send info to PKTNCP
  ;;

defnet lni			;declare running with LNI interface

.pkhrd <		;;needed packet fields for hardware
	..word lnf$,0		;start of LNI interface data
	..word lnf$dm,2		;32 bits of destination process name mask
	..word lnf$dn,0		;32 bits of destination process name
	  ..byte lnf$pn,1	; protocol number
	    ln%ip==1		;  Internet protocol
	    ln%chs==2		;  CHAOS protocol
	  ..byte lnf$sn,1	; subnet number
	  ..byte lnf$rs,1	; reserved
	  ..byte lnf$hn,1	; host number
	..word lnf$on,2		;32 bits of originating process name
	..word lnf$ln,1		;16 bits of byte length
	>

.if p1
	.sbttl	-- Definitions 
  ;;
;;;;;;	I/O page registers
  ;;

ln.csr==00	;command and status register
ln.rsr==02	;result register
ln.oal==10	;output address (low 16 bits)
ln.oah==12	;output address (high 2 bits)
ln.ial==14	;input  address (low 16 bits)
ln.iah==16	;input  address (high 2 bits)
ln.obc==20	;output byte count
ln.ibc==22	;input  byte count

  ;;
;;;;;;	CSR bits
  ;;

%lnien==bit.00		;input  enable
%lniie==bit.01		;input  interrupt enable
%lnoen==bit.02		;output enable
%lnoie==bit.03		;output interrupt enable
%lnftk==bit.04		;force token output
%lnant==bit.05		;add    to   Name Table
%lnrnt==bit.06		;remove from Name Table
%lnrst==bit.05+bit.06	;read and reset
%lncnt==bit.07		;clear Name Table
%lndie==bit.08		;DMA done interrupt enable
%lnden==bit.09		;DMA enable
%lncof==bit.10		;Clear output FIFO
%lnifo==bit.11		;Input  FIFO output ready (interface to memory)
%lnifi==bit.12		;Input  FIFO input  ready (ring	     to interface)
%lnofo==bit.13		;Output FIFO output ready (interface to ring)
%lnofi==bit.14		;Output FIFO input  ready (memory    to interaface)
%lnrok==bit.15		;ring OK (control tokens being seen)

  ;;
;;;;;;	Result register bits
  ;;

%lnipc==bit.00		;input complete
%lnopc==bit.01		;output complete
%lnmch==bit.02		;match
%lnacc==bit.03		;accept
%lnrrf==bit.04		;Read and Reset Match (find)
%lnnte==bit.05		;Name Table operation error
%lnntb==bit.06		;Name Table busy
%lnior==bit.07		;Input FIFO overrun
%lnicb==bit.08		;Input CRC bad
%lnife==bit.09		;Input format error
%lnmer==bit.10		;message error
%lnour==bit.11		;Output FIFO underrun
%lncrc==bit.12		;received output CRC bad
%lncnm==bit.13		;received output CRC different
%lnbma==bit.14		;Bad Match/Accept field
%lnofe==bit.15		;Output Format Error

%lnier==%lnife+%lnicb+%lnior	;various input errors
%lnoer==%lnofe+%lnbma+%lncnm+%lncrc+%lnour	;various output errors

.endc p1

llnf$==pksiz$-lnf$		;max ncp packet, without ncp specific fields

****
	.sbttl	-- Macros
****

nlni==0			;no LNI interfaces to start with

.macro LNI vec,csr,rngadr
.iif z nlni, lninet==nnet	;base net object of LNI network objects
  .irp num,\nlni
    .litrl <.byte 77,00,00,00,rngadr	;all protocols, but my ring address
	    .byte 77,00,00,00,00,00,00,00	;accept all broadcasts
	    >,ln$ad'num
  .if p2
      %%==.
	.=ln$vec+<2*nlni>
	  .word vec
	.=ln$csr+<2*nlni>
	  .word csr
	.=ln$adr+<2*nlni>
	  .word ln$ad'num
      .=%%
  .endc
  .endm irp
nlni==nlni+1
nnet==nnet+1
.endm

.endc %defin

.iif  z %defin, .list		;start listing again

.iif nz %defin, .nlist		;don't list code if only doing definitions

.if   z %defin			;only do code if not defining symbols

	.sbttl	-- Code

  ;;
;;;;;;	Random constants
  ;;

lncnl==8		;Name Length (for DMA)
.iif nz ncpchs, lncnl==lncnl+8	;also count CHAOS broadcast packets
lncndt==lncnl*2		;two instrs per byte (for hardware timeout)
lncntn==lncnl/8		;number of entries
lncntt==100		;timeout for adding to name table

lnctm:			;token message
	.word 0,0,0,0	;destination
	.word 0,0,2	;origin and byte length
	.word 72727	;nothing in particular (keep those shift regs busy)
lnctml==.-lnctm		;token message length 
lnctdt==lnctml*2	;two instructions per byte (for hardware timeout)
lncttt==1000		;time to send it


  ;;
;;;;;;	Tables and pointers
  ;;

ln$vec:	.blkw nlni	;table of interrupt vectors
ln$csr:	.blkw nlni	;table of CSR base addresses
ln$adr:	.blkw nlni	;table of pointer to ring address

ln$brk:
		.rept nlni
	jsr r5,@#lniint
	.word netobj+<2*lninet>+<2*.rpcnt>
		.endr
lln$brk==<.-ln$brk>/nlni

ln$vad:			;addresses at the vectors
		.rept nlni
	.word ln$brk+<.rpcnt*lln$brk>
		.endr

  ;;
;;;;;;	A hardware object
  ;;

  dsect <
		.blkb l$nt	;length of a standard network object
$lncsr==$ntcsr

$lnsts::	.blkw 1		;software status
 %lnsti==100000			;input active (must be sign bit)
$lnrbf::	.blkw 1		;receive buffer (big for DMAing)
$lnxpk::	.blkw 1		;transmit packet

  >,l$ln


  ;;
;;;;;;	Interrupt routines
  ;;

;;; R5 pushed on stack and now points to pointer to hardware object

lniint:	mov @(r5),r5		;get the hardware object
	push r4,r1
	mov $lncsr(r5),r4	;get the CSR
	loop <
	  push #0		;keep-looping-flag
	  tst $lnsts(r5)	;software status: input active?
	  if mi,<		;yup
	    bit #%lnipc,ln.rsr(r4)	;is input complete?
	    if ne,<		;yup
	      bic #%lnsti,$lnsts(r5)	;input no longer active
	      call lnrint	;do a receiver interrupt (also requeues)
	      inc (sp)		;bump up keep-looping-flag
	    > >
	  mov $lnxpk(r5),r1	;get output packet
	  if ne,<		;there was one there
	    bit #%lnopc,ln.rsr(r4)	;is output complete?
	    if ne,<		;yup
	      bit #%lnour,ln.rsr(r4)	;was there an Output fifo underrun?
	      if ne,<bpt>	;oops, debug remotely
	      clr $lnxpk(r5)	;no longer a pending output packet
	      call lnxint	;go process output interrupt
	      call lnxout	;start output flowing (if possible)
	      inc (sp)		;bump keep-looping-flag
	    > >
	  tst (sp)+		;check the keep-looping-flag
	  rptl ne		;loop if might be more to do
	  >
	pop r1,r4,r5
	rti


  ;;
;;;;;;	Receiver interrupt
  ;;

.bscalar lnvpn			;temporarily holds protocol number.  this
				;is safe, since this routine is never
				;entered before exited (e.g.,recursive interrupts)

lncift==200			;time for I/P FIFO to emptr after interrupt

lnrint:	mov #lncift,r1
	loop <
	  bit #%lnifo,(r4)	;input fifo empty?
	  exitl eq		;exit when so
	  tst ln.ibc(r4)	;input byte count finished?
	  exitl eq		;also an OK indication
	  sorl r1		;keep waiting
	  bpt			;hardware losing pretty badly
	  >
	push r3,r2
	loop <			;easy way to exit on errors
	  bit #%lnifo,(r4)	;input FIFO output ready (interface to memory)?
	    exitl ne		;still things there, something's wrong
	  bit #%lnier,ln.rsr(r4)	;error?
	    exitl ne		;yup
	  mov $lnrbf(r5),r3	;get the receiver buffer
	  mov lnf$ln-lnf$(r3),r2	;get frame length of receive buffer
	  mov r2,r1		;also get it in r1
	  add #$pktdt,r1	;add NCP header length
	  cmp r1,#pksiz.	;is it big enough for anybody's protocol?
	    exitl lo
	  cmp r1,#pksiz$	;too big??
	    exitl hi
	  call pktall		;try and get a packet
	    exitl eq
	  push r3,r1		;save base pointers
	  add #$pktdt-lnf$,r3	;point at packet data within frame
	  add #$pktdt,r1	;point at packet data within packet
	  inc r2		;for rounding to word count...
	  asr r2		;...byte count to word count
	  loop <
	    mov (r3)+,(r1)+	;copy packet out of frame
	    sorl r2		;loop over packet
	    >
	  pop r1,r3		;get pointers back
	  bis #%pkt08,$pktfl(r1)	;declare packet safe for 8 bit
	  movb lnf$pn-lnf$(r3),lnvpn	;get protocol number
	  br 10$		;there is a packet
	  >
	clr r1			;no packet
10$:	pop r2,r3
	call lnrque		;requeue NOW!! ASAP
	tst r1
	if ne,<
	      .if nz ncpip
	  cmpb lnvpn,#ln%ip	;internet protocol?
	  if eq,<jcall iprcv>	;receive internet packet
	      .endc
	      .if nz ncpchs
	  cmpb lnvpn,#ln%chs	;chaos protocol?
	  if eq,<jcall chsrcv>
	      .endc	  
	  call pktfre		;free the packet
	  >
	netmet ot		;other reason, maybe be more explicit later
	return

lnrque:	clr ln.ibc(r4)		;make sure we are in sync (clear byte count)
	bis #%lnien+%lniie,(r4)	;input enable and input interrupt enable
	mov $lnrbf(r5),ln.ial(r4)	;INPUT ADDRESS (low)
	mov #llnf$,ln.ibc(r4)	;NOW give it INPUT BYTE COUNT (after enabled)
	bis #%lnsti,$lnsts(r5)	;software status: input packet pending
	return

  ;;
;;;;;;	Xmit interrupt
  ;;

lnxint:	call pktngv		;free the packet if not on user list
	bit #%lnoer,ln.rsr(r4)	;output errors?
	if eq,<netmet ou>	;no,  count it as out
	else  <netmet ab>	;else count it as an abort
	return

lnxout:	tst $lnxpk(r5)		;already a packet queued?
	if eq,<			;no, transmitter available
	  call ntremq		;get a packet
	  if ne,<		;got a packet
	    bis #%lncof,(r4)	;clear output fifo
	    clr ln.obc(r4)	;clear output byte count
	    push r1,$pktxs(r1)	;save packet pointer and xmit size
	    add #$pktdt,r1	;point at packet data
	    ;;; start filling in (mostly) static parts of the packet
	    mov (sp),-(r1)		;length of data field
	    clr -(r1)		;originating ...
	    clr -(r1)		;... process name
	    sub #4,r1		;destination process name already set up
	    clr -(r1)		;destination ...
	    clr -(r1)		;... process name mask
	    mov r1,ln.oal(r4)	;address as OUTPUT ADDRESS (low)
	    add #<$pktdt-lnf$>,(sp)	;count LNI frame header
	    pop ln.obc(r4)	;OUTPUT BYTE COUNT
	    pop r1		;get back packet
	    bis #%lnoie+%lnoen,(r4)	;output interrupt and output enable
	    mov r1,$lnxpk(r5)	;NOW save it as packet (also software status)
	    tst (r4)		;ring still up?
	    if pl,<		;nope, should zap control token on to it
	      bis #%lnftk,(r4)	;tell interface to zap it out
	      mov #100,r1	;magic delay count
	      loop <sorl r1>	;loop
	      bic #%lnftk,(r4)	;turn it off manually becuase interface sucks
	      >
	    >
	  >
	return

lnxou1:	push r4
	mov $lncsr(r5),r4
	lock 6
	call lnxout
	unlock
	pop r4
	return


  ;;
;;;;;;	initialization
  ;;
 
lniini:	clr r0			;index
	loop <
	  call lninit		;do one
	  add #2,r0
	  cmp r0,#nlni*2
	  rptl lo
	  >
	return

lninit:	mov ln$csr(r0),r4	;get the CSr
	call nxmcat		;get ready to have it (maybe) not appear
	  lnnxm
	mov #%lncof+%lncnt,(r4)	;clear output fifo and name table
	clr ln.iah(r4)		;INPUT  ADDRESS HIGH
	clr ln.oah(r4)		;OUTPUT ADDRESS HIGH
	call nxmclr		;looks like it's there

	mov ln$vec(r0),r2	;get interrupt vector
	mov ln$vad(r0),(r2)+	;set interrupt routine
	mov #pr6,(r2)+		;pretty high priority

	mov #l$ln,r5		;size of object
	call ntmake		;make the network object
	if eq,<bpt>		;oops
	mov r5,netobj+<2*lninet>(r0)	;save object in network table
	mov r4,$ntcsr(r5)	;save csr

	call lnini2		;set up name table and other frobbing
 
		.if nz ncpchs
	mov #lnchgv,nt$chs(r5)	;routine to send chaos packets to interface
	mov ln$adr(r0),r1	;get address
	movb 4+1(r1),nt.chs+1(r5)	;set chaos subnet
	movb 4+3(r1),nt.chs+0(r5)	;address on subnet
	mov #10.,$ctrcv(r5)	;dma device; cost a little less
		.endc

		.if nz ncpip
	mov #lnipgv,nt$ip(r5)
	mov ln$adr(r0),r1
	add #4,r1
	  .irp off,<1,0,3,2>
	movb (r1)+,nt.ip+off(r5)
	  .endm
	movb #ipnLCS,nt.ip+1(r5)
		.endc

	mov r0,r4
	add #<lninet*2>,r4	;now network index
	jcall ntmak1		;finish making the object

lnnxm:	clr netobj+<2*lninet>(r0)	;no network object
	return

  ;;
;;;;;;	Finish frobbing with hardware during init
  ;;

lnini2:	mov ln$adr(r0),ln.oal(r4)	;load my address into fifo
	mov #lncnl,ln.obc(r4)	;length of entry
	mov #%lnden,(r4)	;DMA enable
	mov #lncndt,r1		;max time to deposit name table
	loop <
	  tst ln.obc(r4)
	  exitl eq
	  sorl r1
	  bpt		;hardware should not be losing.  Just
			;unplug it or change the CSR to run without it
	  >
	mov #lncntn,r2		;number of name table entries
	loop <
	  mov #%lnant,(r4)	;stick FIFO into name table
	  mov #lncntt,r1	;time to wait for load to complete
	  loop <
	    bit #%lnntb,ln.rsr(r4)	;loaded yet?
	    exitl eq
	    sorl r1
	    bpt			;sigh, more lossage
	    >
	  bit #%lnnte,ln.rsr(r4)	;made it OK?
	  if ne,<bpt>		;yet more potential lossage
	  sorl r2		;load entire name table
	  >
	mov #%lnden,(r4)	;enable DMA again (name table ops cleared it)
	tst (r4)		;ring up?
	if pl,<			;nope, try and force it up
	  mov #lnctm,ln.oal(r4)	;token message
	  mov #lnctml,ln.obc(r4)	;byte count
	  mov #lnctdt,r1
	  loop <
	    tst ln.obc(r4)
	    exitl eq
	    sorl r1
	    bpt			;hardware obscurely losing
	    >
	  bis #%lnftk!%lnoen,(r4)	;force output of token
	  mov #lncttt,r1
	  loop <
	    bit #%lnopc,ln.rsr(r4)	;output complete
	    exitl ne
	    sorl r1
	    bpt			;YOW!! Am I wedged yet?
	    >
	  >
	push #llnf$		;max size of an LNI packet
	call fsmall		;get a buffer
	pop $lnrbf(r5)		;stash it away
	if eq,<bpt>
	jcall lnrque		;and go queue it


;;; ;;; jsr r0,ln..gv [r5:=object, r1:=packet, r2:=dest+0, r3:dest+2]
;;; ;;;   .byte protocol,0
;;; ;;; ...

ln..gv:	mov r2,lnf$dn+0(r1)
	mov r3,lnf$dn+2(r1)
	movb (r0)+,lnf$dn+0(r1)
	tstb (r0)+		;make it even

	call ntputq
	call lnxou1
	rts r0

.if nz ncpchs

;;; call @nt$chs(r5),[r5:=object, r1:=packet, r2:=hardware_destination]

lnchgv:	call cpks08		;make packet safe for 8 bit hardware

	push r3,#0,#0		;save r3, dest+2, dest+0
	movb r2,3(sp)		;host is last byte
	swab r2
	movb r2,1(sp)		;subnet in its place
	pop r2,r3
	jsr r0,ln..gv
	  .byte ln%chs,0

	pop r3
	return

.endc nz ncpchs

.if nz ncpip

;;; call @nt$ip(r5),[r5:=object, r1:=packet, r2,r3:=immediate_detination]

lnipgv:
ipstat +,15.
.ipcpy 7
	call ipks08		;make entire packet safe for 8.bit
ipstat -,15.

	swab r2			;convert to PDP-11...
	swab r3			;...style byte order
	jsr r0,ln..gv
	  .byte ln%ip,0
	return

.endc nz ncpip

****

.endc %defin

.iif nz %defin, .list		;start listing as usual


;; local modes:
;; mode:midas
;; auto fill mode:
;; fill column:75
;; comment column:32
;; end:
