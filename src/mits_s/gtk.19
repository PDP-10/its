
.lif  z %defin
	.title  Gross TTY Kludge support
	.sbttl	Gross TTY Kludge support support: Definitions, Macros and Code

.iif  z %defin, .nlist		;don't list definitions and macros if not
				;defining them

.if  nz %defin			;only define symbols when we are supposed to

.if p1
	.sbttl	-- Definitions 

  dsect <		;; 
$gtktt::	.blkw 1		;tty   type
$gtkti::	.blkw 1		;tty   input  channel
$gtkst::	.blkw 1		;saved tty input character
$gtkco::	.blkw 1		;chaos output channel
$gtkci::	.blkw 1		;chaos input  channel
$gtksc::	.blkw 1		;saved chaos input character
$gtkto::	.blkw 1		;tty   output channel
  >,l$gtk

.endc p1

****
	.sbttl	-- Macros

txtint gtksrv
txtint gtktyp
.macro gtk ttytyp,connam
	chnsrv <connam>,cxgtk
	appnd1 gtktyp,<	t.'ttytyp: .word 0>
	append gtksrv,<	.word t.'ttytyp
			.string <connam>
		      >
.endm

txtint atktyp
txtint atktbt
.macro atk ttytyp
	appnd1 atktyp,< t.'ttytyp: .word 0>
	appnd1 atktbt,< .word t.'ttytyp>
.endm

.endc %defin

.iif  z %defin, .list		;start listing again

.iif nz %defin, .nlist		;don't list code if only doing definitions

.if   z %defin			;only do code if not defining symbols

	.sbttl	-- Code

gtkass:	gtksrv			;define the tctyp/contact association table
	.word 0

	gtktyp			;define the pseudo types (this is
				;dangerous, but nobody is
				;supposed to be sending supdup
				;characters to these terminals)

atktbl:	atktbt			;get the tty types we need to snarf
	.word 0
	atktyp			;define the pseudo types for another gross
				;tty kludge


  ;;
;;;;;;	This is the main loop.  It does not claim to be efficient
;;;;;;  because I happen to know that .sin and .sout are not really
;;;;;;  efficient.  "Fixed in the rewrite." 
  ;;

.wscalar ngtk			;how many kludges
.wscalar gtkkik			;non zero means something to do
.wscalar gtkobj			;the table of object entries
.wscalar gtknxt			;next entry to try
.wscalar gtklim			;limit, so we can bypass bad lines

gtkloo:	mov gtkobj,r5
	mov ngtk,r4
	loop <
	  call 100$		;tty to chaos
	  call 200$		;chaos to tty
	  add #l$gtk,r5
	  sorl r4
	  >
	.regs #hng.ne,#gtkkik,#zero
	.hang
	clr gtkkik
	jcall gtkloo


100$:	tst $gtkco(r5)
	if ne,<
	  loop <
	    mov $gtkst(r5),r1
	    if pl,<
120$:	      mov $gtkco(r5),r0
	      .bout
	      if cs,<
		call gtkcls	;close the chaos channels
		exitl
		>
	      bit #%clnhh,$clmod(r0)
	      if ne,<
		bic #mask8,r1
		mov r1,$gtkst(r5)
		exitl
		>
	      >
	    mov $gtkti(r5),r0
	    .bin
	    bit #%clnhh,$clmod(r0)
	    beq 120$		;no hang, so loop
	    mov #-1,$gtkst(r5)	;no saved tty character
	  > >
	return

200$:	tst $gtkci(r5)
	if ne,<
	  loop <
	    mov $gtksc(r5),r1
	    if pl,<
220$:	      mov $gtkto(r5),r0
	      .bout
	      bit #%clnhh,$clmod(r0)
	      if ne,<
		bic #mask8,r1
		mov r1,$gtksc(r5)
		exitl
		>
	      >
	    mov $gtkci(r5),r0
	    .bin
	    if cs,<
	      call gtkcls
	      exitl
	      >
	    bit #%clnhh,$clmod(r0)
	    beq 220$		;no hang, so loop
	    mov #-1,$gtksc(r5)	;no saved chaos character
	    >
	  >
	return

gtkcls:	mov $gtkci(r5),r0
	if ne,<
	  clr $gtkci(r5)
	  .close
	  >
	mov $gtkco(r5),r0
	if ne,<
	  clr $gtkco(r5)
	  .close
	  >
	.regs $gtkti(r5),#chnevr,#0,#junk
	.ioctl
	.regs $gtkto(r5),#chnevx,#0,#junk
	.ioctl
	return

  ;;
;;;;;;	The chaos server
  ;;

cxgtk:	push r2,r3,r4,r5	;will probably need them all
	tst ngtk
	if eq,<
	  mov (pc)+,r0
	    .string <No lines are currently configured.>
150$:	  movb #%cocls,$cpkop(r1)
	  call cprbad
200$:	  pop r5,r4,r3,r2
	  return
	  >
	call 400$		;find the contact name in table
	  bcs 150$
	call 500$		;find an available terminal port
	  bcs 150$
	call 600$		;try to get a connection
	  bcs 150$
	call 700$		;setup event channels and such
	  bcs 200$		;redundant, but hard to handle errors here
	br 200$			;yow, are we talking yet?

400$:	mov #gtkass,r4		;get assoc table
	loop <
	  tst (r4)
	  if eq,<
	    mov (pc)+,r0
	      .string <Tell DCP there is a bug in GTK.>
	    sec
	    return
	    >
	  mov 2(r4),r0
	  mov r1,r2
	  add #$cpkdt,r2
	  loop <
	    tstb (r0)
	    exitl eq
	    cmpb (r0)+,(r2)+
	    rptl eq
	    tstb -(r0)		;make it non zero
	    >
	  tstb (r0)
	  if ne,<
	    add #4,r4
	    rptl
	    >
	  mov (r4),r4		;get terminal type to look for
	clc
	return

500$:	mov gtknxt,r5
	mov ngtk,r3
	loop <		;until we find one
	  cmp r4,$gtktt(r5)
	  if eq,<
	    tst $gtkci(r5)	;already a connection
	    exitl eq		;nope, this is our slot
	    >
	  call 900$		;increment r5
	  sorl r3
	  mov (pc)+,r0
	    .string <None of the terminal lines are available now.>
	  sec
	  return
	  >
	push r5			;save it
	call 900$		;but increment next
	pop r5			;and get our pointer back
	clc
	return

600$:	call ccnall		;try and get a chaos connection
	if eq,<
	  mov (pc)+,r0
	    .string <Could not allocate a chaos connection.>
	  sec
	  return
	  >
	call cprrfg		;give the packet to the connection
	call cpkpki		;get it back
	movb #%coopn,$cpkop(r1)	;make it an open
	mov #3,$cpkpn(r1)	;window size of 3
	call cpkpko
	clc
	return

700$:	.ccnmks			;connection make stream
	if cs,<
	  call ccnfre		;free the connection (let other side lose)
	  sec
	  return
	  >
	mov r0,$gtkci(r5)	;set the channels in place
	mov r1,$gtkco(r5)
	mov #-1,$gtkst(r5)	;no save characters
	mov #-1,$gtksc(r5)
	.regs $gtkti(r5),#chnevr,#-1,#gtkkik
	bis #%clnhg,$clmod(r0)
	.ioctl
	.regs $gtkto(r5),#chnevx,#-1,#gtkkik
	bis #%clnhg,$clmod(r0)
	.ioctl
	.regs $gtkci(r5),#chnevr,#-1,#gtkkik
	bis #%clnhg,$clmod(r0)
	.ioctl
	.regs $gtkco(r5),#chnevx,#-1,#gtkkik
	bis #%clnhg,$clmod(r0)
	.ioctl
	clc
	return

900$:	add #l$gtk,r5
	cmp r5,gtklim
	if eq,<mov gtkobj,r5>
	mov r5,gtknxt
	return


gtkini:	call atkini		;do another gross tty kludge
	mov #gtkass,r0		;get table
	clr r1			;no ttys found yet
	loop <
	  tst (r0)		;any tty definition?
	  exitl eq
	  mov #ttyity,r2
	  mov #ntty,r3
	  loop <
	    cmp (r2)+,(r0)
	    if eq,<inc r1>
	    sorl r3
	    >
	  add #4,r0		;go on to next assoc entry
	  rptl
	  >
	mov r1,ngtk
	if eq,<return>		;nothing there, just get out
	mul #l$gtk,r1		;size of total structure needed
	push r1
	call fsmall
	call fsmclr
	pop r5
	if eq,<bpt>		;out of memory at init
	mov r5,gtkobj
	mov r5,gtknxt

	mov #gtkass,r4		;get assoc table again
	loop <
	  push r4,(r4)
	  exitl eq
	  mov #ttyity,r4
	  mov #ntty,r3
	  loop <
	    cmp (r4),(sp)	;types match?
	    if eq,<
	      push r4
	      sub #ttyity,(sp)
	      .regs #opntty,sp
	      .open
	      if cc,<
	        mov (r4),$gtktt(r5)	;set tty type
		mov r0,$gtkti(r5)
		mov r1,$gtkto(r5)
		>
	      pop *		;pop tty number
	      add #l$gtk,r5
	      >
	    tst (r4)+		;go on to next tty
	    sorl r3
	    >
	  pop *,r4
	  add #4,r4
	  rptl
	  >
	popn #2*2		;pop (r4),r4
	mov r5,gtklim		;limit
	.regs #gtkloo,#100,#300_8
	.usrgo
	if cs,<bpt>		;error during initialization
	return

;; bit 0 of $ttipt(rdv) is 0 for available, 1 for in use
atkini:	clr r0			;tty index
	loop <
	  cmp r0,#ntty*2
	  exitl ge
	  mov #atktbl,r1
	  loop <
	    tst (r1)
	    exitl eq
	    cmp (r1)+,ttyity(r0)
	    rptl ne
	    mov ttyxdv(r0),r2
	    rptl eq
	    mov #atkxli,$dvlio(r2)
	    mov ttyrdv(r0),r2
	    rptl eq
	    mov #atkrli,$dvlio(r2)
	    mov #376,$ttipt(r2)	;grab the tty
	    >
	  add #2,r0
	  rptl
	  >
	return

atkrli: atkxli:
	.word $close,atkcls
	.word 0

atkcls:	mov $ttonum(r4),r4	;get tty index
	mov ttyrdv(r4),r4	;get receive device (gross)
	bic #1,$ttipt(r4)	;make it free again
	return

;;;	push #pseudo_ttytype
;;;	.regs #opnatk,sp
;;;	.open

opnatk:	mov (r1)+,r1		;get tty type
	clr r0
	loop <
	  cmp r0,#ntty*2
	  exitl ge
	  cmp ttyity(r0),r1
	  if eq,<
	    push r2
	    mov ttyrdv(r0),r2
	    bit #1,$ttipt(r2)
	    if eq,<
	      pop r2
	      jcall opntt2	;go open this tty (hacks ttyipt)
	      >
	    pop r2
	    >
	  add #2,r0
	  rptl
	  >
	mov #-1,usrerr(r5)
	return

.endc %defin

.iif nz %defin, .list		;start listing as usual


;; local modes:
;; mode:midas
;; auto fill mode:
;; fill column:75
;; comment column:32
;; end:
