
.lif  z %defin
	.title	RMP116 support
	.sbttl	RMP116 support: Definitions, Macros and Code

.iif  z %defin, .nlist		;don't list definitions and macros if not
				;defining them

.if  nz %defin			;only define symbols when we are supposed to

.if p1
	.sbttl	-- Definitions 

%rmrir==0			;these actually aren't used
%rmwir==1			;if they were, they would be
%rmrid==2			;the commands to the RMP116
%rmwid==3			;odd things are write commands
%rmrba==4			;even are read.  foo<logand>6
%rmwba==5			;is the register offset
%rmrcs==6
%rmwcs==7

****
	.sbttl	-- Macros
****

.macro rmp csr
rm.ira==csr+0
rm.idr==csr+2
rm.bar==csr+4
rm.csr==csr+6
.endm

.endc p1

chnsrv ^"RMP116",cxrmp116	;define the server (on both passes)

.endc %defin

.iif  z %defin, .list		;start listing again

.iif nz %defin, .nlist		;don't list code if only doing definitions

.if   z %defin			;only do code if not defining symbols

	.sbttl	-- Code

cxrmp116:
	cx$srv rmpopn,40,40_8,<>	;server address, stack size
					;priority, no extra code

.wscalar rmp.up

rmpopn:				;on entry: connection in r0
	call cpkpki		;get the RFC packet
	if cs,<			;oops
110$:	  call ccnfre		;free the connection
	  .logout		;and go bye-bye
	  >
	tst rmp.up		;is the device up? (plugged in?)
	if eq,<			;no
	  mov (pc)+,r2		;get string
	    .string <The RMP-116 is not up.>
	  clr $cpknb(r1)	;set byte count to zero
	  call cpkaz1		;insert the string
	  movb #%cocls,$cpkop(r1)	;turn it into a close packet
	  call cpkpko		;zap it out
	  br 110$		;go free connection and logout
	  >
	mov #2,$cpkpn(r1)	;window size of 2
	movb #%coopn,$cpkop(r1)	;open packet
	call cpkpko		;go open
	clr r1			;randomly forget the packet pointer
	loop <			;do forever
	  call cpkwti		;wait for an input packet
	  call cpkpki		;get it
	  bcs 110$		;oops, connection closed or somesuch
	  tstb $cpkop(r1)	;is it a data packet?
	  if pl,<call cpkfre>	;no, non-data packet just free
	  else <		;data packet
	    mov $cpkdt(r1),r3	;get the command
	    bic #mask3,r3	;only the low three bits count
	    bit #1,r3		;read or write?
	    if ne,<		;write command
	      bic #1,r3		;word indexable
	      mov $cpkdt+2(r1),rm.ira(r3)	;move the datum into the
						;RMP reg
	      call cpkfre	;free the packet
	      >
	    else <		;read request
	      mov rm.ira(r3),$cpkdt(r1)	;get the data into the packet
	      mov #2,$cpknb(r1)	;two bytes in the packet
	      call cpkwtx	;wait for output slot
	      call cpkpko	;send packet (use same opcode)
	      >
	    >
	  rptl			;do forever (or until connection closes)
	  >

rmpini:	call nxmcat
	  rmpnxm
	tst @#rm.ira
	tst @#rm.csr
	call nxmclr
	mov #-1,rmp.up
	return

rmpnxm:	clr rmp.up
	return

.endc %defin

.iif nz %defin, .list		;start listing as usual


;; local modes:
;; mode:midas
;; auto fill mode:
;; fill column:75
;; comment column:32
;; end:
