
	.title	Multiply & Divide
	.sbttl	Multiply & Divide

;;; ;;; General info:
;;; ;;; 	Some processors do not have MUL and DIV, but it is too much to put
;;; ;;; 	as a macro.  Thus, these routines.
;;; ;;; Usage:
;;; ;;; 	CPU MACROS defines (if the processor does not have MUL/DIV) the
;;; ;;; 	assembler constant %muldv and various macros for MUL and DIV.  If
;;; ;;; 	either of these macros is used, %muldv becomes nonzero, in which
;;; ;;; 	case the program should insert this file (after all other code).

; MUL1 multiplies two integers, producing a single precision product.  Both the
; multiplicand and multiplier are treated as signed numbers.  This routine is
; meant to be compatible with the single precision multiply instruction found
; on reasonable PDP11s.

;	ARGS:				VALS:
; SP ->	A			 SP ->	P
;	B

mul1:	push r1,r2		; save regs
	mov 6(sp),r1		; multiplicand
	mov 10(sp),r2		; multiplier
	clr 10(sp)		; clear product accumulator
loop <	  ror r2		; divide multiplier by 2, testing lowest bit
	  exitl eq		; nothing left
	  if cs,<
	    add r1,10(sp)	; if bit is 1 then add multiplicand to product
	    >
	  asl r1		; double multiplicand
	  clc			; so ROR is logical shift
	  rptl 			; and repeat.
	  >
	if cs,<
	  add r1,10(sp)		; one last add necessary if low bit was 1
	  >
	pop r2,r1,(sp)		; restore regs, remove arg2 from stack
	rts r5


; MUL2 is multiplies two integers producing a double precision product.  Both
; the multiplicand and multiplier are treated as signed numbers.  This routine
; is meant to be compatible with the double precision multiply instruction
; found on reasonable PDP11s.

;	ARGS: 				VALS:
; SP ->	multiplicand		 SP ->	P hi
;	multiplier			P lo

mul2:	push r0,r1,r2		; save regs
	clr r0			; multiplicand
	mov 10(sp),r1		; ...
	if mi,<
	  com r0		; if low part negative set high part to -1
	  >
	mov 12(sp),r2		; multiplier
	if mi,<
	  neg r2		; negate multiplier and multiplicand
	  neg r0		; double word negate
	  neg r1		; ...
	  sbc r0		; ...
	  >
	clr 10(sp)		; clear product accumulator
	clr 12(sp)		; ...
loop <	  asr r2		; divide multiplier by 2, testing lowest bit
	  exitl eq		; nothing left
	  if cs,<
	    add r1,12(sp)	; if bit is 1 then add multiplicand to product
	    adc 10(sp)		; ...
	    add r0,10(sp)	; ...
	    >
	  asl r1		; double multiplicand
	  rol r0		; ...
	  rptl
	  >
	if cs,<
	  add r1,12(sp)		; one last add necessary if low bit was 1
	  adc 10(sp)		; ...
	  add r0,10(sp)
	  >
	pop r2,r1,r0		; restore regs
	rts r5


; DIV2 divides a double word quantity by a single word quantity yielding a
; quotient and remainder.  It is meant to simulate the DIV instruction found
; on reasonable 11s.

;	ARGS:			VALS:
; SP ->	divisor		 SP ->	remainder
;	dividend lo		quotient
;	dividend hi

div2:	push r5,r4,r3,r2,r1,r0	; save the world (used to be a jsr r5,save6)
	mov 22(sp),r0		; dividend hi
	mov 20(sp),r1		; dividend lo
	mov 16(sp),r2		; divisor
	if mi,<
	  neg r2		; negate divisor and dividend
	  neg r0		; double word negate
	  neg r1		; ...
	  sbc r0		; ...
	  >
	clr r3
	mov #16.,r4
loop <	  asl r3
	  rol r1
	  rol r0
	  cmp r2,r0
	  if le,<
	    sub r2,r0
	    inc r3
	    >
	  sorl r4
	  >
	mov r3,22(sp)
	mov r0,20(sp)
	pop r0,r1,r2,r3,r4,r5	;used to be a jsr r5,rest6
	pop (sp)
	rts r5



;; local modes:
;; mode:midas
;; auto fill mode:
;; fill column:75
;; comment column:32
;; compile command: :xfile dcp;\swit compil M
;; end:
