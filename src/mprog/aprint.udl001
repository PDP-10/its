
<PACKAGE "APRINT">

<ENTRY PRINT-ABSTR
       PRINCLINE
       PRINCTHEM
       PRINTSPEC
       ABSTR-LOAD
       ABSTR-DUMP>

<USE "ACONST" "AERROR">

<SETG CRET "
">

<DEFINE PRINT-ABSTR (VEC
		     "OPTIONAL" (OUTCHAN .OUTCHAN) (TEM ,ABSTR-FORM)
		     "AUX" (OBLIST ,AB-OB) (LEV 0))
	#DECL ((VEC) VECTOR (CHN) CHANNEL (TEM) STRUCTURED
	       (OBLIST) <SPECIAL <LIST [REST OBLIST]>> (LEV) <SPECIAL FIX>
	       (OUTCHAN) <SPECIAL CHANNEL>)
	<COND (<AND <TYPE? .VEC VECTOR> <NOT <EMPTY? .VEC>>>
	       <PRINCLINE "[">
	       <MAPF <> ,SUBM-PRINT1 .VEC .TEM>
	       <PRINCLINE "]" ,CRET>)
	      (ELSE
	       <PRINCLINE ";  \"***** NOT AN ABSTRACT *****\"" ,CRET>
	       <PPRINT .VEC>)>
	<PRINC <ASCII 12>>
	,NULL>

<DEFINE SUBM-PRINT1 (VAL TEM "AUX" (LL <* .LEV 3>))
	#DECL ((VAL) ANY (TEM) <OR STRING <VECTOR [REST <OR STRING VECTOR>]>>
	       (LEV LL) FIX (OUTCHAN) CHANNEL)
	<TERPRI>
	<INDENT-TO .LL>
	<PRINC "; ">
	<COND (<TYPE? .TEM STRING>
	       <PRIN1 .TEM>
	       <PRINC "  ">
	       <COND (<NOT <FLATSIZE .VAL <- <LINLNT .OUTCHAN> <LINPOS .OUTCHAN>>>>
		      <TERPRI> <INDENT-TO <+ .LL 2>>)>
	       <EPRIN1 .VAL>)
	      (<EMPTY? .VAL> <PRIN1 <1 .TEM>> <PRINC "  "> <PRIN1 .VAL>)
	      (<AND <TYPE? .VAL VECTOR> <NOT <EMPTY? .VAL>>>
	       <SET LEV <+ 1 .LEV>>
	       <PRIN1 <1 .TEM>>
	       <PRINC "  [">
	       <MAPF <> ,SUBM-PRINT1 .VAL <REST .TEM>>
	       <SET LEV <- .LEV 1>>
	       <PRINC "]">)
	      (ELSE
	       <COND (<NOT <FLATSIZE .VAL <- <LINLNT .OUTCHAN> <LINPOS .OUTCHAN>>>>
		      <TERPRI> <INDENT-TO <+ .LL 2>>)>
	       <EPRIN1 .VAL>)>>

<DEFINE PRINCLINE ("TUPLE" THEM)
	#DECL ((THEM) TUPLE)
	<TERPRI>
	<MAPF <> ,PRINC .THEM>>

<DEFINE PRINCTHEM ("TUPLE" THEM) #DECL ((THEM) TUPLE) <MAPF <> ,PRINC .THEM>>

<DEFINE PRINTSPEC (MESS CHN)
	#DECL ((MESS) STRING (CHN) CHANNEL)
	<TERPRI>
	<PRINC .MESS>
	<PRINCTHEM " "
		   <9 .CHN>
		   !":
		   <10 .CHN>
		   !";
		   <7 .CHN>
		   !" 
		   <8 .CHN>
		   !".>>

<SETG JUNK-STR <ISTRING 200>>

<DEFINE COMMENT-JUNKER (X)
	<READSTRING ,JUNK-STR .INCHAN "\"">
	<READCHR .INCHAN>
	<READSTRING ,JUNK-STR .INCHAN "\"">
	<READCHR .INCHAN>
	#SPLICE ()>

<SETG COMMENT-TABLE <IVECTOR 128 0>>

<PUT ,COMMENT-TABLE <+ 1 <ASCII !";>> ,COMMENT-JUNKER>

<DEFINE ABSTR-LOAD ERROR-RETURN (FILE
				 "OPTIONAL" KEY (YELL <>)
				 "AUX" (INCH <OPEN "READ" .FILE>) (DONE T)
				       (NM2 "ABSTR")
				       (OBLIST ,AB-OB)
				       (READ-TABLE ,COMMENT-TABLE))
	#DECL ((ERROR-RETURN) <SPECIAL ACTIVATION> (FILE) STRING
	       (KEY) ATOM (YELL DONE) ANY (INCH) <OR CHANNEL FALSE>
	       (OBLIST) <SPECIAL <LIST [REST OBLIST]>>
	       (READ-TABLE) <SPECIAL VECTOR>)
	<COND
	 (.INCH
	  <COND (<NOT <ASSIGNED? KEY>> <SET KEY <PARSE <7 .INCH>>>)>
	  <SET .KEY
	       <STACKFORM ,LIST
			  .DONE
			  <PROG ()
				<SET DONE <READ .INCH '<RETURN <>>>>
				<COND (<TYPE? .DONE VECTOR>
				       <AND .YELL <PRINT <1 .DONE>>>
				       T)
				      (ELSE
				       <ERROR NOT-AN-ABSTR?
					      ABSTR-LOAD
					      .DONE>)>>>>
	  <PUT .KEY
	       CHANNEL
	       (<7 .INCH> <8 .INCH> <9 .INCH> <10 .INCH>)>
	  <CLOSE .INCH>
	  .KEY)>>

<DEFINE ABSTR-DUMP (FILE
		    "OPTIONAL" KEY (OPERATION ,PRINT-ABSTR)
		    "AUX" (NM2 "ABSTR") (OBLIST ,AB-OB) K (OUTCHAN <OPEN "PRINT" .FILE>))
	#DECL ((FILE) STRING (NM2) <SPECIAL STRING> (KEY) <OR ATOM FALSE>
	       (OPERATION) APPLICABLE (OBLIST) <SPECIAL <LIST [REST OBLIST]>>
	       (K) ANY (OUTCHAN) <SPECIAL CHANNEL>)
	<COND (.OUTCHAN
	       <COND (<NOT <ASSIGNED? KEY>>
		      <SET KEY <LOOKUP <3 .OUTCHAN> <1 .OBLIST>>>)>
	       <COND (.KEY
		      <COND (<AND <ASSIGNED? .KEY> <TYPE? <SET K ..KEY> LIST>>
			     <MAPF <> .OPERATION .K>
			     <CLOSE .OUTCHAN>
			     .KEY)
			    (<CLOSE .OUTCHAN> #FALSE ("NOT A GROUP"))>)
		     (<CLOSE .OUTCHAN> #FALSE ("GROUP DOESN'T EXIST"))>)>>

<ENDPACKAGE>
T A