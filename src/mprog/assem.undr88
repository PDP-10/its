
<OR <LOOKUP "COMPILE" <ROOT>> <PACKAGE "CODING" "IC">>

<OR <GASSIGNED? ONLY-FAST-OUTPUT>
    <SETG ONLY-FAST-OUTPUT <>>>

<BLOAT 17000 500 10 500 10>

<BLOCK (<ROOT>)>

ASSEMBLY-OPSYS

GLUE 

TMP 

<COND (<LOOKUP "COMPILE" <ROOT>>
       <REMOVE "TITLE" <ROOT>>
       <SETG ENTRY <FUNCTION ("TUPLE" X) <1 .X>>>)
      (ELSE <OR <LOOKUP "TITLE" <ROOT>> <INSERT "TITLE" <ROOT>>>)>

<ENDBLOCK>

<SETG MOB <GET MUDDLE OBLIST>>

<BLOCK (,MOB)>

$TLOSE 

NUMPRI 

<ENDBLOCK!- >

<BLOCK (,MOB <ROOT>)>

<OR <GASSIGNED? $TLOSE>
    <SETG $TLOSE <SQUOTA <SQUOZE!-RSUBRS "$TLOSE">>>>

<OR <GASSIGNED? NUMPRI>
    <SETG NUMPRI <SQUOTA <SQUOZE!-RSUBRS "NUMPRI">>>>
<GDECL (NUMPRI) FIX (MUDDLE) FIX>
<ENDBLOCK>

<GDECL (MOB) OBLIST>

<COND (<LOOKUP "COMPILE" <ROOT>>
       <NEWTYPE <OR <LOOKUP "MUDREF" <1 .OBLIST>>
		    <INSERT "MUDREF" <1 .OBLIST>>>
		WORD>
       <NEWTYPE <OR <LOOKUP "OPCODE" <1 .OBLIST>>
		    <INSERT "OPCODE" <1 .OBLIST>>>
		WORD>)
      (ELSE
       <REMOVE "MUDREF" <1 .OBLIST>>
       <REMOVE "OPCODE" <1 .OBLIST>>
       <EXTERNAL "OP">)>

<SETG NO-OPS
      <PROG (TT)
	    <OR <AND <SET TT <LOOKUP "COMPILE" <ROOT>>> <GASSIGNED? .TT>>
		<NOT <LOOKUP "HRRZ" <GET OP!-PACKAGE OBLIST>>>>>>

<COND (<NOT ,NO-OPS>
       <SET READ-TABLE <IVECTOR 128 '0>>
       <PUT .READ-TABLE <+ <ASCII !\`> 1> !\ >)>

<PUTREST <REST .OBLIST> (,MOB !<REST .OBLIST 2>)>

<OR <LOOKUP "COMPILE" <ROOT>>
    <EVAL <PARSE 
"<MAPF <> #FUNCTION ((X) <INSERT <REMOVE .X> <GET OP!-PACKAGE OBLIST>>)
			  '(*INSERT ARG SQUOZE END)>">>>

<NEWTYPE ADDRESS WORD>

<NEWTYPE ICL WORD>

<NEWTYPE CNST WORD>

<NEWTYPE MCL WORD>

<NEWTYPE PCL WORD>

<ENTRY ASSEMBLE ASSEMBLE1 FILE-ASSEMBLE>

<SET <ENTRY MESSAGE-CHANNEL> "TTY:">

<SET <ENTRY LINE-CHANNEL> <>>

<SET <ENTRY MAKE-SYM-TABLE> <>>

<SET <ENTRY QUICK-FORMAT> T>

<OR <ASSIGNED? GLUE> <SET GLUE T>>

<FLOAD "CLR;ATOSQ NBIN">

<DEFINE ASSEMBLE (BODY
		  "OPTIONAL" (LOCAL .OBLIST) (MESS-CHAN .MESSAGE-CHANNEL)
			     (LINE-CHAN .LINE-CHANNEL) (MAK-SYM .MAKE-SYM-TABLE)
			     (GLUE .GLUE)
		  "AUX" (OBLIST
			 (<MOBLIST OP!-PACKAGE>
			  ,MOB
			  DEFAULT
			  !<COND (<TYPE? .LOCAL LIST> .LOCAL)
				 (T (.LOCAL <ROOT>))>))
			(START-TIME <TIME>)
			(ASSEM-LIST ())
			(GEOF <>)
			(MORE-INSTS
			 <COND (<ASSIGNED? TITLE-STATEMENT> .TITLE-STATEMENT)
			       (T ())>)
			(DONT-LIST-N 0)
			CHN?)
	#DECL ((MESS-CHAN) <OR CHANNEL FALSE> (LOCAL) <OR LIST OBLIST>
	       (OBLIST) <SPECIAL LIST> (START-TIME) FLOAT (ASSEM-LIST) LIST
	       (GEOF) <SPECIAL ANY> (MORE-INSTS) <SPECIAL LIST>
	       (DONT-LIST-N) <SPECIAL FIX>)
	<COND (<TYPE? .BODY LIST> <SET MORE-INSTS .BODY> <SET CHN? <>>)
	      (T <SET CHN? .BODY>)>
	<REPEAT ()
		<COND (.GEOF <RETURN>)>
		<SET ASSEM-LIST
		     (!.ASSEM-LIST
		      !<DO-ASSEMB .MORE-INSTS
				  .CHN?
				  .MESS-CHAN
				  .LINE-CHAN
				  .MAK-SYM
				  .GLUE
				  .DONT-LIST-N>)>>
	<COND (.MESS-CHAN
	       <CMESS .MESS-CHAN
		      "DONE IN"
		      <- <TIME> .START-TIME>
		      "SECONDS">)>
	.ASSEM-LIST>

<DEFINE ASSEMBLE1 (BODY
			   "OPTIONAL" (LOCAL .OBLIST)
				      (MESS-CHAN .MESSAGE-CHANNEL)
				      (LINE-CHAN .LINE-CHANNEL)
				      (MAK-SYM .MAKE-SYM-TABLE) (GLUE .GLUE)
			   "AUX" (OBLIST
				  (<MOBLIST OP!-PACKAGE>
				   ,MOB
				   DEFAULT
				   !<COND (<TYPE? .LOCAL LIST> .LOCAL)
					  (T (.LOCAL <ROOT!->))>))
				 GOODS
				 (GEOF <>)
				 (MORE-INSTS ())
				 (DONT-LIST-N 0))
	#DECL ((LOCAL) <OR LIST OBLIST> (MESS-CHAN) <OR CHANNEL FALSE>
	       (OBLIST) <SPECIAL LIST> (GOODS) LIST (GEOF) <SPECIAL ANY>
	       (MORE-INSTS) <SPECIAL LIST> (DONT-LIST-N) <SPECIAL FIX>)
	<SET GOODS
	     <DO-ASSEMB <COND (<TYPE? .BODY LIST> .BODY) (())>
			<AND <NOT <TYPE? .BODY LIST>> .BODY>
			.MESS-CHAN
			.LINE-CHAN
			.MAK-SYM
			.GLUE
			.DONT-LIST-N>>
	<COND (<TYPE? <1 .GOODS> ATOM> ,<1 .GOODS>) (<1 .GOODS>)>>

<DEFINE FILE-ASSEMBLE (INFIL
		       "OPTIONAL" OUTFIL (NBIN .QUICK-FORMAT)
		       "TUPLE" JUNK
		       "AUX" (INCHN <OPEN "READ" .INFIL>) TMP (OBLIST .OBLIST)
			     (THINGS-DONE ()) (REOF <>) (TITLE-STATEMENT ())
			     (MUDDLE ,MUDDLE)
			     (OCHN
			      <CHANNEL
			       <COND (.NBIN "PRINTB") (ELSE "PRINT")>
			       <COND (<AND <ASSIGNED? OUTFIL> .OUTFIL>)
				     (<G? .MUDDLE 100> "ETMP.TMP")
				     (ELSE "_ETMP_ >")>>))
   #DECL ((INFIL) STRING (OUTFIL) <OR FALSE STRING> (MUDDLE) FIX
	  (OBLIST) <SPECIAL <LIST [REST <OR ATOM OBLIST>]>>
	  (INCHN OCHN) <OR CHANNEL FALSE> (REOF TITLE-STATEMENT) <SPECIAL ANY>)
   <GUNASSIGN ASSEMBLY-OPSYS>
   <UNWIND
    <PROG ()
      <COND (<G? .MUDDLE 100>
	     <PUT .OCHN 7 "ATMP">
	     <PUT .OCHN 8 "TMP">)
	    (<PUT .OCHN 7 "_ATMP_">
	     <PUT .OCHN 8 ">">)>
      <OR <AND <ASSIGNED? OUTFIL> .OUTFIL>
	  <NOT .INCHN>
	  <PUT .OCHN 10 <10 .INCHN>>>
      <COND (<NOT .INCHN> <RETURN .INCHN>)
	    (<NOT <RESET .OCHN>> <CLOSE .INCHN> <RETURN .OCHN>)>
      <AND <NOT <EMPTY? .JUNK>>
	   <TYPE? <1 .JUNK> STRING>
	   <COND (<=? <1 .JUNK> "TTY:"> ;"CRETIN TOPS-20 MUDDLE"
		  <PUT .JUNK 1 ,OUTCHAN>)
		 (<PUT .JUNK 1 <OPEN "PRINT" <1 .JUNK>>>)>>
      <AND <G? <LENGTH .JUNK> 1>
	   <TYPE? <2 .JUNK> STRING>
	   <PUT .JUNK 2 <OPEN "PRINT" <2 .JUNK>>>>
      <REPEAT (STMNT)
	<SET STMNT <READ .INCHN '<RETURN>>>
	<COND
	 (<AND <TYPE? .STMNT FORM>
	       <NOT <EMPTY? .STMNT>>
	       <==? <1 .STMNT> TITLE>>
	  <SET TITLE-STATEMENT (.STMNT)>
	  <REPEAT ((GOODS <ASSEMBLE .INCHN .OBLIST !.JUNK>) (RET .GOODS))
	    #DECL ((GOODS RET) LIST)
	    <COND (<EMPTY? .GOODS>
		   <SET THINGS-DONE (!.THINGS-DONE !.RET)>
		   <RETURN>)
		  (<TYPE? <1 .GOODS> ATOM>
		   <PRINT <FORM SETG <1 .GOODS> ,<1 .GOODS>> .OCHN>
		   <COND (<SET TMP <GET ,<1 .GOODS> FREEZE>>
			  <TERPRI .OCHN>
			  <PRINT <FORM PUT
				       <FORM GVAL <1 .GOODS>>
				       FREEZE
				       <FORM QUOTE .TMP>>
				 .OCHN>)>
		   <COND (<SET TMP <GET ,<1 .GOODS> GLUE>>
			  <TERPRI .OCHN>
			  <PRINT <FORM AND
				       '<ASSIGNED? GLUE>
				       '.GLUE
				       <FORM PUT
					     <FORM GVAL <1 .GOODS>>
					     GLUE
					     <FORM QUOTE .TMP>>>
				 .OCHN>)>)
		  (T <PRINT <1 .GOODS> .OCHN>)>
	    <TERPRI .OCHN>
	    <SET GOODS <REST .GOODS>>>)
	 (T
	  <COND (.NBIN <TERPRI .OCHN> <PRINT .STMNT .OCHN>)
		(T
		 <PROG ((OUTCHAN .OCHN))
		       #DECL ((OUTCHAN) <SPECIAL ANY>)
		       <EPRINT .STMNT>>)>
	  <EVAL .STMNT>)>
	<AND .REOF <RETURN>>>
      <COND (<G? .MUDDLE 100>
	     <SET OUTFIL <COND (<AND <ASSIGNED? OUTFIL> .OUTFIL> .OUTFIL)
			       (<STRING <9 .OCHN> ":<" <10 .OCHN> !\>
					<7 .INCHN> ".NBIN">)>>
	     <CLOSE .OCHN>
	     <RENAME <STRING <9 .OCHN> ":<" <10 .OCHN> !\>
			     <7 .OCHN> !\. <8 .OCHN>>
		     TO .OUTFIL>)
	    (<RENAME .OCHN
	      <COND (<AND <ASSIGNED? OUTFIL> .OUTFIL>)
		    (<STRING <7 .INCHN> " " <COND (.NBIN "NBIN") ("BINARY")>>)>>
	     <BUFOUT .OCHN>
	     <CLOSE .OCHN>)>
      <MAPF <>
	    <FUNCTION (X) <COND (<AND <TYPE? .X CHANNEL>
				      <NOT <0? <1 .X>>>
				      <N==? .X ,OUTCHAN>>
				 <CLOSE .X>)>>
	    .JUNK>
      .THINGS-DONE>
    <PROG ()
	  <CLOSE .OCHN>
	  <CLOSE .INCHN>
	  <MAPF <>
		<FUNCTION (X) <COND (<AND <TYPE? .X CHANNEL>
					  <NOT <0? <1 .X>>>
					  <N==? .X ,OUTCHAN>>
				     <CLOSE .X>)>>
		.JUNK>>>>

<DEFINE DO-ASSEMB (CODE-LIST INST-GETTER MESS-CHAN LIST-CHAN MAK-SYM GLUE DLN
		   "AUX" (TOG (())) (CNSTLOC ()) (CNSTS ()) (CNSTL ()) (ILNTH 4)
			 (MCLNTH 0) (FIXES ()) (IMPS (PHRED!-TMP)) (MCS ())
			 (PQS ()) (NAMED <>) (SUB-ENTS ()) RSUB (IND (())) TA
			 (TF '<>) (TL '()) TN TV (GLOB-SYM (0)) (LOC-SYM (0))
			 (EOF <>) (BITV (0)) (INTRS ()))
   #DECL ((TOG) LIST (CNSTLOC) <LIST [REST ADDRESS]>
	  (CNSTS CNSTL) <LIST [REST VECTOR]> (TA) ATOM (TF) FORM (TL) LIST
	  (TV) VECTOR (ILNTH MCLNTH) <SPECIAL FIX> (INTRS) <SPECIAL LIST>
	  (FIXES SUB-ENTS IMPS MCS PQS) <SPECIAL LIST> (NAMED IND) <SPECIAL
								    ANY>
	  (MESS-CHAN) <SPECIAL ANY> (GLOB-SYM) <SPECIAL <LIST [REST FIX]>>
	  (LOC-SYM) <LIST [REST FIX]> (CODE-LIST) <SPECIAL LIST>
	  (EOF) <SPECIAL ANY> (DLN) FIX (BITV) <LIST [REST FIX]>)
   <REPEAT ((PASS1 T))
     <COND
      (<REPEAT ((POS- .TOG) (POS <REST .POS->) (SWAP <>) (FULL <BITS 36>)
		(UNRESOLVED ()) (COUNT 0) TMP (CBA <>)
		(HERE!-OP!-PACKAGE ,REL-M) ITM)
	 #DECL ((POS- POS UNRESOLVED) <SPECIAL LIST>
		(HERE!-OP!-PACKAGE) <SPECIAL ADDRESS> (SWAP) <SPECIAL ANY>
		(FULL) <SPECIAL BITS> (COUNT) <SPECIAL FIX>)
	 <COND
	  (<EMPTY? .POS>
	   <COND
	    (<NOT .PASS1> <RETURN T>)
	    (<AND <NOT .EOF>
		  <OR <NOT <EMPTY? .CODE-LIST>>
		      <COND (<NOT .INST-GETTER> <SET GEOF <SET EOF T>> <>)
			    (<TYPE? .INST-GETTER CHANNEL>
			     <SET TN
				  <READ .INST-GETTER
					'<PROG ()
					       <SET GEOF T>
					       <AND <BOUND? REOF> <SET REOF T>>
					       <SET EOF T>
					       <>>>>
			     <COND (<=? .TN '<END>>
				    <SET TN <>>
				    <SET EOF <SET GEOF T>>)>
			     <AND .TN <SET CODE-LIST (.TN)>>)
			    (T
			     <SET TN <APPLY .INST-GETTER>>
			     <COND (.TN <SET CODE-LIST (.TN)>)
				   (T <SET GEOF <SET EOF T>> <>)>)>>>
	     <COND (<AND <TYPE? .LIST-CHAN CHANNEL>
			 <COND (<G? .DLN 0> <SET DLN <- .DLN 1>> <>) (T)>>
		    <OR <TYPE? <1 .CODE-LIST> ATOM>
			<PRINTSTRING "	" .LIST-CHAN>>
		    <PRIN1 <1 .CODE-LIST> .LIST-CHAN>
		    <COND (<TYPE? <1 .CODE-LIST> ATOM>
			   <PRINTSTRING "								"
					.LIST-CHAN
					</ <- 71 <14 .LIST-CHAN>> 8>>
			   <PRINTSTRING ";" .LIST-CHAN>
			   <PRINC .COUNT .LIST-CHAN>)>
		    <TERPRI .LIST-CHAN>)>
	     <SET POS <REST <PUTREST .POS- .CODE-LIST>>>
	     <SET CODE-LIST <REST .CODE-LIST>>
	     <PUTREST .POS ()>)
	    (<NOT <EMPTY? .CNSTL>>
	     <COND (<AND <NOT .CBA> <SET CBA T> .MESS-CHAN>
		    <CMESS .MESS-CHAN "CONSTANTS BEGIN AT LOCATION" .COUNT>)>
	     <COND (<EMPTY? .CNSTLOC> <SET CNSTLOC (.HERE!-OP!-PACKAGE)>)
		   (T
		    <REPEAT ((L .CNSTLOC))
			    #DECL ((L) <LIST [REST ADDRESS]>)
			    <COND (<EMPTY? <REST .L>>
				   <PUTREST .L (.HERE!-OP!-PACKAGE)>
				   <RETURN>)>
			    <SET L <REST .L>>>)>
	     <SET POS <REST <PUTREST .POS- (!<1 .CNSTL>)>>>
	     <SET CNSTL <REST .CNSTL>>)
	    (T
	     <SET PASS1 <>>
	     <COND (<AND .CBA .MESS-CHAN>
		    <CMESS .MESS-CHAN
			   "CONSTANTS END AT LOCATION"
			   <- .COUNT 1>>)>
	     <RETURN <>>)>)
	  (<TYPE? <SET ITM <1 .POS>> ATOM>
	   <COND (<AND .PASS1
		       <NOT <GASSIGNED? .ITM>>
		       <NOT <ASSIGNED? .ITM>>
		       <NOT <GET .ITM .IND>>>
		  <PUT .ITM .IND .HERE!-OP!-PACKAGE>
		  <AND .MAK-SYM <ADD-SYM .LOC-SYM .ITM .COUNT>>
		  <COND (<AND .MESS-CHAN
			      .LIST-CHAN
			      <NOT <TYPE? .LIST-CHAN CHANNEL>>>
			 <CMESS .MESS-CHAN "LABEL" .ITM "AT LOCATION" .COUNT>)>
		  <SET POS <REST <SET POS- .POS>>>)
		 (T
		  <COND (.PASS1 <CER "MULTIPLY DEFINED LABEL" .ITM>)
			(T <PUT .ITM .IND>)>
		  <SET POS <REST <PUTREST .POS- <REST .POS>>>>)>)
	  (<COND
	    (<SET TMP
	      <OR
	       <AND <TYPE? .ITM FIX> .ITM>
	       <REPEAT ((REAL-ITM .ITM) (REST-ITMS ()) PART (INST 0) (TOPLEV T)
			VAL)
		 #DECL ((REST-ITM) LIST (INST) FIX)
		 <COND
		  (<TYPE? .ITM ATOM>
		   <COND (<SET PART <GET .ITM .IND>>
			  <AND .GLUE
			       <TYPE? .PART ADDRESS>
			       <BITVEC 1 .COUNT .BITV>>
			  .PART)
			 (<AND <NOT <MEMQ <GET <OBLIST? .ITM> OBLIST>
					  '![TMP!- 
					     ICC!-CC!-PACKAGE
					     CC!-PACKAGE!]>>
			       <SET PART <SQUOZE <SPNAME .ITM> 0 T>>
			       <SET PART <SQUOTA .PART>>>
			  <ADD-TO-FIXUPS .ITM .COUNT .SWAP <>>
			  .PART)
			 (<GASSIGNED? <SET TA .ITM>>
			  <AND <==? <OBLIST? .TA> ,MOB>
			       <ADD-TO-FIXUPS .TA .COUNT .SWAP <>>>
			  <SET PART ,.TA>)
			 (<ASSIGNED? .TA> <SET PART ..TA>)
			 (T
			  <COND (.PASS1
				 <PUT .TA .IND <>>
				 <SET UNRESOLVED (.REAL-ITM !.UNRESOLVED)>)
				(T
				 <CER "UNDEFINED SYMBOL"
				      .ITM
				      "USED AT"
				      .COUNT>)>
			  <SET PART 0>)>
		   <COND (<NOT <==? <PRIMTYPE .PART> WORD>>
			  <CER "BAD SYMBOL" .ITM "USED AT" .COUNT>
			  <SET PART 0>)>)
		  (<TYPE? .ITM MUDREF>
		   <SET PART <ADD-TO-B-FIXUPS .ITM .COUNT .SWAP <>>>)
		  (<AND <==? <PRIMTYPE .ITM> WORD>
			<OR .PASS1 <NOT <TYPE? .ITM CNST MCL ICL PCL>>>>
		   <SET PART .ITM>)
		  (<TYPE? .ITM FORM>
		   <COND
		    (<EMPTY? <SET TF .ITM>>
		     <CER "EMPTY FORM AT LOCATION" .COUNT>
		     <SET PART 0>)
		    (<AND <TYPE? <SET TN <1 .TF>> ATOM>
			  <GASSIGNED? <SET TA .TN>>
			  <APPLICABLE? ,.TA>
			  <OR <NOT <TYPE? ,.TA FIX>>
			      <G? <LENGTH .TF> 1>>>
		     <SET VAL <EVAL .ITM>>
		     <COND
		      (<NOT .TOPLEV>
		       <COND (<TYPE? .VAL SPLICE>
			      <AND <NOT <EMPTY? <CHTYPE .VAL LIST>>>
				   <CER "SPLICING MACRO NOT AT TOP LEVEL" .ITM>>
			      <SET PART 0>)
			     (T
			      <SET REAL-ITM
				   <SET ITM <COND (.SWAP (.VAL)) (T .VAL)>>>
			      <SET SWAP <>>
			      <AGAIN>)>)
		      (<TYPE? .VAL SPLICE>
		       <SET POS
			    <REST <PUTREST .POS-
					   (!<CHTYPE .VAL LIST>
					    !<REST .POS>)>>>
		       <RETURN <>>)
		      (T <SET REAL-ITM <SET ITM .VAL>> <AGAIN>)>)
		    (T
		     <COND (.SWAP
			    <SET ITM
				 <REPEAT ((L .ITM) (C ()))
					 #DECL ((L) <PRIMTYPE LIST> (C) LIST)
					 <COND (<EMPTY? .L> <RETURN .C>)>
					 <SET C ((<1 .L>) !.C)>
					 <SET L <REST .L>>>>
			    <SET SWAP <>>)>
		     <COND (<EMPTY? .REST-ITMS>
			    <SET REST-ITMS <CHTYPE .ITM LIST>>)
			   (T
			    <SET REST-ITMS (!<CHTYPE .ITM LIST> !.REST-ITMS)>)>
		     <SET FULL <BITS 18>>
		     <SET TOPLEV <>>
		     <SET PART 0>)>)
		  (<TYPE? .ITM LIST>
		   <COND (<EMPTY? <SET TL .ITM>>
			  <CER "EMPTY LIST USED AT" .COUNT>
			  <SET PART 0>)
			 (T
			  <SET SWAP <NOT .SWAP>>
			  <SET TOPLEV <>>
			  <COND (<NOT <EMPTY? <REST .TL>>>
				 <SET REST-ITMS (<REST .TL> !.REST-ITMS)>)>
			  <SET ITM <1 .TL>>
			  <AGAIN>)>)
		  (<AND .PASS1 <TYPE? .ITM VECTOR>>
		   <COND (<EMPTY? <SET TV .ITM>>
			  <CER "EMPTY VECTOR USED AT" .COUNT>)
			 (<EMPTY? .CNSTS>
			  <SET CNSTL <SET CNSTS (.TV)>>
			  <SET UNRESOLVED (<CHTYPE 1 CNST> !.UNRESOLVED)>)
			 (T
			  <REPEAT ((C .CNSTS) (N 1))
				  #DECL ((C) <LIST [REST VECTOR]> (N) FIX)
				  <COND (<=? <1 .C> .TV>
					 <SET UNRESOLVED
					      (<CHTYPE .N CNST> !.UNRESOLVED)>
					 <RETURN>)
					(<EMPTY? <REST .C>>
					 <PUTREST .C (.TV)>
					 <COND (<EMPTY? .CNSTL>
						<SET CNSTL <REST .C>>)>
					 <SET UNRESOLVED
					      (<CHTYPE <+ .N 1> CNST>
					       !.UNRESOLVED)>
					 <RETURN>)>
				  <SET N <+ .N 1>>
				  <SET C <REST .C>>>)>
		   <SET PART 0>)
		  (<AND <NOT .PASS1> <TYPE? .ITM CNST>>
		   <AND .GLUE <BITVEC 1 .COUNT .BITV>>
		   <SET PART <NTH .CNSTLOC <CHTYPE .ITM FIX>>>)
		  (<AND <NOT .PASS1> <TYPE? .ITM ICL>>
		   <AND .GLUE <BITVEC 1 .COUNT .BITV>>
		   <SET PART <CHTYPE .ITM ADDRESS>>)
		  (<AND <NOT .PASS1> <TYPE? .ITM MCL>>
		   <AND .GLUE <BITVEC 2 .COUNT .BITV>>
		   <SET PART
			<CHTYPE <+ .ILNTH <CHTYPE .ITM FIX> <CHTYPE ,REL-R FIX>>
				ADDRESS>>)
		  (<AND <NOT .PASS1> <TYPE? .ITM PCL>>
		   <AND .GLUE <BITVEC 3 .COUNT .BITV>>
		   <SET PART
			<CHTYPE <+ .ILNTH
				   .MCLNTH
				   <CHTYPE .ITM FIX>
				   <CHTYPE ,REL-R FIX>>
				ADDRESS>>)
		  (T
		   <CER "UNRECOGNIZED ITEM" .ITM "AT LOCATION" .COUNT>
		   <SET PART 0>)>
		 <PROG ((FULL .FULL))
		   #DECL ((FULL) BITS)
		   <COND
		    (<TYPE? .PART ADDRESS OPCODE BITS>
		     <COND (<AND <TYPE? .PART ADDRESS>
				 <==? <CHTYPE <GETBITS .PART <BITS 4 18>> FIX>
				      13>>		       ;"Is index ac M?"
			    <BITVEC 1 .COUNT .BITV>)>
		     <SET FULL <BITS 36>>)>
		   <COND
		    (<NOT <0? <SET PART <CHTYPE .PART FIX>>>>
		     <COND
		      (<NOT .SWAP>
		       <SET INST <PUTBITS .INST .FULL <+ .INST .PART>>>)
		      (T
		       <SET PART
			    <CHTYPE <PUTBITS <GETBITS <GETBITS .PART .FULL>
						      <BITS 18 18>>
					     <BITS 18 18>
					     .PART>
				    FIX>>
		       <SET INST <+ .INST .PART>>)>)>>
		 <COND (<EMPTY? .REST-ITMS>
			<SET TOPLEV T>
			<SET FULL <BITS 36>>
			<SET SWAP <>>
			<RETURN .INST>)
		       (T
			<SET ITM <SET REAL-ITM <1 .REST-ITMS>>>
			<SET REST-ITMS <REST .REST-ITMS>>
			<SET TOPLEV <>>
			<SET SWAP <>>)>>>>
	     <PUT .POS
		  1
		  <COND (<EMPTY? .UNRESOLVED> <CHTYPE .TMP FIX>)
			(<NOT .PASS1>
			 <CER "ITEMS UNRESOLVED AFTER SECOND PASS" .UNRESOLVED>
			 <SET UNRESOLVED ()>
			 <CHTYPE .TMP FIX>)
			(T
			 <SET TMP <FORM <CHTYPE .TMP ADDRESS> !.UNRESOLVED>>
			 <SET UNRESOLVED ()>
			 .TMP)>>
	     <BITCHECK .COUNT .BITV>
	     <SET COUNT <+ .COUNT 1>>
	     <SET HERE!-OP!-PACKAGE
		  <CHTYPE <+ 1 <CHTYPE .HERE!-OP!-PACKAGE FIX>> ADDRESS>>
	     <SET POS <REST <SET POS- .POS>>>)>)>>
       <RETURN>)>>
   <SET RSUB
	<RSUBR [<CHTYPE
		 <UVECTOR !<REST .TOG>
			  !.INTRS
			  !<REST .GLOB-SYM>
			  <CHTYPE <PUTBITS <- <LENGTH .GLOB-SYM> 1>
					   <BITS 18 18>
					   <LENGTH .INTRS>>
				  FIX>>
		 CODE>
		!.IMPS
		!.MCS
		!.PQS]>>
   <COND (,ONLY-FAST-OUTPUT
	  <PUT .RSUB RSUBR <MAKE-B-FIXUPS .FIXES>>)
	 (ELSE <PUT .RSUB RSUBR (,MUDDLE !.FIXES)>)>
   <COND (.GLUE <PUT .RSUB GLUE <UVECTOR !.BITV !.INTRS>>)>
   <COND (.MAK-SYM <PUT .RSUB FREEZE <UVECTOR !<REST .LOC-SYM>>>)>
   <REPEAT ((L .SUB-ENTS))
	   #DECL ((L) <LIST [REST <OR <LIST ANY> ATOM>]>)
	   <COND (<EMPTY? .L> <RETURN>)>
	   <SETG <2 <1 .L>>
		 <RSUBR-ENTRY [.RSUB !<REST <1 .L>>] <1 <1 .L>>>>
	   <PUT .L 1 <2 <1 .L>>>
	   <SET L <REST .L>>>
   (<COND (<==? T .NAMED> <SETG <1 .IMPS> .RSUB> <1 .IMPS>)
	  (.RSUB)>
    !.SUB-ENTS)>

<DEFINE MAKE-B-FIXUPS (FIXES "AUX" LN)
	#DECL ((FIXES) <LIST [REST <OR MUDREF FIX>]> (VALUE) UVECTOR (LN) FIX)
	<SET FIXES (<SET LN <+ <LENGTH .FIXES> 1>> ,MUDDLE !.FIXES)>
	<MAPF ,UVECTOR
	      <FUNCTION (X) <CHTYPE .X FIX>> <REST .FIXES>>>


<DEFINE BITCHECK (WHERE L "AUX" (LN 0) (WRD <+ 1 </ .WHERE 18>>))
	#DECL ((WHERE LN WRD) FIX (L) <LIST FIX [REST FIX]>)
	<COND (<G? .WRD <SET LN <LENGTH .L>>>
	       <PUTREST <REST .L <- .LN 1>> <ILIST <- .WRD .LN> 0>>)>>


<DEFINE BITVEC (COD WHERE L
		"AUX" (LN 0) (WRD <+ 1 </ .WHERE 18>>) (BIT <MOD .WHERE 18>))
	#DECL ((COD WHERE WRD BIT LN) FIX (L) <LIST FIX [REST FIX]>)
	<COND (<G? .WRD <SET LN <LENGTH .L>>>
	       <PUTREST <REST .L <- .LN 1>> <ILIST <- .WRD .LN> 0>>)>
	<SET L <REST .L <- .WRD 1>>>
	<PUT .L 1 <PUTBITS <1 .L> <BITS 2 <- 34 <* 2 .BIT>>> .COD>>>

<DEFINE ADD-TO-B-FIXUPS (ITM WHERE SWAP WIN? "AUX" TEM) 
   #DECL ((WHERE) FIX (FIXES) LIST)
   <OR ,ONLY-FAST-OUTPUT <CER "BINARY FIXUPS BEING MISUSED">>
   <SET WHERE <+ .WHERE 1>>
   <AND .SWAP <SET WHERE <- .WHERE>>>
   <COND (.WIN? <SET ITM <CHTYPE <ATOSQ ,.ITM> MUDREF>>)
	 (<TYPE? .ITM ATOM>
	  <SET ITM <CHTYPE <SQUOZE <SPNAME .ITM>> MUDREF>>)>
   <COND
    (<TYPE? .ITM MUDREF>
     <SET ITM <CHTYPE  <PUTBITS .ITM <BITS 4 32> 8> MUDREF>>
     <COND
      (<SET TEM <MEMQ .ITM .FIXES>>
       <MAPR <>
	<FUNCTION (L "AUX" (IT <1 .L>)) 
		<COND (<AND <TYPE? .IT FIX> <0? .IT>>
		       <PUT .L 1 <CHTYPE <PUTBITS 0 <BITS 18 18> .WHERE> FIX>>
		       <MAPLEAVE>)
		      (<OR <NOT <TYPE? .IT FIX>>
			   <0? <CHTYPE <GETBITS .IT <BITS 18>> FIX>>>
		       <AND <TYPE? .IT FIX>
			    <PUT .L
				 1
				 <CHTYPE <PUTBITS .IT <BITS 18> .WHERE> FIX>>>
		       <PUTREST .L (0 !<REST .L>)>
		       <MAPLEAVE>)>>
	<REST .TEM>>)
      (ELSE
       <SET FIXES
	    (.ITM
	     <CHTYPE <PUTBITS .WHERE <BITS 18 18> <SQUOTA .ITM>> FIX>
	     0
	     !.FIXES)>)>)
    (ELSE <CER "BAD BINARY FIXUPS HACK">)>
   <SQUOTA <CHTYPE .ITM FIX>>>

<DEFINE ADD-TO-FIXUPS (ATM WHERE SWAP WIN? "AUX" SPS (TEM .ATM)) 
   #DECL ((ATM) ATOM (WHERE) FIX (SPS) <LIST [REST ATOM FIX LIST]>)
   <PROG ()
     <AND ,ONLY-FAST-OUTPUT
	  <RETURN <ADD-TO-B-FIXUPS .ATM .WHERE .SWAP .WIN?>>>
     <SET SPS .FIXES>
     <OR .WIN?
	 <SET TEM <LOOKUP <SPNAME .ATM> ,MOB>>
	 <SET TEM <INSERT <SPNAME .ATM> ,MOB>>>
     <SET ATM <GET .ATM ADD-TO-FIXUPS '.TEM>>
     <SET WHERE <+ .WHERE 1>>
     <COND (.SWAP <SET WHERE <- .WHERE>>)>
     <COND
      (<EMPTY? .SPS>
       <SET FIXES
	    (.ATM
	     <COND (.WIN? <CHTYPE ,.ATM FIX>)
		   (<CHTYPE <SQUOTA <SQUOZE <SPNAME .ATM>>> FIX>)>
	     (.WHERE))>)
      (T
       <REPEAT ((SPL <REST .SPS 2>))
	 #DECL ((SPL) <LIST LIST>)
	 <COND
	  (<EMPTY? .SPS>
	   <PUTREST .SPL
		    (.ATM
		     <COND (.WIN? <CHTYPE ,.ATM FIX>)
			   (<CHTYPE <SQUOTA <SQUOZE <SPNAME .ATM>>> FIX>)>
		     (.WHERE))>
	   <RETURN>)>
	 <SET SPL <REST .SPS 2>>
	 <COND (<==? .ATM <1 .SPS>>
		<PUT .SPL 1 (.WHERE !<1 .SPL>)>
		<RETURN>)>
	 <SET SPS <REST .SPL>>>)>>>

<DEFINE ADD-SYM (SML SYM C)
	#DECL ((SML) <LIST FIX [REST FIX]> (C) FIX)
	<PUTREST .SML
		 (<CHTYPE <SQUOZE <SPNAME .SYM> 1> FIX> .C !<REST .SML!>)>>

"KLUDGE TO MAKE $TMUMBLES FIX UP CORRECTLY"

<MAPF <>
      #FUNCTION ((X "AUX" ATM) 
		 <COND (<SET ATM
			     <LOOKUP <STRING "$T" <SPNAME .X>>
				     <GET MUDDLE OBLIST>>>
			<PUT .ATM ADD-TO-FIXUPS $TLOSE>)>)
      <ALLTYPES>>

<DEFINE CER ("TUPLE" COMPLAINTS "AUX" (MC .OUTCHAN))
	<PRINTSTRING "**************
ASSEMBLY ERROR -- " .MC>
	<CMESS .MC !.COMPLAINTS>
	<PRINTSTRING "**************
" .MC>>

<DEFINE CMESS (OUTCHAN "TUPLE" COMPLAINTS)
	#DECL ((OUTCHAN) <SPECIAL ANY> (COMPLAINTS) TUPLE)
	<COND (<NOT .OUTCHAN>)
	      (<NOT <EMPTY? .COMPLAINTS>>
	       <REPEAT ()
		       <PRINC <1 .COMPLAINTS>>
		       <COND (<EMPTY? <SET COMPLAINTS <REST .COMPLAINTS>>>
			      <RETURN>)>
		       <PRINTSTRING " ">>
	       <TERPRI>)>
	T>

<DEFINE QUOTER (GOODIE LATM NATM TW "AUX" (L ..LATM) (N 0))
	#DECL ((LATM NATM) ATOM (L UNRESOLVED) LIST (N) FIX
	       (TW) <PRIMTYPE WORD>)
	<COND (<EMPTY? .L> <SET .LATM (.GOODIE)> <SET .NATM <+ .N 2>>)
	      (T
	       <REPEAT ()
		       <COND (<=? .GOODIE <1 .L>> <RETURN>)
			     (<EMPTY? <REST .L>>
			      <PUTREST .L (.GOODIE)>
			      <SET .NATM <+ 2 <SET N <+ .N 2>>>>
			      <RETURN>)>
		       <SET N <+ .N 2>>
		       <SET L <REST .L>>>)>
	<SET UNRESOLVED (<PUTBITS .TW <BITS 18> .N> !.UNRESOLVED)>
	0>

<SETG REL-M <CHTYPE <PUTBITS 0 <BITS 18 18> 13> ADDRESS>>

<SETG REL-R <CHTYPE <PUTBITS 0 <BITS 18 18> 14> ADDRESS>>

<SETG REL-AB <CHTYPE <PUTBITS 0 <BITS 18 18> 9> ADDRESS>>

<SETG REL-TB <CHTYPE <PUTBITS 0 <BITS 18 18> 10> ADDRESS>>

"THE FOLLOWING ARE IN OP, BUT MAYBE DEFINED HERE"

<OR <LOOKUP "COMPILE" <ROOT>>
    <BLOCK (<MOBLIST OP!-PACKAGE> <ROOT>)>>

TITLE 

PSEUDO 

INTERNAL-ENTRY 

SUB-ENTRY 

DECLARE 

MQUOTE 

IQUOTE 

PQUOTE 

CQUOTE 

ARG 

GETYP 

PUTYP 

MCALL 

ACALL 

SYMDEF 

TYPE-CODE 

TYPE-WORD 

INTGO

DSAVAC 

IFOPSYS

*INSERT 

SIXBIT 

SQUOZE 

STACK 

BYTE 

DPUSH 

DPOP 

DMOVE 

DMOVEM 

SYMDEF? 

UNDEF? 

IF-NEEDED 

<OR <LOOKUP "COMPILE" <ROOT>> <ENDBLOCK>>

"HERE IS THE DEFINITION FOR SOME OF THE KLUDGES"

<DEFINE TYPE-CODE (TYP "AUX" TMP)
	<COND (<NOT <MEMQ .TYP <ALLTYPES>>> <CER "BAD TYPE-CODE" .TYP> 0)
	      (<L=? <CHTYPE <SET TMP <TYPE-C .TYP>> FIX> ,NUMPRI>
	       <CHTYPE .TMP FIX>)
	      (.SWAP
	       <CER "SWAPPED TYPE-CODE OF NEWTYPE" .TYP "USE TYPE-WORD">
	       0)
	      (T <PQUOTE .TMP> <PUTBITS #OPCODE *20000000* <BITS 1> 1>)>>

<DEFINE TYPE-WORD (TYP "OPTIONAL" (CRUFT 0))
	#DECL ((CRUFT) FIX)
	<COND (<NOT <MEMQ .TYP <ALLTYPES>>> <CER "BAD TYPE-CODE" .TYP> 0)
	      (<G? <CHTYPE <TYPE-C .TYP> FIX> ,NUMPRI>
	       <PQUOTE <TYPE-W .TYP <TYPEPRIM .TYP> .CRUFT>>
	       1)
	      (<0? .CRUFT>
	       <ADD-TO-FIXUPS $TLOSE .COUNT .SWAP <>>
	       <CHTYPE <+ <CHTYPE ,$TLOSE FIX> <CHTYPE <TYPE-C .TYP> FIX>>
		       ADDRESS>)
	      (T [<FORM (<CHTYPE <TYPE-C .TYP> FIX>) .CRUFT>])>>

<DEFINE MCALL (NARC FCN "AUX" TMP)
	<COND (<G? .NARC 15>
	       <CHTYPE (<FORM `MOVEI `A* .NARC> <FORM ACALL `A* .FCN>)
		       SPLICE>)
	      (T
	       <COND (<AND <GASSIGNED? .FCN> <TYPE? <SET TMP ,.FCN> FSUBR SUBR>>
		      <ADD-TO-FIXUPS .FCN .COUNT .SWAP T>
		      <SET TMP <CHTYPE .TMP FIX>>)
		     (T <SET TMP <CQUOTE .FCN>>)>
	       <FORM `MCALL* <PUTBITS <CHTYPE 0 OPCODE>
				      <BITS 27>
				      <PUTBITS .TMP <BITS 4 23> .NARC>>>)>>

<DEFINE ACALL (NARC FCN "AUX" TMP)
	<COND (<AND <GASSIGNED? .FCN> <TYPE? <SET TMP ,.FCN> SUBR FSUBR>>
	       <ADD-TO-FIXUPS .FCN .COUNT .SWAP T>
	       <SET TMP <CHTYPE .TMP FIX>>)
	      (T <SET TMP <CQUOTE .FCN>>)>
	<FORM `ACALL* .NARC .TMP>>

<DEFINE UNDEF? (ATM) <NOT <GET .ATM .IND 'T>>>

<DEFINE IF-NEEDED (ATM "ARGS" COD)
	<COND (<UNDEF? .ATM> <CHTYPE .COD SPLICE>) (T #SPLICE ())>>

<DEFINE IQUOTE (VAL "OPTIONAL" SYM "AUX" (N 6) (LST .IMPS)) 
	#DECL ((N ILNTH) FIX (LST) LIST)
	<REPEAT ()
		<COND (<EMPTY? <REST .LST>>
		       <PUTREST .LST (.VAL)>
		       <SET ILNTH .N>
		       <COND (<ASSIGNED? SYM>
			      <PUT .SYM
				   .IND
				   <PUTBITS ,REL-R <BITS 18> <- .N 2>>>)>
		       <SET UNRESOLVED
			    (<CHTYPE <PUTBITS ,REL-R <BITS 18> <- .N 2>> ICL>
			     !.UNRESOLVED)>
		       <RETURN 0>)>
		<SET LST <REST .LST>>
		<SET N <+ .N 2>>>>

<DEFINE PQUOTE (VAL "AUX" (FOO 0))
	#DECL ((FOO) <SPECIAL FIX>)
	<QUOTER .VAL PQS FOO <CHTYPE 0 PCL>>>

<DEFINE CQUOTE (VAL) <QUOTER .VAL MCS MCLNTH <CHTYPE 0 MCL>>>

<DEFINE MQUOTE (VAL) <+ 1 <PQUOTE .VAL>>>

<DEFINE PSEUDO ("TUPLE" L) #SPLICE ()>

<DEFINE TITLE (NAME "OPTIONAL" (SMASH T)) 
	#DECL ((IMPS) <LIST ATOM>)
	<COND (<NOT <TYPE? .NAME ATOM>>
	       <CER "BAD OR MULTIPLE TITLE OF" .NAME>)
	      (.NAMED
	       <SET MORE-INSTS (!.POS !.CODE-LIST)>
	       <SET DONT-LIST-N <LENGTH .POS>>
	       <SET EOF T>
	       <SET POS (())>
	       #SPLICE ())
	      (T
	       <CMESS .MESS-CHAN "TITLE: " .NAME>
	       <ADD-SYM .GLOB-SYM .NAME .COUNT>
	       <PUT .IMPS 1 .NAME>
	       <SET NAMED <OR .SMASH 0>>)>
	#SPLICE ()>

<DEFINE INTERNAL-ENTRY (NAME NARGS)
	#DECL ((INTRS) <LIST [REST FIX]> (MESS-CHAN) <OR CHANNEL FALSE>)
	<COND (<NOT <TYPE? .NAME ATOM>> <CER "ILLEGAL INTERNAL-ENTRY" .NAME>)
	      (ELSE
	       <CMESS .MESS-CHAN "INTERNAL-ENTRY" .NAME "AT LOCATION" .COUNT>
	       <SET INTRS (<CHTYPE <PUTBITS .COUNT <BITS 18 18> .NARGS> FIX> !.INTRS)>)>
	<CHTYPE (.NAME) SPLICE>>

<DEFINE SUB-ENTRY (NAME "OPTIONAL" 'DCLS)
	#DECL ((SUB-ENTS) <LIST [REST LIST]> (MESS-CHAN) <OR CHANNEL FALSE>)
	<COND (<NOT <TYPE? .NAME ATOM>> <CER "ILLEGAL SUB-ENTRY" .NAME>)
	      (T
	       <CMESS .MESS-CHAN "SUB-ENTRY" .NAME "AT LOCATION" .COUNT>
	       <ADD-SYM .GLOB-SYM .NAME .COUNT>
	       <SET SUB-ENTS
		    (<COND (<ASSIGNED? DCLS> (.COUNT .NAME <CHTYPE .DCLS DECL>))
			   (T (.COUNT .NAME))>
		     !.SUB-ENTS)>)>
	#SPLICE ()>

<DEFINE DECLARE ('DCLS)
	#DECL ((IMPS) <LIST ANY> (ILNTH) FIX)
	<COND (<EMPTY? <REST .IMPS>>
	       <PUTREST .IMPS (<CHTYPE .DCLS DECL>)>
	       <SET ILNTH <+ .ILNTH 2>>)
	      (T <CER "DECLARE OUT OF PLACE" .DCLS>)>
	#SPLICE ()>

<DEFINE ARG (N) #DECL ((N) FIX) <PUTBITS ,REL-AB <BITS 18> <+ .N .N -2>>>

<DEFINE GETYP ('AC "ARGS" LOC) <FORM `LDB .AC [<FORM '(74560) !.LOC>]>>

<DEFINE PUTYP ('AC "ARGS" LOC) <FORM `DPB .AC [<FORM '(74560) !.LOC>]>>

<DEFINE SYMDEF (ATM VAL) <PUT .ATM .IND .VAL> #SPLICE ()>

<DEFINE INTGO () #SPLICE (<`SKIPGE INTFLG> <`JSR LCKINT>)>

<DEFINE DSAVAC ("TUPLE" SPEC "AUX" V (SUV <BACK ,DSAVAC-UV <LENGTH .SPEC>>))
	#DECL ((SUV) <UVECTOR [REST FIX]> (V) VECTOR)
	<REPEAT ((TSPEC .SPEC) (TSUV .SUV) X)
	  #DECL ((TSUV) <UVECTOR [REST FIX]> (X) ANY)
	  <COND (<SET X <1 .TSPEC>>
		 <COND (<AND <TYPE? .X ATOM> <VALID-TYPE? .X>>
			<COND (<==? .X TEMPLATE>
			       <PUT .TSUV 1 63>
			       <PUT .TSUV 2 <CONV-AC <2 .TSPEC>>>
			       <SET TSPEC <REST .TSPEC>>
			       <SET TSUV <REST .TSUV>>)
			      (<PUT .TSUV 1 <CHTYPE <PRIMTYPE-C .X> FIX>>)>)
		       (<PUT .TSUV 1 <CONV-AC .X>>)>)
		(<PUT .TSUV 1 0>)>
	  <COND (<EMPTY? <SET TSUV <REST .TSUV>>>
		 <RETURN>)>
	  <SET TSPEC <REST .TSPEC>>>
	<COND (<G? <LENGTH .SUV> 6>
	       <SET V <IVECTOR 2>>)
	      (<SET V <IVECTOR 1>>)>
	<FORM
	   SAVACS*
	   <PROG ()
	    <MAPR <>
		  <FUNCTION (V "AUX" (TEMP <FORM (0) 0>))
			   #DECL ((V) VECTOR (TEMP) <FORM LIST FIX>)
			   <PUT <1 .TEMP> 1 <CONV-3 .SUV>>
			   <COND (<G=? <LENGTH .SUV> 3>
				  <SET SUV <REST .SUV 3>>
				  <PUT .TEMP 2 <CONV-3 .SUV>>)>
			   <COND (<G=? <LENGTH .SUV> 3>
				  <SET SUV <REST .SUV 3>>)>
			   <PUT .V 1 .TEMP>>
		 .V>
	    .V>>>

<DEFINE CONV-3 (UV "AUX" (TEMP 0))
  #DECL ((UV) <UVECTOR [REST FIX]> (TEMP) FIX)
  <MAPF <>
    <FUNCTION (NUM BPTR) #DECL ((NUM) FIX (BPTR) BITS)
      <SET TEMP <PUTBITS .TEMP .BPTR .NUM>>>
    .UV
    '![#BITS *140600000000*
       #BITS *060600000000*
       #BITS *000600000000*]>
  .TEMP>

<DEFINE CONV-AC (FOO) #DECL ((FOO) <OR ATOM FIX>)
  <COND (<TYPE? .FOO FIX>
	 .FOO)
	(<GASSIGNED? .FOO>
	 ,.FOO)
	(..FOO)>>

<DEFINE IFOPSYS IFO ("ARGS" ARG "AUX" OP NUM)
  #DECL ((ARG) <LIST [REST <OR ATOM LIST>]> (OP) ATOM (NUM) FIX)
  <COND (<EMPTY? .ARG> <RETURN #SPLICE () .IFO>)>
  <COND (<NOT <GASSIGNED? ASSEMBLY-OPSYS>>
	 <PROG ((OUTCHAN .OUTCHAN))
	   <RESET .INCHAN>
	   <COND (<L=? <LENGTH .ARG> 2>
		  <PRINC "Is this assembly for ">
		  <PRINC <SET OP <GOPSYS <1 .ARG>>>>
		  <PRINC "?
">
		  <COND (<YES/NO>
			 <SETG ASSEMBLY-OPSYS .OP>)
			(<==? <LENGTH .ARG> 2>
			 <SETG ASSEMBLY-OPSYS <SET OP <GOPSYS <2 .ARG>>>>)
			(<SET OP T>)>)
		 (<PRINC "Is this assembly for">
		  <SET NUM 0>
		  <MAPF <>
			<FUNCTION (X) #DECL ((X) <OR ATOM LIST>)
				  <CRLF>
				  <PRIN1 <SET NUM <+ .NUM 1>>>
				  <PRINC ") ">
				  <PRINC <GOPSYS .X>>>
			.ARG>
		  <PRINC "?  Answer 1, 2, or 3
">
		  <SETG ASSEMBLY-OPSYS
			<SET OP
			     <GOPSYS <NTH .ARG <GNUM>>>>>)>
	   <CRLF>>)
	(<SET OP ,ASSEMBLY-OPSYS>)>
  <REPEAT (X Y)
    #DECL ((X) <OR ATOM LIST> (Y) <OR ATOM FALSE LIST>)
    <COND (<OR <==? <SET Y <GOPSYS <SET X <1 .ARG>>>> .OP>
	       <AND <TYPE? .Y LIST> <MEMQ .OP .Y>>>
	   <RETURN
	    <COND (<TYPE? .X ATOM> #SPLICE ())
		  (T <CHTYPE <REST .X> SPLICE>)>>)
	  (<EMPTY? <SET ARG <REST .ARG>>>
	   <RETURN #SPLICE ()>)>>>

<DEFINE GOPSYS (X) #DECL ((X) <OR ATOM LIST>)
  <COND (<TYPE? .X LIST>
	 <COND (<EMPTY? .X> <>)
	       (<SET X <1 .X>>)>)>
  <COND (<==? .X T>
	 ITS)
	(.X)>>

<DEFINE YES/NO ()
  <COND (<MEMQ <TYI> "YyTt"> T)>>

<DEFINE GNUM ("AUX" C)
  <SET C <TYI>>
  <- <CHTYPE .C FIX> <CHTYPE !\0 FIX>>>

<DEFINE *INSERT (STR)
	#DECL ((STR) STRING)
	<PROG (CHN VAL)
	      <COND (<NOT <SET CHN <OPEN "READ" .STR>>>
		     <CER "BAD INSERT FILE NAME" .STR>
		     #SPLICE ())
		    (T
		     <REPEAT ((PS .POS))
			     #DECL ((PS) <LIST ANY>)
			     <PUTREST .PS (<READ .CHN '<RETURN>> !<REST .PS!>)>
			     <SET PS <REST .PS>>>
		     <CLOSE .CHN>
		     #SPLICE ())>>>

<DEFINE SIXBIT (STR "AUX" (WORD 0) (POS 30) (CHR 0))
	#DECL ((STR) STRING (WORD POS CHR) FIX)
	<REPEAT ()
		<COND (<OR <EMPTY? .STR> <L? .POS 0>>
		       <RETURN <CHTYPE .WORD OPCODE>>)
		      (<OR <L? <SET CHR <CHTYPE <1 .STR> FIX>> 32>
			   <G? .CHR 122>>
		       <CER "BAD CHAR IN SIXBIT" <1 .STR>>
		       <RETURN 0>)
		      (<G=? .CHR 96> <SET CHR <- .CHR 64>>)
		      (<SET CHR <- .CHR 32>>)>
		<SET WORD <PUTBITS .WORD <BITS 6 .POS> .CHR>>
		<SET STR <REST .STR>>
		<SET POS <- .POS 6>>>>

<DEFINE SQUOZE (STR
		"OPTIONAL" (HIBITS 0) (ONLY-GOOD <>)
		"AUX" (MULF <* 40 40 40 40 40 40>) (VAL 0) (COUNT 6) C (TC 0))
	#DECL ((HIBITS) <PRIMTYPE WORD> (VAL COUNT TC MULF) FIX (C) CHARACTER
	       (STR) STRING)
	<REPEAT ()
		<COND (<OR <EMPTY? .STR> <L? .COUNT 1>>
		       <RETURN <CHTYPE <PUTBITS .VAL <BITS 4 32> .HIBITS>
				       OPCODE>>)>
		<SET TC <CHTYPE <SET C <1 .STR>> FIX>>
		<SET STR <REST .STR>>
		<COND (<AND <G=? .TC <ASCII !\0>> <L=? .TC <ASCII !\9>>>
		       <SET TC <- .TC 47>>)
		      (<AND <G=? .TC <ASCII !\A>> <L=? .TC <ASCII !\Z>>>
		       <SET TC <- .TC 54>>)
		      (<AND <G=? .TC <ASCII !\a>> <L=? .TC <ASCII !\z>>>
		       <SET TC <- .TC 86>>)
		      (<==? .C !\.> <SET TC 37>)
		      (<==? .C !\$> <SET TC 38>)
		      (<==? .C !\%> <SET TC 39>)
		      (.ONLY-GOOD <RETURN <>>)
		      (T <AGAIN>)>
		<SET COUNT <- .COUNT 1>>
		<SET VAL <+ .VAL <* .TC <SET MULF </ .MULF 40>>>>>>>

<DEFINE STACK ("TUPLE" ATMS "AUX" (N 0))
	<REPEAT ()
		<COND (<EMPTY? .ATMS> <RETURN #SPLICE ()>)>
		<PUT <1 .ATMS>
		     .IND
		     <CHTYPE <+ <CHTYPE ,REL-TB FIX> .N> ADDRESS>>
		<SET N <+ .N 2>>
		<SET ATMS <REST .ATMS>>>>

<DEFINE BYTE (BOUND SIZE "ARGS" LOC)
	[<FORM (<+ <* .BOUND 4096> <* .SIZE 64>>) !.LOC>]>

<DEFINE SYMDEF? (ITM) <GET .ITM .IND>>

<DEFINE DPUSH ("ARGS" LOC)
	<CHTYPE (<FORM `PUSH !.LOC> <FORM `PUSH 1 !.LOC>) SPLICE>>

<DEFINE DPOP ("ARGS" LOC) <CHTYPE (<FORM `POP 1 !.LOC> <FORM `POP !.LOC>) SPLICE>>

<DEFINE DMOVE ("ARGS" LOC)
	<CHTYPE (<FORM `MOVE !.LOC> <FORM `MOVE (32) 1 !.LOC>)
		SPLICE>>

<DEFINE DMOVEM ("ARGS" LOC)
	<CHTYPE (<FORM `MOVEM !.LOC> <FORM `MOVEM (32) 1 !.LOC>)
		SPLICE>>

<COND (<NOT ,NO-OPS> <UNASSIGN READ-TABLE>)>

<OR <LOOKUP "COMPILE" <ROOT>> <ENDPACKAGE>>
