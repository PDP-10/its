
<PACKAGE "DECLER" "DEC">

<ENTRY DECLTRY>

<ENTRY SEARCH>

<ENTRY STOP-DECL>

<ENTRY CONDENSE>

;"top-level funcion which group-loads file and causes decl formats to be inserted 
  in the functions."
<DEFINE DECLTRY (FILE "AUX" NAME L )
       #DECL ((FILE) STRING (NAME) ATOM (L) FIX (VALUE) STRING)
       <SET NAME <GROUP-LOAD .FILE>>
       <PUT .NAME CHANNEL>
       <NEWTYPE WRONG FIX>
       <SET L <LENGTH ..NAME>>
       <REPEAT ((N 1) PRGM) 
          #DECL ((N) FIX (PRGM) ANY)
              <SET PRGM <.N ..NAME>>
              <SET N <+ .N 1>>
              <COND (<==? <1 .PRGM> DEFINE>
                     <INSERTT .PRGM 3> <SEARCH .PRGM>)
                    (T <SEARCH .PRGM>)>
              <AND <G? .N .L> <RETURN >>>
        "Ready for Decling">

;"inserts decl formats for SEARCH and DECLTRY"
<DEFINE INSERTT (FUNC X "AUX" ARGS A (B ())  (DECLSS ((VALUE) WRONG)))
     #DECL ((FUNC ) <OR FUNCTION FORM> (X) FIX (A B) LIST 
            (ARGS) LIST (DECLSS) <OR LIST DECL>)
       <COND (<AND <TYPE? <.X .FUNC> 'ATOM>   ;"takes care of activations"
                   <SET DECLSS ((<.X .FUNC>) ACTIVATION !.DECLSS)>
                   <SET X <+ .X 1>> <>>)
             (<AND <TYPE? <<+ .X 1> .FUNC> 'DECL> ;"preserves user decls"
              <SET A <OLDEC <CHTYPE <<+ .X 1> .FUNC> LIST>>>
              <SET B <2 .A>>
              <PUTREST <REST .FUNC <- .X 1>> <REST .FUNC <+ .X 1>>>
              <COND (<MEMBER '(VALUE) <1 .A>>
                     <COND (<==? <LENGTH .DECLSS> 4>
                            <PUTREST <REST .DECLSS 1> <1 .A>>)
                           (T <SET DECLSS <1 .A>>)>)
                    (T <PUTREST <REST .DECLSS <- <LENGTH .DECLSS> 1>> <1 .A>>)> <>>)  
             (<NOT <EMPTY? <.X .FUNC> >> ;"the loop makes a list (decl style) of all args
                                          plus (VALUE)"
                <SET ARGS <.X .FUNC>>
                <SET DECLSS <REPEAT ((DECS ()) Z)
                <COND (<MONAD? .ARGS>
                       <COND (<EMPTY? .DECS> <RETURN .DECLSS>)
                             (<PUTREST <REST .DECS <-< LENGTH .DECS> 1>> .DECLSS>
                              <RETURN .DECS>)>)
                      (<TYPE? <1 .ARGS> STRING>
                       <SET ARGS <REST .ARGS>>)  
                      (<TYPE? <1 .ARGS> LIST>  ;"labels args to be type of 2nd element
                                                 unless its a form (function calls)"
                       <COND (<MEMBER  <1 <1 .ARGS>> .B>)
                             (<AND <SET Z <TYPE <2 <1 .ARGS>>>> <>>)
                             (<MEMBER .Z ( 'FIX 'FLOAT 'ATOM 'LIST 'STRING 'FALSE 
                                           'VECTOR 'UVECTOR)>
                              <SET DECS ((<1 <1 .ARGS>>) <TYPE <2 <1 .ARGS>>> !.DECS)>)
                             (T <SET DECS ((<1 <1 .ARGS>>) 'WRONG !.DECS)>)>                             
                       <SET ARGS <REST .ARGS>>)
                      (<TYPE? <1 .ARGS> ATOM>
                       <COND (<MEMBER <1 .ARGS> .B>) 
                             (T <SET DECS ((<1 .ARGS>) WRONG !.DECS)>)>
                       <SET ARGS <REST .ARGS>>)>>>)>
           <PUTREST <REST .FUNC <- .X 1>> (<CHTYPE .DECLSS DECL>!<REST .FUNC .X>)>
              ;"puts new decl into func">

<SETG GET-DECL
      %<FIXUP!-RSUBRS '[
#CODE ![17199005697 23748384439 -19846922238 17859346443 23085681768 6076110309 
0 2!]
			GET-DECL]
		      '(48 CLLOC!-MUDDLE 235191 (2) FINIS!-MUDDLE 232552 (5))>>

 
;"Calls insert if it finds the type function or a prog or a repeat."
<DEFINE SEARCH (FUNC)
       #DECL ((FUNC) ANY (VALUE) ATOM)
        <COND (<EMPTY? .FUNC>)
              (<TYPE? .FUNC 'FUNCTION> <INSERTT .FUNC 1>
               <SEARCH <REST .FUNC>>)
              (<NOT <MONAD? <1 .FUNC>>>
               <SEARCH <1 .FUNC>><SEARCH <REST .FUNC>>)
              (<AND <OR <==? <1 .FUNC> 'PROG><==? <1 .FUNC> 'REPEAT>
			<==? <1 .FUNC> 'FUNCTION>>
                    <TYPE? .FUNC FORM>
		    <G? <LENGTH .FUNC> 2>>
               <INSERTT .FUNC 2><SEARCH <REST .FUNC>>)
              (T <SEARCH <REST .FUNC>>)>>

;"makes a list composed of 2 lists. The purpose is to preserve user decls"
<DEFINE OLDEC (OLLIS "OPTIONAL" (A ()) (B ())) ;"A is the decl list and
           #DECL ((OLLIS A B VALUE ) LIST)             B is a list of decl args"
      <REPEAT ((OLLARG <1 .OLLIS>))
              #DECL ((OLLARG) LIST (VALUE ) ATOM)
            <COND (<==? <2 .OLLIS> 'ACTIVATION> <RETURN T>)
                  (<SET A ((<1 .OLLARG>) <2 .OLLIS> !.A)>
                   <SET B (<1 .OLLARG> !.B)>
                   <SET OLLARG <REST .OLLARG>>
                   <COND (<MONAD? .OLLARG> <RETURN T>)>)>>
      <SET OLLIS <REST .OLLIS 2>>
      <COND (<MONAD? .OLLIS> <LIST .A .B>)
            (T <OLDEC  .OLLIS  .A .B>)>>

;"Responds to the ERROR interrupt. Checks for the proper type of error(TYPE-MISMATCH)
  and if it has been called within itself.  If not it enters PROG to fix the decl."
<DEFINE FIXER ("TUPLE" T "AUX" DECL FUNC)
       #DECL ((T) TUPLE (DECL) <OR LIST FALSE> (FUNC) <OR LIST FUNCTION>)
        <COND(<BOUND? ERRORBOUND>)
            (<NOT <==? <2 .T> 'TYPE-MISMATCH!-ERRORS>>)
            (<INT-LEVEL 0>
             <PROG IT (ERRORBOUND (LERR\ !-INTERRUPTS <CHTYPE <1 .T> FRAME>)
		    (ERF <FRAME <1 .T>>))
	      #DECL ((ERRORBOUND) <SPECIAL ANY> (IT) <SPECIAL ACTIVATION> 
                     (ERF) <SPECIAL ANY>)
              <COND (<==? <6 .T> 'EVAL>     ;"calling func. with bad args."
                     <SET FUNC ,<1 <1 <ARGS .ERF>>>>
                     <CHANGE-DECL .FUNC .T>)
                    (<==? <6 .T> 'SET>    ;"setting variable to wrong type within func."
                     <SET DECL <GET-DECL <3 .T>>>
                     <COND (<==? <1 .DECL> 'WRONG> <PUT .DECL 1 <TYPE <5 .T>>>)
                           (T <CHECKER .DECL 1 <5 .T>>)>
                     <RETRY .ERF>)
                    (<==? <6 .T> 'APPLY>    ;"APPLYing a func. to bad args."
                     <SET FUNC <1 <ARGS .ERF>>>
                     <CHANGE-DECL .FUNC .T>)
                    (<OR <==? <6 .T> 'REPEAT> <==? <6 .T> 'PROG>>;"bad args. within "
                     <SET FUNC <1 <ARGS .ERF>>>
                     <COND (<TYPE? <1 .FUNC> 'ATOM>
                            <SET FUNC <REST .FUNC>>)>
                     <CHANGE-DECL .FUNC .T>)>>)>>                                            

<DEFINE INIT ()  ;"sets up error handler and creates newtype WRONG"
  #DECL ((VALUE) ATOM)
     <ON "ERROR" ,FIXER 4>
     <NEWTYPE WRONG FIX>>


;"accounts for activations and changes decl if old one was WRONG
  otherwise it calls CHECKER. Finally it retrys frame."
<DEFINE CHANGE-DECL (FUNC T  "AUX" DECL (X 2))
       #DECL ((FUNC) <OR LIST FUNCTION>  (T) TUPLE  (DECL) LIST  (X) FIX)
       <COND (<TYPE? <2 .FUNC> 'LIST> <SET X <+ .X 1>>)>
       <SET DECL <MEMBER (<3 .T>) <.X .FUNC>>>
       <COND (<==? <2 .DECL> 'WRONG> <PUT .DECL 2 <TYPE <5 .T>>>)
             (T <CHECKER .DECL 2 <5 .T>>)>
       <RETRY .ERF>>



;"determines where to insert the new type in the decl and PUTs it in"
<DEFINE CHECKER (DECL X ARGS "AUX" BODY)
      #DECL ((DECL) LIST (X) FIX  (ARGS) ANY (BODY) <OR ATOM FORM>)
        <SET BODY <.X .DECL>>
        <COND (<TYPE? .BODY 'ATOM>
               <PUT .DECL .X <CHTYPE (OR <TYPE .ARGS> .BODY) FORM >>)
              (<NOT <TYPE? .BODY 'FORM>> <RETURN "Program Error" .IT>)
              (<==? <1 .BODY> 'OR>
               <PUT .DECL .X <CHTYPE (OR <TYPE .ARGS> !<REST .BODY>) FORM>>)
              (<OR <==? <1 .BODY> 'SPECIAL> <==? <1 .BODY> 'UNSPECIAL>>
               <COND (<TYPE? <2 .BODY> 'ATOM>
                      <PUT .BODY 2 <CHTYPE (OR <TYPE .ARGS> <2 .BODY>) FORM>>)
                     (<TYPE? <2 .BODY> 'FORM>
                      <COND (<==? <1 <2 .BODY>> 'OR>
                             <PUT .BODY 2 <CHTYPE (OR <TYPE .ARGS> !<REST <2 .BODY>>)
                                                                      FORM>>)
                            (T <PUT .BODY 2 <CHTYPE (OR <TYPE .ARGS><2 .BODY>) FORM>>)>)>)              (T <PUT .DECL .X <CHTYPE (OR <TYPE .ARGS> .BODY) FORM>>)>>
 



;"cleans up the file which has been decled.  It checks for any WRONGs
  and groupc the decls together.  Dumps the file back out as >.
  If there are WRONGs around it gives you a chance to keep
  decling."
<DEFINE STOP-DECL F (NAME "AUX" L LIS)
	#DECL ((F) ACTIVATION (LIS) LIST (L) FIX (NAME) ATOM (VALUE) <OR STRING ATOM>)
        <PUT .NAME CHANNEL>
	<SET L <LENGTH ..NAME>>
        <SET LIS
	     <REPEAT ((N 1) PRGM A (B ()))
		     #DECL ((B VALUE) LIST (A) <OR ATOM LIST FALSE> (PRGM) ANY
			    (N) FIX)
		     <SET A <HUNT-WRONG <.N ..NAME>>>
		     <SET N <+ .N 1>>
		     <COND (<AND .A <SET B (.A !.B)> <>>)
			   (<G? .N .L> <RETURN .B>)>>>
	<COND (<NOT <EMPTY? .LIS>>
	       <PRINC "The functions in the list ">
	       <PRINC .LIS>
	       <PRINC " are not fully decled.
Do you wish to continue?
">
	       <PROG ()
		     #DECL ((VALUE) ATOM)
		     <RESET .INCHAN>
		     <COND (<==? <TYI .INCHAN> !"Y>
			    <PRINC "
Proceed">
			    <RETURN ,NULL .F>)
			   (<OFF "ERROR">
			    <CONDENSE .NAME 1>
			    <GROUP-DUMP <PNAME .NAME>>
			    <PRINC "
Decling Stopped">
			    <RETURN ,NULL>)>>)
	      (<OFF "ERROR">
	       <CONDENSE .NAME>
	       <GROUP-DUMP <PNAME .NAME>>
	       "Decling Completed")>>



;"determines what to put in the user list of incompletely decled functions.
  If HUNT is successful it returns either the name of the function or the
  function itself."
<DEFINE HUNT-WRONG HW (FUNC "AUX" TITLE)
	#DECL ((TITLE) <OR FUNCTION ATOM> (FUNC) <OR FUNCTION FORM>
	       (HW) ACTIVATION (VALUE) <OR FUNCTION FORM ATOM FALSE>)
	<COND (<OR <==? <1 .FUNC> 'SETG> <==? <1 .FUNC> 'DEFINE>>
	       <SET TITLE <2 .FUNC>>)
	      (<SET TITLE .FUNC>)>
	<COND (<PROG HT ()
		     #DECL ((HT) ACTIVATION (VALUE) <OR ATOM FALSE>)
		     <HUNT .FUNC>>
	       <RETURN .TITLE .HW>)
	      (T #FALSE ())>>


;"hunts for WRONG and returns either T or false."
<DEFINE HUNT H (FUNC)
	#DECL ((FUNC) <OR FUNCTION SEGMENT STRING DECL LIST FORM> (H) ACTIVATION
	       (VALUE) <OR ATOM FALSE>)
	<COND (<EMPTY? .FUNC> #FALSE ())
	      (<NOT <MONAD? <1 .FUNC>>>
	       <HUNT <1 .FUNC>>
	       <HUNT <REST .FUNC>>)
	      (<==? <1 .FUNC> 'WRONG> <RETURN T .HT>)
	      (<HUNT <REST .FUNC>>)>>



;"accepts name of file and sends the elements to DEN and DEL"
<DEFINE CONDENSE (NAME "OPTIONAL" (A 0))
	#DECL ((NAME) ATOM (VALUE) <OR FIX ATOM> (A) FIX)
	<COND (<==? .A 1> <MAPF #FALSE () ,DEL ..NAME>)>
	<MAPF #FALSE () ,DEN ..NAME>>


;"puts like decls together: ie (X) FIX (Y) FIX would become (X Y) FIX"
<DEFINE DEN (FUNC)
   #DECL ((VALUE) <OR FALSE FIX ATOM> (FUNC) <OR FUNCTION FORM>)
   <MAPF #FALSE ()
    #FUNCTION (A (DEC "AUX" L)
      #DECL ((A) ACTIVATION (VALUE) <OR FIX ATOM> (DEC) ANY (L) FIX)
      <COND (<AND <TYPE? .DEC 'FORM> <DEN .DEC> <NOT <MONAD? .DEC>>>)
	    (<NOT <TYPE? .DEC DECL>> <RETURN T .A>)>
      <SET L <LENGTH .DEC>>
      <REPEAT ((N 2) TY)
	#DECL ((VALUE) <OR ATOM FIX> (N) FIX (TY) ANY)
	<COND (<G? <+ .N 2> .L> <RETURN T>)>
	<SET TY <.N .DEC>>
	<COND
	 (<TYPE? .TY 'ATOM>
	  <REPEAT ((M <+ .N 2>))      ;"this loop treats ATOMs"
		  #DECL ((VALUE) FIX (M) FIX)
		  <COND (<TYPE? <.M .DEC> 'FORM>)
			(<==? <.M .DEC> .TY>
			 <PUT .DEC
			      <- .N 1>
			      (<1 <<- .M 1> .DEC>> !<<- .N 1> .DEC!>)>
			 <PUTREST <REST .DEC <- .M 3>> <REST .DEC .M>>
			 <SET L <- .L 2>>)>
		  <SET M <+ .M 2>>
		  <COND (<G? .M .L> <RETURN <SET N <+ .N 2>>>)>>)
	 (T
	  <REPEAT ((M <+ .N 2>) DECCL LL)       ;"this treats forms. It checks that the
                                               first elements are == and the length is ==
                                              and that members are the same."
	    #DECL ((VALUE) FIX (M) FIX (DECCL) <OR ATOM FORM> (LL) FIX)
	    <COND (<AND <TYPE? <.M .DEC> 'FORM>
			<==? <LENGTH .TY> <LENGTH <.M .DEC>>>
			<==? <1 .TY> <1 <.M .DEC>>>>
		   <SET DECCL <.M .DEC>>
		   <AND <NOT <==? <1 .TY> 'OR>>
			<SET DECCL <2 .DECCL>>
			<SET TY <2 .TY>>>
		   <OR <AND <TYPE? .TY 'FORM> <SET LL <LENGTH .TY>>>
                       <SET LL 1>>
		   <AND <OR <1? .LL> <==? .LL <LENGTH .DECCL>>>
			<REPEAT ((X 0)) ;"checks members: if all same then it fixes"
				#DECL ((VALUE) ATOM (X) FIX)  ;"the decls"
				<SET X <+ .X 1>>
				<COND (<G? .X .LL>
				       <PUT .DEC
					    <- .N 1>
					    (<1 <<- .M 1> .DEC>>
					     !<<- .N 1> .DEC!>)>
				       <PUTREST <REST .DEC <- .M 3>>
						<REST .DEC .M>>
				       <SET L <- .L 2>>
				       <RETURN T>)
				      (<OR <AND <TYPE? .TY 'ATOM>
                                                <NOT <==? .TY .DECCL>>
                                                <RETURN T>>
                                           <NOT <MEMQ <.X .TY><CHTYPE .DECCL LIST>>>>
				       <RETURN T>)>>>)>
	    <SET M <+ .M 2>>
	    <COND (<G? .M .L> <RETURN <SET N <+ .N 2>>>)>>
	  <RETURN <SET N <+ .N 2>>>)>>)
    .FUNC>>


;"hunts down WRONG and (when found) deletes the variable from the arg list"
<DEFINE DEL (FUNC "OPTIONAL" (NTH 1) LEN)
	#DECL ((NTH LEN) FIX (FUNC) <OR FORM FUNCTION> (VALUE) ATOM)
	<AND <==? .NTH 1> <SET LEN <LENGTH .FUNC>> <>>
	<COND
	 (<G? .NTH .LEN>)
	 (<TYPE? <.NTH .FUNC> 'FORM>
	  <DEL <.NTH .FUNC>>
	  <SET NTH <+ .NTH 1>>
	  <DEL .FUNC .NTH .LEN>)
	 (<NOT <TYPE? <.NTH .FUNC> 'DECL>>
	  <SET NTH <+ .NTH 1>>
	  <DEL .FUNC .NTH .LEN>)
	 (T
	  <SET DEC <.NTH .FUNC>>
	  <SET LL <LENGTH .DEC>>
	  <REPEAT ((X 2))
		  #DECL ((X) FIX (VALUE) ATOM)
		  <COND (<G? .X .LL> <RETURN T>)
			(<==? <.X .DEC> 'WRONG>
			 <SET LL <- .LL 2>>
			 <COND (<NOT <==? .X 2>>
				<PUTREST <REST .DEC <- .X 3>> <REST .DEC .X>>)
			       (T
				<PUT .FUNC
				     .NTH
				     <SET DEC
					  <CHTYPE (!<REST .DEC 2!>) DECL>>>)>)
			(<SET X <+ .X 2>>)>>
	  <SET NTH <+ .NTH 1>>
	  <DEL .FUNC .NTH .LEN>)>>

<INIT>

<ENDPACKAGE>
<USE "DECLER">
