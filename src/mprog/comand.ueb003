<PACKAGE "COMMAND">

<USE "CALSYM" "CALRDR">

<ENTRY CALICO-COMMAND CONFIRM>

<DEFINE CONFIRM ("EXTRA" RD)
    #DECL ((RD) <OR FALSE SYMBOL>)
    <AND <SET RD <READER ,CONF "Confirm" '["
Please confirm the command by typing either T, True, Y, or Yes" ""] ["SYM"]>>
	 <==? <2 .RD> T>>>

<SETG CONF
    <MAKEBST "CONFIRM" 
	%<BSTSORT ["T" T "True" T "Y" T "Yes" T "No" <> "N" <> "F" <> "False" <>]>>>

<DEFINE CALICO-COMMAND COM-EXIT (FUNC PRM
				 "OPTIONAL" (DEF '[])
				 "TUPLE" FLAGS
				 "AUX" INPUT GETI (EVALSW 0) (SEGSW 1) (SYMSW 0)
				       (HACKMULTSW 0)(FLGS .FLAGS))
   #DECL ((FUNC) APPLICABLE (PRM DEF) VECTOR (INPUT) VECTOR 
	  (GETI) <OR FALSE VECTOR> (FLAGS FLGS) <TUPLE [REST STRING]>
	  (HACKMULTSW EVALSW SEGSW SYMSW) <SPECIAL FIX> (A VALUE) ANY)
   <COND (<NOT <SET GETI <READARGS !.PRM>>>
	  <RETURN .GETI .COM-EXIT>)>
   <COND (<NOT .READER-SILENCE> <TERPRI>)>
   <SET INPUT .GETI>
   <COND (<MEMBER "DON'T-EVAL" .FLAGS> <SET EVALSW 1>)>
   <COND (<MEMBER "GIVE-SYMBOLS" .FLAGS> <SET SYMSW 1>)>
   <REPEAT ()
	   <COND (<EMPTY? .FLAGS> <RETURN T>)
		 (<=? <1 .FLAGS> "HACK-MULTS">
		  <SET HACKMULTSW 1>
		  <SET FLAGS <REST .FLAGS>>)
		 (<=? <1 .FLAGS> "INPUT"> <RETURN <SET SEGSW 0>>)
		 (<=? <1 .FLAGS> "SEGMENT-INPUT"> <RETURN <SET SEGSW 1>>)
		 (<=? <1 .FLAGS> "SEGMENT-EACH"> <RETURN <SET SEGSW 2>>)
		 (ELSE <SET FLAGS <REST .FLAGS>>)>>
   <SET A
    <MAPF <COND (<0? .SEGSW> ,VECTOR) (ELSE .FUNC)>
     <FUNCTION (A) 
	     #DECL ((DEFSW) <OR FALSE 'T>)
	     <COND (<NOT <EMPTY? .DEF>>
		    <COND (<OR <==? .A ,READER-NULL-LINE>
			       <AND <=? .A '()> <MEMBER "MULT" <4 .PRM>>>>
			   <SET A <1 .DEF>>)>
		    <SET DEF <REST .DEF>>)>
	     <COND (<1? .HACKMULTSW>
		    <AND <TYPE? .A LIST>
			 <MEMBER "MULT" <4 .PRM>>
			 <MAPR <>
			       <FUNCTION (X) 
				       <COND (<TYPE? <1 .X> SYMBOL>
					      <PUT .X 1 <2 <1 .X>>>)>>
			       .A>>)>
	     <SET PRM <REST .PRM <COND (<TYPE? <1 .PRM> ATOM> 5)(4)>>>
	     <COND (<0? .EVALSW> <SET A <EVAL .A>>)>
	     <COND (<AND <0? .SYMSW> <TYPE? .A SYMBOL>> <SET A <2 .A>>)>
	     <COND (<0? .SEGSW> <MAPRET .A>)
		   (<AND <==? .SEGSW 2>
			 <STRUCTURED? .A>
			 <NOT <TYPE? .A STRING>>>
		    <COND (<==? .A ,READER-NULL-LINE> <MAPRET>)
			  (ELSE <MAPRET !.A>)>)
		   (ELSE <MAPRET .A>)>
	     T>
     .INPUT>>
   <AND <0? .SEGSW> <SET A <APPLY .FUNC .A>>>	 ;".A Is a VECTOR, in this case"
   <COND (<AND <MEMBER "PRINT-RESULT" .FLGS> <NOT .READER-SILENCE>>
	  <PRINT .A>)>
   .A>

<ENDPACKAGE>
