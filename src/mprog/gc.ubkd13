;"Now offs blocked interrupt when error occurs, to
prevent instantaneous garbage collection."

<PACKAGE "GC">

<ENTRY DIVERT PREVENT-GC DIVERT-MAX DIVERT-LMT DIVERT-INC BLOAT? HAIRY-GC>

<SETG DIVERT-CNT 0>

<SETG DIVERT-MAX 10>

<SETG DIVERT-INC 4000>

<SETG DIVERT-AMT 0>

<SETG DIVERT-LMT 100000>

<SETG HAIRY-GC <>>

<SETG HAIRY-CT 0>

<SETG HAIRY-FLAG <>>

<GDECL (DIVERT-CNT DIVERT-MAX DIVERT-INC DIVERT-AMT DIVERT-LMT) FIX
       (HAIRY-GC) <OR ATOM FALSE FIX> (HAIRY-CT) FIX (HAIRY-FLAG) <OR ATOM FALSE>>

<DEFINE DIVERT ("OPTIONAL" (FLG T))
	<COND (.FLG
	       <HANDLER ,DIVERT-INT ,DIVERT-HAND>
	       <HANDLER ,ERROR-INT ,ERROR-HAND>)
	      (ELSE <OFF ,DIVERT-HAND> <OFF ,ERROR-HAND>
		    <OFF ,BLOCK-HAND>)>
	"DONE">

<DEFINE PREVENT-GC ()
	<COND (<0? ,DIVERT-CNT>)
	      (T <SETG DIVERT-CNT <SETG DIVERT-AMT 0>>
	         <OFF ,BLOCK-HAND>
	         <OFF ,GC-HAND>)>>

<DEFINE DIVERT-FCN  (AMT REASON)
	<SETG DIVERT-CNT <+ ,DIVERT-CNT 1>>
	<SETG DIVERT-AMT <+ ,DIVERT-AMT ,DIVERT-INC .AMT>>
	<COND (<OR <G? ,DIVERT-CNT ,DIVERT-MAX>
		   <G? ,DIVERT-AMT ,DIVERT-LMT>>	;"Too much diversion ?"
		<SETG DIVERT-AMT <SETG DIVERT-CNT 0>>
		<GC-FCN>
		<GC 0 ,HAIRY-FLAG>
		<SETG HAIRY-FLAG <>>)
	      (ELSE	;"Divert this request for storage"
		<COND (<1? ,DIVERT-CNT>		;"First diversion ?"
			<HANDLER ,BLOCK-INT ,BLOCK-HAND>
			<HANDLER ,GC-INT ,GC-HAND>)>
		<BLOAT <+ .AMT ,DIVERT-INC>>
				;"Get storage desired plus extra increment")>>

<SETG DIVERT-HAND <HANDLER <SETG DIVERT-INT <EVENT "DIVERT-AGC" 1000>>
			,DIVERT-FCN>>


<OFF ,DIVERT-HAND>

<DEFINE BLOCK-FCN (PROCESS) <GC-FCN> <GC 0 ,HAIRY-FLAG>>

<SETG BLOCK-HAND <HANDLER <SETG BLOCK-INT <EVENT "BLOCKED" 10>>
			,BLOCK-FCN>>

<OFF ,BLOCK-HAND>

<DEFINE ERROR-FCN (FRM "TUPLE" ARGS)
  <PREVENT-GC>>

<SETG ERROR-HAND <HANDLER <SETG ERROR-INT <EVENT "ERROR" 20>> ,ERROR-FCN>>

<OFF ,ERROR-HAND>

<DEFINE GC-FCN  ("TUPLE" T "AUX" (HAIRY-GC ,HAIRY-GC))
	#DECL ((HAIRY-GC) <OR ATOM FALSE FIX>)
		<COND (<NOT .HAIRY-GC>)
		      (<TYPE? .HAIRY-GC ATOM>
		       <SETG HAIRY-FLAG T>
		       <AND <GC-MON> <PRINC "HAIRY-GC ">>)
		      (<G=? <SETG HAIRY-CT <+ ,HAIRY-CT 1>> .HAIRY-GC>
		       <SETG HAIRY-CT 0>
		       <SETG HAIRY-FLAG T>
		       <AND <GC-MON> <PRINC "HAIRY-GC " ,OUTCHAN>>)>
		<OFF ,BLOCK-HAND>
		<OFF ,GC-HAND>
		<SETG DIVERT-AMT <SETG DIVERT-CNT 0>>>

<SETG GC-HAND <HANDLER <SETG GC-INT <EVENT "GC" 11>>
			,GC-FCN>>

<OFF ,GC-HAND>


<DEFINE BLOAT? (OLD
		"OPTIONAL" (CAREFUL <>)
		"EXTRA" (NEW <BLOAT-STAT ,BUF>) (NUMS ()))
	#DECL ((OLD NEW) <UVECTOR [27 FIX]> (NUMS) LIST)
	<SET NUMS
	     <ALLOC .NUMS
		    <COND (<OR .CAREFUL
			       <N==? <7 .OLD> <7 .NEW>>
			       <N==? <8 .OLD> <8 .NEW>>>      ;"Blown P stack ?"
			   <- <27 .NEW> <26 .NEW>>		 ;"MAX P stack")
			  (ELSE 0	  ;"NO P stack")>>>
	<SET NUMS
	     <ALLOC .NUMS
		    <+ <- <23 .OLD> <23 .NEW>> <- <22 .NEW> <22 .OLD>>>>>
								      ;"Storage"
	<SET NUMS <ALLOC .NUMS <- <21 .NEW> <21 .OLD>>>>	        ;"Types"
	<SET NUMS
	     <ALLOC .NUMS
		    <+ <- <19 .NEW> <19 .OLD>>
		       <COND (.CAREFUL <- <18 .NEW> <19 .NEW>>) (ELSE 0)>>>>
								      ;"Globals"
	<SET NUMS
	     <ALLOC .NUMS
		    <+ <- <17 .NEW> <17 .OLD>>
		       <COND (.CAREFUL <- <16 .NEW> <17 .NEW>>) (ELSE 0)>>>>
								       ;"Locals"
	<SET NUMS
	     <ALLOC .NUMS
		    <COND (<OR .CAREFUL
			       <N==? <2 .OLD> <2 .NEW>>
			       <N==? <8 .OLD> <8 .NEW>>>     ;"Blown TP stack ?"
			   <- <15 .NEW> <14 .NEW>>	        ;"MAX TP stack")
			  (ELSE 0	 ;"NO TP stack")>>>
	<SET NUMS <ALLOC .NUMS <- <12 .NEW> <12 .OLD>>>>
	<CHTYPE (BLOAT !.NUMS) FORM>>

<SETG BUF <IUVECTOR 27 0>>

<GDECL (BUF) <UVECTOR [27 FIX]>>

<DEFINE ALLOC (NUMS NUM) 
	#DECL ((NUMS VALUE) LIST (NUM) FIX)
	<COND (<AND <L=? .NUM 0> <EMPTY? .NUMS>> .NUMS)
	      (<L=? .NUM 0> (1 !.NUMS))
	      (ELSE
	       (<REPEAT ((MUL 1))
			#DECL ((MUL) FIX)
			<COND (<L? .NUM 15> <RETURN <* <+ .NUM 1> .MUL>>)>
			<SET MUL <* .MUL 10>>
			<SET NUM </ .NUM 10>>>
		!.NUMS))>>

<ENDPACKAGE>
