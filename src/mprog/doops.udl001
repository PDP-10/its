<PACKAGE "DOOPS">

<ENTRY DOOPS DUPS>

<SETG DUPS ()>
<GDECL (DUPS) <LIST [REST ATOM]>>

<DEFINE DOOPS ("OPTIONAL" (ALL? <>) "AUX" (OBS ()) (A <ASSOCIATIONS>) V
	       (PCKOB <GET PACKAGE OBLIST>) (RPCKOB <GET RPACKAGE OBLIST>)) 
	#DECL ((ALL?) <OR ATOM FALSE> (OBS) LIST (A) <OR FALSE ASOC> (V) ANY
	       (PCKOB RPCKOB) OBLIST)
	<SETG DUPS ()>
	<REPEAT ()
		<COND (<AND <==? <INDICATOR .A> OBLIST>
			    <TYPE? <ITEM .A> ATOM>
			    <TYPE? <SET V <AVALUE .A>> OBLIST>>
		       <COND (<OR <==? <ROOT> .V>
				  <==? <ERRORS> .V>
				  <==? <INTERRUPTS> .V>
				  <==? .PCKOB .V>
				  <==? .RPCKOB .V>>)
			     (<SET OBS (.V !.OBS)>)>)>
		<COND (<NOT <SET A <NEXT .A>>> <RETURN>)>>
	<MAPF <>
	      <FUNCTION (O) 
		   #DECL ((O) OBLIST)
		   <COND (<OR .ALL? <LOOKUP <SPNAME <GET .O OBLIST>> .PCKOB>>
			  <MAPF <>
				<FUNCTION (L) 
				     #DECL ((L) LIST)
				     <MAPF <>
					   <FUNCTION (A)
						#DECL ((A) ATOM)
						<COND (<NOT <MEMQ .A ,DUPS>>
						       <AOOPS .A .OBS>)>>
					   .L>>
				.O>)>>
	      .OBS>>

<DEFINE AOOPS (A OBS "AUX" (D? <>) D (OUTCHAN .OUTCHAN)) 
   #DECL ((A) ATOM (OBS) <LIST [REST OBLIST]> (D D?) <OR ATOM FALSE>
	  (OUTCHAN) CHANNEL)
   <MAPF <>
	 <FUNCTION (O) 
	    #DECL ((O) OBLIST)
	    <COND (<==? .O <OBLIST? .A>>)
		  (<SET D <LOOKUP <SPNAME .A> .O>>
		   <COND (<NOT .D?>
			  <SETG DUPS (.A !,DUPS)>
			  <CRLF>
			  <PRINC <SPNAME .A>>
			  <PRINC " <=> ">
			  <PRINC <SPNAME <GET <OBLIST? .A> OBLIST>>>
			  <SET D? T>)>
		   <PRINC " = ">
		   <PRINC <SPNAME <GET .O OBLIST>>>
		   <SETG DUPS (.D !,DUPS)>)>>
    .OBS>>

<ENDPACKAGE>
