
<PACKAGE "DATA">

<ENTRY DATA-TYPE DATA-ITEM NUMBER>

<USE-DEFER "TEMPLATE">

<DEFINE DATA-ITEM (NAME KIND "ARGS" DESCR "EXTRA" L (PRIMT <TYPEPRIM .KIND>) FNAME) 
	#DECL ((NAME) <OR ATOM <LIST ATOM <OR FALSE ATOM>>> (FNAME) <OR FALSE ATOM>
	       (KIND) ATOM (DESCR) LIST (L) <UVECTOR LIST LIST LIST>)
	<COND (<TYPE? .NAME ATOM> <SET FNAME .NAME>)
	      (ELSE <SET FNAME <2 .NAME>> <SET NAME <1 .NAME>>)>
	<COND (<==? .PRIMT TEMPLATE>
	       <SET L <IDATA .DESCR>>
	       <PUT .NAME DECL
			<VUL-DECL .KIND <1 .L> <2 .L> <3 .L>>>
	       <AND .FNAME
		    <GASSIGN .FNAME	       ;"Define a constuctor for this data type"
			<CHTYPE (<CHTYPE ('("ARGS" T)
				 <FORM FORM
				       .KIND
				       '!.T>) FUNCTION>)
				MACRO>>>)
	      (<OR <==? .PRIMT VECTOR>
		   <==? .PRIMT UVECTOR>
		   <==? .PRIMT LIST>>
	       <SET L <IDATA .DESCR>>
	       <PUT .NAME DECL
			<VUL-DECL .PRIMT <1 .L> <2 .L> <3 .L>>>
	       <AND .FNAME
		    <GASSIGN .FNAME	       ;"Define a constuctor for this data type"
			<CHTYPE (<CHTYPE ('("ARGS" T)
				 <COND (<==? .KIND .PRIMT>
					<FORM FORM .PRIMT '!.T>)
				       (ELSE <FORM FORM
				       CHTYPE
				       <FORM FORM .PRIMT '!.T>
				       .KIND>)>) FUNCTION>)
				MACRO>>>)
	      (<==? .PRIMT WORD>
	       <PUT .NAME DECL .KIND>
	       <COND (.FNAME <GASSIGN .FNAME <W-DATA .KIND .DESCR>>)
		     (ELSE <W-NUMBER .DESCR>)>)
	      (<==? .PRIMT TUPLE>			;"Assign offsets for tuple"
	       <SET L <IDATA .DESCR>>
	       <PUT .NAME DECL <VUL-DECL TUPLE <1 .L> <2 .L> <3 .L>>>)
	      (ELSE <ERROR BAD-TYPE-NAME!-ERRORS DATA-ITEM>)>
	.NAME>

<DEFINE DATA-TYPE (NAME KIND "ARGS" DESCR "EXTRA" L (PRIMT <TYPEPRIM .KIND>) FNAME) 
	#DECL ((NAME) <OR ATOM <LIST ATOM <OR FALSE ATOM>>> (FNAME) <OR FALSE ATOM>
	       (KIND) ATOM (DESCR) LIST (L) <UVECTOR LIST LIST LIST>)
	<COND (<TYPE? .NAME ATOM> <SET FNAME .NAME>)
	      (ELSE <SET FNAME <2 .NAME>> <SET NAME <1 .NAME>>)>
	<NEWTYPE .NAME .KIND>
	<COND (<==? .PRIMT TEMPLATE>
	       <SET L <IDATA .DESCR>>
	       <TEMPLATE .NAME
			 !<1 .L>
			 !<COND (<EMPTY? <2 .L>> ())
				(ELSE ("OPTIONAL" !<2 .L>))>
			 !<COND (<EMPTY? <3 .L>> ())
				(ELSE ("REST" !<3 .L>))>>
	       <COND (<NOT .FNAME> <GUNASSIGN .NAME>)
		     (<N==? .NAME .FNAME>
		      <GASSIGN .FNAME ,.NAME>
		      <GUNASSIGN .NAME>)>)
	      (<OR <==? .PRIMT VECTOR>
		   <==? .PRIMT UVECTOR>
		   <==? .PRIMT LIST>>
	       <SET L <IDATA .DESCR>>
	       <PUT .NAME DECL
			<VUL-DECL .PRIMT <1 .L> <2 .L> <3 .L>>>
	       <AND .FNAME
		    <GASSIGN .FNAME	       ;"Define a constuctor for this data type"
			<CHTYPE (<CHTYPE ('("ARGS" T)
				 <FORM FORM
				       CHTYPE
				       <FORM FORM .PRIMT '!.T>
				       .NAME>) FUNCTION>)
				MACRO>>>)
	      (<==? .PRIMT WORD>
	       <COND (.FNAME <GASSIGN .FNAME <W-DATA .NAME .DESCR>>)
		     (ELSE <W-NUMBER .DESCR>)>)
	      (<==? .PRIMT TUPLE>			;"Assign offsets for tuple"
	       <SET L <IDATA .DESCR>>
	       <PUT .NAME DECL <VUL-DECL TUPLE <1 .L> <2 .L> <3 .L>>>)
	      (ELSE <ERROR BAD-TYPE-NAME!-ERRORS DATA-TYPE>)>
	.NAME>

<DEFINE IDATA (FIELDS
		"EXTRA" (REQ <LIST T>) (OPT <LIST T>) (RST <LIST T>) (F .REQ)
			(CNT 0) S1)
   #DECL ((FIELDS) LIST (REQ OPT RST F) <LIST ANY>
	  (VALUE) <UVECTOR LIST LIST LIST> (CNT) FIX)
   <MAPF <>
    <FUNCTION (FIELD) 
	    <COND (<TYPE? .FIELD ATOM>
		   <DEFN .FIELD <SET CNT <+ .CNT 1>>>
		   <PUTREST .F <SET F (ANY)>>)
		  (<AND <TYPE? .FIELD LIST>
			<NOT <EMPTY? .FIELD>>
			<TYPE? <1 .FIELD> ATOM>>
		   <DEFN <1 .FIELD> <SET CNT <+ .CNT 1>>>
		   <PUTREST .F
			    <SET F
				 (<COND (<EMPTY? <SET FIELD <REST .FIELD>>> ANY)
					(<LENGTH? .FIELD 1> <1 .FIELD>)
					(ELSE .FIELD)>)>>)
		  (<AND <TYPE? .FIELD STRING>
			<OR <SET S1 <=? .FIELD "OPTIONAL">>
			    <NOT <SET S1 <N=? .FIELD "REST">>>>>
		   <COND (.S1 <SET F .OPT>) (ELSE <SET F .RST>)>)
		  (ELSE <ERROR BAD-ARGUMENT!-ERRORS DATA!-PACKAGE>)>>
    .FIELDS>
   <UVECTOR <REST .REQ> <REST .OPT> <REST .RST>>>

<DEFINE VUL-DECL (NAME LN LO LR "AUX" RESTR COMPX COMPE) 
   #DECL ((LN LO LR) LIST (COMPX COMPE) <LIST ANY> (NAME) ATOM)
   <SET RESTR
	<COND (<EMPTY? .LR> '[REST <NOT ANY>]) (ELSE [REST !.LR])>>
   <COND (<EMPTY? .LO>
	  <FORM <FORM PRIMTYPE <TYPEPRIM .NAME>> !.LN .RESTR>)
	 (ELSE
	  <SET COMPX (ANY !.LN)>
	  <SET COMPE <REST .COMPX <- <LENGTH .COMPX> 1>>>
	  <FORM OR
		!<MAPF ,LIST
		       <FUNCTION (X "EXTRA" F) 
			       <SET F
				    <FORM <FORM PRIMTYPE <TYPEPRIM .NAME>>
					  !<REST .COMPX>
					  '[REST <NOT ANY>]>>
			       <PUTREST .COMPE <SET COMPE (.X)>>
			       .F>
		       .LO>
		<FORM <FORM PRIMTYPE <TYPEPRIM .NAME>>
		      !<REST .COMPX>
		      .RESTR>>)>>

<DEFINE W-DATA (NAME FIELDS
		 "EXTRA" (BIT 0) (MODE 0) (ARGL <LIST ANY>) (ARGE .ARGL) BODY
			 (CBODY (ANY)) (PBODY .CBODY))
   #DECL ((NAME) ATOM (FIELDS) LIST (BIT MODE) FIX (VALUE) MACRO
	  (ARGL ARGE) LIST (CBODY PBODY) LIST)
   <MAPF <>
    <FUNCTION (FIELD "EXTRA" FNAME (FSIZE 1)) 
	    #DECL ((FNAME) ATOM (FSIZE) FIX)
	    <PROG ()
		  <COND (<TYPE? .FIELD ATOM> <SET FNAME .FIELD>)
			(<AND <TYPE? .FIELD LIST>
			      <NOT <EMPTY? .FIELD>>
			      <TYPE? <1 .FIELD> ATOM>>
			 <SET FNAME <1 .FIELD>>
			 <COND (<EMPTY? <SET FIELD <REST .FIELD>>>)
			       (<TYPE? <1 .FIELD> FIX> <SET FSIZE <1 .FIELD>>)
			       (<NOT <EMPTY? <SET FIELD <REST .FIELD>>>>
				<SET FSIZE <1 .FIELD>>)>)
			(<AND <=? .FIELD "OPTIONAL"> <==? .MODE 0>>
			 <PUTREST .ARGE <SET ARGE (.FIELD)>>
			 <SET MODE 1>
			 <RETURN>)
			(<AND <=? .FIELD "REST"> <L? .MODE 2>>
			 <ERROR NOT-IMPLEMENTED!-ERRORS "REST" WORD DATA!-PACKAGE>
			 <MAPLEAVE>)
			(ELSE
			 <ERROR BAD-ARGUMENT!-ERRORS .FIELD DATA!-PACKAGE>
			 <RETURN>)>
		  <DEFN .FNAME <BITS .FSIZE .BIT>>
		  <COND (<G? <SET BIT <+ .BIT .FSIZE>> ,WORD-SIZE>
			 <ERROR TOO-MANY-BITS!-ERRORS DATA!-PACKAGE>)>
		  <PUTREST .ARGE <SET ARGE (<FORM QUOTE .FNAME>)>>
		  <COND
		   (<0? .MODE>
		    <SET BODY
			 <COND (<NOT <ASSIGNED? BODY>> <FORM LVAL .FNAME>)
			       (ELSE
				<FORM FORM
				      PUTBITS
				      .BODY
				      ,.FNAME
				      <FORM LVAL .FNAME>>)>>)
		   (<NOT <ASSIGNED? BODY>>
		    <SET BODY 0>
		    <PUTREST .PBODY
			     (<FORM COND
				    (<FORM ASSIGNED? .FNAME>
				     <FORM SET BODY <FORM LVAL .FNAME>>)>)>
		    <SET PBODY <REST <2 <2 .PBODY>>>>)
		   (ELSE
		    <PUTREST .PBODY
			     (<FORM COND
				    (<FORM ASSIGNED? .FNAME>
				     <FORM SET
					   BODY
					   <FORM FORM
						 PUTBITS
						 <FORM LVAL BODY>
						 ,.FNAME
						 <FORM LVAL .FNAME>>>)>)>
		    <SET PBODY <REST <2 <2 .PBODY>>>>)>>>
    .FIELDS>
   <COND (<1? .MODE> <PUTREST .ARGE ("EXTRA" (BODY .BODY))>)>
   <CHTYPE (<CHTYPE (<REST .ARGL>
		     !<REST .CBODY>
		     <FORM FORM
			   CHTYPE
			   <COND (<1? .MODE> <FORM LVAL BODY>)
				 (<ASSIGNED? BODY> .BODY)
				 (ELSE 0)>
			   .NAME>)
		    FUNCTION>)
	   MACRO>>

<DEFINE W-NUMBER (FIELDS "EXTRA" (BIT 0) (MODE 0))
	#DECL ((FIELDS) LIST (BIT MODE) FIX)
	<MAPF <>
    <FUNCTION (FIELD "EXTRA" FNAME (FSIZE 1))
	    #DECL ((FNAME) ATOM (FSIZE) FIX)
	    <PROG ()
		  <COND (<TYPE? .FIELD ATOM> <SET FNAME .FIELD>)
			(<AND <TYPE? .FIELD LIST>
			      <NOT <EMPTY? .FIELD>>
			      <TYPE? <1 .FIELD> ATOM>>
			 <SET FNAME <1 .FIELD>>
			 <COND (<EMPTY? <SET FIELD <REST .FIELD>>>)
			       (<TYPE? <1 .FIELD> FIX> <SET FSIZE <1 .FIELD>>)
			       (<NOT <EMPTY? <SET FIELD <REST .FIELD>>>>
				<SET FSIZE <1 .FIELD>>)>)
			(<AND <=? .FIELD "OPTIONAL"> <==? .MODE 0>>
			 <SET MODE 1> <RETURN>)
			(<AND <=? .FIELD "REST"> <L? .MODE 2>>
			 <ERROR NOT-IMPLEMENTED!-ERRORS "REST" WORD DATA!-PACKAGE>
			 <MAPLEAVE>)
			(ELSE
			 <ERROR BAD-ARGUMENT!-ERRORS .FIELD DATA!-PACKAGE>
			 <RETURN>)>
		  <DEFN .FNAME <BITS .FSIZE .BIT>>
		  <COND (<G? <SET BIT <+ .BIT .FSIZE>> ,WORD-SIZE>
			 <ERROR TOO-MANY-BITS!-ERRORS DATA!-PACKAGE>)>>>
    .FIELDS>>

<DEFINE NUMBER (INITIAL "TUPLE" NAMES)
	#DECL ((INITIAL) FIX (NAMES) <TUPLE [REST ATOM]>
	       (VALUE) <UVECTOR [REST ATOM]>)
	<MAPF ,UVECTOR <FUNCTION (NAME)
				 #DECL ((VALUE NAME) ATOM)
				 <DEFN .NAME .INITIAL>
				 <SET INITIAL <+ .INITIAL 1>>
				 .NAME>
	      .NAMES>>

<DEFINE DEFN (NAME F) 
	#DECL ((NAME) ATOM)
	<AND <GASSIGN .NAME .F> <MANIFEST .NAME>>>

<DEFINE GASSIGN (ATM VAL) 
   #DECL ((ATM) ATOM)
   <COND (<OR <NOT <GASSIGNED? .ATM>>
	      <=? .VAL ,.ATM>
	      <ERROR .ATM
		     ALREADY-DEFINED-ERRET-NON-FALSE-TO-REDEFINE!-ERRORS>>
	  <SETG .ATM .VAL>
	  .ATM)>>

<SETG WORD-SIZE 36>

<MANIFEST WORD-SIZE>

<ENDPACKAGE>
