
<PACKAGE "CALUTL">

<USE "STR" "CALSYM" "TTY" "TIMFCN">

<ENTRY FSP-PARSE
       DATE-PARSE
       XFPUSH
       XFPOP
       NOTTY?
       CAREFUL-TTY-OFF
       OPENTELL
       RDBLOUT
       XFSTACK
       XFLEVEL>


<TITLE SSNAM>
	<DECLARE ("VALUE" <PRIMTYPE WORD> <PRIMTYPE WORD>)>
	<PSEUDO <SET *SUSET #OPCODE *43540000000*>>
	<MOVE C* [*400016000001*]>	;".ssnam"
	<ADDI	C* (AB)>	;"addr=1(AB)"
	<*SUSET C>
	<MOVE	A* (AB)>
	<MOVE	B* 1 (AB)>
	<JRST FINIS>

<TITLE NOTTY?>
	<DECLARE ("VALUE" <OR FALSE ATOM>)>
	<SKIPN NOTTY>
	<JRST GORETFALSE>
	<MOVSI A* TATOM>
	<MOVE B* <MQUOTE T>>
	<JRST FINIS>
GORETFALSE
	<MOVSI	A* TFALSE>
	<MOVEI B* 0>
	<JRST FINIS>


<TITLE FSP-PARSE>
	<DECLARE ("VALUE" <VECTOR [REST <OR LOSE STRING>]> STRING)>
	<PUSH	TP* $TFIX>	; "Build empty vector"
	<PUSH	TP* [4]>
	<MCALL	1 IVECTOR>
	<PUSH	TP* A>		; "Save it"
	<PUSH	TP* B>

LOOP	<HRRZ	A* (AB)>	; "Check string length"
	<MOVE	D* 1(AB)>	; "Get byte pointer"
ILOOP	<JUMPE	A* DONE>	; "Quit when string is empty"
	<ILDB	B* D>	; "Get next char"
	<CAIE	B* *11*>	; "Tab?"
	<CAIN	B* *40*>	; "Space?"
	<SKIPA>			; "Yes - keep scanning"
	<JRST	SFIELD>		; "No - start of a field"
	<MOVEM	D* 1(AB)>	; "Update byte pointer"
	<SOJA	A* ILOOP>	; "Yes - and count"

SFIELD	<HRRM	A* (AB)>	; "Update string count"
	<SETZM	C>		; "Count sub-field"
COUNT	<CAIE	B* *40*>	; "Space?"
	<CAIN	B* *11*>	; "Tab?"
	<JRST	EFIELD>		; "Yes - end"
	<CAIE	B* !":>		; "Colon?"
	<CAIN	B* !";>		; "Semi-colon"
	<JRST	EFIELD>		; "Yes - end"
	<AOS	C>		; "Bump field size"
	<ILDB	B* D>		; "Get next char"
	<SOJG	A* COUNT>	; "Keep looking unless end of string"
EFIELD	<PUSH	TP* $TFIX>	; "Now get a string of the right length"
	<PUSH	TP* C>
	<MCALL	1 ISTRING>
	<PUSH	TP* A>		; "Save the string"
	<PUSH	TP* B>
	<HRRZS	A>		; "Isolate length"
	<HRRZ	C* (AB)>	; "Get current input string length"
COPY	<ILDB	D* 1(AB)>	; "Copy characters"
	<IDPB	D* B>
	<SOS	C>
	<SOJG	A* COPY>
	<HRRM	C* (AB)>	; "Update input string length"
	<JUMPE	C* FNAME>	; "If end of string - file name"
	<SOS	(AB)>		; "Otherwise - get next char"
	<ILDB	A* 1(AB)>	; "And see what it is"
	<CAIE	A* *40*>
	<CAIN	A* *11*>
	<JRST	FNAME>		; "Space or tab - file name"
	<CAIN	A* !":>
	<JRST	DEV>		; "Colon - device"
	<CAIN	A* !";>
	<JRST	DIR>		; "Semi-colon - directory"
	<JRST	FNAME>		; "Huh?? - how did we get here"

FNAME	<MOVE	A* 1(TB)>	; "Get vector pointer"
	<GETYP	E* 4(A)>	; "Get file name 1"
	<CAIN	E* TSTRING>	; "Is it alread a string"
	<JRST	FNAME2>		; "Yes - file name 2"
	<POP	TP* 5(A)>	; "No - string on stack is file name 1"
	<POP	TP* 4(A)>
	<JRST	LOOP>

FNAME2	<POP	TP* 7(A)>	; "String - file name 2"
	<POP	TP* 6(A)>
	<JRST	LOOP>

DEV	<MOVE	A* 1(TB)>	; "String is device"
	<POP	TP* 1(A)>
	<POP	TP* (A)>
	<JRST	LOOP>

DIR	<MOVE	A* 1(TB)>	; "String is directory"
	<POP	TP* 3(A)>
	<POP	TP* 2(A)>
	<JRST	LOOP>

DONE	<POP	TP* B>		; "Return the vector"
	<POP	TP* A>
	<JRST	FINIS>

<END>


<DEFINE CAREFUL-TTY-OFF () 
	<COND (<NOTTY?>
	       <SSNAM <STRTOX "NO-TTY">>				 ;"peek"
	       <PROG () <SLEEP 2> <RESET ,INCHAN> <AND <NOTTY?> <AGAIN>>>
	       <SSNAM <STRTOX <SNAME>>>)>
	<TTY-OFF>>

<DEFINE OPENTELL (MODE FILENAME "AUX" CHAN) 
	#DECL ((MODE FILENAME) STRING (CHAN VALUE) <OR CHANNEL FALSE>)
	<COND (<SET CHAN <OPEN .MODE .FILENAME>> .CHAN)
	      (ELSE
	       <TERPRI>
	       <PRINC .FILENAME>
	       <TERPRI>
	       <PRINC <1 .CHAN>>
	       .CHAN)>>

<DEFINE XFPUSH (NEWXF "OPTIONAL" (SILMODE <>)) 
	#DECL ((NEWXF CURXCHAN) <OR CHANNEL STRING FALSE> (VALUE) ATOM
	       (SILMODE) <OR ATOM FALSE>
	       (XFSTACK) <LIST [REST FIX <OR CHANNEL STRING FALSE>]>
	       (XFLEVEL DSPLEVEL) FIX)
	<COND (.CURXCHAN
	       <SET XFSTACK
		    (.XFLEVEL .CURXCHAN .READER-SILENCE !.XFSTACK)>)>
	<SET CURXCHAN .NEWXF>
	<SET XFLEVEL .DSPLEVEL>
	<SET READER-SILENCE .SILMODE>
	<COND (<NOT .CURXCHAN> <CAREFUL-TTY-OFF>)>
	T>

<DEFINE XFPOP () 
	#DECL ((VALUE CURXCHAN) <OR CHANNEL STRING FALSE>
	       (XFSTACK) <LIST [REST FIX <OR CHANNEL STRING FALSE>]>
	       (DSPLEVEL XFLEVEL) FIX)
	<COND (<TYPE? .CURXCHAN CHANNEL> <CLOSE .CURXCHAN>)>
	<COND (<AND <NOT <EMPTY? .XFSTACK>> <G=? <1 .XFSTACK> .DSPLEVEL>>
	       <SET XFLEVEL <1 .XFSTACK>>
	       <SET CURXCHAN <2 .XFSTACK>>
	       <SET READER-SILENCE <3 .XFSTACK>>
	       <SET XFSTACK <REST .XFSTACK 3>>)
	      (ELSE
	       <SET CURXCHAN <>>
	       <SET XFLEVEL .DSPLEVEL>
	       <SET READER-SILENCE <>>)>
	<COND (<NOT .CURXCHAN> <CAREFUL-TTY-OFF>)>
	.CURXCHAN>

<SET SPCPRT
     [9
      "[TAB]"
      10
      "[LF]"
      12
      "[FF]"
      13
      "[CR]"
      27
      "[ESC]"
      32
      "[SP]"
      127
      "[DEL]"]>

<DEFINE RDBLOUT (STR "OPTIONAL" (OUTCHAN .OUTCHAN) "AUX" TMP C) 
	#DECL ((VALUE) ATOM (STR) <OR STRING CHARACTER>
	       (SPCPRT) <VECTOR [REST FIX STRING]> (OUTCHAN) CHANNEL
	       (C) CHARACTER (TMP) <OR <VECTOR [REST FIX STRING]> FALSE>)
	<REPEAT ()
		<COND (<TYPE? .STR CHARACTER> <SET C .STR>)
		      (<EMPTY? .STR> <RETURN T>)
		      (ELSE <SET C <1 .STR>>)>
		<COND (<SET TMP <MEMBER <ASCII .C> .SPCPRT>>
		       <PRINC <2 .TMP> .OUTCHAN>)
		      (<L? <ASCII .C> 32>
		       <PRINC !"^ .OUTCHAN>
		       <PRINC <ASCII <+ <ASCII .C> 64>> .OUTCHAN>)
		      (ELSE <PRINC .C .OUTCHAN>)>
		<COND (<TYPE? .STR CHARACTER> <RETURN T>)>
		<SET STR <REST .STR>>>>

<DEFINE DATE-PARSE (HAIRY-STRING "OPTIONAL" (DV (0 0 0))
		    "EXTRA" (HAIRY-LIST <LPARSE .HAIRY-STRING>) (LOST <>)
			    (DL ()))
   #DECL ((HAIRY-STRING) STRING (HAIRY-LIST) LIST (DV) <LIST [3 FIX]>
	  (DL) LIST (LOST) ANY (VALUE) <OR FALSE <LIST [3 FIX]>>)
   <MAPF <>
    <FUNCTION (X) 
       <AND <TYPE? .X FORM>					;"Takes care of , and ."
	    <MEMQ <1 .X> '[LVAL GVAL]>
	    <SET X <2 .X>>>
       <COND
	(<TYPE? .X FIX>
	 <COND (<G? .X 31>
		<COND (<G? .X 99>
		       <SET STR <UNPARSE .X>>
		       <COND (<==? <LENGTH .STR> 4>
			      <PUT .DV 1 <PARSE <REST .STR 2>>>)
			     (<MAPLEAVE <SET LOST .STR>>)>)
		      (<PUT .DV 1 .X>)>)
	       (<PUT .DV 3 .X>)>)
	(<TYPE? .X ATOM>
	 <SET STR <UNPARSE .X>>
	 <COND (<SET P <POSQ !"/ .STR T>>			 ;"Its a FOO/BAR/BLETCH"
		<SET DL (<PARSE <SUBSTRUC .STR 0 <- .P 1>>> !.DL)>
		<SET STR <REST .STR .P>>
		<COND (<SET P <POSQ !"/ .STR T>>
		       <SET DL (<PARSE <SUBSTRUC .STR 0 <- .P 1>>> !.DL)>
		       <SET STR <REST .STR .P>>
		       <OR <EMPTY? .STR> <SET DL (<PARSE .STR> !.DL)>>)
		      (<NOT <EMPTY? .STR>> <SET DL (<PARSE .STR> !.DL)>)>
		<COND (<NOT <DECL? .DL '<LIST [REST FIX]>>>
		       <MAPLEAVE <SET LOST .DL>>)>
		<COND (<1? <LENGTH .DL>> <PUT .DV 3 <1 .DL>>)
		      (<==? <LENGTH .DL> 2>
		       <PUT .DV 3 <1 .DL>>
		       <PUT .DV 2 <2 .DL>>)
		      (<PUT .DV 1 <1 .DL>>
		       <PUT .DV 3 <2 .DL>>
		       <PUT .DV 2 <3 .DL>>)>
		<MAPLEAVE T>)>
	 <COND
	  (<MAPF <>
		 <FUNCTION (Y) 
			 <COND (<==? <COMPS .STR .Y> 3>
				<MAPLEAVE <PUT .DV 2 <POSQ .Y .MONTHS <>>>>)>>
		 .MONTHS>)
	  (<MAPLEAVE <SET LOST .STR>>)>)>>
    .HAIRY-LIST>
   <COND (<OR <G? <1 .DV> 99>					 ;"Losing dates"
	      <G? <2 .DV> 12>
	      <G? <3 .DV>
		  <COND (<AND <==? <2 .DV> 2> <0? <MOD <1 .DV> 4>>> 29)
			(<NTH '![31 28 31 30 31 30 31 31 30 31 30 31!]
			      <2 .DV>>)>>
	      <L? <1 .DV> 0>
	      <L? <2 .DV> 0>
	      <L? <3 .DV> 0>>
	  <SET LOST .DV>)>
   <COND (.LOST <CHTYPE (.LOST) FALSE>) (<LIST !.DV>)>>

<SET MONTHS
     ["JAN"
      "FEB"
      "MAR"
      "APR"
      "MAY"
      "JUN"
      "JUL"
      "AUG"
      "SEP"
      "OCT"
      "NOV"
      "DEC"]>

<DEFINE POSQ (OBJ STR R=? "EXTRA" M)
    #DECL ((OBJ) ANY (STR M) STRUCTURED (R=?) <OR 'T FALSE> (VALUE) <OR FIX FALSE>)
    <COND (<SET M <COND (.R=? <MEMQ .OBJ .STR>) (<MEMBER .OBJ .STR>)>>
	   <+ <- <LENGTH .STR> <LENGTH .M>> 1>)>>

<ENDPACKAGE>
