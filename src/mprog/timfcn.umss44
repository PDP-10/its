
<PACKAGE "TIMFCN">

<ENTRY DAYS
       SECONDS
       SECS-DTNORM
       DTSECS
       GOOD-DTSECS
       TIME-STRING
       TIMEST
       REL-TIMEST
       TIME-STR
       TIME-DIF
       SPDATE
       PTIME
       PDATE
       GOOD-DTNORM
       DTNORM
       DTADD
       DTADD-2NORM
       DTDIFF
       DTPRINT
       SINCE60
       TZDIFF
       TIMEZONE
       BEFORE?
       PAST?
       DTNOW
       INMONTH
       DAYS-BETWEEN
       DATE-DOW
       HOLIDAY?
       NON-MIT-HOLIDAY?
       DST?
       ZONSTR>

<GDECL (ZONSTR) <OR STRING FALSE>>

<USE "DATIME">

<SETG BASE-YEAR 60>

<SETG SECS-P-MIN 60>

<SETG MINS-P-HOUR 60>

<SETG HOURS-P-DAY 24>

<SETG DAYS-P-YEAR 365>

<SETG SECS-P-HOUR <* ,SECS-P-MIN ,MINS-P-HOUR>>

<SETG SECS-P-DAY <* ,SECS-P-HOUR ,HOURS-P-DAY>>

<SETG SECS-P-YEAR <* ,DAYS-P-YEAR ,SECS-P-DAY>>

<SETG SECS-P-4YEAR <+ <* ,SECS-P-YEAR 4> ,SECS-P-DAY>>

<MANIFEST BASE-YEAR
	  SECS-P-MIN
	  MINS-P-HOUR
	  HOURS-P-DAY
	  DAYS-P-YEAR
	  SECS-P-HOUR
	  SECS-P-DAY
	  SECS-P-YEAR
	  SECS-P-4YEAR>

<DEFINE SECONDS (YEAR MONTH DAY "OPTIONAL" (HOURS 0) (MINUTES 0) (SECS 0)) 
	#DECL ((YEAR MONTH DAY SECS HOURS MINUTES) FIX (VALUE) FIX)
	<COND (<L? .MONTH 1>
	       <SET YEAR <+ .YEAR -1 </ .MONTH 12>>>
	       <SET MONTH <+ 1 <MOD <- .MONTH 1> 12>>>)
	      (<G? .MONTH 12>
	       <SET YEAR <+ .YEAR </ .MONTH 12>>>
	       <SET MONTH <+ 1 <MOD <- .MONTH 1> 12>>>)>
	<COND (<G? .YEAR 1900>
	       <SET YEAR <- .YEAR 1900>>)>
	<SET YEAR <- .YEAR ,BASE-YEAR>>
	<+ <* .YEAR ,SECS-P-YEAR>
	   <COND (<L=? .YEAR 0> <* </ <- .YEAR 4> 4> ,SECS-P-DAY>)
		 (ELSE <* </ <- .YEAR 1> 4> ,SECS-P-DAY>)>
	   <* <COND (<0? <MOD .YEAR 4>>
		     <NTH '![0 31 60 91 121 152 182 213 244 274 305 335!]
			  .MONTH>)
		    (T
		     <NTH '![0 31 59 90 120 151 181 212 243 273 304 334!]
			  .MONTH>)>
	      ,SECS-P-DAY>
	   <* .DAY ,SECS-P-DAY>
	   <* .HOURS ,SECS-P-HOUR>
	   <* .MINUTES ,SECS-P-MIN>
	   .SECS>>

<DEFINE DAYS (YEAR MONTH DAY "OPTIONAL" (HOURS 0) (MINUTES 0))
	#DECL ((YEAR MONTH DAY HOURS MINUTES VALUE) FIX)
	</ <SECONDS .YEAR .MONTH .DAY .HOURS .MINUTES> ,SECS-P-DAY>>

<DEFINE TIME-STRING (TI) #DECL ((TI) <LIST FIX FIX FIX> (VALUE) STRING)
	<TIMEST <1 .TI> <2 .TI> <3 .TI>>>

<DEFINE TIMEST (TEMH TEMM TEMS)
    #DECL ((TEMH) FIX (TEMM TEMS) <OR FIX FLOAT> (VALUE) STRING)
	<STRING !<COND (<0? .TEMH> '(""))
		       (ELSE (<UNPARSE .TEMH>
			      " hour"
			      <COND (<1? .TEMH> " ")
				    (ELSE "s ")>))>
		<COND (<AND <0? .TEMS>
			    <NOT <0? .TEMH>>
			    <NOT <0? .TEMM>>>
		      "and ")(ELSE "")>
 		!<COND (<0? .TEMM> '(""))
		       (ELSE (<UNPARSE .TEMM>
			      " minute"
			      <COND (<1? .TEMM> " ")
				     (ELSE "s ")>))>

		<COND (<AND <OR <NOT <0? .TEMH>>
				<NOT <0? .TEMM>>>
			    <NOT <0? .TEMS>>>
		       "and ") (ELSE "")>
	 	!<COND (<AND <0? .TEMS>
			      <OR <NOT <0? .TEMH>>
				  <NOT <0? .TEMM>>>>
			'(""))
		       (ELSE (<UNPARSE .TEMS>
			      " second"
			      <COND (<1? .TEMS> " ")
				    (ELSE "s ")>))>>>

<DEFINE REL-TIMEST (RDT
			"AUX" (Y <1 <1 .RDT>>) (M <2 <1 .RDT>>) (D <3 <1 .RDT>>)
			      (NT?
			       <AND <0? <1 <2 .RDT>>>
				    <0? <2 <2 .RDT>>>
				    <0? <3 <2 .RDT>>>>))
	#DECL ((VALUE) STRING (RDT) <LIST LIST <LIST [3 FIX]>>
	       (Y M D) FIX (NT?) <OR 'T FALSE>)
	<STRING !<COND (<0? .Y> '(""))
		       (ELSE
			(<UNPARSE .Y> " year" <COND (<1? .Y> " ") (ELSE "s ")>))>
		<COND (<AND .NT? <0? .D> <NOT <0? .Y>> <NOT <0? .M>>> "and ")
		      (ELSE "")>
		!<COND (<0? .M> '(""))
		       (ELSE
			(<UNPARSE .M> " month" <COND (<1? .M> " ") (ELSE "s ")>))>
		<COND (<AND .NT? <OR <NOT <0? .Y>> <NOT <0? .M>>> <NOT <0? .D>>>
		       "and ")
		      (ELSE "")>
		!<COND (<AND <0? .D> <OR <NOT <0? .Y>> <NOT <0? .M>>>> '(""))
		       (ELSE
			(<UNPARSE .D> " day" <COND (<1? .D> " ") (ELSE "s ")>))>
		<COND (.NT? "") (T <TIMEST !<2 .RDT>>)>>>  

<DEFINE TIME-STR (NSEC "AUX" (NMIN </ <FIX .NSEC> 60>)
			     (NHRS </ .NMIN 60>))
	#DECL ((NSEC) <OR FIX FLOAT> (NMIN NHRS) FIX (VALUE) STRING)
	<TIMEST .NHRS
		<- .NMIN <* .NHRS 60>>
		<- .NSEC <* .NMIN 60>>>>

<DEFINE TIME-DIF (D1 D2 T1 T2 "AUX" (DY <- <DAYS <1 .D2>
						 <2 .D2>
						 <3 .D2>>
					   <DAYS <1 .D1>
						 <2 .D1>
						 <3 .D1>>>))
	#DECL ((D1 D2 T1 T2) <LIST FIX FIX FIX> (DY) FIX (VALUE) STRING)
	<TIME-STR <- <+ <* .DY 3600 24>
			<* <1 .T2> 3600>
			<* <2 .T2> 60>
			<3 .T2>>
		      <+ <* <1 .T1> 3600>
			<* <2 .T1> 60>
			<3 .T1>>>>>

<DEFINE SPDATE (DAT "OPTIONAL" (CH .OUTCHAN))
	#DECL ((DAT) <LIST FIX FIX FIX> (CH) CHANNEL (VALUE) FIX)
	<PRINC <3 .DAT> .CH>
	<PRINC " " .CH>
	<PRINC <NTH '["JAN"
		      "FEB"
		      "MAR"
		      "APR"
		      "MAY"
		      "JUN"
		      "JUL"
		      "AUG"
		      "SEP"
		      "OCT"
		      "NOV"
		      "DEC"]
		    <2 .DAT>>
	       .CH>
	<PRINC " " .CH>
	<PRINC <1 .DAT> .CH>>

<DEFINE PTIME (DAT "OPTIONAL" (CH .OUTCHAN))
	#DECL ((DAT) <LIST FIX FIX FIX> (CH) CHANNEL)
	<COND (<L? <1 .DAT> 10> <PRINC "0" .CH>)>
	<PRINC <1 .DAT> .CH>
	<COND (<L? <2 .DAT> 10> <PRINC "0" .CH>)>
	<PRINC <2 .DAT> .CH>
	<PRINC " " .CH>
	<COND (<LENGTH? .DAT 3> <PRINC <TIMEZONE> .CH>)
	      (ELSE <PRINC " " .CH> <PRINC <4 .DAT> .CH>)>>

<DEFINE PDATE (DAT "OPTIONAL" (CH .OUTCHAN))
	#DECL ((DAT) <LIST FIX FIX FIX> (CH) CHANNEL)
	<PRINC <2 .DAT> .CH>
	<PRINC "/" .CH>
	<PRINC <3 .DAT> .CH>
	<PRINC "/" .CH>
	<PRINC <1 .DAT> .CH>>

<DEFINE SECS-DTNORM (S
		     "OPTIONAL" (L ((0 0 0) (0 0 0) ""))
		     "AUX" (Y 0) (Y4 0) (D 0) (M 0) (H 0) (GUESS 0) (DL <1 .L>)
			   (TL <2 .L>))
	#DECL ((Y Y4 S D M H GUESS) FIX (DL TL) <LIST FIX FIX FIX>
	       (L VALUE) <LIST [2 <LIST FIX FIX FIX>] STRING>)
	<SET Y4 <* <FNY/ .S ,SECS-P-4YEAR> 4>>
	<SET Y
	     <+ .Y4
		<FNY/ <- .S ,SECS-P-DAY <* </ .Y4 4> ,SECS-P-4YEAR>>
		   ,SECS-P-YEAR>>>
	<SET S
	     <- .S
		<+ <* <- .Y .Y4> ,SECS-P-YEAR> <* </ .Y4 4> ,SECS-P-4YEAR>>
		<OR <AND <==? .Y .Y4> <- ,SECS-P-DAY>> 0>>>
	<COND (<0? <SET D </ .S ,SECS-P-DAY>>>
	       <COND (<0? <MOD <SET Y <- .Y 1>> 4>>
		      <SET D <+ .D 366>>
		      <SET S <+ .S ,SECS-P-YEAR 1>>)
		     (ELSE <SET D <+ .D 365>> <SET S <+ .S ,SECS-P-YEAR>>)>)>
	<PUT .DL 1 <+ .Y ,BASE-YEAR>>
	<SET S <- .S <* .D ,SECS-P-DAY>>>
	<PUT .TL 1 <SET H </ .S ,SECS-P-HOUR>>>
	<SET S <- .S <* .H ,SECS-P-HOUR>>>
	<PUT .TL 2 <SET M </ .S ,SECS-P-MIN>>>
	<PUT .TL 3 <- .S <* .M ,SECS-P-MIN>>>
	<SET GUESS <MAX 1 <MIN </ .D 28> 12>>>
	<REPEAT ((MV
		  <COND (<NOT <0? <MOD .Y 4>>>
			 '![0 31 59 90 120 151 181 212 243 273 304 334 365!])
			(ELSE
			 '![0 31 60 91 121 152 182 213 244 274 305 335 366!])>))
		#DECL ((MV) <UVECTOR [REST FIX]>)
		<COND (<AND <G? .D <NTH .MV .GUESS>>
			    <L=? .D <NTH .MV <+ .GUESS 1>>>>
		       <RETURN <SET D <- .D <NTH .MV .GUESS>>>>)>
		<SET GUESS <+ .GUESS 1>>>
	<PUT .DL 2 .GUESS>
	<PUT .DL 3 .D>
	<COND (<=? <3 .L> <TIMEZONE>>)
	      (ELSE <PUT .L 3 <TIMEZONE>>)>
	.L>

<DEFINE GOOD-DTSECS (DT "AUX" D) 
	#DECL ((DT) <LIST [2 <LIST FIX FIX FIX>] STRING> (D) <LIST FIX FIX FIX>)
	<SECONDS <1 <SET D <1 .DT>>>
		 <2 .D>
		 <3 .D>
		 <+ <1 <SET D <2 .DT>>> <TZDIFF <3 .DT>>>
		 <2 .D>
		 <3 .D>>>

<DEFINE DTSECS (DT
		"AUX" (D <1 .DT>) (TI <2 .DT>) (LD <LENGTH .D>)
		      (LT <LENGTH .TI>) (TEM 0) (FD <FIX-DATE>))
	#DECL ((DT) <LIST LIST LIST> (D TI) <LIST [REST FIX]> (LD LT TEM FD) FIX)
	<SECONDS <COND (<==? .LD 3> <SET TEM <1 .D>> <SET D <REST .D>> .TEM)
		       (ELSE </ .FD 10000>)>
		 <COND (<G=? .LD 2> <SET TEM <1 .D>> <SET D <REST .D>> .TEM)
		       (ELSE </ <MOD .FD 10000> 100>)>
		 <COND (<0? .LD> <MOD .FD 100>) (ELSE <1 .D>)>
		 <+ <COND (<0? .LT> 0) (ELSE <1 .TI>)>
		    <COND (<==? <LENGTH .DT> 3> <TZDIFF <3 .DT>>) (ELSE 0)>>
		 <COND (<G=? .LT 2> <2 .TI>) (ELSE 0)>
		 <COND (<==? .LT 3> <3 .TI>) (ELSE 0)>>>

<DEFINE GOOD-DTNORM (DT "OPTIONAL" (L ((0 0 0) (0 0 0) "")))
	<SECS-DTNORM <GOOD-DTSECS .DT> .L>>

<DEFINE DTNORM (DT "OPTIONAL" (L ((0 0 0) (0 0 0) "")))
	#DECL ((DT) <LIST <LIST [REST FIX]> <LIST [REST FIX]>>)
	<SECS-DTNORM <DTSECS .DT> .L>>


<DEFINE DTADD (DT1 DT2 "OPTIONAL" (LL ((0 0 0) (0 0 0) ""))
		       "AUX" (I 0)(J 0) DT21 DT11)
    #DECL ((VALUE LL) <LIST [2 <LIST [3 FIX]>]> (DT1 DT2) <LIST [OPTIONAL LIST]>
	   (I J) FIX (DT21 DT11) <LIST [REST FIX]>)
    <SET DT11 <1 <SET LL <DTNORM .DT1 .LL>>>>
    <COND (<NOT <LENGTH? .DT2 1>>
	   <SET I <LENGTH <SET DT21 <1 .DT2>>>> <SET J 3>
	   <REPEAT () <COND (<L=? .I 0> <RETURN T>)>
		      <PUT .DT11 .J <+ <NTH .DT11 .J> <NTH .DT21 .I>>>
		      <SET I <- .I 1>>
		      <SET J <- .J 1>>>
	   <SET DT2 <REST .DT2>>)>
    <MAPR <>
	  <FUNCTION (A B) <PUT .A 1 <+ <1 .A> <1 .B>>>>
	  <SET DT11 <2 .LL>>
	  <SET DT21 <1 .DT2>>>
    <GOOD-DTNORM .LL .LL>>

<DEFINE DTADD-2NORM (DT2
		     "OPTIONAL" (L ((0 0 0) (0 0 0)))
		     "AUX" TMP N (TMP2 <1 .L>) TMPP)
	#DECL ((VALUE L) <LIST [2 <LIST [3 FIX]>]> (DT2) <LIST [REST LIST]>
	       (TMP2 TMP) LIST (N) FIX (TMPP) <LIST [3 FIX]>)
	<COND (<NOT <OR <LENGTH? .DT2 1>
			<AND <SET TMP <1 .DT2>>
			     <SET DT2 <REST .DT2>>
			     <EMPTY? .TMP>>>>
	       <SET N <LENGTH .TMP>>
	       <MAPF <>
		     <FUNCTION (IT) 
			     #DECL ((IT) FIX)
			     <PUT .TMP2 <- 3 <SET N <- .N 1>>> .IT>>
		     .TMP>)>
	<COND (<NOT <OR <EMPTY? .DT2> <AND <SET TMP <1 .DT2>> <EMPTY? .TMP>>>>
	       <MAPR <>
		     <FUNCTION (L1 L2) 
			     #DECL ((L1 L2) <LIST FIX>)
			     <PUT .L1 1 <1 .L2>>>
		     <2 .L>
		     .TMP>)>
	<SET TMPP <2 .L>>
	<AND <N==? <SET N <FNY/ <3 .TMPP> 60>> 0>
	     <PUT .TMPP 3 <MOD <3 .TMPP> 60>>
	     <PUT .TMPP 2 <+ .N <2 .TMPP>>>>
	<AND <N==? <SET N <FNY/ <2 .TMPP> 60>> 0>
	     <PUT .TMPP 2 <MOD <2 .TMPP> 60>>
	     <PUT .TMPP 1 <+ .N <1 .TMPP>>>>
	<AND <N==? <SET N <FNY/ <1 .TMPP> 24>> 0>
	     <PUT .TMPP 1 <MOD <1 .TMPP> 24>>
	     <PUT <1 .L> 3 <+ .N <3 <1 .L>>>>>
	.L>

<DEFINE DTDIFF (DT1 "OPTIONAL" (DT2 <DTNOW>)) 
	#DECL ((DT1 DT2) LIST (VALUE) FLOAT)
	</ <- <DTSECS .DT1> <DTSECS .DT2>> 60.0>>

<DEFINE DTPRINT (DT "OPTIONAL" (OUTCHAN .OUTCHAN) "AUX" (NDT <DTNORM .DT>))
    #DECL ((DT) LIST (OUTCHAN) <SPECIAL CHANNEL> (NDT) <LIST [2 <LIST [3 FIX]>] STRING>
	(VALUE) ATOM)

    <PRINC <3 <1 .NDT>>> <PRINC !"/>
    <PRINC <2 <1 .NDT>>> <PRINC !"/>
    <PRINC <1 <1 .NDT>>> <PRINC !" >
    <PRINC <1 <2 .NDT>>> <PRINC !":>
    <PRINC <2 <2 .NDT>>> <PRINC !":>
    <PRINC <3 <2 .NDT>>> <PRINC !" >
    <PRINC <3 .NDT>>
    T>

<DEFINE SINCE60 (DT)
    #DECL ((DT) <LIST <LIST FIX FIX FIX> <LIST FIX FIX FIX> STRING>
	(VALUE) FLOAT)
    <+ <* <FLOAT <DAYS !<1 .DT>>> 1440.0>
	<* <FLOAT <1 <2 .DT>>> 60.0>
	<2 <2 .DT>>
	</ <FLOAT <3 <2 .DT>>> 60.0>>>

<SETG ZONES '["GMT" 4
	      "AST" 0  "ADT" 1 
	      "EST" -1 "EDT" 0
	      "CST" -2 "CDT" -1
	      "MST" -3 "MDT" -2
	      "PST" -4 "PDT" -3
	      "YST" -5 "YDT" -4
	      "HST" -6 "HDT" -5
	      "BST" -7 "BDT" -6
	      ;"military:"
	      "A"3 "B"2 "C"1 "D"0 "E"-1 "F"-2 "G"-3 "H"-4 "I"-5 "K"-6 "L"-7 "M"-8
	      "N"5 "O"6 "P"7 "Q"8 "R"9  "S"10 "T"11 "U"12 "V"13 "W"14 "X"15 "Y"16 "Z"4]>

<GDECL (ZONES) <VECTOR [REST STRING FIX]>>

<DEFINE TZDIFF (ZONE1 "OPTIONAL" (ZONE2 <TIMEZONE>)
		"AUX" (ZONEMAP ,ZONES) DIFF1 DIFF2 X)
	#DECL ((VALUE DIFF1 DIFF2) FIX)
	<COND (<=? .ZONE1 .ZONE2> 0)
	      (ELSE
	       <COND (<SET X <MEMBER .ZONE1 .ZONEMAP>> <SET DIFF1 <2 .X>>)
		     (ELSE <SET DIFF1 <ERROR UNKNOWN-TIME-ZONE .ZONE1>>)>
	       <COND (<SET X <MEMBER .ZONE2 .ZONEMAP>> <SET DIFF2 <2 .X>>)
		     (ELSE <SET DIFF2 <ERROR UNKNOWN-TIME-ZONE .ZONE2>>)>
	       <- .DIFF2 .DIFF1>)>>

<SETG ZONSTR <>>

<DEFINE TIMEZONE ()
	#DECL ((VALUE) STRING)
	<OR ,ZONSTR <SETG ZONSTR <GETTIMEZONE>>>>

<DEFINE BEFORE? (DT1 DT2)
    <COND (<L? <DTDIFF .DT1 .DT2> 0> T) (ELSE <>)>>

<DEFINE PAST? (DT) <BEFORE? .DT <DTNOW>>>

<DEFINE DTNOW ("OPTIONAL" L)
	#DECL ((L) <LIST LIST LIST STRING>)
	<COND (<NOT <ASSIGNED? L>> (<DATE!-> <RTIME!-> <TIMEZONE>))
	      (ELSE 
	       <PUT .L 1 <DATE!-  <1 .L>>>
	       <PUT .L 2 <RTIME!-  <2 .L>>>
	       <AND <N==? <3 .L> ,ZONSTR> <PUT .L 3 <TIMEZONE>>>
	       .L)>>

<DEFINE INMONTH (MONTH YEAR "AUX" (NDMS '![31 28 31 30 31 30 31 31 30 31 30 31]))
    #DECL ((MONTH YEAR VALUE) FIX (NDMS) <UVECTOR [12 FIX]>)
    <COND (<AND <==? .MONTH 2> <0? <MOD .YEAR 4>>> 29)
	(ELSE <NTH .NDMS .MONTH>)>>

<DEFINE FNY/ (X Y "AUX" (Z </ .X .Y>))
    #DECL ((X Y Z VALUE) FIX)
    <COND (<L? .X 0> <- .Z 1>)
	(ELSE .Z)>>

<DEFINE DAYS-BETWEEN (DT1 DT2)
    #DECL ((VALUE) FIX (DT1 DT2) <LIST <LIST FIX FIX FIX>>)
    <- <DAYS !<1 .DT1!>> <DAYS !<1 .DT2>>>>

<DEFINE DATE-DOW ("OPTIONAL" (ARG <1 <DTNOW>>)
		  "AUX" (DAY <1 <DTNORM (.ARG '())>>) C (Y <1 .DAY>)
			(M <- <2 .DAY> 2>) (D <3 .DAY>))
	#DECL ((VALUE C Y M D) FIX (ARG DAY) <LIST [3 FIX]>)
	<AND <L? .Y 100> <SET Y <+ 1900 .Y>>>
	<AND <L? .M 1> <SET M <+ 12 .M>> <SET Y <- .Y 1>>>
	<SET C </ .Y 100>>
	<SET Y <MOD .Y 100>>
	<MOD <+ </ <- <* 13 .M> 1> 5>
		.D
		.Y
		</ .Y 4>
		</ .C 4>
		<* -2 .C>>
	     7>>

<DEFINE HOLIDAY? ("OPTIONAL" (ARG <1 <DTNOW>>)
		  "AUX" (DAY <1 <DTNORM (.ARG '())>>) (M <2 .DAY>) (D <3 .DAY>)
			(W <DATE-DOW .DAY>))
	#DECL ((VALUE) <OR STRING FALSE> (ARG DAY) <LIST [3 FIX]> (M D W) FIX)
	<COND (<AND <==? 1 .M> <==? 1 .D>> "New Year's Day")
	      (<AND <==? 1 .M> <==? 2 .D> <==? 1 .W>>
	       "New Year's Day observed")
	      (<AND <==? 1 .M> <==? 15 .D>> "Martin Luther King Day")
	      (<AND <==? 1 .M> <==? 16 .D> <==? 1 .W>>
	       "Martin Luther King Day")
	      (<AND <==? 2 .M> <==? 1 .W> <L=? 15 .D> <G=? 21 .D>>
	       "Presidents' Day")				      ;"3rd Mon"
	      (<AND <==? 4 .M> <==? 1 .W> <L=? 15 .D> <G=? 21 .D>>
	       "Patriots' Day")					      ;"3rd Mon"
	      (<AND <==? 5 .M> <==? 1 .W> <L=? 25 .D> <G=? 31 .D>>
	       "Memorial Day")					     ;"last Mon"
	      (<AND <==? 7 .M> <==? 4 .D>> "Independence Day")
	      (<AND <==? 7 .M> <==? 5 .D> <==? 1 .W>>
	       "Independence Day observed")
	      (<AND <==? 9 .M> <==? 1 .W> <L=? 1 .D> <G=? 7 .D>>
	       "Labor Day")					      ;"1st Mon"
	      (<AND <==? 10 .M> <==? 1 .W> <L=? 8 .D> <G=? 14 .D>>
	       "Columbus Day")					      ;"2nd Mon"
	      (<AND <==? 11 .M> <==? 11 .D>> "Veterans' Day")
	      (<AND <==? 11 .M> <==? 12 .D> <==? 1 .W>>
	       "Veterans' Day observed")
	      (<AND <==? 11 .M> <==? 4 .W> <L=? 22 .D> <G=? 28 .D>>
	       "Thanksgiving Day")				      ;"4th Thu"
	      (<AND <==? 12 .M> <==? 25 .D>> "Christmas Day")
	      (<AND <==? 12 .M> <==? 26 .D> <==? 1 .W>>
	       "Christmas Day observed")
	      (<FILE-EXISTS? "HOLIDAY"
			     <STRING <UNPARSE <1 .DAY>>
				     <REST <UNPARSE <+ 100 .M>>>
				     <REST <UNPARSE <+ 100 .D>>>>
			     "DSK" "COMBAT">
	       "ad-hoc holiday")>>

<DEFINE NON-MIT-HOLIDAY? ("OPTIONAL" (ARG <1 <DTNOW>>)
			  "AUX" (DAY <1 <DTNORM (.ARG '())>>)
				(Y <1 .DAY>) (M <2 .DAY>) (D <3 .DAY>)
				(W <DATE-DOW .DAY>) (E <EASTER .Y>)
				(DAYS <DAYS !.DAY>) (ED <DAYS !.E>))
	#DECL ((VALUE) <OR STRING FALSE> (ARG DAY E) <LIST [3 FIX]>
	       (Y M D W DAYS ED) FIX)
	<COND (<AND <==? 1 .M> <==? 31 .D>>
	       "[Setting sun is aligned with M.I.T. main corridor.]")
	      (<AND <==? 2 .M> <==? 2 .D>> "[Ground-hog Day]")
	      (<AND <==? 2 .M> <==? 14 .D>> "[St. Valentine's Day]")
	      (<AND <==? 2 .M> <==? 29 .D>> "[Leap Day]")
	      (<AND <==? 3 .M> <==? 1 .D>> "[St. David's Day]")
	      (<AND <==? 3 .M> <==? 17 .D>> "[St. Patrick's Day]")
	      (<AND <==? 4 .M> <==? 1 .D>> "[All Fools' Day]")
	      (<AND <==? 4 .M> <==? 23 .D>> "[St. George's Day]")
	      (<AND <==? 5 .M> <==? 1 .D>> "[May Day]")
	      (<AND <==? 5 .M> <==? 0 .W> <L=? 8 .D> <G=? 14 .D>>
	       "[Mothers' Day]")			;"2nd Sun"
	      (<AND <==? 5 .M> <==? 3 .W> <L=? 15 .D> <G=? 21 .D>>
	       "[Victoria Day]")			;"3rd Wed"
	      (<AND <==? 6 .M> <==? 0 .W> <L=? 8 .D> <G=? 14 .D>>
	       "[Childrens' Day]")			;"2nd Sun"
	      (<AND <==? 6 .M> <==? 14 .D>> "[Flag Day]")
	      (<AND <==? 6 .M> <==? 0 .W> <L=? 15 .D> <G=? 21 .D>>
	       "[Fathers' Day]")			;"3rd Sun"
	      (<AND <==? 7 .M> <==? 1 .D>> "[Canadian Dominion Day]")
	      (<AND <==? 7 .M> <==? 14 .D>> "[Bastille Day]")
	      (<AND <==? 10 .M> <==? 1 .W> <L=? 1 .D> <G=? 7 .D>>
	       "[U.N. Childrens' Day]")			;"1st Mon"
	      (<AND <==? 10 .M> <==? 31 .D>> "[All Hallows' Eve]")
	      (<AND <==? 11 .M> <==? 2 .W> <L=? 2 .D> <G=? 8 .D>>
	       "[Election Day]")
	      (<AND <==? 11 .M> <==? 12 .D>>
	       "[Setting sun is aligned with M.I.T. main corridor.]")
	      (<AND <==? 11 .M> <==? 30 .D>> "[St. Andrew's Day]")
	      (<AND <==? 12 .M> <==? 6 .D>> "[St. Nicholas's Day]")
	      (<==? .DAYS <- .ED 47>> "[Mardi Gras]")
	      (<==? .DAYS <- .ED 46>> "[Ash Wednesday]")
	      (<==? .DAYS <- .ED 7>> "[Palm Sunday]")
	      (<==? .DAYS <- .ED 2>> "[Good Friday]")
	      (<=? .DAY .E> "[Easter Sunday]")
	      (<==? .DAYS <+ .ED 49>> "[Whitsunday]")>>

<DEFINE EASTER (Y			;"from Knuth ACP 1.3.2"
		"AUX" (YY <COND (<L? .Y 100> <+ .Y 1900>) (T .Y)>)
		      G C X Z D E N)
	#DECL ((VALUE) <LIST [3 FIX]> (Y YY G C X Z D E N) FIX)
	<SET G <+ 1 <MOD .YY 19>>>	;"golden number"
	<SET C <+ 1 </ .YY 100>>>		;"century number"
	<SET X <- </ <* 3 .C> 4> 12>>		;"number of non-leap '00s"
	<SET Z <- </ <+ <* 8 .C> 5> 25> 5>>	;"correction"
	<SET D <- </ <* 5 .YY> 4> .X 10>>	;"March -D is a Sunday."
	<SET E <MOD <+ <* 11 .G> 20 .Z <- .X>> 30>>
	<COND (<OR <AND <==? .E 25> <G? .G 11>>
		   <==? .E 24>>
	       <SET E <+ 1 .E>>)>		;"epact"
	<SET N <- 44 .E>>
	<COND (<L? .N 21> <SET N <+ 30 .N>>)>	;"March N is a full moon."
	<SET N <- .N -7 <MOD <+ .D .N> 7>>>	;"March N is a Sunday."
	<COND (<L? .N 32> (.Y 3 .N))
	      (T (.Y 4 <- .N 31>))>>

<DEFINE DST? ("OPTIONAL" (DTA <DTNOW>)
			 ;"Is/was Daylight Saving Time in effect at this time?"
	      "AUX" (B74 '((74  1  6) (1 0 0) "EST"))
		    (E74 '((74 10  1) (1 0 0) "EST"))
		    (B75 '((75  2 23) (1 0 0) "EST"))
		    (E75 '((75 10 26) (1 0 0) "EST"))
		    (DT <DTNORM .DTA>) (DAY <1 .DT>) (H <1 <2 .DT>>)
		    (Y <1 .DAY>) (M <2 .DAY>) (D <3 .DAY>) S)
	#DECL ((VALUE) <OR 'T FALSE> (DTA) LIST (DT) <LIST LIST LIST STRING>
	       (B74 E74 B75 E75 DAY) LIST (Y M D H S) FIX)
	<COND (<==? .Y 74> <AND <BEFORE? .B74 .Y> <BEFORE? .Y .E74>>)
	      (<==? .Y 75> <AND <BEFORE? .B75 .Y> <BEFORE? .Y .E75>>)
	      (<AND <G? .M 4> <L? .M 10>>)
	      (<==? .M 4>
	       <SET S <- 30 <DATE-DOW (.Y 4 30)>>>	;"last Sunday"
	       <COND (<L? .D .S> <>)
		     (<G? .D .S>)
		     (<L? .H 1> <>)
		     (<G? .H 2>)
		     (<AND <G? .H 1> <==? !\S <2 <3 .DT>>>>)>)
	      (<==? .M 10>
	       <SET S <- 31 <DATE-DOW (.Y 10 31)>>>
	       <COND (<L? .D .S>)
		     (<G? .D .S> <>)
		     (<L? .H 1>)
		     (<G? .H 2> <>)
		     (<AND <L? .H 2> <==? !\D <2 <3 .DT>>>>)>)>>

<ENDPACKAGE>
