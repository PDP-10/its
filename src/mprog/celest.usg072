<PACKAGE "CELEST">

<ENTRY PHASE NEXT-PHASE NEXT-SEASON SUNRISE NOON SUNSET MOONRISE MOONSET>

<USE "TIMFCN">

;<SETG DT-REUSE ((0 0 0) (0 0 0) <TIMEZONE>)>	;"bugs somewhere using this"
;<GDECL (DT-REUSE) <LIST <LIST [REST FIX]> <LIST [REST FIX]>>>

<DEFINE PHASE ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))
	#DECL ((VALUE) FLOAT (DT) LIST)
	<RANGE <- <MOON-TRUE-POS .DT> <SUN-TRUE-POS .DT>>>>

<DEFINE NEXT-PHASE
	;"computes next change of phase to nearest appx. 6 minutes (.05 deg)
	  -- or last change if .NEXT? is 0"
     ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>) (TOL 0.05) (NEXT? 1)
      "AUX" (PH <PHASE .DT>) DIFF
	    (TARGET <* 90.0 <MOD </ <FIX <+ <* .NEXT? 90.0> .PH>> 90> 4>>))
	#DECL ((VALUE) <VECTOR FIX LIST> (DT) LIST
	       (TOL DIFF TARGET PH) FLOAT (NEXT?) FIX)
	<REPEAT ()
	      <SET DIFF <- .TARGET .PH>>
	      <AND <G? .DIFF +180.0> <SET DIFF <- .DIFF 360.0>>>
	      <AND <L? .DIFF -180.0> <SET DIFF <+ .DIFF 360.0>>>
	      <COND (<L? <ABS .DIFF> .TOL> <RETURN [</ <FIX .TARGET> 90> .DT]>)
		    (T <SET PH <PHASE
			       <SET DT <DTADD .DT
					      (() (0 0 <FIX <* 6557.2 .DIFF>>))
					      ;,DT-REUSE>>>>)>>>

<DEFINE NEXT-SEASON
	;"computes next change of season to nearest appx. 6 min (.004 deg)
	  -- or last change if .NEXT? is 0"
     ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>) (TOL 0.004) (NEXT? 1)
      "AUX" (POS <SUN-TRUE-POS .DT>) DIFF
	    (TARGET <* 90.0 <MOD </ <FIX <+ <* .NEXT? 90.0> .POS>> 90> 4>>))
	#DECL ((VALUE) <VECTOR FIX LIST> (DT) LIST
	       (TOL DIFF TARGET POS) FLOAT (NEXT?) FIX)
	<REPEAT ()
	      <SET DIFF <- .TARGET .POS>>
	      <AND <G? .DIFF +180.0> <SET DIFF <- .DIFF 360.0>>>
	      <AND <L? .DIFF -180.0> <SET DIFF <+ .DIFF 360.0>>>
	      <COND (<L? <ABS .DIFF> .TOL> <RETURN [</ <FIX .TARGET> 90> .DT]>)
		    (T <SET POS <SUN-TRUE-POS
			   <SET DT <DTADD .DT
					  (() (0 0 <FIX <* 87657.6 .DIFF>>))
					  ;,DT-REUSE>>>>)>>>

<DEFINE SUNRISE ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>) (TOL 0.5)) 
   				;"computes time of sunrise on this date"
   #DECL ((VALUE DT) LIST (TOL) FLOAT)
   <SUNRISE/SET <DTNORM .DT ;,DT-REUSE> .TOL -1>>

<DEFINE SUNSET  ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>) (TOL 0.5)) 
   #DECL ((VALUE DT) LIST (TOL) FLOAT)
   <SUNRISE/SET <DTNORM .DT ;,DT-REUSE> .TOL +1>>

<DEFINE SUNRISE/SET (DT TOL WHICH)
 #DECL ((VALUE DT) LIST (TOL) FLOAT (WHICH) FIX)
 <SET DT (<1 .DT> (<+ 12 <* .WHICH 6>> 0 0))>		;"Start at 6 AM or PM."
 <REPEAT (ELEV (OELEV 0.0) (ODT .DT) (OOELEV 0.0) (OODT .DT) DTS
      (FACTOR <* .WHICH
		 </ 60.0> 0.25		    ;"Sun moves 1 degree in 4 minutes."
		 <COS <* ,PI </ 180.0> <DDMMSS ,LATITUDE>
						;"appx angle with horizon">>>))
  #DECL ((ELEV OELEV OOELEV FACTOR) FLOAT (ODT OODT) LIST (DTS) FIX)
  <SET ELEV <DDMMSS <SUN-ELEV .DT>>>
  <COND (<L? <ABS .ELEV> .TOL>		;"close enough?"
	 <RETURN .DT>)
	(<=? .ODT <SET DT		;"stuck on one value?"
		    <DTADD .DT (() (0 0 <FIX </ .ELEV .FACTOR>>)) ;,DT-REUSE>>>
	 <RETURN .DT>)
	(<AND <L? <* .ELEV .OELEV> 0.0>	;"can't get any closer?"
	      <1? <ABS <SET DTS <- <DTSECS .ODT> <DTSECS .DT>>>>>>
	 <RETURN .DT>)
	(T
	 <COND (<=? .DT .OODT>		;"cycle of length 2?"
		<SET DT <DTADD .DT (() (0 0 </ .DTS 2>))>>)>
	 <SET OOELEV .OELEV> <SET OODT .ODT>
	 <SET  OELEV  .ELEV> <SET  ODT  .DT>)>>>

<DEFINE NOON ("OPTIONAL" (DT <DTNOW>) (TOL 0.5E-1)) 
   			;"computes time of noon (sun due south) on this date"
	#DECL ((VALUE DT) LIST (TOL) FLOAT)
	<SET DT (<1 <DTNORM .DT>> (12 0 0))>
	<REPEAT (AZIM (OAZIM 0.0) (ODT .DT) S (FACTOR </ -0.25 30.0>))
	       #DECL ((AZIM OAZIM FACTOR) FLOAT (ODT) LIST (S) <LIST ATOM FIX>)
		<2 <SET S <SUN-AZIM .DT>> <- <2 .S> 180>>
		<SET AZIM <DDMMSS .S>>
		<COND (<L? <ABS .AZIM> .TOL> <RETURN .DT>)
		      (<=? .ODT
			   <SET DT
				<DTADD .DT
				       (() (0 0 <FIX </ .AZIM .FACTOR>>))>>>
		       <RETURN .DT>)
		      (<AND <L? <* .AZIM .OAZIM> 0.0>
			    <1? <ABS <- <DTSECS .ODT> <DTSECS .DT>>>>>
		       <RETURN .DT>)
		      (T <SET OAZIM .AZIM> <SET ODT .DT>)>>>

<DEFINE SUN-ELEV ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>)) 
	#DECL ((VALUE DT) LIST)
	<SET DT <DTNORM .DT ;,DT-REUSE>>
	<1 <SUN ,LONGITUDE
		,LATITUDE
		<1 .DT>
		<UPDATE <2 .DT> ,GMT-OFFSET>>>>

<DEFINE SUN-AZIM ("OPTIONAL" (DT <DTNOW>)) 
	#DECL ((VALUE DT) LIST)
	<SET DT <DTNORM .DT>>
	<2 <SUN ,LONGITUDE
		,LATITUDE
		<1 .DT>
		<UPDATE <2 .DT> ,GMT-OFFSET>>>>

<DEFINE MOONRISE ("OPTIONAL" (DT <DTNOW>) (TOL 0.5))
				;"computes time of moonrise on this date"
	#DECL ((VALUE) <OR LIST FALSE> (DT) LIST (TOL) FLOAT)
   <MOONRISE/SET <DTNORM .DT> .TOL -1>>

<DEFINE MOONSET ("OPTIONAL" (DT <DTNOW>) (TOL 0.5))
	#DECL ((VALUE) <OR LIST FALSE> (DT) LIST (TOL) FLOAT)
   <MOONRISE/SET <DTNORM .DT> .TOL +1>>

<DEFINE MOONRISE/SET (DT TOL WHICH
		      "AUX" (DAY (<1 .DT> (0 0 0))) (P <PHASE .DT>))
 #DECL ((VALUE) <OR LIST FALSE> (DT DAY) LIST (TOL P) FLOAT (WHICH) FIX)
 <SET DT <DTNORM
	 (<1 .DT>
	  (<+ 12 <* .WHICH 6>>
	   <FIX <* -4.0 <COND (<OR <AND <==? +1 .WHICH> <G? .P  90.0>>
				   <AND <==? -1 .WHICH> <G? .P 270.0>>>
			       <- .P 360.0>)
			      (T .P)>>>))>>	;"initial guess"
 <REPEAT (ELEV (YESTER <>) (MORROW <>)	;"Did we slop over into these days?"
	  (FACTOR <* .WHICH
		     0.25		;"Elev changes 1 degree in 4 minutes."
		     <COS <* ,PI </ 180.0> <DDMMSS ,LATITUDE>
					;"appx angle with horizon">>>))
	 #DECL ((ELEV FACTOR) FLOAT (YESTER MORROW) <OR 'T FALSE>)
  <SET ELEV <DDMMSS <MOON-ELEV .DT>>>
  <COND (<L? <ABS .ELEV> .TOL>
	 <COND (<=? <1 .DAY> <1 .DT>> <RETURN .DT>)
	       (<BEFORE? .DT .DAY> <COND (.MORROW <RETURN <>>)
					 (<SET YESTER T>
					  <SET DT <DTADD .DT '((1)())>>
					  <AGAIN>)>)
	       (.YESTER <RETURN <>>)
	       (<SET MORROW T> <SET DT <DTADD .DT '((-1)())>> <AGAIN>)>)
	(T
	 <SET DT <DTADD .DT (() (0 <FIX </ .ELEV .FACTOR>>)) ;,DT-REUSE>>)>>>

<DEFINE MOON-ELEV ("OPTIONAL" (DT <DTNOW>))
	#DECL ((VALUE) ANY (DT) LIST)
	<MOON ,LONGITUDE ,LATITUDE <DTNORM .DT>>>

<DEFINE MOON (LONG LATI DT
	      "AUX" (MLONG <MOON-TRUE-POS .DT>) (UT <DT-TO-UT .DT>)
	            (OBLIQ <OBLIQUITY .UT>))
	#DECL ((VALUE LONG LATI DT) LIST (MLONG UT OBLIQ) FLOAT)
	<ANGLED <1 <SKY-ANGLES
		     <DDMMSS .LONG>
		     <DDMMSS .LATI>
		     <- 360.0
			<RANGE <- <RANGE <GHA-ARIES .UT>>
				  <RIGHT-ASCENSION .MLONG .OBLIQ>>>>
		     <DECLINATION .MLONG .OBLIQ> ;<MOON-TRUE-LAT .DT>>>>>

;"from IMPROVED LUNAR EPHEMERIS 1952-1959, by the Nautical Almanac
Offices of the United States of America and the United Kingdom.
U.S. Government Printing Office, Washington, 1954.  523.3/U58/ni"

<DEFINE l ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))		;"mean anomaly of moon"
	#DECL ((VALUE) FLOAT (DT) LIST)
	<- <MOON-MEAN-POS .DT> <MOON-MEAN-PGEE .DT>>>

<DEFINE lp ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))		;"mean anomaly of sun"
	#DECL ((VALUE) FLOAT (DT) LIST)
	<- <SUN-MEAN-POS .DT> <SUN-MEAN-PGEE .DT>>>

<DEFINE F ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))
					;"mean argument of moon's latitude"
	#DECL ((VALUE) FLOAT (DT) LIST)
	<- <MOON-MEAN-POS .DT> <MOON-MEAN-NODE .DT>>>

<DEFINE D ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))
	#DECL ((VALUE) FLOAT (DT) LIST)
	<MOON-MEAN-ELONG .DT>>

<DEFINE MOON-TRUE-POS ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>)
		       "AUX" (FADS ![<l .DT> <lp .DT> <F .DT> <D .DT>]))
	#DECL ((VALUE) FLOAT (DT) LIST (FADS) <UVECTOR [REST FLOAT]>)
	<+ <MOON-MEAN-POS .DT>
	   </ <MAPF ,+
		    <FUNCTION (COEFF+ARG)
			   #DECL ((COEFF+ARG) <VECTOR FLOAT <UVECTOR [4 FIX]>>)
			      <* <1 .COEFF+ARG>
				 <SIND <MAPF ,+ ,* <2 .COEFF+ARG> .FADS>>>>
		    ,SOLAR-TERMS-IN-LONGITUDE>
	      3600.0>>>

;<DEFINE MOON-TRUE-LAT ("OPTIONAL" (DT <DTNOW>) S GF GF2 (dd <d .DT>)
		       "AUX" (FADS ![<l .DT> <lp .DT> <F .DT> <D .DT>]))
	#DECL ((VALUE S dd GF GF2) FLOAT (DT) LIST
	       (FADS) <UVECTOR [REST FLOAT]>)
       <SET S
	<+ <F .DT>
	   </ <TL .dd '![ 0.53733431 -10104982E-12 191E-16]> 360.0>
		 ;"additive term for MOON-MEAN-POS, Ser. No. 1636, ILE p. 290"
	   </ <TL .dd '![-0.71995354 147094228E-12 -43E-16]> 360.0>
	   </ <TL .dd '![-0.48398132 147269147E-12 -43E-16]> 360.0>
	     ;"additive terms for MOON-MEAN-NODE, Ser. Nos. 1670-1, ILE p. 291"
	   </ <MAPF ,+
		    <FUNCTION (COEFF+ARG)
			      #DECL ((COEFF+ARG)
				     <VECTOR FLOAT <UVECTOR [4 FIX]>>)
			      <* <1 .COEFF+ARG>
				 <SIND <MAPF ,+ ,* <2 .COEFF+ARG> .FADS>>>>
		    ,SOLAR-TERMS-IN-LATITUDE:S>
	      3600.0>>>
       <SET GF
	    <+ 1 2.708E-6
	       <* 139.978
		  <+ <TL .dd '![0.71995354 -147094228E-12 43E-16]>
		     <TL .dd '![0.48398132 -147269147E-12 43E-16]>
		     <TL .dd '![0.52453688 -147162675E-12 43E-16]>>>>>
		       ;"diff. betw. prelim. & final values, ILE pp. 344 & 350"
       <SET GF2 <* .GF .GF>>
       <*
	</ <+ 18518.511 1.189> 3600.0>				;"A"
	<+ <*            .GF           <SIND        .S>>
	   <* -336992E-9 .GF .GF2      <SIND <* 3.0 .S>>>
	   <*     216E-9 .GF .GF2 .GF2 <SIND <* 5.0 .S>>>
	   <*   53996E-9
	       </ <MAPF ,+
		    <FUNCTION (COEFF+ARG)
			      #DECL ((COEFF+ARG)
				     <VECTOR FLOAT <UVECTOR [4 FIX]>>)
			      <* <1 .COEFF+ARG>
				 <SIND <MAPF ,+ ,* <2 .COEFF+ARG> .FADS>>>>
		    ,SOLAR-TERMS-IN-LATITUDE:N>
	      3600.0>>>>>

;<SETG SOLAR-TERMS-IN-LATITUDE:S
		;"(Only terms with coeff > 10s have been included here.)"
      '![[ -112.79 ![ 0  0  0 +1]]
	 [+2373.36 ![ 0  0  0 +2]]
	 [  +14.06 ![ 0  0  0 +4]]
	 [ +192.72 ![+1  0  0 +2]]
	 [  -13.51 ![+1  0  0 +1]]
	 [22609.07 ![+1  0  0  0]]
	 [-4578.13 ![+1  0  0 -2]]
	 [  -38.64 ![+1  0  0 -4]]
	 [  +14.78 ![+2  0  0 +2]]
	 [ +767.96 ![+2  0  0  0]]
	 [ -152.53 ![+2  0  0 -2]]
	 [  -34.07 ![+2  0  0 -4]]
	 [  +50.64 ![+3  0  0  0]]
	 [  -16.40 ![+3  0  0 -2]]
	 [  -25.10 ![ 0 +1  0 +2]]
	 [  +17.93 ![ 0 +1  0 +1]]
	 [ -126.98 ![ 0 +1  0  0]]
	 [ -165.06 ![ 0 +1  0 -2]]
	 [  -16.35 ![ 0 +2  0 -2]]
	 [  -11.75 ![+1 +1  0 +2]]
	 [ -115.18 ![+1 +1  0  0]]
	 [ -182.36 ![+1 +1  0 -2]]
	 [  -23.59 ![-1 +1  0 +2]]
	 [ -138.76 ![-1 +1  0  0]]
	 [  -31.70 ![-1 +1  0 -2]]
	 [  -10.56 ![+2 +1  0  0]]
	 [  +11.67 ![+2 -1  0  0]]
	 [  -52.14 ![ 0  0 +2 -2]]
	 [  -85.13 ![-1  0 +2  0]]]>

;<SETG SOLAR-TERMS-IN-LATITUDE:N
		;"(Only terms with coeff > 10s have been included here.)"
      '![[-526.069 ![ 0  0 +1 -2]]
	 [ +44.297 ![+1  0 +1 -2]]
	 [ +20.599 ![-1  0 +1  0]]
	 [ -30.598 ![-1  0 +1 -2]]
	 [ -24.649 ![-2  0 +1  0]]
	 [ -22.571 ![ 0 +1 +1 -2]]
	 [ +10.985 ![ 0 -1 +1 -2]]]>

;<GDECL (SOLAR-TERMS-IN-LATITUDE:S SOLAR-TERMS-IN-LATITUDE:N)
       <UVECTOR [REST <VECTOR FLOAT <UVECTOR [REST FIX]>>]>>

<SETG SOLAR-TERMS-IN-LONGITUDE
		;"(Only terms with coeff > 10s have been included here.)"
      '![[22639.500 ![ 1  0  0  0]]
	 [-4586.465 ![ 1  0  0 -2]]
	 [+2369.912 ![ 0  0  0  2]]
	 [ +769.016 ![ 2  0  0  0]]
	 [ -668.146 ![ 0  1  0  0]]
	 [ -411.608 ![ 0  0  2  0]]
	 [ -211.656 ![ 2  0  0 -2]]
	 [ -205.962 ![ 1  1  0 -2]]
	 [ +191.953 ![ 1  0  0  2]]
	 [ -165.145 ![ 0  1  0 -2]]
	 [ +147.687 ![ 1 -1  0  0]]
	 [ -125.154 ![ 0  0  0  1]]
	 [ -109.673 ![ 1  1  0  0]]
	 [  -55.173 ![ 0  0  2 -2]]
	 [  -45.099 ![ 1  0  2  0]]
	 [  +39.528 ![ 1  0 -2  0]]
	 [  -38.428 ![ 1  0  0 -4]]
	 [  +36.124 ![ 3  0  0  0]]
	 [  -30.773 ![ 2  0  0 -4]]
	 [  +28.475 ![ 1 -1  0 -2]]
	 [  -24.420 ![ 0  1  0  2]]
	 [  +18.609 ![ 1  0  0 -1]]
	 [  +18.023 ![ 0  1  0  1]]
	 [  +14.577 ![ 1 -1  0  2]]
	 [  +14.387 ![ 2  0  0  2]]
	 [  +13.902 ![ 0  0  0  4]]
	 [  -13.193 ![ 3  0  0 -2]]]>

<GDECL (SOLAR-TERMS-IN-LONGITUDE)
       <UVECTOR [REST <VECTOR FLOAT <UVECTOR [REST FIX]>>]>>


;"from EXPLANATORY SUPPLEMENT TO THE ASTRONOMICAL EPHEMERIS AND THE
AMERICAN EPHEMERIS AND NAUTICAL ALMANAC, by H.M. Nautical Almanac
Office.  H.M. Stationery Office, London, 1961.  QB8.G78"

<DEFINE d (DT "AUX" (DTN <DTNORM .DT ;,DT-REUSE>) (T <2 .DTN>))
					;"days since 1900 January 0.5 E.T."
	#DECL ((VALUE) FLOAT (DT) LIST
	       (DTN) <LIST [2 LIST] STRING> (T) <LIST [3 FIX]>)
	<+ <DAYS !<1 .DTN>>		;"days since 1960 January 0"
	   21914.5
	   </ <+ <1 .T> <TZDIFF <3 .DTN> "GMT">>
	      24.0>
	   </ <2 .T> 1440.0>
	   </ <3 .T> 86400.0>>>

<DEFINE JD (DT)				;"Julian Date"
	#DECL ((VALUE) FLOAT (DT) LIST)
	<+ <d .DT> 2415020.0>>

;<==? <JD '((77 6 1) (-4) "EDT")> 2443295.5>

<DEFINE TL (D COEFF "AUX" (DN </ 1.0 .D>) F)
			;"Taylor-series approx'n to celestial longitude"
	#DECL ((VALUE) FLOAT (D DN) FLOAT (COEFF) <UVECTOR [REST FLOAT]>
	       (F) FIX)
	<SET D <MAPF ,+
		     <FUNCTION (C) #DECL ((C) FLOAT)
			       <* .C <SET DN <* .D .DN>>>>
		     .COEFF>>
	<SET F <FIX .D>>
	<+ <MOD .F 360> <- .D .F>>>

<DEFINE SUN-MEAN-POS ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))
				;"geometric mean longitude of sun (p 98)"
	#DECL ((VALUE) FLOAT (DT) LIST)
	<TL <d .DT> '![279.696678 00.9856473354 +0.2267E-12]>>

;<==? <SUN-MEAN-POS ,SUMMER> 90.0			;"(p 203)">

;<==? <SUN-MEAN-POS '((60 3 7) (-4) "EDT")> 344.71805
					;"Ex. 4.1 (p 99) (Epoch 1960.0)">

<DEFINE SUN-MEAN-PGEE ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))
	;"mean longitude of solar perigee (p 98)"
	#DECL ((VALUE) FLOAT (DT) LIST)
	<TL <d .DT> '![281.220833 00.0000470684 +0.339E-12 0.7E-19]>>

<DEFINE MOON-MEAN-POS ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))
	;"mean longitude of moon (p 107)"
	#DECL ((VALUE) FLOAT (DT) LIST)
	<TL <d .DT> '![270.434164 13.1763965268 -0.850E-12 0.39E-19]>>

;<==? <MOON-MEAN-POS '((60 3 7) (-4) "EDT")> 94.217611	;"Ex. 4.10 (p 108)">

<DEFINE MOON-MEAN-ELONG ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))
     ;"mean elongation of moon from sun = MOON-MEAN-POS - SUN-MEAN-POS (p 107)"
	#DECL ((VALUE) FLOAT (DT) LIST)
	<TL <d .DT> '![350.737486 12.1907491914 -1.076E-12 0.39E-19]>>

;<==? <MOON-MEAN-ELONG .FQ> 90.0			;"(p 204)">

<DEFINE MOON-MEAN-PGEE ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))
	;"mean longitude of lunar perigee (p 107)"
	#DECL ((VALUE) FLOAT (DT) LIST)
	<TL <d .DT> '![334.329556 00.1114040803 -7.739E-12 -0.26E-18]>>

<DEFINE MOON-MEAN-NODE ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))
    ;"mean longitude of mean ascending node of lunar orbit on ecliptic (p 107)"
	#DECL ((VALUE) FLOAT (DT) LIST)
	<TL <d .DT> '![259.183275 -0.0529539222 +1.557E-12 +0.05E-18]>>

<DEFINE DT-TO-UT ("OPTIONAL" (DT <DTNOW>))
	#DECL ((VALUE) FLOAT (DT) LIST)
	<- <d .DT> <d '((75 1 1) (-4) "EDT")>>>

<DEFINE SUN-TRUE-POS ("OPTIONAL" (DT <DTNOW ;,DT-REUSE>))
	#DECL ((VALUE) FLOAT (DT) LIST)
	<4 <SUN-POSITION <DT-TO-UT .DT>>>>

;"from AI:BKPH;SUNONR 15"

;"
SUN 

COPYRIGHT Berthold K. P. Horn, 1977

Program to calculate sun-elevation and sun-azimuth.
Given observers geographical position and time of observation.

UT = time in (universal) days since 1975/01/01 U.T. 00:00:00
ET = time in (ephemeris) days since 1975/01/01 E.T. 00:00:00

DT = ET - UT reduction from universal time to ephemeris time.
DT = +45.6 seconds for 1975/01/01

Note, starting epoch is 27393.5 days later than epoch usually used,
namely, 1900/01/00 12:00:00. 

GEOMETRIC MEAN LONGITUDE (OF SUN) (L) = 280.0271 + .98564734 * ET
Relative to equinox of date (that is luni-solar and planetary
precession included). [Not directly used here].

MEAN ANOMALY (M) = Geometric Mean Longitude - Mean Longitude of Perigee.
M = 357.5166 + .98560026 * ET 

Eccentricity e = .016720 - .0000000011 * ET

ECCENTRIC ANOMALY (E) -- useful auxillary angle.
Anomaly measured from center of ellipse to circumscribed circle.
E + e sin(E) = M. Transcendental equation (due to Kepler ...).

TRUE ANOMALY (N):
Anomaly measured from focus of ellipse to actual position.
tan (N/2) = SQRT((1+e)/(1-e)) tan(E/2)

LONGITUDE OF EARTH PERIGEE (G) = 282.5105 + .00004709 * ET
Relative to equinox of date (that is luni-solar and planetary
precession included).

TRUE LONGITUDE = LONGITUDE OF PERIGEE + TRUE ANOMALY

Position of MOON'S NODE (O) = 248.59 - .052954 * ET

 OBLIQUITY OF ECLIPTIC PLANE (X) = 23.4425 - .000000036 ET 
 Nutation in obliquity = + .0026 * cos(O)	( +9s.210)
 Nutation in longitude = - .0048 * sin(O)	(-17s.234)

 Radius-Vector =  (1 - e * e) / (1 + e * cos(N) ) = 1 - e * cos (E)

 Semi-Diameter = .2670 / Radius-Vector		(16m 01s.18)
 Parallax = .0024 / Radius-Vector		( 8s.794)
 Abberation = .0057 / Radius-Vector 		(20s.496)

 DECLINATION of sun         PHI = asin( sin(L) * sin(X) )
 RIGHT ASCENSION of sun     THETA = atan( sin(L) * cos(X) / cos(L) )

 Mean Sidereal Time = Mean Greenwich Hour Angle of Equinox
 GHA(ARIES) = 100.0215 + 360.98564734 * UT

 True GHA-Equinox = Mean GHA-Equinox + Nut-Lon * cos(X)

 LONGITUDE(SUB-SOLAR POINT) = R.A.(SUN) - GHA(ARIES)
 LATITUDE(SUB-SOLAR POINT)  = DECLINATION(SUN)

    Latitude and Declination increase Northward.
    Longitude and Righ Ascension increase Eastward.
    Hour Angles increase Westward (sigh...)

Significant digits: 

	Angles 		-- 4 digits (.3s accuracy)
	Angular rates   -- 8 digits (1s.3 accuracy per century)
	Quadratic terms -- l2 digits (5s accuracy per century)

	Lunar node 	-- use two digits less, used indirectly.

	Eccentricity	-- use two digits more, for rad-to-deg conversion.

" 


<GDECL (PI ET-UT REFR-INDEX) FLOAT (LONGITUDE LATITUDE) LIST (GMT-OFFSET) FIX
       ;(TRACEF ANGLEF) ;<OR ANY FALSE>>

<SETG PI <* 4.0 <ATAN 1.0>>>
;<SETG TRACEF <SETG ANGLEF <>>>

;"Calculate GHA and DECLINATION and SEMI-DIAMETER of SUN.
Given time (UT) in days since 1975/01/01 U.T. 00:00:00
Result is list, (GHA DEC SD), numbers in decimal degrees."

<DEFINE SUN-POSITION (UT "AUX"
	      ET ECC MEANA ECCEA GUESA TRUEA LAMBDM LAMBDA PERI OMEGA OBLIQ
	      PHI THETA GHAGAM SEMID RADVEC ABBER PARAL NUT-OBLIQ
	      NUT-LONGIT)
       #DECL ((VALUE) <LIST [REST FLOAT]> (UT
	      ET ECC MEANA ECCEA GUESA TRUEA LAMBDM LAMBDA PERI OMEGA OBLIQ
	      PHI THETA GHAGAM SEMID RADVEC ABBER PARAL NUT-OBLIQ
	      NUT-LONGIT) FLOAT) 
	     <SET ET <+ .UT ,ET-UT>>
	     <SET ECC <ECCENTRICITY .ET>>
	     <SET MEANA <MEANANOM .ET>>
	     <SET GUESA <TRUEANOM .MEANA .ECC>>
	     <SET GUESA <ECCENANOM .GUESA .MEANA .ECC>>
	     <SET ECCEA <ECCENANOM .GUESA .MEANA .ECC>>
	     <SET TRUEA <TRUEANOM .ECCEA .ECC>>
	     <SET PERI <PERIGEE .ET>>
	     <SET LAMBDM <RANGE <+ .TRUEA .PERI <PERTURB-L .ET>>>>
	     <SET OBLIQ <OBLIQUITY .ET>>
	     ;<COND (,TRACEF <PRINT <LIST 'ECCENTRICITY .ECC>>)>
	     ;<COND (,TRACEF <BARF 'MEAN-ANOMALY <RANGE .MEANA>>
			     <BARF 'ECCEN-ANOMALY <RANGE .ECCEA>>
			     <BARF 'TRUE-ANOMALY <RANGE .TRUEA>>
			     <BARF 'PERIGEE <RANGE .PERI>>
			     <BARF 'MEAN-OBLIQUITY .OBLIQ>
			     <BARF 'MEAN-LONGITUDE <RANGE .LAMBDM>>)>
	     <SET OMEGA <MOON-NODE .ET>>
	     <SET NUT-OBLIQ <* <COSD .OMEGA> 2.6E-3>>
	     <SET NUT-LONGIT <* <SIND .OMEGA> -4.7E-3>>
	     <SET OBLIQ <+ .OBLIQ .NUT-OBLIQ>>
	     <SET LAMBDA <+ .LAMBDM .NUT-LONGIT>>
	     ;<COND (,TRACEF <BARF 'MOON-NODE <RANGE .OMEGA>>
			     <BARF 'NUT-OBLIQUITY .NUT-OBLIQ>
			     <BARF 'NUT-LONGITUDE .NUT-LONGIT>
			     <BARF 'TRUE-OBLIQUITY .OBLIQ>
			     <BARF 'TRUE-LONGITUDE <RANGE .LAMBDA>>)>
	     <SET RADVEC <RADIUS-VECTOR-T .TRUEA .ECC .ET>>
	     <SET SEMID </ 0.267 .RADVEC>>
	     <SET PARAL </ 2.4E-3 .RADVEC>>
	     <SET ABBER </ 5.7E-3 .RADVEC>>
	     <SET LAMBDA <- .LAMBDA .ABBER>>
	     ;<COND (,TRACEF <PRINT <LIST 'TRUE-DISTANCE .RADVEC>>)>
	     ;<COND (,TRACEF <BARF 'SEMI-DIAMETER .SEMID>
			     <BARF 'PARALLAX .PARAL>
			     <BARF 'ABBERATION .ABBER>
			     <BARF 'APPARENT-LONGITUDE <RANGE .LAMBDA>>)>
	     <SET PHI <DECLINATION .LAMBDA .OBLIQ>>
	     <SET THETA <RIGHT-ASCENSION .LAMBDA .OBLIQ>>
	     <SET GHAGAM <RANGE <GHA-ARIES .UT>>>
	     ;<COND (,TRACEF <BARF 'DECLINATION .PHI>
			     <BARF 'RIGHT-ASCENSION <RANGE .THETA>>
			     <BARF 'MEAN-GHA-EQUINOX .GHAGAM>)>
	     <SET GHAGAM <+ .GHAGAM <* .NUT-LONGIT <COSD .OBLIQ>>>>
	     <SET THETA <RANGE <- .GHAGAM .THETA>>>
	     ;<COND (,TRACEF <BARF 'TRUE-GHA-EQUINOX <RANGE .GHAGAM>>
			     <BARF 'TRUE-GHA-SUN .THETA>
			     <BARF 'TRUE-DECLINATION-SUN .PHI>)>
	     <LIST .THETA .PHI .SEMID .LAMBDA>> 


;" CALCULATES ELEVATION AND AZIMUTH AT OBSERVERS LOCATION.
 THETA1 PHI1 OBSERVERS LONGITUDE AND LATITUDE (decimal degrees).
 THETA2 PHI2 CELESTIAL OBJECTS LONGITUDE AND LATITUDE (decimal degrees).
 Result is list, (ELEV AZIM), numbers are decimal degrees.
 (Does not take into account parallax and refraction)"

<DEFINE SKY-ANGLES (THETA1 PHI1 THETA2 PHI2)
	#DECL ((VALUE) <LIST [REST FLOAT]>
	       (THETA1 PHI1 THETA2 PHI2) FLOAT)
   <LIST <ASIND <+ <* <SIND .PHI1> <SIND .PHI2>>
		   <* <COSD .PHI1> <COSD .PHI2> <COSD <- .THETA2 .THETA1>>>>>
	 <ATANE <* <COSD .PHI2> <SIND <- .THETA2 .THETA1>>>
		<- <* <COSD .PHI1> <SIND .PHI2>>
		   <* <SIND .PHI1> <COSD .PHI2> <COSD <- .THETA2 .THETA1>>>>>>>

;"Calculate sun-elevation and sun-azimuth and semi-diameter.
Given observer longitude and latitude, date and time.
Input format: (A DD MM SS), (A DD MM SS), (YYYY MM DD), (HH MM SS).

RETURNS (ELEVATION AZIMUTH SEMI),
format ((A DD MM SS) (A DD MM SS) (A DD MM SS))
AZIMUTH MEASURED CLOCKWISE FROM NORTH."

<DEFINE SUN (LONG LATI DAT HOURS "AUX" SUNPOS SKYANG)
	#DECL ((VALUE) <LIST [REST LIST]> (LONG LATI DAT HOURS SKYANG) LIST
	       (SUNPOS) <LIST [REST FLOAT]>)
	<SET SUNPOS <SUN-POSITION <+ <JULIAN .DAT> <HHMMSS .HOURS>>>>
	<SET SKYANG <SKY-ANGLES <DDMMSS .LONG>
				<DDMMSS .LATI>
				<- 360.0 <1 .SUNPOS>>
				<2 .SUNPOS>>>
	<LIST <ANGLED <1 .SKYANG>> <ANGLED <2 .SKYANG>> <ANGLED <3 .SUNPOS>>>>

;<DEFINE BARF (A B)
	#DECL ((A) ATOM (B) FLOAT)
	<PRINT <LIST .A <COND (,ANGLEF <ANGLED .B>)
			      (T .B)>>>>

;" CALCULATE DAYS SINCE 1975/01/01 -- INPUT format (YY MM DD)
 JULIAN DATE EQUALS RESULT PLUS 2442414.5" 

<DEFINE JULIAN (DATED)
	#DECL ((VALUE) FLOAT (DATED) LIST)
	<FLOAT <- <DAYS !.DATED> <DAYS 75 1 1>>>>

;"CALCULATE DATE, GIVEN DAYS SINCE 1975/01/01  -- OUTPUT format (YY MM DD)
ARGUMENT IS (JULIAN DATE - 2442414.5)" 

<DEFINE DATED (JULIANS) 
	#DECL ((VALUE) LIST (JULIANS) FLOAT)
	<1 <DTADD '((75 1 1) ()) ((<FIX .JULIANS>) ()) ;,DT-REUSE>>>

;"NEGATE ANGLE IN FUNNY FORMAT" 

<DEFINE INVERT (L)
	#DECL ((VALUE L) LIST)
	<COND (<==? <1 .L> +> <LIST - !<REST .L>>)
	      (<==? <1 .L> -> <LIST + !<REST .L>>)
	      (T <ERROR TYPE-MISMATCH!-ERRORS INVERT>)>>

;"CONVERT FROM HOURS -- format (HH MM SS) -- TO DECIMAL DAYS." 

<DEFINE HHMMSS (TIMED)
	#DECL ((VALUE) FLOAT (TIMED) <LIST [REST FIX]>)
	</ <+ <FLOAT <1 .TIMED>>
	      </ <+ <FLOAT <2 .TIMED>> </ <FLOAT <3 .TIMED>> 60.0>> 60.0>>
	   24.0>>

;"CONVERT FROM DECIMAL DAYS TO HOURS -- format (HH MM SS)." 

<DEFINE TIMED (HHMMSS "AUX" HH MM SS TMP)
	#DECL ((VALUE) LIST (HHMMSS TMP) FLOAT (HH MM SS) FIX)
	<SET HHMMSS <* 24.0 .HHMMSS>>
	<SET HH <FIX .HHMMSS>>
	<SET TMP <* 60.0 <- .HHMMSS <FLOAT .HH>>>>
	<SET MM <FIX .TMP>>
	<SET TMP <* 60.0 <- .TMP <FLOAT .MM>>>>
	<SET SS <FIX <+ 0.5 .TMP>>>
	<LIST .HH .MM .SS>>

;"CONVERT FROM ANGLE -- format (A DD MM SS) -- TO DECIMAL DEGREES." 

<DEFINE DDMMSS (ANGLED)
	#DECL ((VALUE) FLOAT (ANGLED) <LIST ATOM [3 FIX]>)
	<COND (<==? <1 .ANGLED> -> <- 0.0 <DDMMSS <INVERT .ANGLED>>>)
	      (T
	       <+ <FLOAT <2 .ANGLED>>
		  </ <+ <FLOAT <3 .ANGLED>> </ <FLOAT <4 .ANGLED>> 60.0>>
		     60.0>>)>>

;"CONVERT FROM DECIMAL DEGREES TO ANGLE -- format (A DD MM SS)." 

<DEFINE ANGLED (DDMMSS "AUX" DD MM SS TMP)
	#DECL ((VALUE) <LIST ATOM [3 FIX]> (DDMMSS TMP) FLOAT (DD MM SS) FIX)
	<COND (<L? .DDMMSS 0.0> <INVERT <ANGLED <- 0.0 .DDMMSS>>>)
	      (T
	       <SET DD <FIX .DDMMSS>>
	       <SET TMP <* 60.0 <- .DDMMSS <FLOAT .DD>>>>
	       <SET MM <FIX .TMP>>
	       <SET TMP <* 60.0 <- .TMP <FLOAT .MM>>>>
	       <SET SS <FIX <+ 0.5 .TMP>>>
	       <LIST + .DD .MM .SS>)>>

<DEFINE HOURS-TO-ANGLE (HOURS)
       #DECL ((HOURS) <LIST [REST FIX]>)
       <ANGLED <* 360.0 <HHMMSS .HOURS>>>>

<DEFINE ANGLE-TO-HOURS (ANGLE)
       #DECL ((ANGLE) <LIST ATOM [3 FIX]>)
       <COND (<==? <1 .ANGLE> -> <TIMED <+ 1.0 </ <DDMMSS .ANGLE> 360.0>>>)
	     (<==? <1 .ANGLE> +> <TIMED        </ <DDMMSS .ANGLE> 360.0>>)
	     (T <ERROR ERROR-IN-ANGLE!-ERRORS .ANGLE ANGLE-TO-HOURS>)>>

;"Calculate MEAN GHA of vernal equinox -- given UNIVERSAL TIME"

<DEFINE GHA-ARIES (TIM) 
	#DECL ((VALUE TIM) FLOAT)
	<+ <* .TIM 0.985647348> <* <FRACTION .TIM> 360.0> 100.0215>> 

;"Calculate geometric mean longitude of sun -- given EPHEMERIS TIME
Not used now -- "

<DEFINE LONGITUD (TIM) #DECL ((VALUE TIM) FLOAT)
	<+ 280.0271 <* .TIM 0.985647348>>> 

;"Calculate longitude of sun's perigee -- given EPHEMERIS TIME"

<DEFINE PERIGEE (TIM) #DECL ((VALUE TIM) FLOAT)
	<+ 282.5105 <* .TIM 4.7087E-5>>>

;"Calculate obliquity of ecliptic -- given EPHEMERIS TIME"

<DEFINE OBLIQUITY (TIM) #DECL ((VALUE TIM) FLOAT) <- 23.4425 <* .TIM 3.56E-7>>>

;"Calculate longitude of moon's node -- given EPHEMERIS TIME"

<DEFINE MOON-NODE (TIM) #DECL ((VALUE TIM) FLOAT)
	<- 248.59 <* .TIM 0.0529538>>>

;"Calculate eccentricity of earth orbit -- given EPHEMERIS TIME"

<DEFINE ECCENTRICITY (TIM) #DECL ((VALUE TIM) FLOAT)
	<- 0.01672 <* .TIM 1.15E-9>>> 

;"Calculate mean anomaly -- given EPHEMERIS TIME"

<DEFINE MEANANOM (TIM) #DECL ((VALUE TIM) FLOAT)
	<+ 357.5167 <* .TIM 0.985600261>>> 

;"FIRST FEW TERMS IN PERTURBATION OF MEAN LONGITUDE OF SUN
FROM TABLES OF SIMON NEWCOMB <1895>

MV, ME, MM, MJ ARE MEAN ANOMALIES OF VENUS, EARTH, MARS AND JUPITER.
DD IS THE ELONGATION OF THE MOON FROM THE SUN.
LP IS A LONG-PERIOD PLANETARY TERM"

<DEFINE PERTURB-L (ET "AUX" (MV <+ 180.56 <*  1.6021302 .ET>>)
			    (ME <+ 357.52 <*  0.9856003 .ET>>)
			    (MM <+ 274.29 <*  0.5240208 .ET>>)
			    (MJ <+ 341.60 <*  0.0830912 .ET>>)
			    (DD <+ 218.02 <* 12.1907491 .ET>>)
			    (LP <+ 246.35 <*  5.5305E-4 .ET>>)) 
	#DECL ((VALUE ET MV ME MM MJ DD LP) FLOAT)
	<+ <* 1.34E-3 <COSD <+ 299.1 <-        .MV         .ME>>>>
	   <* 1.54E-3 <COSD <+ 148.3 <- <* 2.0 .MV> <* 2.0 .ME>>>>>
	   <* 6.9E-4  <COSD <+ 315.9 <- <* 2.0 .MV> <* 3.0 .ME>>>>>
	   <* 4.3E-4  <COSD <+ 345.3 <- <* 3.0 .MV> <* 4.0 .ME>>>>>
	   <* 2.8E-4  <COSD <+ 318.2 <- <* 3.0 .MV> <* 5.0 .ME>>>>>
	   <* 5.7E-4  <COSD <+ 343.9 <- <* 2.0 .ME> <* 2.0 .MM>>>>>
	   <* 4.9E-4  <COSD <+ 200.4 <-        .ME  <* 2.0 .MM>>>>>
	   <* 2.0E-3  <COSD <+ 179.5 <-        .ME         .MJ>>>>
	   <* 7.2E-4  <COSD <- 263.2                       .MJ>>>
	   <* 7.6E-4  <COSD <+  87.1 <- <* 2.0 .ME> <* 2.0 .MJ>>>>>
	   <* 4.5E-4  <COSD <+ 109.5 <-        .ME  <* 2.0 .MJ>>>>>
	   <* 1.78E-3 <SIND .LP>>
	   <* 1.79E-3 <SIND .DD>>>> 

;"FIRST FEW TERMS IN PERTURBATION OF RADIUS-VECTOR
FROM TABLES OF SIMON NEWCOMB <1895>

MV, ME, MM, MJ ARE MEAN ANOMALIES OF VENUS, EARTH, MARS AND JUPITER.
DD IS THE ELONGATION OF THE MOON FROM THE SUN."

<DEFINE PERTURB-R (ET "AUX" (MV <+ 180.56 <*  1.6021302 .ET>>)
			    (ME <+ 357.52 <*  0.9856003 .ET>>)
			   ;(MM <+ 274.29 <*  0.5240208 .ET>>)
			    (MJ <+ 341.60 <*  0.0830912 .ET>>)
			    (DD <+ 218.02 <* 12.1907491 .ET>>)) 
	#DECL ((VALUE ET MV ME ;MM MJ DD) FLOAT)
	<+ <* 1.6E-5 <COSD <+  58.3 <- <* 2.0 .MV> <* 2.0 .ME>>>>>
	   <* 1.6E-5 <COSD <+  89.5 <-        .ME         .MJ>>>>
	   <* 9.0E-6 <COSD <+ 357.1 <- <* 2.0 .ME> <* 2.0 .MJ>>>>>
	   <* 3.1E-5 <COSD .DD>>>> 

;"Calculate true anomaly, given eccentric anomaly.
(Also gives first approximation of eccentric anomaly from mean anomaly)"

<DEFINE TRUEANOM (THETA ECC) 
	#DECL ((VALUE THETA ECC) FLOAT)
	<* 2.0
	   <ATAND <* <SQRT <+ 1.0 .ECC>> <SIND </ .THETA 2.0>>>
		  <* <SQRT <- 1.0 .ECC>> <COSD </ .THETA 2.0>>>>>> 

;"Calculate eccentric anomaly from mean anomaly.
Iterative approximation to Kepler's transcendental equation."

<DEFINE ECCENANOM (THETA MEANA ECC) 
	#DECL ((VALUE THETA MEANA ECC) FLOAT)
	<+ .MEANA <* <RAD-TO-DEG .ECC> <SIND .THETA>>>> 

;"Calculate declination given celestial longitude and obliquity"

<DEFINE DECLINATION (LAMBD OBLIQ) 
	#DECL ((VALUE LAMBD OBLIQ) FLOAT)
	<ASIND <* <SIND .LAMBD> <SIND .OBLIQ>>>> 

;"Calculate right ascension given celestial longitude and obliquity"

<DEFINE RIGHT-ASCENSION (LAMBD OBLIQ) 
	#DECL ((VALUE LAMBD OBLIQ) FLOAT)
	<ATAND <* <SIND .LAMBD> <COSD .OBLIQ>> <COSD .LAMBD>>> 

;"Calculate radius-vector from sun to earth -- ECCENTRIC ANOMALY"

<DEFINE RADIUS-VECTOR-E (ECCA ECC ET)
	#DECL ((VALUE ECCA ECC ET) FLOAT)
	<+ <- 1.0 <* <COSD .ECCA> .ECC>> <PERTURB-R .ET>>> 

;"Calculate radius-vector from sun to earth -- TRUE ANOMALY"

<DEFINE RADIUS-VECTOR-T (TRUEA ECC ET)
	#DECL ((VALUE TRUEA ECC ET) FLOAT)
	<+ </ <- 1.0 <* .ECC .ECC>> <+ 1.0 <* <COSD .TRUEA> .ECC>>>
	   <PERTURB-R .ET>>> 

;"Calculate change in elevation due to refraction.
Fits data in Nautical Almanac.
Sea-level, normal athmospheric pressure and temperature.

NOT TO BE USED FOR ELEVATIONS BELOW ABOUT 10 DEGREES"

<DEFINE REFRACTION-NA (ELEV) 
	#DECL ((VALUE ELEV) FLOAT)
	<* <TAND <- 90.0 .ELEV>>
	   <+ 0.016167 <* 1.7E-5 <SQUARE <TAND <- 90.0 .ELEV>>>>>>> 

;"Calculate elevation of direction outside athmosphere from viewer elevation"

<DEFINE ELEV-SPACE(ELEV) #DECL ((VALUE ELEV) FLOAT)
	<ACOSD <* <COSD .ELEV> ,REFR-INDEX>>>

;"Calculate viewer elevation from direction outside athmosphere"

<DEFINE ELEV-VIEW (ELEV) #DECL ((VALUE ELEV) FLOAT)
	<ACOSD </ <COSD .ELEV> ,REFR-INDEX>>>

;"Calculate change in elevation due to refraction.
Analytic Model. Does not take into account earth's curvature."

<DEFINE ELEVATION-AN (ELEV) #DECL ((VALUE ELEV) FLOAT)
	<- .ELEV <ELEV-SPACE .ELEV>>> 

<DEFINE SQUARE (X) #DECL ((VALUE X) FLOAT) <* .X .X>> 

;"Restrict angle to 0.0 to 360.0 degree range." 

<DEFINE RANGE (THETA)
	#DECL ((VALUE THETA) FLOAT)
	<COND (<L? .THETA 0.0> <RANGE <+ .THETA 360.0>>)
	      (<L? .THETA 360.0> .THETA)
	      (T <RANGE <- .THETA 360.0>>)>>

<DEFINE RAD-TO-DEG (X) #DECL ((VALUE X) FLOAT) <* </ .X ,PI> 180.0>> 

<DEFINE DEG-TO-RAD (X) #DECL ((VALUE X) FLOAT) <* </ .X 180.0> ,PI>> 

<DEFINE SIND (X) #DECL ((VALUE X) FLOAT) <SIN </ <* ,PI .X> 180.0>>> 

<DEFINE COSD (X) #DECL ((VALUE X) FLOAT) <COS </ <* ,PI .X> 180.0>>> 

;"RETURN RESULT BETWEEN 0 AND 360 DEGREES"

<DEFINE ATANE (Y X "AUX" Z)				;"0 <= VALUE < 360"
	#DECL ((VALUE X Y Z) FLOAT)
	<SET Z <* 180.0 </ <ATAN </ .Y .X>> ,PI>>>	;"-90 < Z <= +90"
	<COND (<L? .X 0.0> <+ .Z 180.0>)
	      (<L? .Y 0.0> <+ .Z 360.0>)
	      (T .Z)>>

;"RETURN RESULT BETWEEN -180 AND +180 DEGREES"

<DEFINE ATAND (X Y "AUX" A)
	#DECL ((VALUE X Y A) FLOAT)
	<SET A <- 90.0 <* 180.0 </ <ATAN </ .Y .X>> ,PI>>>>
	<COND (<L? .X 0.0> <- .A 180.0>)
	      (T .A)>> 

<DEFINE TAND (X) #DECL ((VALUE X) FLOAT) </ <SIND .X> <COSD .X>>>

;"RETURNS RESULT IN RANGE -90 TO +90 DEGREES"

<DEFINE ASIND (X) #DECL ((VALUE X) FLOAT) <ATAND .X <SQRT <- 1.0 <* .X .X>>>>>

;"RETURN RESULT IN RANGE 0 TO 180 DEGREES"

<DEFINE ACOSD (X) #DECL ((VALUE X) FLOAT) <ATANE <SQRT <- 1.0 <* .X .X>>> .X>>

<DEFINE FRACTION (X) #DECL ((VALUE X) FLOAT) <- .X <FLOAT <FIX .X>>>>

;"ADD OFFSETS TO FIRST COMPONENT OF THREE-LIST." 

<DEFINE UPDATE (L offset)
	#DECL ((VALUE L) <LIST [3 FIX]> (offset) FIX)
	<LIST <+ <1 .L> .offset> <2 .L> <3 .L>>>

;"CALCULATE POSITION OF SUN AT PRESENT TIME, HERE." 

<DEFINE SUN-NOW-HERE () 
	#DECL ((VALUE) <LIST [REST LIST]>)
	<SUN ,LONGITUDE
	     ,LATITUDE
	     <1 <DTNOW ;,DT-REUSE>>
	     <UPDATE <2 <DTNOW ;,DT-REUSE>> ,GMT-OFFSET>>>

;"CALCULATE DATE OF LAST SUNDAY IN PRESENT MONTH (WITH N DAYS)"

<DEFINE LAST-SUNDAY (DAT N)
	#DECL ((VALUE N) FIX (DAT) <LIST FIX FIX>)
	<- .N <DATE-DOW (<1 .DAT> <2 .DAT> .N)>>> 

;"TO ADJUST FOR THAT CROCK CALLED DAY-LIGHT-SAVINGS TIME.
SWITCH LAST SUNDAY OF APRIL AND LAST SUNDAY OF OCTOBER (?)"

<DEFINE DAY-SAVE-CROCK (DAT "AUX" (M <2 .DAT>) (D <3 .DAT>))
	#DECL ((VALUE) FIX (DAT) <LIST FIX FIX FIX>)
	<COND (<OR <L? .M 4>
		   <G? .M 10>
		   <AND <=? .M 4>
			<L? .D <LAST-SUNDAY .DAT 30>>>
		   <AND <=? .M 10>
			<G? <- .D 1> <LAST-SUNDAY .DAT 31>>>>
	       0)
	      (T -1)>> 

;"OFFSET OF EPHEMERIS TIME FROM UNIVERSAL TIME (1975/01/01)
REFRACTIVE INDEX OF ATMOSPHERE AT STANDARD PRESSURE AND TEMPERATURE"

<SETG ET-UT 5.28E-4>
<SETG REFR-INDEX 1.0002824>

;"GEOGRAPHICAL POSITION OF M.I.T. - A.I. LAB AND OFFSET FROM G.M.T.
MODIFY TO YOUR OWN CONVENIENCE AND YOUR OWN LOCATION AND TIME SYSTEM." 

<SETG LONGITUDE '(- 71 5 20)>
<SETG LATITUDE '(+ 42 21 50)>

;"GIVE NORMAL OFFSET FROM G.M.T. IN HOURS AS SECOND ARGUMENT"

<SETG GMT-OFFSET <+ <DAY-SAVE-CROCK <1 <DTNOW ;,DT-REUSE>>> 5>>

;"CALCULATE POSITION OF SUN AT THIS TIME AND FOR THIS PLACE." 

;<SUN-NOW-HERE>

<ENDPACKAGE>
