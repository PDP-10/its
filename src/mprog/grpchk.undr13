
<PACKAGE "GRPCHK">

<ENTRY GROUP-CHECK
       TRACE-CHECK
       TRACE-BLESS
       FUNCT-CHECK
       GROUP-BLESS>

<DEFINE F-CHECK (IT
		 "OPTIONAL" (BLESSED-FUNCTS ())
		 "AUX" TMP (BAD-FUNCTS ()) (SPECS ()) (GOOD-FUNCTS ())
		       (FRIENDLY-FUNCTS ()) (NON-SPECIAL-BOUND ())
		       (GLOBAL-USED ()) (NSB-USED ()))
	#DECL ((IT) <OR FUNCTION FORM>
	       (BAD-FUNCTS GOOD-FUNCTS FRIENDLY-FUNCTS SPECS BLESSED-FUNCTS
		NON-SPECIAL-BOUND NSB-USED GLOBAL-USED) <SPECIAL LIST>
	       (VALUE) LIST)
	(<EXT-CHECK .IT>
	 <CLNR .SPECS>
	 .BAD-FUNCTS
	 .GOOD-FUNCTS
	 .FRIENDLY-FUNCTS
	 <SET TMP <CLNR .NSB-USED>>
	 <CLNR .NON-SPECIAL-BOUND>
	 .GLOBAL-USED
	 <ROOT-ATOMS .TMP>)>

<DEFINE CLNR (TMP "AUX" (LST .TMP) (FOO ())) 
	#DECL ((TMP FOO LST) LIST)
	<REPEAT ()
		<COND (<EMPTY? .TMP> <RETURN .LST>)>
		<SET TMP <REST <PUT .TMP 1 <1 <SET FOO <1 .TMP>>>>>>>>

<DEFINE EXT-CHECK (G "OPTIONAL" (DF ()) (EX ()) (FIRST T) "AUX" TMP) 
   #DECL ((G) <PRIMTYPE LIST>
	  (DF BAD-FUNCTS NSB-USED GOOD-FUNCTS FRIENDLY-FUNCTS BLESSED-FUNCTS
	   NON-SPECIAL-BOUND GLOBAL-USED) LIST (EX) <SPECIAL LIST> (FIRST) ANY)
   <PROG ()
     <COND (<EMPTY? .G> <RETURN .EX>)>
     <COND
      (<COND (<TYPE? .G FUNCTION>
	      <COND (<AND <N==? .FIRST MAPF> <N==? .FIRST MAPR>> <SET DF ()>)
		    (T)>)
	     (<AND <TYPE? .G FORM SEGMENT>
		   <OR <==? <1 .G> PROG> <==? <1 .G> REPEAT>>>
	      <SET G <REST .G>>)
	     (<AND <TYPE? .G FORM>
		   <G? <LENGTH .G> 2>
		   <==? <1 .G> FUNCTION>>
	      <COND (<AND <N==? .FIRST MAPF> <N==? .FIRST MAPR>> <SET DF ()>)>
	      <SET G <REST .G 1>>)>
       <COND (<TYPE? <1 .G> ATOM>
	      <SET DF (<1 .G> !.DF)>
	      <DCL-SPEC <1 .G>
			<COND (<AND <G? <LENGTH .G> 2> <TYPE? <3 .G> DECL>>
			       <3 .G>)
			      (())>
			.DF>
	      <SET G <REST .G>>)>
       <COND
	(<TYPE? <1 .G> LIST>
	 <SET DF
	      <DEF-GET <1 .G>
		       .DF
		       <COND (<AND <NOT <EMPTY? <SET G <REST .G>>>>
				   <TYPE? <SET TMP <1 .G>> DECL>>
			      <SET G <REST .G>>
			      .TMP)
			     (())>>>)>)>
     <COND
      (<AND <TYPE? .G FORM SEGMENT>
	    <L? 1 <LENGTH .G>>
	    <OR <==? <1 .G> LVAL> <==? <1 .G> SET>>
	    <TYPE? <2 .G> ATOM>>
       <COND
	(<SET TMP <MEMQ <2 .G> .DF>>
	 <COND (<NOT <OR <MEMQ .TMP .NSB-USED> <MEMQ .TMP .SPECS>>>
		<SET NSB-USED (.TMP !.NSB-USED)>
		<COND (<==? <1 .NON-SPECIAL-BOUND> .TMP>
		       <SET NON-SPECIAL-BOUND <REST .NON-SPECIAL-BOUND>>)
		      (<REPEAT ((NSB .NON-SPECIAL-BOUND))
			       #DECL ((NSB) LIST)
			       <COND (<==? .TMP <2 .NSB>>
				      <PUTREST .NSB <REST .NSB 2>>
				      <RETURN>)>
			       <SET NSB <REST .NSB>>>)>)>)
	(<NOT <MEMQ <2 .G> .EX>> <SET EX (<2 .G> !.EX)>)>)>
     <COND (<AND <TYPE? .G FORM SEGMENT>
		 <L? 1 <LENGTH .G>>
		 <OR <==? <1 .G> GVAL> <==? <1 .G> SETG>>
		 <TYPE? <2 .G> ATOM>>
	    <OR <MEMQ <2 .G> .GLOBAL-USED>
		<SET GLOBAL-USED (<2 .G> !.GLOBAL-USED)>>)>
     <COND (<AND <TYPE? .G FORM SEGMENT> <TYPE? <1 .G> ATOM>>
	    <COND (<NOT <GASSIGNED? <1 .G>>>
		   <OR <MEMQ <1 .G> .BAD-FUNCTS>
		       <SET BAD-FUNCTS (<1 .G> !.BAD-FUNCTS)>>)
		  (<MEMQ <1 .G> .BLESSED-FUNCTS>
		   <OR <MEMQ <1 .G> .FRIENDLY-FUNCTS>
		       <SET FRIENDLY-FUNCTS (<1 .G> !.FRIENDLY-FUNCTS)>>)
		  (<NOT <TYPE? ,<1 .G> SUBR FSUBR>>
		   <OR <MEMQ <1 .G> .GOOD-FUNCTS>
		       <SET GOOD-FUNCTS (<1 .G> !.GOOD-FUNCTS)>>)>)>
     <REPEAT ((G1 <1 .G>)
	      (GMAP <COND (<MEMQ .G1 '![MAPF MAPR!]> <3 .G>)>))
	     <COND (<EMPTY? .G> <RETURN .EX>)
		   (<AND .GMAP <==? <PRIMTYPE .GMAP> LIST> <==? <1 .G> .GMAP>>
		    <SET EX <EXT-CHECK <1 .G> .DF .EX .G1>>)
		   (<TYPE? <1 .G> FORM SEGMENT>
		    <SET EX <EXT-CHECK <1 .G> .DF .EX>>)
		   (<TYPE? <1 .G> LIST FUNCTION CLOSURE>
		    <SET EX <EXT-CHECK <1 .G> .DF .EX>>)
		   (<TYPE? <1 .G> VECTOR UVECTOR>
		    <SET EX <STR-CHECK <1 .G> .DF .EX>>)>
	     <SET G <REST .G>>>>>

<DEFINE DEF-GET (DFS DF DECLS "AUX" ADF TF IT) 
	#DECL ((DFS DF ADF) LIST (TF) FORM (NON-SPECIAL-BOUND) LIST)
	<REPEAT ()
		<COND (<EMPTY? .DFS> <RETURN .DF>)
		      (<TYPE? <1 .DFS> ATOM>
		       <SET DF (<1 .DFS> !.DF)>
		       <DCL-SPEC <1 .DFS> .DECLS .DF>)
		      (<AND <TYPE? <1 .DFS> FORM>
			    <==? 2 <LENGTH <SET TF <1 .DFS>>>>
			    <==? <1 .TF> QUOTE>>
		       <SET DF (<2 .TF> !.DF)>
		       <DCL-SPEC <2 .TF> .DECLS .DF>)
		      (<AND <TYPE? <1 .DFS> LIST>
			    <SET ADF <1 .DFS>>
			    <==? 2 <LENGTH .ADF>>
			    <OR <TYPE? <SET IT <1 .ADF>> ATOM>
				<AND <TYPE? <1 .ADF> FORM>
				     <==? 2 <LENGTH <SET TF <1 .ADF>>>>
				     <==? <1 .TF> QUOTE>
				     <SET IT <2 .TF>>>>>
		       <COND (<TYPE? <2 .ADF> LIST FORM SEGMENT FUNCTION>
			      <SET EX <EXT-CHECK <2 .ADF> .DF .EX>>)
			     (<TYPE? <2 .ADF> VECTOR UVECTOR>
			      <SET EX <STR-CHECK <2 .ADF> .DF .EX>>)>
		       <SET DF (.IT !.DF)>
		       <DCL-SPEC .IT .DECLS .DF>)>
		<SET DFS <REST .DFS>>>>

<DEFINE STR-CHECK (G DF EX) 
	#DECL ((DF) LIST (EX) <SPECIAL LIST>)
	<REPEAT ()
		<COND (<EMPTY? .G> <RETURN .EX>)
		      (<TYPE? <1 .G> LIST FORM SEGMENT FUNCTION>
		       <SET EX <EXT-CHECK <1 .G> .DF .EX>>)
		      (<TYPE? <1 .G> VECTOR UVECTOR>
		       <SET EX <STR-CHECK <1 .G> .DF .EX>>)>
		<SET G <REST .G>>>>

<DEFINE DCL-SPEC (ATM DCL FLAG "AUX" FOO) 
	#DECL ((DCL) <<PRIMTYPE LIST> [REST LIST ANY]> (FOO) FORM
	       (SPECS NON-SPECIAL-BOUND) LIST)
	<REPEAT ()
		<COND (<EMPTY? .DCL>
		       <SET NON-SPECIAL-BOUND (.FLAG !.NON-SPECIAL-BOUND)>
		       <RETURN>)
		      (<AND <TYPE? <2 .DCL> FORM>
			    <NOT <EMPTY? <SET FOO <2 .DCL>>>>
			    <==? SPECIAL <1 .FOO>>
			    <MEMQ .ATM <1 .DCL>>>
		       <SET SPECS (.FLAG !.SPECS)>
		       <RETURN>)>
		<SET DCL <REST .DCL 2>>>>

<DEFINE FUNCT-CHECK (ATM "OPTIONAL" (OUTCHAN .OUTCHAN) (PRINT-NONE T) "AUX" TMP)
 
	#DECL ((OUTCHAN) <SPECIAL CHANNEL> (PRINT-NONE) <SPECIAL ANY>)
	<DESCRIBER <SET TMP (((.ATM) !<F-CHECK ,.ATM>))>
		   ""
		   "function"
		   <GET-INDXS (1) .TMP>
		   ""
		   "external atoms set or used"
		   1
		   2
		   ""
		   "atoms declared special"
		   1
		   3
		   ""
		   "non-special atoms bound, unused"
		   1
		   8
		   ""
		   "non-special atoms bound, used"
		   1
		   7
		   ""
		   "atoms used globally"
		   1
		   9
		   ""
		   "undefined functions referenced"
		   1
		   4
		   ""
		   "defined functions referenced"
		   1
		   5>
	<TERPRI>
	"CHECKED">

<DEFINE GROUP-CHECK ("TUPLE" FOO) <GROUP-CHECKER ,GCER !.FOO>>

<DEFINE GCER (GOODS) 
	<TERPRI>
	<DESCRIBER .GOODS
		   "function in group"
		   "function"
		   <GET-INDXS (1) .GOODS>
		   "atoms which are unbound and whose lval's are set or used"
		   "external atoms"
		   1
		   2
		   "atoms which are declared special"
		   "special atoms"
		   1
		   3
		   "atoms not declared special and not used"
		   "unused atoms"
		   1
		   8
		   "atoms in root, not special, bound, and used"
		   "root atoms used"
		   1
		   10
		   "atoms used globally"
		   "global atoms"
		   1
		   9
		   "undefined functions referenced"
		   "undefined functions"
		   1
		   4
		   "defined functions external to group referenced"
		   "external functions"
		   1
		   5
		   "functions internal to group referenced"
		   "internal functions"
		   1
		   6
		   "functions internal to group which reference it"
		   "used by"
		   6
		   1>
	<DESCRIBER .GOODS
		   "defined function external to group which is referenced"
		   "external function"
		   <GET-INDXS (5) .GOODS>
		   "functions in group which reference it"
		   "used by"
		   5
		   1>
	<DESCRIBER .GOODS
		   "undefined function which is referenced"
		   "undefined function"
		   <GET-INDXS (4) .GOODS>
		   "functions in group which reference it"
		   "used by"
		   4
		   1>
	<DESCRIBER .GOODS
		   "atoms used globally"
		   "global atoms"
		   <GET-INDXS (9) .GOODS>
		   "functions in which globally used"
		   "global in"
		   9
		   1>
	<DESCRIBER .GOODS
		   "atom which is special or used non-locally or unused"
		   "atom"
		   <GET-INDXS (2 3 8 10) .GOODS>
		   "functions which reference its lval non-locally"
		   "external in"
		   2
		   1
		   "functions in which it is declared special"
		   "special in"
		   3
		   1
		   "functions in which it is bound, not special, and unused"
		   "unused in"
		   8
		   1
		   "functions in which it is bound, not special, and used"
		   "used in"
		   7
		   1>>

<DEFINE GROUP-BLESS ("TUPLE" FOO) <GROUP-CHECKER ,BLSER !.FOO>>

<DEFINE BLSER (GOODS
	       "AUX" (SPECL <GET-INDXS (3) .GOODS>)
		     (USED-IN <GET-INDXS (2) .GOODS>)
		     (UNUSED <GET-INDXS (8) .GOODS>)
		     (ROOT-A <GET-INDXS (10) .GOODS>)
		     (NON-SPEC <GET-INDXS (7) .GOODS>))
	<TERPRI>
	<DESCRIBER .GOODS
		   ""
		   "undefined function"
		   <GET-INDXS (4) .GOODS>
		   ""
		   "used by"
		   4
		   1>
	<DESCRIBER .GOODS
		   ""
		   "atom"
		   <LSORT (!.ROOT-A
			   !<GET-DIF .SPECL .USED-IN>
			   !<GET-DIF .USED-IN .SPECL>
			   !<GET-INTERSECT .SPECL .NON-SPEC>
			   !.UNUSED
			   !<ROOT-ATOMS .SPECL .USED-IN>)>
		   ""
		   "external in"
		   2
		   1
		   ""
		   "special in"
		   3
		   1
		   ""
		   "unused in"
		   8
		   1
		   ""
		   "used in"
		   7
		   1>>

<DEFINE GROUP-CHECKER (TODO ATML
		       "OPTIONAL" (OUTCHAN .OUTCHAN) (PRINT-NONE T)
		       "AUX" GRP TMP F (FS ()) (GOODS ()) FNCT
			     (OBL <COND (<EMPTY? .OBLIST> FULL-OBL) (T BLOCK)>)
			     (OOBLIST .OBLIST) (OBLIST ())
			     (ATMLST
			      <COND (<TYPE? .ATML ATOM> (.ATML)) (.ATML)>))
	#DECL ((FNCT) ATOM (GRP) LIST (OUTCHAN) <SPECIAL CHANNEL> (F) FORM
	       (FS GOODS) LIST (OBLIST) <SPECIAL ANY> (PRINT-NONE) <SPECIAL
								    ANY>
	       (ATMLST) <LIST [REST ATOM]> (ATML) <OR ATOM <LIST [REST ATOM]>>)
	<PROG ()
	      <REPEAT (OB ATM)
		      <COND (<EMPTY? .ATMLST> <RETURN>)>
		      <SET ATM <1 .ATMLST>>
		      <SET ATMLST <REST .ATMLST>>
		      <COND (<OR <NOT <ASSIGNED? .ATM>>
				 <NOT <TYPE? <SET TMP ..ATM> LIST>>>
			     <RETURN #FALSE ("NOT A GROUP")>)>
		      <SET GRP .TMP>
		      <SET OB <GET .ATM .OBL '.OOBLIST>>
		      <REPEAT ((NOT-YET T))
			      <COND (<EMPTY? .GRP> <RETURN T>)
				    (<AND <TYPE? <1 .GRP> FORM>
					  <NOT <EMPTY? <SET F <1 .GRP>>>>
					  <==? <1 .F> DEFINE>
					  <SET FNCT <GET <2 .F> VALUE '<2 .F>>>
					  <GASSIGNED? .FNCT>>
				     <SET NOT-YET <>>
				     <SET FS (.FNCT !.FS)>)>
			      <COND (.NOT-YET <SET OB <GET .GRP .OBL '.OB>>)>
			      <SET GRP <REST .GRP>>>
		      <SET OBLIST <MERGE-OBL .OBLIST .OB>>>
	      <REPEAT ((L .FS))
		      #DECL ((L) <LIST [REST ATOM]>)
		      <COND (<EMPTY? .L> <RETURN>)>
		      <SET GOODS (((<1 .L>) !<F-CHECK ,<1 .L> .FS>) !.GOODS)>
		      <SET L <REST .L>>>
	      <APPLY .TODO .GOODS>
	      "CHECKED">>

<DEFINE TRACE-CHECKER (TODO ATM
		       "OPTIONAL" (OUTCHAN .OUTCHAN) (PRINT-NONE T)
		       "AUX" (FLIST <COND (<TYPE? .ATM LIST> .ATM) ((.ATM))>)
			     (RLIST <LIST !.FLIST>) (GOODS ()) (THIS ()))
	#DECL ((OUTCHAN) <SPECIAL CHANNEL> (PRINT-NONE) <SPECIAL ANY>
	       (FLIST RLIST) <LIST [REST ATOM]> (GOODS THIS) <LIST [REST LIST]>)
	<REPEAT ()
		<COND (<EMPTY? .RLIST> <RETURN>)>
		<SET THIS ((<1 .RLIST>) !<F-CHECK ,<1 .RLIST>>)>
		<REPEAT ((L (!<5 .THIS> !<9 .THIS>)))
			#DECL ((L) <LIST [REST ATOM]>)
			<COND (<EMPTY? .L> <RETURN>)
			      (<AND <GASSIGNED? <1 .L>>
				    <TYPE? ,<1 .L> FUNCTION>
				    <NOT <MEMQ <1 .L> .FLIST>>>
			       <SET FLIST (<1 .L> !.FLIST)>
			       <PUTREST .RLIST
					<PUTREST (<1 .L>) <REST .RLIST>>>)>
			<SET L <REST .L>>>
		<SET GOODS (.THIS !.GOODS)>
		<SET RLIST <REST .RLIST>>>
	<APPLY .TODO .GOODS>
	"CHECKED">

<DEFINE TRACE-CHECK ("TUPLE" FOO) <TRACE-CHECKER ,TCER !.FOO>>

<DEFINE TCER (GOODS) 
	<TERPRI>
	<DESCRIBER .GOODS
		   ""
		   "function"
		   <GET-INDXS (1) .GOODS>
		   ""
		   "external atoms"
		   1
		   2
		   ""
		   "special atoms"
		   1
		   3
		   ""
		   "unused atoms"
		   1
		   8
		   ""
		   "root atoms used"
		   1
		   10
		   ""
		   "global atoms"
		   1
		   9
		   ""
		   "undefined functions"
		   1
		   4
		   ""
		   "functions called"
		   1
		   5
		   ""
		   "used by"
		   5
		   1>
	<DESCRIBER .GOODS
		   ""
		   "undefined function"
		   <GET-INDXS (4) .GOODS>
		   ""
		   "used by"
		   4
		   1>
	<DESCRIBER .GOODS
		   ""
		   "atom"
		   <GET-INDXS (9) .GOODS>
		   ""
		   "global in"
		   9
		   1>
	<DESCRIBER .GOODS
		   ""
		   "atom"
		   <GET-INDXS (2 3 8 10) .GOODS>
		   ""
		   "external in"
		   2
		   1
		   ""
		   "special in"
		   3
		   1
		   ""
		   "unused in"
		   8
		   1
		   ""
		   "used in"
		   7
		   1>>

<DEFINE TRACE-BLESS ("TUPLE" FOO) <TRACE-CHECKER ,BLSER !.FOO>>

<DEFINE MERGE-OBL (OB1 OB2) 
   #DECL ((OB1) <LIST [REST OBLIST]>)
   <COND
    (<TYPE? .OB2 OBLIST>
     <COND (<MEMQ .OB2 .OB1> .OB1) (T (.OB2 !.OB1))>)
    (T
     <REPEAT ((TMP .OB2) (POS ()))
       #DECL ((TMP POS) <LIST [REST OBLIST]>)
       <COND (<EMPTY? .TMP> <RETURN .OB1>)>
       <COND (<NOT <MEMQ <1 .TMP> .OB1>>
	      <COND (<EMPTY? .POS> <SET OB1 <SET POS (<1 .TMP> !.OB1)>>)
		    (T
		     <SET POS
			  <REST <PUTREST .POS
					 <PUTREST (<1 .TMP>) <REST .POS>>>>>)>)>
       <SET TMP <REST .TMP>>>)>>

<DEFINE LSORT (L "AUX" (M ()) (B ()) (TMP ()) (IT ()) (N 0)) 
	#DECL ((L M B TMP IT) LIST (N) FIX)
	<PROG ()
	      <COND (<L? <SET N <LENGTH .L>> 2> <RETURN .L>)>
	      <SET B <REST <SET TMP <REST .L <- </ .N 2> 1>>>>>
	      <PUTREST .TMP ()>
	      <SET L <LSORT .L>>
	      <SET B <LSORT .B>>
	      <SET TMP ()>
	      <REPEAT ()
		      <COND (<EMPTY? .L>
			     <COND (<EMPTY? .TMP> <RETURN .B>)
				   (T <PUTREST .TMP .B> <RETURN .M>)>)
			    (<EMPTY? .B>
			     <COND (<EMPTY? .TMP> <RETURN .L>)
				   (T <PUTREST .TMP .L> <RETURN .M>)>)
			    (<==? <1 .L> <1 .B>> <SET L <REST .L>>)
			    (T
			     <COND (<L? <STRCOMP <1 .L> <1 .B>> 0>
				    <SET L <REST <SET IT .L>>>)
				   (T <SET B <REST <SET IT .B>>>)>
			     <PUTREST .IT ()>
			     <COND (<EMPTY? .M> <SET M <SET TMP .IT>>)
				   (T <SET TMP <REST <PUTREST .TMP .IT>>>)>)>>>>

<DEFINE LBLPRNT (LABL LST
		 "OPTIONAL" (LMAR <+ 3 <LENGTH .LABL>>)
		 "AUX" (RT <ROOT>) (RMAR <13 .OUTCHAN>)
		       (PN <COND (<ASSIGNED? PRINT-NONE> .PRINT-NONE) (T)>))
	#DECL ((LABL) STRING (LST) LIST (LMAR RMAR) FIX)
	<COND (<OR .PN <NOT <EMPTY? .LST>>>
	       <PRINTSTRING .LABL>
	       <PRINTSTRING ":  ">
	       <INDENT-TO .LMAR>
	       <COND (<EMPTY? .LST> <PRINTSTRING "--">)
		     (T
		      <REPEAT ()
			      <PROG ((OBLIST .OBLIST))
				    #DECL ((OBLIST) <SPECIAL ANY>)
				    <COND (<==? <OBLIST? <1 .LST>> .RT>
					   <SET OBLIST ()>)>
				    <PRIN1 <1 .LST>>>
			      <SET LST <REST .LST>>
			      <COND (<EMPTY? .LST> <RETURN>)
				    (<L? <FLATSIZE <1 .LST> 1000>
					 <- .RMAR <14 .OUTCHAN> 5>>
				     <PRINTSTRING "  ">)
				    (T <TERPRI> <INDENT-TO .LMAR>)>>)>
	       <TERPRI>)>
	T>

<DEFINE IS-IN (GOODIE L N "OPTIONAL" (R 1) "AUX" (LST ())) 
	#DECL ((L) <LIST [REST LIST]> (N R) FIX (LST) LIST)
	<REPEAT (IT)
		#DECL ((IT) LIST)
		<COND (<EMPTY? .L> <RETURN>)
		      (<MEMQ .GOODIE <SET IT <NTH <1 .L> .N>>>
		       <SET LST (!<NTH <1 .L> .R> !.LST)>)>
		<SET L <REST .L>>>
	<LSORT .LST>>

<DEFINE DESCRIBER (ALL DESC SDESC GOODIES
		   "TUPLE" RST
		   "AUX" (LMAR
			  <+ 3
			     <REPEAT ((N <LENGTH .SDESC>) (RST .RST))
				     #DECL ((N) FIX (RST) TUPLE)
				     <COND (<EMPTY? .RST> <RETURN .N>)>
				     <SET N <MAX .N <LENGTH <2 .RST>>>>
				     <SET RST <REST .RST 4>>>>))
	#DECL ((ALL) LIST (GOODIES) <LIST [REST ATOM]> (DESC) <OR STRING FALSE>
	       (RST) <TUPLE [REST STRING STRING FIX FIX]>)
	<COND
	 (<NOT <EMPTY? .GOODIES>>
	  <COND (<AND .DESC <NOT <EMPTY? .DESC>>>
		 <TERPRI>
		 <PRINTSTRING .DESC>
		 <PRINTSTRING ":  ">
		 <PRINTSTRING .SDESC>
		 <REPEAT ((R .RST))
			 #DECL ((R) TUPLE)
			 <COND (<EMPTY? .R> <RETURN>)>
			 <TERPRI>
			 <PRINTSTRING <1 .R>>
			 <PRINTSTRING ":  ">
			 <PRINTSTRING <2 .R>>
			 <SET R <REST .R 4>>>
		 <TERPRI>)>
	  <REPEAT ()
		  <COND (<EMPTY? .GOODIES> <RETURN>)>
		  <TERPRI>
		  <TERPRI>
		  <LBLPRNT .SDESC (<1 .GOODIES>) .LMAR>
		  <REPEAT ((R .RST))
			  #DECL ((R) TUPLE)
			  <COND (<EMPTY? .R> <RETURN>)
				(T
				 <LBLPRNT <2 .R>
					  <IS-IN <1 .GOODIES>
						 .ALL
						 <3 .R>
						 <4 .R>>
					  .LMAR>)>
			  <SET R <REST .R 4>>>
		  <SET GOODIES <REST .GOODIES>>>
	  <TERPRI>
	  <PRINC <ASCII 12>>
	  <TERPRI>)>>

<DEFINE ROOT-ATOMS ("TUPLE" TUP "AUX" (LST ()) (RT <ROOT>)) 
	#DECL ((TUP) <TUPLE [REST LIST]> (LST) <LIST [REST ATOM]>)
	<MAPF <>
	      #FUNCTION ((L) 
			 #DECL ((L) <LIST [REST ATOM]>)
			 <MAPF <>
			       #FUNCTION ((ATM) 
					  #DECL ((ATM) ATOM)
					  <COND (<==? <OBLIST? .ATM> .RT>
						 <SET LST (.ATM !.LST)>)>)
			       .L>)
	      .TUP>
	<LSORT .LST>>

<DEFINE GET-INDXS (INDXS ALL "AUX" (GOODIES ())) 
	#DECL ((INDXS) <LIST [REST FIX]> (GOODIES) <LIST [REST ATOM]>)
	<REPEAT ()
		<COND (<EMPTY? .INDXS> <RETURN>)>
		<REPEAT ((INDX <1 .INDXS>) (ALL .ALL))
			#DECL ((ALL) <LIST [REST LIST]> (INDX) FIX)
			<COND (<EMPTY? .ALL> <RETURN>)>
			<SET GOODIES (!<NTH <1 .ALL> .INDX> !.GOODIES)>
			<SET ALL <REST .ALL>>>
		<SET INDXS <REST .INDXS>>>
	<SET GOODIES <LSORT .GOODIES>>>

<DEFINE GET-INTERSECT (L1 L2 "AUX" (SECT ())) 
	#DECL ((L1 L2 SECT) <LIST [REST ATOM]>)
	<REPEAT ()
		<COND (<EMPTY? .L1> <RETURN>)
		      (<MEMQ <1 .L1> .L2> <SET SECT (<1 .L1> !.SECT)>)>
		<SET L1 <REST .L1>>>
	<LSORT .SECT>>

<DEFINE GET-DIF (L1 L2 "AUX" (DIF ())) 
	#DECL ((L1 L2 DIF) <LIST [REST ATOM]>)
	<REPEAT ()
		<COND (<EMPTY? .L1> <RETURN>)
		      (<MEMQ <1 .L1> .L2>)
		      (T <SET DIF (<1 .L1> !.DIF)>)>
		<SET L1 <REST .L1>>>
	<LSORT .DIF>>

<ENDPACKAGE>
