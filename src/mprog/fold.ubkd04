<PACKAGE "FOLD">

<ENTRY FOLD SHARE-FLG MACRO-FOLD SUBR-FOLD>
;
"********************************************************
The following code simplifies the application of a routine
	to strictly constant arguments
	when that routine has no side effects.
    Called by <FOLD atom> where atom is a Group name.
*********************************************************"

<AND? <SETG SHARE-FLG <>>	;"Check for legality of structured expansions ?"
      <SETG MACRO-FOLD <>>	;"Fold calls to macros ?"
      <SETG SUBR-FOLD T>	;"Fold calls to subrs ?"
      <SETG COUNT 0>
      <GDECL (SHARE-FLG SUBR-FOLD MACRO-FOLD) <OR ATOM FALSE>
	     (COUNT) FIX>>

<DEFINE FOLD (GROUP-NAME "TUPLE" FCN-NAMES "EXTRA" GRP) 
	#DECL ((GROUP-NAME) ATOM (FCN-NAMES) <SPECIAL <TUPLE [REST ATOM]>>)
	<COND (<AND <ASSIGNED? .GROUP-NAME>
		    <TYPE? <SET GRP ..GROUP-NAME> LIST>>
	       <SETG COUNT 0>
	       <MAPR <> ,FOLD1 .GRP>
	       <PUT .GROUP-NAME CHANNEL>	;"Redefinition flag"
	       (,COUNT "CONSTANTS FOLDED"))
	      (ELSE #FALSE ("NOT-A-GROUP"))>>

<DEFINE FOLD1 (CODE "EXTRA" OBJECT EOBJECT "ACT" FOLDER)
;"If <1 .CODE> is one of the special cases that evals to a constant
then perform the appropriate substitution into .CODE.
Also return the number 1 if <1 .CODE> is a constant or evals to a constant."
   #DECL ((VALUE) FIX (CODE) <<OR LIST VECTOR UVECTOR> ANY>
	  (FCN-NAMES) TUPLE (FOLDER) ACTIVATION)
   <SET OBJECT <COND (<TYPE? .CODE LIST> <1 .CODE>)
		     (<TYPE? .CODE VECTOR> <1 .CODE>)
		     (<TYPE? .CODE UVECTOR> <1 .CODE>)>>
   <COND
    (<TYPE? .OBJECT FORM SEGMENT>	    ;"Application of Function to Args ?"
     <COND
      (<OR <EMPTY? .OBJECT>
	   <==? <1 .OBJECT> QUOTE>
	   <AND <==? <1 .OBJECT> GVAL>
		<TYPE? <2 .OBJECT> ATOM>
		<MANIFEST? <2 .OBJECT>>>>
       0						    ;"Always Constant")
      (<AND <0? <MAPR ,+ ,FOLD1 <REST .OBJECT 0>>>	     ;"Constant args ?"
	    <TYPE? <1 .OBJECT> ATOM>
	    <OR <AND ,SUBR-FOLD <MEMQ <1 .OBJECT> ,SUBRS>>
		<MEMQ <1 .OBJECT> .FCN-NAMES>>	    ;"And Constant function ?">
       <SET EOBJECT <EVAL .OBJECT>>
       <COND
	(<AND ,CHECK <NOT <GOOD-EXPANSION? .OBJECT .EOBJECT>>>
	 <ERROR POOR-EVALUATION-RESULT!-ERRORS
		.OBJECT
		EVALS-TO:!-ERRORS
		.EOBJECT
		FOLD>)
	(ELSE
	 <SETG COUNT <+ ,COUNT 1>>
	 <PUT .CODE 1 <COND (<OR <TYPE? .EOBJECT FORM SEGMENT LIST VECTOR UVECTOR>
				 <EVALTYPE <TYPE .EOBJECT>>>
			     <MAKTYPE (QUOTE .EOBJECT) .OBJECT>)
			    (ELSE .EOBJECT)>>)>
       0						 ;"Result is Constant")
      (<AND ,MACRO-FOLD
	    <TYPE? <1 .OBJECT> ATOM>
	    <GASSIGNED? <1 .OBJECT>>
	    <TYPE? ,<1 .OBJECT> MACRO>>	;"Call on Macro to be folded ?"
       <SET EOBJECT <EXPAND .OBJECT>>
       <SETG COUNT <+ ,COUNT 1>>
       <COND (<AND <TYPE? .EOBJECT SPLICE>
		   <TYPE? .CODE LIST>
		   <NOT <EMPTY? <SET EOBJECT (!.EOBJECT !<REST .CODE>)>>>>
				;"Special case hack--disappearing macro expansion"
	      <PUT .CODE 1 <1 .EOBJECT>>
	      <PUTREST .CODE <REST .EOBJECT>>
	      <AGAIN .FOLDER>)
	     (<TYPE? .EOBJECT FORM>
	      <PUT .CODE 1 <MAKTYPE .EOBJECT .OBJECT>>
	      <AGAIN .FOLDER>)>)
      (ELSE 1						     ;"Not Constant")>)
    (<TYPE? .OBJECT LIST VECTOR UVECTOR>      ;"Creation of Structured Object ?"
     <MAPR <> ,FOLD1 .OBJECT>
     1				    ;"EVALs to a copy, therefore not Constant")
    (ELSE			      ;"Object EVALs to itself and is Constant"
     0)>>

<DEFINE MAKTYPE (NEW OLD)
	#DECL ((NEW) <PRIMTYPE LIST> (OLD VALUE) <OR FORM SEGMENT>)
	<COND (<TYPE? .OLD FORM> <CHTYPE .NEW FORM>)
	      (ELSE <CHTYPE .NEW SEGMENT>)>>

<DEFINE GOOD-EXPANSION? (OBJECT EOBJECT)
	#DECL ((OBJECT) <OR FORM SEGMENT>)
	<OR <MONAD? .EOBJECT>
	     <MEMQ .EOBJECT <REST .OBJECT>>
	     <MEMQ <SET EOBJECT <CHTYPE .EOBJECT <PRIMTYPE .EOBJECT>>>
		   <REST .OBJECT>>
	     <MAPF <>
		   <FUNCTION (OB "EXTRA" (CHOB <CHTYPE .OB <PRIMTYPE .OB>>) VAL)
			   <COND (<==? .CHOB .EOBJECT>
				  <MAPLEAVE T>)
				 (<OR <NOT <TYPE? .OB FORM>>
				      <N==? 2 <LENGTH? .OB 2>>>)
				 (<AND <==? <1 .OB> QUOTE>
				       <==? .CHOB .EOBJECT>>
				  <MAPLEAVE T>)
				 (<AND <==? <1 .OB> GVAL>
				       <TYPE? <SET VAL <2 .OB>> ATOM>
				       <MANIFEST? .VAL>
				       <==? <CHTYPE <SET VAL ,.VAL>
						    <PRIMTYPE .VAL>>
					    .EOBJECT>>
				  <MAPLEAVE T>)>>
		   .OBJECT>>>

<SETG SUBRS	;"SUBRs that have no side effects"
      '![* + - / 0? 1? ==? =? ABS ANDB ASCII ATAN BITS CHTYPE COS DECL? EMPTY?
	 EQVB EXP FIX FLOAT G=? G? GETBITS L=? L? LOG MAX MIN MOD MONAD? N==?
	 N=? ORB PNAME PRIMTYPE PUTBITS SIN SQRT STRCOMP STRUCTURED? TYPE TYPE?
	 TYPEPRIM XORB!]>

<GDECL (SUBRS) UVECTOR>

<ENDPACKAGE>

