
<PACKAGE "MACRO" "MAC">

<ENTRY FILE-MACRO
       GROUP-MACRO
       FUNCTION-MACRO
       MACRO-NEVER
       MACRO-ALWAYS
       ENTRY-ALLOW>

<SETG MACRO-NEVER 150>

;"Limits size of largest Function to be Macroed"

<SETG MACRO-ALWAYS 25>

;"Size below which one always macros"

<SETG ENTRY-ALLOW <>>

;"Flag allow macroification of Package Entries"

<GDECL (MACRO-NEVER MACRO-ALWAYS) FIX>

<SETG LINEAR <>>

\ 

;
"This function creates a list, STATS, which has the Info of all the functions in
the file it is munging.  It contains certain properties about the function.
LEN  is the length of the function.  CALLED is the number of times called.
Initially set to 0.  It then applies the function CALL? to the group
and adds the property CALLS to determine who is called by this member."

<DEFINE FILE-MACRO (NAM "OPTIONAL" (OUT .NAM) (MESSAGE <>)) 
	#DECL ((OUT) STRING (NAM) <OR ATOM STRING> (MESSAGE) <OR FALSE CHANNEL>)
	<SET NAM <GROUP-LOAD .NAM>>				  ;"Input group"
	<GROUP-MACRO .NAM .MESSAGE>			        ;"Process group"
	<GROUP-DUMP .OUT .NAM>				        ;"Output group">

<DEFINE GROUP-MACRO (NAME
		     "OPTIONAL" (MESSAGE <>)
		     "AUX" (INFO (INFO)) (STATS ()) DEFAULT-STAT)
	#DECL ((NAME) ATOM (INFO) <SPECIAL LIST> (VALUE) ATOM
	       (STATS) <SPECIAL <LIST [REST INFO]>>
	       (DEFAULT-STAT) <SPECIAL INFO> (MESSAGE) <OR FALSE CHANNEL>)
	<COND (.MESSAGE
	       <PRINC "MACRO-PROCESSING GROUP: " .MESSAGE>
	       <PRIN1 .NAME>
	       <TERPRI .MESSAGE>)>
	<SET DEFAULT-STAT
	     <CHTYPE [DEFAULT-STAT 0 0 0 <> <> <> <> <> ()] INFO>>
	<REPEAT ((N 1) (GRP ..NAME) OB NAM STAT)
		#DECL ((N) FIX (GRP) LIST (STAT) <OR FALSE INFO>)
		<COND (<EMPTY? .GRP> <RETURN>)
		      (<OR <NOT <TYPE? <SET OB <1 .GRP>> FORM>>
			   <LENGTH? .OB 2>>)
		      (<AND <==? <1 .OB> DEFINE>
			    <TYPE? <SET NAM <GETPROP <2 .OB> VALUE '<2 .OB>>>
				   ATOM>
			    <GASSIGNED? .NAM>
			    <TYPE? ,.NAM FUNCTION>>	  ;"Function definition"
		       <SET STATS
			    (<CHTYPE [.NAM <SIZE .OB> 0 .N <> <> <> <> <> ()]
				     INFO>
			     !.STATS)>
		       <PUTPROP .NAM .INFO <1 .STATS>>)
		      (<AND <==? <1 .OB> SETG>
			    <TYPE? <SET NAM <GETPROP <2 .OB> VALUE '<2 .OB>>>
				   ATOM>
			    <TYPE? <3 .OB> FORM>
			    <==? <LENGTH? <SET OB <3 .OB>> 2> 2>
			    <==? <1 .OB> GVAL>
			    <TYPE? <2 .OB> ATOM>
			    <SET STAT <GETPROP <2 .OB> .INFO>>>
							   ;"Function psuedonym"
		       <PUTPROP .NAM .INFO .STAT>)>
		<SET GRP <REST .GRP>>
		<SET N <+ .N 1>>>
	<MAPF <>
	      <FUNCTION (OB "EXTRA" STAT ARGL GOB) 
		      #DECL ((STAT) <OR FALSE INFO> (ARGL) LIST)
		      <COND (<OR <NOT <TYPE? .OB FORM SEGMENT>> <LENGTH? .OB 1>>
			     <SCAN .OB>)
			    (<AND <==? <1 .OB> DEFINE>
				  <SET STAT <GET <2 .OB> .INFO>>>
			     <SET ARGL
				  <COND (<TYPE? <1 ,<FNAME .STAT>> LIST>
					 <1 ,<FNAME .STAT>>)
					(<2 ,<FNAME .STAT>>)>>
			     <COND (<NOT <OR <MEMBER "TUPLE" .ARGL>
					     <MEMBER "ARGS" .ARGL>
					     <MEMBER "CALL" .ARGL>
					     <MEMBER "BIND" .ARGL>>>
				    <PUT .STAT ,CALLS '()>
				    <CALL? .STAT ,<FNAME .STAT>>)>)
			    (<AND <==? <1 .OB> SETG>
				  <TYPE? <GETPROP <2 .OB> VALUE '<2 .OB>> ATOM>
				  <TYPE? <3 .OB> FORM>
				  <==? <LENGTH? <SET GOB <3 .OB>> 2> 2>
				  <==? <1 .GOB> GVAL>
				  <TYPE? <2 .GOB> ATOM>
				  <GETPROP <2 .GOB> .INFO>>	      ;"Ignore")
			    (<==? <1 .OB> ENTRY> <PROCESS-ENTRY <REST .OB>>)
			    (ELSE <SCAN .OB>)>>
	      ..NAME>
	<MAPF <>
	      <FUNCTION (STAT) 
		      #DECL ((STAT) INFO)
		      <AND <DECIDER .STAT>
			   <FUNCTION-MACRO <FNAME .STAT>
					   .MESSAGE
					   .STAT
					   <NTH ..NAME <OFFSET .STAT>>>
			   <PUT ..NAME
				<OFFSET .STAT>
				<CHTYPE <REST <MCODE .STAT>> FORM>>>>
	      .STATS>
	.NAME>

\ 

<PROG ()
      <SETG FNAME 1>
      <SETG LEN 2>
      <SETG CALLED 3>
      <SETG OFFSET 4>
      <SETG CALLS 5>
      <SETG MCODE 6>
      <SETG REJECT 7>
      <SETG PROGM 8>
      <SETG ACT 9>
      <SETG COUNT 10>
      <MANIFEST FNAME
		LEN
		CALLED
		OFFSET
		CALLS
		MCODE
		REJECT
		PROGM
		ACT
		COUNT>
      <NEWTYPE INFO
	       VECTOR
	       '<VECTOR ATOM
			FIX
			FIX
			FIX
			<PRIMTYPE LIST>
			ANY
			ANY
			ANY
			ANY
			LIST>>>

<DEFINE SIZE (X)	     ;"Attempt to estimate the SIZE of compiled version"
	#DECL ((VALUE) FIX)
	<COND (<MONAD? .X> 2)
	      (<TYPE? .X LIST VECTOR UVECTOR FUNCTION>
	       <+ 1 <MAPF ,+ ,SIZE .X>>)
	      (<NOT <TYPE? .X FORM SEGMENT>> 2)
	      (<EMPTY? .X> 2)
	      (<==? <1 .X> QUOTE> 2)
	      (<==? <1 .X> LVAL> <SIZE <2 .X>>)
	      (<MEMQ <1 .X>
		     '![MAPF MAPR IVECTOR IUVECTOR ILIST IFORM MEMQ!]>
								      ;"Hairy ?"
	       <+ 10 <MAPF ,+ ,SIZE .X>>)
	      (ELSE <MAPF ,+ ,SIZE .X>)>>

\ 

;
"CALL? is given the Info of a function and a part or all of the actual function.  It 
recursively goes through hunting for calls to other functions on the STATS list and 
alters CALLED and CALLS accordingly. It also rejects functions that are called with 
GVAL or are entries."

<DEFINE CALL? (FUNCN VAL "EXTRA" VSTAT) 
	#DECL ((VAL) ANY (FUNCN) INFO (VSTAT) <OR FALSE INFO>)
	<COND (<OR <MONAD? .VAL> <EMPTY? .VAL> <TYPE? .VAL STRING>>)
	      (<NOT <TYPE? .VAL FORM SEGMENT>>
	       <MAPF <> <FUNCTION (X) <CALL? .FUNCN .X>> .VAL>)
	      (<AND <SET VSTAT <GETPROP <1 .VAL> .INFO>>
		    <MEMQ .VSTAT .STATS>
		    <PUT .VSTAT ,CALLED <+ 1 <CALLED .VSTAT>>>
		    <OR <MEMQ <1 .VAL> <CALLS .FUNCN>>
			<PUT .FUNCN ,CALLS (<1 .VAL> !<CALLS .FUNCN>)>>>
	       <MAPF <> <FUNCTION (X) <CALL? .FUNCN .X>> <REST .VAL>>)
	      (<AND <==? <1 .VAL> GVAL>
		    <SET VSTAT <GETPROP <2 .VAL> .INFO>>>
	       <PUT .VSTAT ,REJECT T>
	       <MAPF <> <FUNCTION (X) <CALL? .FUNCN .X>> <REST .VAL 2>>)
	      (<MAPF <> <FUNCTION (X) <CALL? .FUNCN .X>> .VAL>)>>

<DEFINE SCAN (VAL "EXTRA" VSTAT) 
	#DECL ((VSTAT) <OR FALSE INFO>)
	<COND (<OR <MONAD? .VAL> <EMPTY? .VAL> <TYPE? .VAL STRING>>)
	      (<TYPE? .VAL FUNCTION> <CALL? .DEFAULT-STAT .VAL>)
	      (<OR <NOT <TYPE? .VAL FORM SEGMENT>> <LENGTH? .VAL 1>>
	       <MAPF <> ,SCAN .VAL>)
	      (<OR <==? <1 .VAL> FUNCTION> <==? <1 .VAL> DEFINE>>
	       <CALL? .DEFAULT-STAT <REST .VAL>>)
	      (<AND <==? <1 .VAL> GVAL>
		    <SET VSTAT <GETPROP <2 .VAL> .INFO>>>
	       <PUT .VSTAT ,REJECT T>
	       <MAPF <> ,SCAN <REST .VAL 2>>)
	      (ELSE <MAPF <> ,SCAN .VAL>)>>

<DEFINE FUNCTION-MACRO (NAME
			"OPTIONAL" (MESSAGE <>)
				   (STAT
				    <CHTYPE [.NAME 0 0 0 <> <> <> <> <> ()]
					    INFO>) DEFCODE
			"EXTRA" (REDEFINE T) FCN ARGL A)

 ;
"Calls MACMAK which generates the macro
	 and places it on the function's MCODE property list."
	#DECL ((NAME) ATOM (MESSAGE) <OR FALSE CHANNEL> (STAT) INFO
	       (DEFCODE) FORM (REDEFINE) <SPECIAL ANY> (FCN) FUNCTION
	       (ARGL) LIST)
	<PROG ()
	      <COND (<NOT <AND <GASSIGNED? .NAME> <TYPE? ,.NAME FUNCTION>>>
		     <RETURN #FALSE ("NOT A FUNCTION")>)>
	      <SET FCN ,.NAME>
	      <SET ARGL
		   <COND (<TYPE? <1 .FCN> LIST> <1 .FCN>) (ELSE <2 .FCN>)>>
	      <COND (<OR <MEMBER "TUPLE" .ARGL>
			 <MEMBER "ARGS" .ARGL>
			 <MEMBER "CALL" .ARGL>
			 <MEMBER "BIND" .ARGL>>
		     <RETURN #FALSE ("FUNCTION CAN'T BE MACROED")>)>
	      <COND (.MESSAGE
		     <PRINC "MACROING FUNCTION: " .MESSAGE>
		     <PRIN1 .NAME .MESSAGE>
		     <TERPRI .MESSAGE>)>
	      <COND (<NOT <ASSIGNED? DEFCODE>>
		     <SET DEFCODE <FORM DEFINE .NAME !.FCN>>)>
	      <MACMAK .STAT .DEFCODE>
	      <COND (<MCODE .STAT>
		     <EVAL <SET A <CHTYPE <REST <MCODE .STAT>> FORM>>>
		     <PUT <GLOC <2 .A>> DEFINE>
				    ;"Tells GROUP-DUMP that it has been changed"
		     .NAME)>>>

\ 

;"Determines whether functions may become macros."

<DEFINE DECIDER (FUNCN) 
	#DECL ((FUNCN) INFO)
	<AND <NOT <REJECT .FUNCN>>
	     <CALLS .FUNCN>				  ;"IF TRUE HAS A TUPLE"
	     <NOT <MEMQ <FNAME .FUNCN> <CALLS .FUNCN>>>	        ;"Not recursive"
	     <N==? <CALLED .FUNCN> 0>			 ;"Used at least once ?"
	     <L? <* <CALLED .FUNCN>
		    <COND (,LINEAR 1) (ELSE <CALLED .FUNCN>)>
		    <- <LEN .FUNCN> ,MACRO-ALWAYS>>
		 ,MACRO-NEVER>				     ;"Not too long ?">>

;"Creates macros from functions approved by DECIDER."

<DEFINE MACMAK (FUNCN FUNC "AUX" ARGL) 
	#DECL ((ARGL) LIST (FUNC) FORM (FUNCN) INFO)
	<SET ARGL
	     <COND (<==? <TYPE <3 .FUNC>> LIST> <3 .FUNC>)
		   (<PUT .FUNCN ,ACT <3 .FUNC>> <4 .FUNC>)>>
	<MAPF <>
	      <FUNCTION (X) 
		      #DECL ((X) <OR LIST STRING ATOM>)
		      <COND (<TYPE? .X ATOM>
			     <PUT .FUNCN ,COUNT (.X 0 !<COUNT .FUNCN>)>)>>
	      .ARGL>
	<PUT .FUNCN ,MCODE <RECFORM .FUNCN .FUNC .ARGL>>
	<PROGMAK .FUNCN .ARGL>>

;
"This is called by MACMAK and finishes the transformation. It fixes the arg lists
 and makes progs if needed."

<DEFINE PROGMAK (FUNCN ARGL
		 "EXTRA" NODECL TEMP PROGL DELETE NARGL OPTIONAL AUX DECLP)
   #DECL ((DECLP) FIX (NODECL AUX OPTIONAL DELETE) <OR ATOM FALSE>
	  (NARGL PROGL ARGL) LIST (FUNCN) INFO (TEMP) FORM)
   <SET TEMP <MCODE .FUNCN>>		        ;"change format when this works"
   <PUT .TEMP 2 DEFMAC>
   <REPEAT ((COUNTL <COUNT .FUNCN>))		     ;"if arg used >1 make prog"
	   #DECL ((COUNTL) <LIST [REST ATOM FIX]>)
	   <COND (<EMPTY? .COUNTL> <RETURN>)
		 (<G? <2 .COUNTL> 1> <PUT .FUNCN ,PROGM T> <RETURN>)>
	   <SET COUNTL <REST .COUNTL 2>>>
   <SET PROGL ()>
   <SET DELETE <>>
   <SET NARGL ()>
   <SET OPTIONAL <>>
   <SET AUX <>>
   <MAPF <>
    <FUNCTION (X) 
	    #DECL ((X) <OR LIST STRING ATOM>)
	    <COND (<OR <=? .X "ACT"> <=? .X "NAME">> <SET DELETE T>)
		  (.DELETE <PUT .FUNCN ,ACT .X> <SET DELETE <>>)
		  (<OR <=? .X "AUX"> <=? .X "EXTRA">>
		   <SET AUX T>
		   <PUT .FUNCN ,PROGM T>)
		  (.AUX <SET PROGL <LIST !.PROGL <RECFORM .FUNCN .X ()>>>)
		  (<=? .X "OPTIONAL">
		   <PUT .FUNCN ,PROGM T>
		   <SET NARGL <LIST !.NARGL .X>>
		   <SET OPTIONAL T>)
		  (.OPTIONAL
		   <COND (<TYPE? .X LIST>
			  <SET PROGL
			       <LIST !.PROGL <LIST <1 .X> <FORM LVAL <1 .X>>>>>
			  <SET NARGL
			       <LIST !.NARGL
				     <LIST <FORM QUOTE <1 .X>>
					   <FORM QUOTE <2 .X>>>>>)
			 (<SET PROGL
			       <LIST !.PROGL
				     <FORM COND
					   <LIST <FORM ASSIGNED? .X>
						 <LIST .X <FORM LVAL .X>>>
					   <LIST T .X>>>>
			  <SET NARGL <LIST !.NARGL <FORM QUOTE .X>>>)>)
		  (T
		   <SET PROGL <LIST !.PROGL <LIST .X <FORM LVAL .X>>>>
		   <SET NARGL <LIST !.NARGL <FORM QUOTE .X>>>)>>
    .ARGL>
   <OR <PROGM .FUNCN> <ARGFIX .TEMP .ARGL>>	  ;"if a prog is not used then "
   <COND (<TYPE? <4 .TEMP> ATOM> ;"if act is present remove and put on proplist"
	  <PUT .FUNCN ,ACT <4 .TEMP>>
	  <SET TEMP <FORM FORM DEFMAC <3 .TEMP> !<REST .TEMP 4>>>)>
   <PUT .TEMP 4 .NARGL>
   <SET DECLP
	<COND (<TYPE? <5 .TEMP> DECL> <SET NODECL <>> 5)
					   ;"notes if decl is present and # is "
	      (<SET NODECL T> 4)>>		 ;"resting of struc for PROGFIX"
   <COND (<AND <ACT .FUNCN> <PROGM .FUNCN>>
	  <PUTREST <REST .TEMP <- .DECLP 1>>
		   <FORM <CHTYPE (FORM
				  PROG
				  <ACT .FUNCN>
				  .PROGL
				  !<REST .TEMP .DECLP>)
				 FORM>>>)
	 (<ACT .FUNCN>
	  <PUTREST <REST .TEMP <- .DECLP 1>>
		   <FORM <CHTYPE (FORM
				  PROG
				  <ACT .FUNCN>
				  ()
				  !<REST .TEMP .DECLP>)
				 FORM>>>)
	 (<PROGM .FUNCN>
	  <PUTREST <REST .TEMP <- .DECLP 1>>
		   <FORM <CHTYPE <CONS FORM
				       <CONS PROG
					     <CONS .PROGL <REST .TEMP .DECLP>>>>
				 FORM>>>)>
   <OR .NODECL <DECLS .TEMP .FUNCN>>
   <OR <PROGM .FUNCN> <LENGTH-CHECK .TEMP>>	    ;"if forms > 1 put in prog."
   <PUT .FUNCN ,MCODE .TEMP>>

;
"If the function has more than 1 form it's body should be surrounded
 by an empty prog."

<DEFINE LENGTH-CHECK (FUNC) 
	#DECL ((FUNC) FORM (VALUE) <OR LIST FALSE>)
	<COND (<G? <LENGTH .FUNC> 5>
	       <PUTREST <REST .FUNC 3>
			<FORM <FORM FORM PROG () !<REST .FUNC 4>>>>)>>

;"Turns code into formed stuff for macro insertion."

<DEFINE RECFORM (FUNCN FUNC ARGLIST "EXTRA" COUNTL EXPR) 
	#DECL ((FUNCN) INFO (ARGLIST) LIST (FUNC) ANY (COUNTL) <OR FALSE LIST>)
	<COND
	 (<OR <MONAD? .FUNC> <==? <TYPE .FUNC> STRING>> .FUNC)
	 (<TYPE? .FUNC FORM SEGMENT>
	  <AND <==? <1 .FUNC> LVAL>
			       ;"hunts for lval's of arglist and keeps a count "
	       <SET COUNTL <MEMQ <2 .FUNC> <COUNT .FUNCN>>>
	       <PUT .COUNTL 2 <+ 1 <2 .COUNTL>>>>
	  <SET EXPR
	       <CHTYPE <CONS FORM
			     <MAPF ,LIST
				   <FUNCTION (X) <RECFORM .FUNCN .X .ARGLIST>>
				   .FUNC>>
		       FORM>>
	  <COND (<TYPE? .FUNC FORM> .EXPR)
		(ELSE <FORM CHTYPE .EXPR SEGMENT>)>)
	 (<TYPE? .FUNC DECL> .FUNC)
	 (T
	  <CHTYPE <MAPF ,<PRIMTYPE .FUNC>
			<FUNCTION (X) <RECFORM .FUNCN .X .ARGLIST>>
			.FUNC>
		  <TYPE .FUNC>>)>>

;
"This fixes function that are not progs.  Used because recform helps to 
 determine whether functions should get progs.  This deletes the FORM in 
 <FORM LVAL ARG>"

<DEFINE ARGFIX (STRUC ARGLIS) 
	#DECL ((STRUC VALUE) ANY (ARGLIS) LIST)
	<COND (<OR <MONAD? .STRUC> <TYPE? .STRUC STRING>>)
	      (<REPEAT ((N <LENGTH .STRUC>) (ELE <NTH .STRUC .N>))
		       #DECL ((N) FIX (ELE VALUE) ANY)
		       <COND (<TYPE? .ELE FORM>
			      <AND <G? <LENGTH .ELE> 2>
				   <==? <2 .ELE> LVAL>
				   <MEMQ <3 .ELE> .ARGLIS>
				   <PUT .STRUC .N <FORM LVAL <3 .ELE>>>>
			      <ARGFIX .ELE .ARGLIS>)
			     (<TYPE? .ELE SEGMENT>
			      <AND <==? <2 .ELE> LVAL>
				   <MEMQ <3 .ELE> .ARGLIS>
				   <PUT .STRUC
					.N
					<CHTYPE <FORM LVAL <3 .ELE>> SEGMENT>>>
			      <ARGFIX .ELE .ARGLIS>)
			     (<TYPE? .ELE DECL>)
			     (<ARGFIX .ELE .ARGLIS>)>
		       <SET N <- .N 1>>
		       <COND (<0? .N> <RETURN T>)
			     (<SET ELE <NTH .STRUC .N>>)>>)>>

;"Moves the decl into the prog"

<DEFINE DECLS (FUNC FUNCN "EXTRA" PROGL) 
	#DECL ((FUNC) FORM (FUNCN) INFO (VALUE) LIST)
	<COND (<NOT <PROGM .FUNCN>>)				   ;"if no prog"
	      (<SET PROGL <NTH .FUNC 6>>
	       <PUT .FUNC
		    6
		    <FORM FORM
			  PROG
			  <NTH .PROGL 3>
			  <NTH .FUNC 5>
			  !<REST .PROGL 3>>>)>
	<PUTREST <REST .FUNC 3> <REST .FUNC 5>>		     ;"remove old decl">

;"Takes a list of entries and PUTs a REJECT tag on them."

<DEFINE PROCESS-ENTRY (FUNL) 
	#DECL ((FUNL) LIST)
	<MAPF <>
	      <FUNCTION (X "EXTRA" STAT) 
		      #DECL ((X) ATOM (STAT) <OR FALSE INFO>)
		      <COND (<NOT <SET STAT <GETPROP .X .INFO>>>)
			    (<NOT ,ENTRY-ALLOW> <PUT .STAT ,REJECT T>)
			    (<TYPE? ,ENTRY-ALLOW FIX>
			     <PUT .STAT
				  ,CALLED
				  <+ ,ENTRY-ALLOW <CALLED .STAT>>>)
			    (ELSE <PUT .STAT ,CALLED 1000>)>>
	      .FUNL>>

<ENDPACKAGE>
