<PACKAGE "LOCKS">

<ENTRY 
 LOCK-PAGES
 LOCKED?
 SHARE-LOCKS
 HARD-LOCK
 SOFT-LOCK
 LOCK
 INIT44
 PAGE-LOCK
 UNLOCK
 PAGE-INIT
 LOCK-BASE-ADDRESS>

<USE "PMAP">

<SET DEFAULT-FILE "MUDDLE;LOCKS PAGE">
<SET LOCK-PAGES ()>
<SETG LOCK-BASE-ADDRESS <>>

<SETG SENSITIVE-RSUBRS (LOCK PAGE-LOCK UNLOCK PAGE-INIT)>

<DEFINE FREEZE-IT (RN "AUX" (RS ,.RN))
	<RSUBR <CHTYPE <PUT .RS 1 <CHTYPE <FREEZE <1 .RS>> CODE>> VECTOR>>>


<DEFINE SHARE-LOCKS ("OPTIONAL" (LOCK-FILE <>)
			"AUX" CH BASE (FNI <OR .LOCK-FILE .DEFAULT-FILE>))
	#DECL ((VALUE BASE) WORD
		(LOCK-PAGES) <LIST [REST LIST]>
		(CH) <OR FALSE CHANNEL>
		(LOCK-FILE) <OR FALSE STRING>
		(FNI) STRING)
<SET BASE
<COND (<AND <SET CH <OPEN "READ" .FNI>>
	<MAPF <>
		<FUNCTION (EL)
		<AND <=? <1 .EL><7 .CH>>
			<=? <2 .EL><8 .CH>>
			<=? <3 .EL><10 .CH>>	;"snm"
			<MAPLEAVE <4 .EL>>>>	;"page already there"
	.LOCK-PAGES>>)
	(ELSE	;"page not in already"
	<OR .CH	;"read file exists?"
		<PROG ()	;"make a file"
		<SET CH <OPEN "PRINTB" .FNI>>	;"so make one"
		<REPEAT ((N *20*) (UV <IUVECTOR *100* 0>))
			<PRINTB .UV .CH>	;"write 1K of 0's"
			<COND (<0? <SET N <- .N 1>>>
				<RETURN <CLOSE .CH>>)>>
		<SET CH <OPEN "READ" .FNI>>>>	;"better win now"
	<SET BASE
	<CHTYPE
		<CORE-BLOCK
		*640000*		;"read,write and public"
		-1			;"into my map"
		<PAGE-FIND>	;"at this page"
		<1 .CH>			;"from the file"
		0			;"first block"
		>
	WORD>>
	<SET LOCK-PAGES ((<7 .CH><8 .CH><10 .CH> .BASE) !.LOCK-PAGES)>
	.BASE)>>
<OR .LOCK-FILE <SETG LOCK-BASE-ADDRESS .BASE>>	;"set default page offset"
<CLOSE .CH>
<PAGE-INIT .BASE>	;"make sure it is initialized, and no system
crash since last set up."
.BASE>

<DEFINE SOFT-LOCK (NM "OPTIONAL" (RETRIES 3) (LSLEEP 3)
		(LOCK-BASE <OR ,LOCK-BASE-ADDRESS <SHARE-LOCKS>>)
		"AUX" (VAL #FALSE (COULD-NOT-LOCK-PAGE)))
	#DECL ((NM) STRING (RETRIES LSLEEP) FIX (LOCK-BASE) WORD
		(VAL VALUE) <OR WORD FALSE>)
	<COND (<PAGE-LOCK .LOCK-BASE>
		<PROG ()
		<COND (<SET VAL <LOCK .LOCK-BASE .NM 1>> .VAL)
			(<0? <SET RETRIES <- .RETRIES 1>>> .VAL)
			(ELSE <SLEEP .LSLEEP> <AGAIN>)>>
		<UNLOCK .LOCK-BASE>)>
	.VAL>

<DEFINE HARD-LOCK (NM "OPTIONAL" (RETRIES 3) (LSLEEP 3)
		(LOCK-BASE <OR ,LOCK-BASE-ADDRESS <SHARE-LOCKS>>)
		"AUX" (VAL #FALSE (COULD-NOT-LOCK-PAGE)))
	#DECL ((NM) STRING (RETRIES LSLEEP) FIX (LOCK-BASE) WORD
		(VAL VALUE) <OR WORD FALSE>)
	<COND (<PAGE-LOCK .LOCK-BASE>
		<PROG ()
		<COND (<SET VAL <LOCK .LOCK-BASE .NM 0>> .VAL)
			(<0? <SET RETRIES <- .RETRIES 1>>> .VAL)
			(ELSE <SLEEP .LSLEEP> <AGAIN>)>>
		<UNLOCK .LOCK-BASE>)>
	.VAL>

<TITLE INIT44>	;"takes two fixes, in*44*format
		-- addr1,,addr2 ? instruction"
<DECLARE ("VALUE" STORAGE FIX FIX)>
<PSEUDO <SET *SUSET #OPCODE *43540000000*>>


<PSEUDO
<PROG ()
	;"note:  All references to the page need to be offset by the
	address of the base of the page -- different users may map into
	different virtual pages"
	<SET PLOCK  0>	;"page lock (-1 => free)"
	<SET INITRQ 2>	;"init flag = system up time if init has begun"
	<SET INITDN 3>	;"init done flag = INITRQ if init finished"
	<SET TABLEP 4>	;"AOBJN pointer to hash table"
	<SET QUINTP 5>	;"aobjn pointer to free space (quintuples)"
	<SET FREEP  6>	;"pointer to free list of quintuples"
	<SET LUNAM 7>	;"hard-lock owner uname"
	<SET LJNAM 8>	;"hard-lock owner jname"
;"debugging counts"
	<SET NUSED 9>	;"number of quints taken by GETFREE"
	<SET NFREED 10>	;"number of quints freed by GARBCL"
;"end of debugging counts"
	<SET TABLEN 113>	;"length of hash table"
	<SET INFOLEN *20*>	;"first few words for scratch"
	<SET *CALL  #OPCODE *043000000000*>
	<SET *SLEEP #OPCODE *042000000003*>
	<SET *SUSET #OPCODE *043540000000*>
	<SET LEN44 30>		;"initial length of '44' table"
	>>

<PSEUDO <PROG ()
	<SET Q.PTRS 0>	;"next pointer in lock lists"
	<SET Q.ASCII 1>	;"3 words of ASCII -- name of lock"
	<SET Q.LOCK 4>	;"actual lock -- -1=hard, 0=un, >0=soft"
	>>

;"INIT44 CODE BEGINS HERE -- TITLE NEEDED AT START TO TURN ON ASSEM READER"

<SKIPE *44*>
<JRST GOT44>	;"been initialized"
<PUSH	TP* $TFIX>
<PUSH	TP* [<LEN44>]>	;"enough for 10 sensitive portions"
<MCALL 1 ISTORAGE>

<ADD	B* [<LEN44 (LEN44)>]>	;"rest till empty"
<MOVEM	B* *44*>
;"now lets the system know we are hacking locks"

<*SUSET	[*000054000000*]>	; "get .optio bits"
<TLO	*1000*>			;"bit for lock enable"
<*SUSET [*400054000000*]>	;"set 'OPTIONS' from register 0"


GOT44
<HLRE	A* *44*>	;"-length"
<MOVM	A* A>		;"positive"
<HRRZ	B* *44*>	;"ptr"
<ADDI	B* 1 (A)>	;"second dope"
<HLRZ	B* (B)>		;"length"
<CAMG	B* A>		;"any room?"
<PUSHJ	P* FULLTABLE>	;"none"
<MOVE	B* *44*>
<SUB	B* [*2000002*]>	;"new slot"
<MOVE	A* 1 (AB)>	;"first word"
<MOVEM	A* (B)>
<MOVE	A* 3 (AB)>
<MOVEM	A* 1 (B)>
<MOVEM	B* *44*>	;"reset 'sensitive code' pointer"
<MOVSI	A* TSTORAGE>
<MOVEM	A* <MQUOTE ![]> -1>	;"save for debugging"
<MOVEM	B* <MQUOTE ![]>>
<JRST FINIS>

FULLTABLE	;"here to grow the 'sensitive code' table"
<SUBM	M* (P)>	;"make locn insensitive"
<PUSH	TP* $TFIX>
<ADD	A* *24*>
<PUSH	TP* A>
<MCALL	1 ISTORAGE>	;"get bigger table"
<HLRE	A* B>		;"- length"
<SUB	B* A>		;"B->dope"
<HLRE	A* *44*>	;"- length old"
<ADD	A* B>		;"A/ 'to'"
<HRL	A* *44*>	;"A/ 'from',,'to'"
<BLT	A* -1 (B)>	;"copy old"
<PUSH	TP* $TSTORAGE>
<PUSH	TP* *44*>	;"for FREE"
<HRRM	A* *44*>	;"sneaky identity switch -leave length to end the same"
<MCALL	1 FREE>
<SUBM	M* (P)>		;"relocate return addr"
<POPJ	P*>î



<TITLE PAGE-LOCK>
<DECLARE ("VALUE" <OR WORD FALSE> <PRIMTYPE WORD> "OPTIONAL" FIX FIX)>
;"takes PAGE address, #times to retry, sleep time"
<PUSH	P* [1]>		;"sleep time"
<PUSH	P* [1]>		;"# retries"
<HLRZ	A* AB>		;"0,,-#args*2"
<CAIN	A* -2>
<JRST	NOOPT>
<MOVE	B* 3 (AB)>	;"# retries"
<MOVEM	B* (P)>
<CAIN	A* -4>
<JRST	NOOPT>
<MOVM	B* 5 (AB)>	;"sleep time, making sure it's positive"
<MOVEM	B* -1 (P)>

NOOPT	;"come here with no optionals"
<SKIPN <MQUOTE 654321>>	;"initialized?"
<JRST	LOCKIT>
<HRLI	A* SENSIN>	;"sensitive"
<HRRI	A* SENSOUT>	;"non-sensitive"
<PUSH	TP* $TFIX>
<PUSH	TP* A>
<PUSH	TP* $TFIX>
<PUSH	TP* UNLOCKIT>
<MCALL	2 INIT44>	;"make safe for democracy"
<SETZM	<MQUOTE 654321>>

LOCKIT
<HRRZ	C* 1 (AB)>	;"pointer to lock"
<AOSE	PLOCK (C)>		;"attempt lock"
<JRST 	LOCKED>
SENSIN
<MOVE	D* *43*>	;"start of list"
<HLL	D* UNLOCKIT>	;"get unlock instruction"
<TLZ	D* *20*>	;"turn off @ bit"
<MOVEM	D* PLOCK 1 (C)>
<MOVEM	C* *43*>
SENSOUT
<ADD	C* [<LUNAM (4)>]>	;".RUNAM,,LUNAM"
<*SUSET C>		;"saves UNAME of locker"
<AOBJN	C* NOWJN>
NOWJN
<*SUSET C>		;"now JNAME"
<MOVSI	A* TWORD>
<MOVE	B* 1 (AB)>	;"returns address"
<JRST FINIS>

LOCKED
<SOSGE	B* (P)>		;"decrement # retries"
<JRST	RUNOUT>
<PUSH	TP* $TFIX>
<PUSH	TP* -1 (P)>
<MCALL	1 SLEEP>	;"he asked for it"
<JRST	LOCKIT>

RUNOUT
<MOVSI	A* TFALSE>
<SETZ B*>
<JRST FINIS>
UNLOCKIT
<SETOM @ C>		;"AOSE-type switch"


<TITLE LOCK>
	;"***page must be locked!!!!"
	;"call with address of lock page, string (lock name)
	optional: fix (0(default)=>hard lock, else soft lock),"
	<DECLARE ("VALUE" <OR WORD FALSE> <PRIMTYPE WORD> STRING
		  "OPTIONAL" FIX)>
	<PSEUDO <PROG ()
		<SET HORSOFF 1>	;"refers to TB"
		<SET FREEBLKOFF 3>	
;"used to have sleep optionals -- better done in MUDDLE code"

	<DEFINE PUSHER ("TUPLE" ACS)
		<CHTYPE <MAPF ,LIST <FUNCTION (AC)
				<FORM PUSH	P* .AC>> .ACS>
		SPLICE>>
	<DEFINE POPPER ("TUPLE" ACS)
		<CHTYPE <MAPF ,LIST <FUNCTION (AC)
				<FORM PUSH P* .AC>> .ACS>
		SPLICE>>
		>>
;"first send sensitive locs to 44"
	<SKIPN	<MQUOTE 654321>>
	<JRST	INITED>
	<HRLI	A* HLCK1>	;"hard and sensitive"
	<HRRI	A* HLCK2>
	<MOVE	B* UNHARD>
	<PUSHJ	P* BLESS44>

	<HRLI	A* SLCK1>	;"soft and sensitive"
	<HRRI	A* SLCK2>
	<MOVE	B* UNSOFT>
	<PUSHJ	P* BLESS44>

	<HRLI	A* SF1>		;"free storage with undo if killed"
	<HRRI	A* SF2>
	<MOVE	B* SF4>
	<ADD	B* 1 (AB)>	;"relocate (index not allowed in *44*)"
	<PUSHJ	P* BLESS44>

	<HRLI	A* SF2>
	<HRRI	A* SF3>
	<MOVE	B* SF2>
	<PUSHJ	P* BLESS44>

	<SETZM	<MQUOTE 654321>>
INITED	<PUSH	TP* $TFIX>
	<PUSH	TP* [0]>	;"default hard lock"
	<PUSH	TP* $TFIX>
	<PUSH	TP* [2]>
	<MCALL	1 ISTORAGE>	;"get free block for 43"
	<PUSH	TP* A>
	<PUSH	TP* B>
	<HLRZ	A* AB>
	<CAIN	A* -4>
	<JRST	NOOPT>	;"no optionals"
	<MOVE	B* 5 (AB)>
	<MOVEM	B* HORSOFF (TB)>
NOOPT	<HRRZ	A* 1 (AB)>	;"base of locks page"
	<HRRZ	C* 2 (AB)>
	<MOVE	B* 3 (AB)>	;"string bp"
	<PUSHJ	P* HASHGEN>	;"leaves bucket index in D"
GCLRET	<HRRZ	C* TABLEP (A)>
	<ADD	C* D>		;"get bucket offset in page"
	<ADD	C* A>
	<SKIPA>
NOTHIS	<HRRZ	C* E>
	<HRRZ	E* (C)>		;"get pointer to next list el"
	<JUMPE	E* GETFREE>	;"C/ pointer to prev"
	<ADD	E* A>
	<MOVE	O* -2 (P)>	;"compare  ascii"
	<CAME	O* Q.ASCII (E)>
	<JRST	NOTHIS>
	<MOVE	O* -1 (P)>
	<CAME	O* Q.ASCII 1 (E)>
	<JRST	NOTHIS>
	<MOVE	O* (P)>
	<CAME	O* Q.ASCII 2 (E)>
	<JRST	NOTHIS>
;"*** have winning quint"
GDQUINT
	<HRRZ	D* FREEBLKOFF (TB)>	;"get two-word block"
	<HRRZ	B* *43*>
	<ADDI	E* Q.LOCK>	;"point at lock"
	<SKIPGE	(E)>
	<JRST	WAITSOME>	;"is hard locked"
	<SKIPE	HORSOFF (TB)>
	<JRST	WANTSOFT>
;"hard lock"
	<SKIPE	(E)>
	<JRST	WAITSOME>	;"already soft locked"
	<SETOM	(E)>		;"unlock w/SETZM"
HLCK1	<HLL	B* UNHARD>
	<MOVEM	B* 1 (D)>
	<HRRZM	E* 0 (D)>
	<MOVEM	D* *43*>
HLCK2	<MOVSI	A* TWORD>
	<HRRZ	B* E>
	<JRST FINIS>
UNHARD	<SETZM	@ E>

;"soft lock"
WANTSOFT
	<AOS	(E)>
SLCK1	<HLL	B* UNSOFT>
	<MOVEM	B* 1 (D)>
	<HRRZM	E* 0 (D)>
	<MOVEM	D* *43*>
SLCK2	<JRST	HLCK2>
UNSOFT	<SOS @ E>

HASHGEN
	<POP	P*>	;"save return address"
	<PUSH	P* [0]>
	<PUSH	P* [0]>
	<PUSH	P* [0]>
	<SETZ	D*>
	<SKIPN	C>
	<JRST	@ 0>	;"quit if count = 0"
	<CAILE	C* 15>	;"max string length"
	<MOVEI	C* 15>
	<MOVEI	E* -2 (P)>
	<HRLI	E* *440700*>
LOOP	<ILDB	D* B>
	<IDPB	D* E>
	<SOJG	C* LOOP>

	<MOVE	C* -2 (P)>
	<XOR	C* -1 (P)>
	<XOR	C* 0 (P)>	;"hash em up"
	<HLRE	D* TABLEP (A)>	;"get length of table"
	<IDIV	C* D>	;"and map into table"
	<MOVM	D* D>		;"don't let it be negative"
	<JRST	@ 0>

GETFREE
	<HRRZ	E* FREEP (A)>	;"free pointer"
	<JUMPE	E* GARBCL>	;"nul pointer, clear up garbage"
	<AOS	NUSED (A)>	;"***debugging # quints used"
	<MOVE	D* E>	;"save relative value for later"
	<ADD	E* A>	;"make absolute"
	<POP	P* Q.ASCII 2 (E)>
	<POP	P* Q.ASCII 1 (E)>
	<POP	P* Q.ASCII (E)>	;"saves ascii in lock"
	<SETZM	Q.LOCK (E)>
	<HRRZ	O* Q.PTRS (E)>
	<MOVEM	O* FREEP (A)>
SF1	<SETZM	Q.PTRS (E)>	;"new block is end of list"
SF2	<MOVEM	D* @ C>		;"link into bucket's list"
SF3	<JRST	GDQUINT>

SF4	<MOVEM	D* FREEP>	;"go back-- link block into free"
;"contents of SF4 get relocated before use"

WAITSOME
	<MOVSI	A* TSTORAGE>
	<MOVE	B* FREEBLKOFF (TB)>
	<MCALL	1 FREE>	;"free up 2 word block"
	<MOVSI	A* TFALSE>
	<MOVE	B* <MQUOTE (ALREADY-LOCKED)>>
	<JRST	FINIS>

GARBCL	<PUSH	P* A>
	<PUSH	P* D>	;"contains the bucket #"
	<SKIPN	<MQUOTE 765432>>
	<JRST	GARBIN>
	<PUSH	P* A>	;"save page address"
	<HRLI	A* S1>	;"free storage return with undo"
	<HRRI	A* S2>
	<MOVE	B* S1UNLK>
	<ADD	B* 1 (AB)>	;"relocate (index not allowed)"
	<PUSHJ	P* BLESS44>

	<HRLI	A* S2>
	<HRRI	A* S3>
	<MOVE	B* S2UNLK>
	<PUSHJ	P* BLESS44>
	<SETZM	<MQUOTE 765432>>
	<POP	P* A>	;"get back the page address"
GARBIN	<MOVE	E* TABLEP (A)>
	<ADD	E* A>		;"make absolute ptr to table"
LP1	<PUSH	P* E>
LP2	<HRRZ	C* E>
LP3	<HRRZ	E* (C)>		;"next pointer"
	<JUMPE	E* EOLP1>	;"end of bucket list"
	<ADD	E* A>		;"make absolute"
	<SKIPE	Q.LOCK (E)>	;"is lock set?"
	<JRST	LP2>		;"if set, go to next element"
;"here to free an unlocked quint -- lock contains 0"
	<HRRZ	O* (C)>
	<HRRZ	B* FREEP (A)>	;"rel ptr to free space"
	<HRRZ	D* (E)>		;"get rest pointer"
	<MOVEM	B* (E)>		;"link this quint to free"
S1	<MOVEM	D* (C)>		;"splice quint out of bucket list"
S2	<MOVEM	O* FREEP (A)>
S3
	<AOS	NFREED (A)>	;"***debugging--# quints retrieved"
	<JRST	LP3>	;"get rest of buckets"
EOLP1	<POP	P* E>
	<AOBJN	E* LP1>		;"look at next bucket"
	<POP	P* D>
	<POP	P* A>
	<SKIPE	FREEP (A)>	;"still none free ?"
	<JRST	GCLRET>		;"freed some quints, retry"
	<MOVSI	A* TFALSE>
	<MOVE	B* <MQUOTE (NO-FREE-SPACE)>>
	<JRST	FINIS>
S1UNLK <SETAM	D* @ E>		;"link the bucket list back together"
S2UNLK	<SETAM	O* FREEP>	;"free the quint even if user kills job"

BLESS44	<SUBM	M* (P)>	;"make position insensitive"
	<PUSH	TP* $TFIX>
	<PUSH	TP* A>	;"location bounds in A (S1,,S2)"
	<PUSH	TP* $TFIX>
	<PUSH	TP* B>	;"undo instruction in B"
	<MCALL	2 INIT44>
	<SUBM	M* (P)>	;"relocate"
	<POPJ	P*>
<TITLE UNLOCK>
<DECLARE ("VALUE" WORD <PRIMTYPE WORD> "OPTIONAL" FIX)>
;"takes base of lock page
  -or-
  address of lock and optional hard (0) or soft (1)
  optional arg gives error if wrong flavor."
	<PUSH	TP* $TFIX>
	<PUSH	TP* [-1]>	;"default indicates no error lossage"
	<HLRZ	A* AB>
	<CAIN	A* -2>
	<JRST	NOOPTION>
	<MOVE	A* 3 (AB)>
	<MOVEM	A* (TP)>
NOOPTION
<SKIPN <MQUOTE 6543210>>	;"initialized?"
<JRST	FIND-LOCK>
	<HRLI	A* SENSIN>	;"sensitive"
	<HRRI	A* SENSOUT>	;"non-sensitive"
	<MOVE	B* SENSIN>	;"instruction to unlock"
	<PUSHJ	P* BLESS44>	;"mark sensitive code"

	<HRLI	A* SENSI2>
	<HRRI	A* SENSO2>
	<MOVE	B* SENSI2>
	<PUSHJ	P* BLESS44>

	<HRLI	A* SENSI3>
	<HRRI	A* SENSO3>
	<MOVE	B* SENSI3>
	<PUSHJ	P* BLESS44>
<SETZM	<MQUOTE 6543210>>

FIND-LOCK
	<HRRZ	D* 1 (AB)>	;"get lock address"
	<MOVSI	C* *20*>	;"for indirect bit testing"
	<MOVEI	B* *42*>
LOOKFOR	<MOVE	A* B>
	<HRRZ	B* 1 (A)>	;"get next"
	<JUMPE	B* LOSE>	;"no chain?"
	<CAMN	D* B>		;"same as pointer?"
	<JRST	WIN>		;"yes, go unlock"
	<CAME	D* (B)>		;"if indirect, (B) contains address"
	<JRST	LOOKFOR>	;"try next element in chain"
	<TDNN	C* 1 (B)>	;"test indirect bit"
	<JRST	LOOKFOR>	;"if not, continue search"
;"here we have a winning indirect lock"
	<HRR	C* D>		;"address"
	<HLL	C* 1 (B)>	;"get instruction"
	<TLZ	C* *37*>	;"clear index and indirect, just in case"
	<HRL	A* 1 (B)>
	<TLNE	C* <GETBITS
			<ANDB!- <CHTYPE ,SETZM FIX>
			<XORB!- <CHTYPE ,SETZM FIX><CHTYPE ,SOS FIX>>>
			<BITS 18 18>>>	;"skip if SOS, not SETZM"
	<JRST	SETZMUP>	;"must be hard lock"
	<SKIPN	1 (TB)>
	<JRST	IS-SOFT-ERR>	;"0=>user expected hard?"
	<HLRM	A* 1 (A)>
SENSI2	<SOS	@ C>
SENSO2	<PUSH	TP* $TSTORAGE>	;"going to free the 2-word block"
	<HRLI	B* -2>
	<PUSH	TP* B>
	<MCALL	1 FREE>
	<JRST	SENSOUT>

SETZMUP	<SKIPLE	1 (TB)>		;"1=>user expected soft"
	<JRST	IS-HARD-ERR>	;"user wanted hard?"
	<HLRM	A* 1 (A)>	;"unlink 43 block"
SENSI3	<SETZM	@ C>
SENSO3	<JRST	SENSO2>


WIN
	<HRL	A* 1 (B)>	;"get next"
	<HLRM	A* 1 (A)>	;"and unlink lock from list"
SENSIN
	<SETOM @ B>
SENSOUT
	<MOVSI	A* TWORD>
	<MOVE	B* 1 (AB)>
	<JRST FINIS>

LOSE
	<PUSH	TP* $TATOM>
	<PUSH	TP* <MQUOTE NOT-LOCKED-BY-YOU!-ERRORS>>
	<JRST CALER1>

BLESS44	<SUBM	M* (P)>	;"make position insensitive"
	<PUSH	TP* $TFIX>
	<PUSH	TP* A>
	<PUSH	TP* $TFIX>
	<PUSH	TP* B>
	<MCALL	2 INIT44>
	<SUBM	M* (P)>	;"relocate"
	<POPJ	P*>

IS-SOFT-ERR
	<PUSH	TP* $TATOM>
	<PUSH	TP* <MQUOTE HARD-UNLOCK-OF-SOFT-LOCKED-LOCK!-ERRORS>>
	<JRST	CALER1>

IS-HARD-ERR
	<PUSH	TP* $TATOM>
	<PUSH	TP* <MQUOTE SOFT-UNLOCK-OF-HARD-LOCKED-LOCK!-ERRORS>>
	<JRST	CALER1>

<TITLE LOCKED?>
<DECLARE ("VALUE" <OR FALSE FIX> WORD)>
	<HRRZ	D* 1 (AB)>	;"lock address"
	<MOVSI	C* *20*>	;"for testing indirect bit"
	<MOVEI	B* *42*>		;"seed for chain"
LOOKFOR	<MOVE	A* B>
	<HRRZ	B* 1 (A)>	;"next pointer"
	<JUMPE	B* RFALSE>
	<CAMN	D* B>		;"is pointer same as lock address?"
	<JRST	RETB>		;"yes, return value"
	<CAME	D* (B)>		;"try indirect flavor"
	<JRST	LOOKFOR>	;"test next element in 43 chain"
	<TDNN	C* 1 (B)>	;"see if @ on in unlock instruction"
	<JRST	LOOKFOR>	;"not the lock for me"
	<SKIPA	B* (D)>		;"COOOOOOOOOKIE!!!!!"
RETB	<MOVE	B* (B)>
	<MOVSI	A* TFIX>
	<JRST	FINIS>
RFALSE	<MOVSI	A* TFALSE>
	<SETZ	B*>
	<JRST	FINIS>
<TITLE	PAGE-INIT>
<DECLARE ("VALUE" WORD <PRIMTYPE WORD>)>
;"takes the page base address,
  returns the system up time"
<SKIPN	<MQUOTE 0123456>>	;"44-init-flag"
<JRST	44-INIT-DONE>
<PUSH	TP* $TFIX>
<HRLI	A* ISENSIN>
<HRRI	A* ISENSOUT>
<PUSH	TP* A>		;"bounds of sensitive code"
<PUSH	TP* $TFIX>î
<MOVE	A* [<SETAM A* INITRQ>]>	;"unlock instruction"
<ADD	A* 1 (AB)>	;"lock base address (relocation)"
<PUSH	TP* A>
<MCALL	2 INIT44>
<SETZM	<MQUOTE 0123456>>
44-INIT-DONE

<MOVE	C* 1 (AB)>	;"lock page base address"
INIT
<*CALL [<SETZ>
	*626144416445*	;"sixbit 'RQDATE'"
	<MOVEM A>
	<SETZM A>]>	;"get system up time in A"
<JRST	*CALL-ERROR>
<JUMPL	A* [	<SOSLE	<MQUOTE 4>>	;"gives up eventually"
		<JRST	*UP-TIME-ERROR>
		<MOVEI	A* 300.>	;"system doesn't know time"
		<*SLEEP	A*>		;"wait 10 seconds and try again"
		<JRST	INIT>]>
<MOVE	B* A>	;"for test"
<EXCH	A* INITRQ (C)>	;"first test word"
ISENSIN
;"here, the test word has been changed, but the init is not complete"
<CAMN	A* INITRQ (C)>
<JRST	WAITER>	;"wait till init complete"
;"actual init"
<SETOM	PLOCK (C)>	;"clear page-lock"
;"hash table init"
<MOVE	E* [<INFOLEN (<- .TABLEN>)>]>	;"initialize pointer"
<MOVEM	E* TABLEP (C)>	;"and set it"
<ADD	E* C>		;"relocate the pointer"
<HLRE	D* E>	;"- hash table length"
<HRL	E* E>
<SUBM	E* D>		;"D-> one beyond table"
<SETZM	(E)>		;"clear entry"
<ADDI	E* 1>
<BLT	E* -1 (D)>	;"zero the hash table"
;"free space init"
<MOVE	E* [<INFOLEN TABLEN (<+ -1024 .INFOLEN .TABLEN>)>]>
<MOVEM	E* QUINTP (C)>	;"initialize quint area pointer"
<HRRZM	E* FREEP (C)>	;"initialize free space pointer"
<MOVE	D* [<-5 (D)>]>	;"next instr ovflows into index => (E)"
<ADD	D* 1 (AB)>	;"relocate for access, but store loc insens ptr"
LP
<ADD	E* [<5 (5)>]>
<HRRZM	E* @ D>	;"make forward pointer"
<JUMPL	E* LP>
<SETZM	@ D>		;"last link is 0"
<MOVEM	B* INITDN (C)>	;"finished, pant, pant"
ISENSOUT
<MOVSI	A* TWORD>	;"returns system up time"
<JRST FINIS>

WAITER
<CAMN	B* INITDN (C)>	;"init done?"
<JRST	ISENSOUT>	;"done, word1=word2"
<MOVEI	D* 300.>
<*SLEEP D*>		;"wait 10 seconds"
<JRST	ISENSIN>
;"and retry -- the user that changed word1 may have quit before finishing init"



*CALL-ERROR
<PUSH	TP* $TATOM>
<PUSH	TP* <MQUOTE DOT-CALL-LOST!-ERRORS>>
<JRST	CALER1>
*UP-TIME-ERROR
<PUSH	TP* $TATOM>
<PUSH	TP* <MQUOTE DOT-CALL-RQDATE-LOST!-ERRORS>>
<JRST	CALER1>

<END>

<MAPF <> ,FREEZE-IT ,SENSITIVE-RSUBRS>

<ENDPACKAGE>
