
<PACKAGE "SYNTAX">

;" SYNTAX Package for parsing BNF grammers.
To use, prepare BNF grammer as per .INFO.;YACC INFO.
Use the YACC System program to create a TABLES file.
Load the Teco macro found in MUDDLE;SYNTAX MACRO
into a Teco Q-Reg and execute with the buffer containing
the previously mentioned TABLES file.
This converts from C-Format to MUDDLE-Format.
Fload this converted file into a MUDDLE with SYNTAX.
Call <PRS> to perform a parse."

<ENTRY PRS DEBUG ERR-DEBUG TFLAG XFLAG TABLES>

<ENTRY GETTOK DGETTOK TOKEN STERM>

<ENTRY ACT DACT LHS SNTERM LINE LINES>

<ENTRY PTOKEN DPTOKEN>

<USE "MACROS">

<NEWTYPE TOKEN VECTOR '<<PRIMTYPE VECTOR> FIX ANY FIX>>

<DEFINE TOKEN (t i l "OPTIONAL" (v <IVECTOR 3>)) 
	#DECL ((t l) FIX (i) ANY (v) <<PRIMTYPE VECTOR> [3 ANY]> (VALUE) TOKEN)
	<CHTYPE <PUT <PUT <PUT .v ,type .t> ,index .i> ,line .l>
		TOKEN>>

<AND? <SETG type 1>
      <SETG index 2>
      <SETG line 3>
      <MANIFEST type index line>>


<SETG DEBUG #FALSE ()>

;
"Flag for printing out debugging information
whenever PRS does something significant.
In particular:	goes to a new state
		performs a reduction
		stacks a token"

<SETG ERR-DEBUG #FALSE ()>

;
"Flag for printing out debugging information
whenever PRS detects a syntax error or attempts
a new correction to a previous error"

<SETG XFLAG #FALSE ()>

;"Flag that turns off semantics"

<SETG TFLAG #FALSE ()>

;
"Flag that causes each token to be printed
on .OUTCHAN as it is 'read' by lex."


<SETG pssize 200>

<SETG tbsize 50>

<GDECL (pssize tbsize) FIX>

<GDECL (DEBUG ERR-DEBUG XFLAG TFLAG) <OR ATOM FALSE>>

<SET ps <CHUTYPE <IUVECTOR ,pssize> FIX>>

<SET pss <CHUTYPE <IUVECTOR ,pssize> FIX>>

<SET pl <CHUTYPE <IUVECTOR ,pssize> FIX>>

<SET psl <CHUTYPE <IUVECTOR ,pssize> FIX>>

<SET pv <IVECTOR ,pssize>>

<SET psv <IVECTOR ,pssize>>


<SET twp <IUVECTOR ,tbsize '<TOKEN 0 0 0>>>


<NEWTYPE TABLES
	 VECTOR
	 '<VECTOR VECTOR
		  <UVECTOR [REST FIX]>
		  <UVECTOR [REST FIX]>
		  <VECTOR [REST STRING]>
		  <VECTOR [REST STRING]>
		  <UVECTOR [REST FIX]>
		  <UVECTOR [REST FIX]>
		  <UVECTOR [REST FIX]>
		  FIX
		  FIX
		  <UVECTOR [REST FIX]>
		  <UVECTOR [REST FIX]>>>

<EVALTYPE TABLES
	  <FUNCTION (TBLS) 
		  #DECL ((VALUE TBLS) TABLES)
		  <CHTYPE <VECTOR <EVAL <1 .TBLS>> !<REST .TBLS>> TABLES>>>

\ 

<DEFINE PRS ("OPTIONAL" (TABLES <VALUE TABLES>)
			     ;"	VARIABLES WHICH MAY BE SET TO INDICATE OPTIONS	"
			(DEBUG? <VALUE DEBUG>) (ERR-DEBUG? <VALUE ERR-DEBUG>)
			(XFLAG? <VALUE XFLAG>) (TFLAG? <VALUE TFLAG>)
	     "EXTRA" (act <REST <1 .TABLES>>) (r1 <REST <2 .TABLES>>)
		     (r2 <REST <3 .TABLES>>) (STERM <REST <4 .TABLES>>)
		     (SNTERM <REST <5 .TABLES>>) (g <6 .TABLES>)
		     (pg <REST <7 .TABLES>>) (sq <REST <8 .TABLES>>)
		     (nwpbt <10 .TABLES>) (a <11 .TABLES>)
		     (pa <REST <12 .TABLES>>)
		     LHS		   ;"Left Hand Side (index into SNTERM)"
		     val	;"set to indicate translation element of LHS"
		     LINE		 ;"set to indicate line number of LHS"
		     (s .ps)			      ;"parser stack - states"
		     (v .pv)		;"parser stack - translation elements"
		     (l .pl)		        ;"parser stack - line numbers"
		     pv		      ;"used to reference translations of RHS"
		     pl		      ;"used to reference line numbers of RHS"
		     ps			      ;"parser stack pointer - states"
		     sps			;"save stack pointer - states"
		     spv	  ;"save stack pointer - translation elements"
		     spl		  ;"save stack pointer - line numbers"
		     (ss .pss)			        ;"save stack - states"
		     (sv .psv)		  ;"save stack - translation elements"
		     (sl .psl)			  ;"save stack - line numbers"
		     (pss .ss) (psv .sv) (psl .sl)	;"tops of save stacks"
		     (tskip 0)			   ;"number of tokens skipped"
		     (spop 0)			    ;"number of states popped"
		     LINES (must 7) (errcount 0) (errmode 0)
		     (tw .twp) (ctp .tw) (twp .tw)
		     (tokmode 0)		 ;"VARIABLES INTERNAL"
		     ac op n state ap gp control i r tlimit slimit p fp t tp
	     "ACT" PARSER)
   #DECL ((TABLES) TABLES (DEBUG? ERR-DEBUG? XFLAG? TFLAG?) <OR FALSE ATOM> (act) VECTOR
	  (g pg r1 r2 a pa sq) <UVECTOR [REST FIX]> (nwpbt) FIX
	  (STERM SNTERM) <SPECIAL <VECTOR [REST STRING]>>
	  (pl ps sps spl s l ss sl pss psl LINES) <SPECIAL <UVECTOR [REST FIX]>>
	  (pv spv v sv psv) <SPECIAL VECTOR> (val) <SPECIAL ANY>
	  (LHS LINE must errcount errmode tokmode) <SPECIAL FIX>
	  (ac op n state control i r tlimit slimit t spop tskip) FIX
	  (ap gp p) <UVECTOR [REST FIX]> (fp) ANY
	  (tw ctp twp) <SPECIAL <UVECTOR [REST TOKEN]>>
	  (tp) <UVECTOR [REST TOKEN]> (PARSER) ACTIVATION)
   <COND (<NOT <GASSIGNED? GETTOK>>
	  <SETG GETTOK ,DGETTOK>		;"Default Token Input Routine")>
   <COND (<NOT <GASSIGNED? ACT>>
	  <SETG ACT ,DACT>      		;"Default Action Routine")>
   <COND (<NOT <GASSIGNED? PTOKEN>>
	  <SETG PTOKEN ,DPTOKEN>		;"Default Token Printing Routine")>
   <SET ps <SET s <REST .s>>> <PUT .ps 1 1>
   <SET pv <SET v <REST .v>>> <PUT .pv 1 T>
   <SET pl <SET l <REST .l>>> <PUT .pl 1 0>
   <SET state 1>
   <SET ctp <lex .TFLAG?>>
   <REPEAT ()
     <SET ap <REST .a <NTH .pa .state>>>
     <COND (.DEBUG?
	    <PROG ((OUTCHAN .OUTCHAN))
		  <TERPRI>
		  <PRINC "executing state ">
		  <PRIN1 .state>
		  <PRINC ", token=">
		  <PRIN1 <type <1 .ctp>>>
		  <PRINC <ASCII 9>	;"Char Tab">>)>
     <PROG ()
       <SET ac <1 .ap>>
       <SET ap <REST .ap>>
       <SET n <CHTYPE <ANDB .ac 4095> FIX>>
       <CASE ,==? <SET op </ .ac 4096>>		     ;"BKD  SHIFT RIGHT 12 BITS"
	(1					       ;"SKIP ON TEST"
	 <COND (<N==? <type <1 .ctp>> .n> <SET ap <REST .ap>>)>
	 <AGAIN>)
	(2 <SET state .n>
	 <SET control <shift .spop .tskip .sq .TFLAG?>>)
	(3					   ;"MAKE A REDUCTION"
	 <COND (.DEBUG?
		<PROG ((OUTCHAN .OUTCHAN))
		      <TERPRI>
		      <PRINC "reduce ">
		      <PRIN1 .n>
		      <PRINC <ASCII 9>	;"Char Tab">>)>
	 <SET r <NTH .r2 .n>>
	 <SET LHS <NTH .r1 .n>>			  ;"Left Hand Side of reduction"
	 <COND (<G? .r 0>
		<SET ps <BACK .ps .r>>
		<SET pv <BACK .pv .r>>
		<SET pl <BACK .pl .r>>
		<SET LINE <2 .pl>> <SET val <2 .pv>>)
	       (ELSE <SET LINE 0> <SET val T>)>
	 <COND (<AND <NOT .XFLAG?>
		     <0? .errmode>
		     <SET fp <OR <NTH .act .n> ,ACT>>>
		<COND (<TYPE? .fp FIX>
		       <COND (<OR <L=? .fp 0> <G? .fp .r>>
			      <ERROR BAD-ACTION-INTEGER>)
			     (ELSE <SET val <NTH .pv <+ 1 .fp>>>)>)
		      (<APPLICABLE? .fp>		     ;"Action Routine ?"
		       <SET i 1>
		       <SET LINES <REST .sl>>	    ;"Lines for action routines"
		       <SET val
			    <MAPF .fp
				  <FUNCTION () 
					  <COND (<G? .i .r> <MAPSTOP>)>
					  <NTH .pv <SET i <+ .i 1>>>>>>)
		      (ELSE <SET val .fp>)>)>
	 <SET state <1 .ps>>
	 <SET gp <REST .g <NTH .pg .LHS>>>
	 <REPEAT ()
		 <COND (<0? <1 .gp>> <RETURN>)
		       (<==? <1 .gp> .state> <RETURN>)>
		 <SET gp <REST .gp 2>>>
	 <SET state <1 <SET gp <REST .gp>>>>
	 <SET control 1>				   ;"stack new state")
	(5					      ;"SHIFT ON MASK"
	 <SET t <type <1 .ctp>>>
	 <COND (<NOT <0? <CHTYPE <GETBITS <NTH .ap <+ 1 </ .t 16>>>
					  <BITS 1 <CHTYPE <ANDB .t 15> FIX>>>
				 FIX>>>				     ;"bit on"
		<SET state <NTH .a <+ .n .t>>>
		<SET control <shift .spop .tskip .sq .TFLAG?>>)
	       (ELSE <SET ap <REST .ap .nwpbt>> <AGAIN>)>)
	(4					       ;"ACCEPT INPUT"
	 <COND (<NOT <0? .errmode>> <SET ctp <dmperr .spop .tskip .sq>> <SET control 0>)
	       (ELSE <RETURN <1 .pv> .PARSER>)>)
	(0					       ;"SYNTAX ERROR"
	 <COND (<0? .errmode>					  ;"NEW ERROR"
		<COND (.ERR-DEBUG?
		       <PROG ((OUTCHAN .OUTCHAN))
			     <TERPRI>
			     <PRINC "errmode=0:st=">
			     <PRIN1 .state>
			     <PRINC ",nst=">
			     <PRIN1 <- <LENGTH .s> <LENGTH .ps>>>
			     <PRINC ",tok=">
			     <PRIN1 <type <1 .ctp>>>
			     <PRINC <ASCII 9>	;"Char Tab">>)>
		<synerr <line <1 .ctp>>>	        ;"report syntax error"
		<SET p .s>
		<REPEAT ()
			<qprint <1 .p> .sq>
			<COND (<==? .p .ps> <RETURN>)>
			<SET p <REST .p>>>
		<pcursor>
		<tkeem>			    ;"enter error mode to save tokens"
		<SET i 0>
		<REPEAT ()
			<SET tp <tok .i>>
			<COND (<==? <type <1 .tp>> 1> <RETURN>)>
			<tprint .tp>
			<COND (<G=? <SET i <+ .i 1>> 5> <RETURN>)>>
		<save>					  ;"save parser stack"
		<SET errcount .must>
		<SET errmode 1>			    ;"turn off action routnes"
		<SET tlimit <- <LENGTH .tw> .must 2>>
		<SET slimit <- <LENGTH .s> <LENGTH .ps>>>
		<SET tskip 0>
		<SET spop 0>)>
	 <restore>				  ;"try next recovery attempt"
	 <SET tp .ctp>
	 <SET ctp .tw>				;"Reset"
	 <COND (<OR <1? <type <1 .tp>>>
		    <G? <SET tskip <+ .tskip 1>> .tlimit>>
		<SET tskip 0>
		<SET spop <+ .spop 1>>)>
	 <COND (<L=? .spop .slimit>
		<SET ctp <tok .tskip>>
		<SET control <- .spop>>)
	       (ELSE
		<giveup <line <1 .tp>>>				    ;"give up"
		<RETURN #FALSE ("CAN'T PARSE") .PARSER>)>
	 <COND (.ERR-DEBUG?
		<PROG ((OUTCHAN .OUTCHAN))
		      <TERPRI>
		      <PRINC "spop=">
		      <PRIN1 .spop>
		      <PRINC ",tskip=">
		      <PRIN1 .tskip>
		      <PRINC ",token=">
		      <PRIN1 <type <1 .ctp>>>
		      <PRINC <ASCII 9>	;"Char Tab">>)>)
	DEFAULT (<ERROR INTERNAL-ERROR!-ERRORS .op PRS>)>
       <COND (<G? .control 0>
	      <COND (.DEBUG?
		     <PROG ((OUTCHAN .OUTCHAN))
			   <TERPRI>
			   <PRINC "stack st=">
			   <PRIN1 .state>
			   <PRINC " val=">
			   <&1 .val>
			   <PRINC <ASCII 9>	;"Char Tab">>)>
	      <COND (<EMPTY? <REST .ps>>		     ;"stack overflow"
		     <stkovf <line <1 .ctp>>>
		     <RETURN #FALSE ("OVERFLOW") .PARSER>)>
	      <PUT <SET ps <REST .ps>> 1 .state>
	      <PUT <SET pv <REST .pv>> 1 .val>
	      <PUT <SET pl <REST .pl>> 1 .LINE>)
	     (<L? .control 0>
	      <COND (<G? <- <LENGTH .ps> .control> <LENGTH .s>> ;"stack underflow"
		     <stkunf <line <1 .ctp>>>
		     <RETURN #FALSE ("UNDERFLOW") .PARSER>)>
	      <SET pv <BACK .pv <- .control>>>
	      <SET ps <BACK .ps <- .control>>>
	      <SET pl <BACK .pl <- .control>>>)>
       <SET state <1 .ps>>>>>


<DEFINE shift (spop tskip sq TFLAG? "EXTRA" ecnt)
	#DECL ((VALUE errcount ecnt) FIX (ctp) <UVECTOR [REST TOKEN]>
	       (spop tskip) FIX (sq) <UVECTOR [REST FIX]>
	       (TFLAG?) <OR FALSE ATOM>)
	<SET val <index <1 .ctp>>>
	<SET LINE <line <1 .ctp>>>
	<SET ctp <lex .TFLAG?>>
	<COND (<AND <NOT <0? <SET ecnt .errcount>>>
		    <0? <SET errcount <- .ecnt 1>>>>
	       <SET ctp <dmperr .spop .tskip .sq>>
	       0)
	      (ELSE 1 			  ;"ASSUME: stack new state")>>

\ 

<DEFINE dmperr (spop tskip sq) 
	#DECL ((VALUE ctp tw) <UVECTOR [REST TOKEN]> (spop tskip) FIX
	        (sq ps pl) <UVECTOR [REST FIX]> (pv) VECTOR)
	<restore>
	<SET ctp .tw>				;"Reset"
	<COND (<G? .spop 0>
	       <SET ps <BACK .ps .spop>>
	       <SET pv <BACK .pv .spop>>
	       <SET pl <BACK .pl .spop>>
	       <delmsg <line <1 .ctp>>>
	       <REPEAT ((i 1))
		       #DECL ((i) FIX)
		       <COND (<G? .i .spop> <RETURN>)>
		       <qprint <NTH .ps <SET i <+ .i 1>>> .sq>
					 ;"print symbol associated with state">)>
	<COND (<G? .tskip 0>
	       <skpmsg <line <1 .ctp>>>
	       <REPEAT ((i 0))
		       #DECL ((i) FIX)
		       <tprint <tok .i>>	        ;"print token skipped"
		       <COND (<G=? <SET i <+ .i 1>> .tskip> <RETURN>)>>)>
	<SET errmode 0>
	<SET errcount 0>
	<SET tokmode 0>					;"tklem routine"
	<tok .tskip>>

\ 

<DEFINE save ("EXTRA" N) 
	#DECL ((s ss ps l sl pl) <UVECTOR [REST FIX]> (v sv pv) VECTOR (N) FIX)
	<SET sps .ps>			;"Save State Numbers"
	<SET N <- <LENGTH .s> <LENGTH .ps> -1>>
	<SUBSTRUC .s 0 .N .ss> <SET pss <REST .ss .N>>
	<SET spv .pv>			;"Save Translation Values"
	<SET N <- <LENGTH .v> <LENGTH .pv> -1>>
	<SUBSTRUC .v 0 .N .sv> <SET psv <REST .sv .N>>
	<SET spl .pl>			;"Save Line Numbers"
	<SET N <- <LENGTH .l> <LENGTH .pl> -1>>
	<SUBSTRUC .l 0 .N .sl> <SET psl <REST .sl .N>>>

<DEFINE restore ("EXTRA" N) 
	#DECL ((s ss ps sps l sl pl spl) <UVECTOR [REST FIX]>
	       (v sv pv spv) VECTOR (N) FIX (must) FIX)
	<SET ps .sps>			;"Restore State Numbers"
	<SET N <- <LENGTH .s> <LENGTH .ps> -1>>
	<SUBSTRUC .ss 0 .N .s>
	<SET pv .spv>			;"Restore Translation Values"
	<SET N <- <LENGTH .v> <LENGTH .pv> -1>>
	<SUBSTRUC .sv 0 .N .v>
	<SET pl .spl>			;"Restore Line Numbers"
	<SET N <- <LENGTH .l> <LENGTH .pl> -1>>
	<SUBSTRUC .sl 0 .N .l>
	<SET errcount .must>>

\ 

<DEFINE lex (TFLAG?) 
	#DECL ((TFLAG?) <OR FALSE ATOM> (VALUE ctp twp tw) <UVECTOR [REST TOKEN]>)
	<COND (<L=? <LENGTH <SET ctp <REST .ctp>>> <LENGTH .twp>>
 ;
" If true, it is neccessary to read in another token.
		   If in normal mode, place the token in the first
		   element of the buffer.
		"
	       <COND (<0? .tokmode> <SET ctp <SET twp .tw>>)
		     (<EMPTY? .twp> <tkbovf <line <1 .ctp>>>)
		     (<L? <LENGTH .ctp> <LENGTH .twp>>
			     <badtwp <line <1 .ctp>>>)>
	       <rtoken .twp>			  ;"read token into next slot"
	       <SET twp <REST .twp>>)>
	<COND (<AND .TFLAG? <0? .tokmode>>
	       <PTOKEN <1 .ctp>>
	       <COND (<G? <14 .OUTCHAN> 60> <TERPRI>)
		     (ELSE <PRINC <ASCII 32>	;"Char Space">)>)>
	<line <1 .ctp>>
	.ctp>

<DEFINE tok (i "EXTRA" p (ctp .ctp))
	#DECL ((VALUE p ctp twp tw) <UVECTOR [REST TOKEN]> (i) FIX)
	<COND (<OR <G? <- <LENGTH .ctp> .i> <LENGTH .tw>>
		   <L=? <- <LENGTH .ctp> .i> 0>>
	       <badtok <line <1 .ctp>> .i>)>
	<COND (<G=? .i 0> <SET p <REST .ctp .i>>)
	      (ELSE <SET p <BACK .ctp <- .i>>>)>
	<REPEAT ((Lp <LENGTH .p>))
		#DECL ((Lp) FIX)
		<COND (<G? .Lp <LENGTH .twp>> <RETURN>)>
		<rtoken .twp>
		<SET twp <REST .twp>>>
	.p>

<DEFINE tkeem ("EXTRA" i)
	#DECL ((i) FIX (ctp twp tw) <UVECTOR [REST TOKEN]>)
	<SET tokmode 1>
	<SET i <- <LENGTH .ctp> <LENGTH .twp>>>
	<COND (<G? .i 0>
	       <REPEAT ((i .i) (tp1 .tw) (tp2 .ctp))
		       #DECL ((i) FIX (tp1 tp2) <UVECTOR [REST TOKEN]>)
		       <COND (<0? .i> <RETURN>)>
		       <SET i <- .i 1>>
		       <SUBSTRUC <1 .tp2> 0 3 <REST <1 .tp1> 0>>
		       <SET tp1 <REST .tp1>>
		       <SET tp2 <REST .tp2>>>)>
	<SET ctp .tw>
	<SET twp <REST .ctp .i>>>

<DEFINE rtoken (p)
	#DECL ((p) <UVECTOR [REST TOKEN]>)
	<PUT .p 1 <GETTOK <1 .p>>>>

\ 

<DEFINE synerr (line-num "EXTRA" (OUTCHAN .OUTCHAN)) 
	#DECL ((line-num) FIX (OUTCHAN) ANY)
	<TERPRI>
	<PRIN1 .line-num>
	<PRINC ": Syntax Error. Parse So Far:  ">>

<DEFINE giveup (line-num "EXTRA" (OUTCHAN .OUTCHAN))
	#DECL ((line-num) FIX (OUTCHAN) ANY)
	<TERPRI>
	<PRIN1 .line-num>
	<PRINC ": I Give Up.	">>

<DEFINE stkovf (line-num "EXTRA" (OUTCHAN .OUTCHAN))
	#DECL ((line-num) FIX (OUTCHAN) ANY)
	<TERPRI>
	<PRIN1 .line-num>
	<PRINC ": Parser Stack Overflow	">>

<DEFINE delmsg (line-num "EXTRA" (OUTCHAN .OUTCHAN))
	#DECL ((line-num) FIX (OUTCHAN) ANY)
	<TERPRI>
	<PRIN1 .line-num>
	<PRINC ": Deleted: ">>

<DEFINE skpmsg (line-num "EXTRA" (OUTCHAN .OUTCHAN))
	#DECL ((line-num) FIX (OUTCHAN) ANY)
	<TERPRI>
	<PRIN1 .line-num>
	<PRINC ": Skipped: ">>

<DEFINE tprint (tp)
	#DECL ((tp) <UVECTOR [REST TOKEN]>)
	<PRINC <ASCII 32>	;"Char Space"> <PTOKEN <1 .tp>>>

<DEFINE pcursor () <PRINC " |_">>

<DEFINE stkunf (line-num "EXTRA" (OUTCHAN .OUTCHAN))
	#DECL ((line-num) FIX (OUTCHAN) ANY)
	<TERPRI>
	<PRIN1 .line-num>
	<PRINC ": Parser Stack Underflow!	">>

<DEFINE tkbovf (line-num "EXTRA" (OUTCHAN .OUTCHAN))
	#DECL ((line-num) FIX (OUTCHAN) ANY)
	<TERPRI>
	<PRIN1 .line-num>
	<PRINC ": Token Buffer Overflow!	">>

<DEFINE badtwp (line-num "EXTRA" (OUTCHAN .OUTCHAN))
	#DECL ((line-num) FIX (OUTCHAN) ANY)
	<TERPRI>
	<PRIN1 .line-num>
	<PRINC ": Inconsistent Internal Pointers!	">>

<DEFINE badtok (line-num i "EXTRA" (OUTCHAN .OUTCHAN))
	#DECL ((line-num i) FIX (OUTCHAN) ANY)
	<TERPRI>
	<PRIN1 .line-num>
	<PRINC ": Bad Reference to Tok(">
	<PRIN1 .i>
	<PRINC ")!	">>

<DEFINE qprint (q sq "EXTRA" p (OUTCHAN .OUTCHAN))
	#DECL ((p) STRING (q) FIX (sq) <UVECTOR [REST FIX]>
	       (STERM SNTERM) <VECTOR [REST STRING]> (OUTCHAN) ANY)
	<PRINC <ASCII 32>	;"Char Space">
	<SET q <NTH .sq .q>>
	<COND (<OR <0? .q> <==? .q 4096>> <SET p "">)
	      (<G? .q 4096> <SET p <NTH .SNTERM <- .q 4096>>>)
	      (else <SET p <NTH .STERM .q>>)>
	<PRINC .p>>

\ 

<DEFINE DPTOKEN (TOK)				;"Default Token Printing Routine"
	#DECL ((TOK) TOKEN (STERM) <VECTOR [REST STRING]>)
	<PRINC <NTH .STERM <type .TOK>>>>

<DEFINE DACT ("TUPLE" TUP)			       ;"Default Action Routine"
	#DECL ((LHS) FIX (TUP) TUPLE (SNTERM) <VECTOR [REST STRING]>)
	(<NTH .SNTERM .LHS> !.TUP)>

<DEFINE DGETTOK (TOK "OPTIONAL" (X <READ>)
		 "EXTRA" (STERM .STERM) Y)	;"Default Token Input Routine"
	#DECL ((VALUE TOK) TOKEN (STERM) <VECTOR [REST STRING]>
	       (Y) <OR FALSE VECTOR> (X) ANY)
	<COND (<AND <TYPE? .X ATOM> <SET Y <MEMBER <SPNAME .X> .STERM>>>
	       <TOKEN <- <LENGTH .STERM> <LENGTH .Y> -1> .X 0 .TOK>)
	      (<AND <TYPE? .X STRING> <SET Y <MEMBER .X .STERM>>>
	       <TOKEN <- <LENGTH .STERM> <LENGTH .Y> -1> .X 0 .TOK>)
	      (<AND <TYPE? .X FIX> <G? .X 0> <L=? .X <LENGTH .STERM>>>
	       <TOKEN .X <NTH .STERM .X> 0 .TOK>)
	      (<AND <STRUCTURED? .X> <==? 2 <LENGTH .X>>>
	       <PUT <DGETTOK .TOK <1 .X>> 2 <2 .X>>)
	      (ELSE <TOKEN 2 .X 0 .TOK>)>>

<ENDPACKAGE>
