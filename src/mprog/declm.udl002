<PACKAGE "DECLM">

<ENTRY DECL-MATCH? OBJ-DECL ELE-DECL>

<DEFINE DECL-MATCH? (OBJ DEC)
	#DECL ((VALUE) <OR ATOM FALSE> (OBJ DEC) ANY)
	<COND (<AND <TYPE? .DEC FORM>
		    <==? <LENGTH .DEC> 2>
		    <MEMQ <1 .DEC> '(SPECIAL UNSPECIAL)>>
	       <OBJ-DECL .OBJ <2 .DEC>>)
	      (ELSE <OBJ-DECL .OBJ .DEC>)>>

<DEFINE OBJ-DECL (O D "AUX" (R T) (ALLT <ALLTYPES>))
	#DECL ((VALUE R) <OR ATOM FALSE> (O D) ANY (ALLT) <VECTOR [REST ATOM]>)
	<COND (<TYPE? .D ATOM>
	       <COND (<==? .D STRUCTURED>
		      <COND (<STRUCTURED? .O>)(T <DBAD "NOT STRUCTURED" .O>)>)
		     (<==? .D APPLICABLE>
		      <COND (<APPLICABLE? .O>)(T <DBAD "NOT APPLICABLE" .O>)>)
		     (<==? .D LOCATIVE>
		      <COND (<LOCATIVE? .O>)(T <DBAD "NOT LOCATIVE" .O>)>)
		     (<==? .D ANY> T)
		     (<MEMQ .D .ALLT>
		      <COND (<TYPE? .O .D>)(T <DBAD "TYPES DIFFER" .O .D>)>)>)
	      (<TYPE? .D FORM>
	       <COND (<NOT <G=? <LENGTH .D> 2>>
		      <DBAD "FORM IN DECL TOO SHORT" .D>)
		     (<==? <LENGTH .D> 2>
		      <COND (<==? <1 .D> QUOTE>
			     <COND (<=? .O <2 .D>>)
				   (LOSE <DBAD "QUOTED OBJECTS NOT =?" .O <2 .D>>)>)
			    (<==? <1 .D> PRIMTYPE>
			     <COND (<NOT <AND <TYPE? <2 .D> ATOM>
					      <MEMQ <2 .D> .ALLT>
					      <==? <2 .D> <TYPEPRIM <2 .D>>>>>
				    <DBAD "PRIMTYPE OF NON-PRIMTYPE" .D>)
				   (<==? <PRIMTYPE .O> <2 .D>>)
				   (LOSE <DBAD "PRIMTYPES DIFFER" .O <2 .D>>)>)
			    (<OR <MEMQ <1 .D> .ALLT> <TYPE? <1 .D> FORM>>
			     <COND (<SET R <OBJ-DECL .O <1 .D>>>
				    <ELE-DECL .O <REST .D>>)
				   (LOSE .R)>)
			    (<==? <1 .D> OR> <OBJ-DECL .O <2 .D>>)
			    (LOSE <DBAD "ILLEGAL FIRST ELEMENT OF FORM" .D>)>)
		     (<OR <MEMQ <1 .D> .ALLT>
			  <TYPE? <1 .D> FORM>
			  <==? <1 .D> STRUCTURED>>
		      <COND (<SET R <OBJ-DECL .O <1 .D>>> <ELE-DECL .O <REST .D>>)
			    (LOSE .R)>)
		     (<==? <1 .D> OR>
		      <REPEAT ((OD <REST .D>))
			      #DECL ((OD) STRUCTURED)
			      <COND (<EMPTY? .OD>
				     <RETURN <DBAD "DOES NOT MATCH ANY 'OR'" .O .D>>)
				    (<OBJ-DECL .O <1 .OD>> <RETURN T>)>
			      <SET OD <REST .OD>>>)
		     (ELSE <DBAD "ILLEGAL FIRST ELEMENT OF FORM" .D>)>)
	     (ELSE <DBAD "DECL ELEMENT NOT FORM OR ATOM" .D>)>>

<DEFINE ELE-DECL ELE (O D)
   #DECL ((O D) STRUCTURED (VALUE) <OR ATOM FALSE> (ELE) ACTIVATION)
   <COND
    (<EMPTY? .D> <DBAD "NO DECL ELEMENTS" .O .D>)
    (<REPEAT ((R T))
	     #DECL ((R) <OR ATOM FALSE>)
	     <COND
	      (<EMPTY? .D> <RETURN T>)
	      (<AND <TYPE? <1 .D> VECTOR> <G=? <LENGTH <1 .D>> 2>>
	       <COND (<TYPE? <1 <1 .D>> FIX>
		      <COND (<NOT <G? <1 <1 .D>> 0>>
			     <RETURN <DBAD "REST LENGTH SPEC TOO SMALL" <1 <1 .D>>> .ELE>)>
		      <REPEAT ((N <1 <1 .D>>) (DD <REST <1 .D>>))
			      #DECL ((N) FIX (DD) STRUCTURED)
			      <COND (<0? .N> <RETURN T>)
				    (<EMPTY? .O>
				     <RETURN <DBAD "OBJECT TOO SHORT" .O .D> .ELE>)
				    (<SET R <ELE-DECL .O .DD>>
				     <SET O <REST .O <LENGTH .DD>>>
				     <SET N <- .N 1>>)
				    (LOSE <RETURN .R .ELE>)>>
		      <SET D <REST .D>>)
		     (<==? <1 <1 .D>> REST>
		      <REPEAT ((DD <REST <1 .D>>))
			      #DECL ((DD) STRUCTURED)
			      <COND (<EMPTY? .O>
				     <SET D <REST .D>>
				     <COND (<EMPTY? .D> <RETURN T .ELE>)
					   (LOSE
					    <RETURN <DBAD "DECL ELEMENTS AFTER 'REST'"
							  .D>
						    .ELE>)>)
				    (<SET R <ELE-DECL .O .DD>>
				     <SET O <REST .O <LENGTH .DD>>>)
				    (ELSE <RETURN .R .ELE>)>>)
		     (LOSE
		      <RETURN <DBAD "ONE OF VECTOR NOT FIX OR REST" <1 .D>> .ELE>)>)
	      (<EMPTY? .O>
	       <RETURN <DBAD "OBJECT TOO SHORT" .O .D> .ELE>)
	      (<TYPE? <1 .D> FORM ATOM>
	       <COND (<SET R <OBJ-DECL <1 .O> <1 .D>>>
		      <SET O <REST .O>>
		      <SET D <REST .D>>)
		     (LOSE
		      <RETURN .R .ELE>)>)
	      (LOSE
	       <RETURN <DBAD "DECL FOR STRUCTURE NOT FORM ATOM OR LEGAL VECTOR"
			     <1 .D>>
		       .ELE>)>>)>>

<DEFINE DBAD ("TUPLE" X)
	#DECL ((VALUE) FALSE (X) TUPLE)
	<CHTYPE <LIST !.X> FALSE>>

<ENDPACKAGE>
