;;;-*-Lisp-*-

(cond ((and (status feature complr)
	    (not (boundp 'alan/;flushed)))
       (own-symbol let let* defmacro setf defsetf push pop incf decf if
		   defvar defconst selectq first second third fourth fifth
		   sixth seventh eighth rest <= >= / / / logand
		   logior logxor lognot dotimes dolist arrayp rem
		   remove remq del ass mem listp create-array aref aset
		   make-array ldb dpb y-or-n-p yes-or-no-p
		   ferror cerror describe inspect byte byte-size byte-position
		   macroexpand macroexpand-1)
       (setq alan/;flushed t)))

(cond ((status feature ITS)
       (defprop lspenv (dsk alan) ppn))
      ((status feature OZ)
       (defprop lspenv (ps alan/.maclisp) ppn))
      ((status feature EE)
       (defprop liblsp (ps maclisp) ppn)
       (defprop lspenv (ps alan) ppn))
      ((status feature SCRC-TENEX)
       (defprop liblsp (dsk maclisp) ppn)
       (defprop lspenv (dsk alan) ppn))
      (t (error '|Unknown site for lisp environment.|)))

((lambda (fasload noldmsg)
   (sstatus feature noldmsg)
   (or (status feature alan/;lspint)
       (load '((lspenv) lspint)))
   (cond ((status feature complr)
	  (or (status feature alan/;lspcom)
	      (load '((lspenv) lspcom)))))
   (or (status feature alan/;binda)
       (load '((lspenv) binda)))
   (or (status feature alan/;lspenv)
       (load '((lspenv) lspenv)))
   (or (status feature alan/;setf)
       (load '((lspenv) setf)))
   (cond ((not (status feature complr))
	  (or (get 'gcdemn 'version)
	      (load '((lisp) gcdemn)))
	  (or (status feature alan/;dprint)
	      (load '((lspenv) dprint)))
	  (or (status usrhu)
	      (dprint t))))
   (defprop step ((liblsp) step fasl) autoload)
   (defprop dribble ((liblsp) dribbl fasl) autoload)
   (defprop apropos ((liblsp) apropo fasl) autoload)
   (defprop crawl ((lspenv) crawl fasl) autoload)
   (putprop '?format (get 'format 'autoload) 'autoload)
   (defprop faslist ((lspenv) faslro fasl) autoload)
   (cond ((not (status feature defstruct))
	  (define-autoload-macros '((lspenv) struct fasl)
	    '(defstruct defstruct-define-type))
	  (define-autoloads '((lspenv) struct fasl)
	    '(defstruct-expand-ref-macro defstruct-expand-cons-macro
	      defstruct-expand-alter-macro defstruct-expand-size-macro))))
   (cond ((not (get 'gprint 'version))
	  (define-autoload-macros '((liblsp) gprint fasl)
	    '(gformat gf))
	  (define-autoloads '((liblsp) gprint fasl)
	    '(gprint gprint1 gprinc pl gexplode gexplodec
	      plp gset-up-printer))))
   (or noldmsg
       (sstatus nofeature noldmsg)))
 nil
 (status feature nodlmsg))
