;;;-*-Lisp-*-

(declare (load '((alan) lspenv init)))

(setq base 8)
(setq ibase 8)
(setq *nopoint t)

(setq pure 1)
(setq fasload nil)

(sstatus _ nil)

(sstatus feature noldmsg)

(setq gc-daemon-print nil)

(cond ((status feature ITS)

(defprop ljob-expand-run-macro ((alan) ljob fasl) autoload)
(setq ljob-search-rules '(alan sys sys1 sys2 sys3 bawden))
(let ((udir (status udir))
      (homedir (status homedir)))
  (or (memq homedir ljob-search-rules)
      (push homedir ljob-search-rules))
  (or (memq udir ljob-search-rules)
      (push udir ljob-search-rules)))
(mapc '(lambda (x) (putprop x 'ljob-expand-run-macro 'macro))
      '(peek p os sn chater vv vj tty fretty dskuse
	oldjob probe pb % who%
	what j k ddt spell tags 
	lisp l q ol xlisp xl xq
	complr c oc xc qc xqc faslis faslist fl
	finger f name whois who whoj w lookup u inquir
	mail bug qsend send s lmsend reply
        supdup ai ml mc oz ee xx
	pty sty telnet tn chtn mul mult multic multics 
	midas m find dover /@ ftp cftp
	macsym macsyma a srccom ttloc ttyloc lsc info tctyp tctype
	e emacs
	memo %tiful chat cli clu conkil its jade prime rfc
	))

(sstatus who1 #o52 #/% #o166 0)
(sstatus who3 0)
(sstatus gcwho 3)

(defprop *uset ((liblsp) lusets fasl) autoload)

)) ;;end (cond ((status feature ITS) ...))

(defun y-or-n-p ()
  (do ((ch (tyi t) (tyi t)))
      (nil)
    (declare (fixnum ch))
    (cond ((or (= ch #/Y) (= ch #/y))
	   (princ "es" t) (return t))
	  ((or (= ch #/N) (= ch #/n))
	   (princ "o" t) (return  nil))
	  ((= ch #\sp)
	   (princ "Yes" t) (return t))
	  ((= ch #\rubout)
	   (princ "No" t) (return nil))
	  (t (tyo 7 t)))))

(declare (special load-file))

(defun loadf n
  (do ((ar (and (> n 0) (arg 1)))
       (to-load)
       (default (namelist nil)))
      (())
    (terpri t)
    (and (null ar) (cond ((boundp 'load-file)
			  (setq ar load-file)
			  (go l))
			 (t (go r))))
    (or (eq ar 't) (go l))
  R (princ ";File to load: " t)
    (setq ar (readline t))
  L (setq ar (mergef ar default))
    (cond ((setq to-load (probef ar))
	   (princ ";Loading " t)
	   (princ (namestring to-load) t)
	   (setq load-file ar)
	   (load to-load)
	   (return t))
	  (t
	   (princ ";No such file as " t)
	   (princ (namestring ar) t)
	   (princ "  Try again? " t)
	   (cond ((y-or-n-p)
		  (terpri t)
		  (setq default ar)
		  (go r)))
	   (return nil)))))

(defun dbug (x)
  (cond (x (nouuo t)
	   (sstatus uuolinks))
	(t (nouuo nil))))

(defun base (n)
  (setq base n)
  (setq ibase n)
  *)

(defmacro bind-nointerrupt-nil (&body body)
  (let ((old (gensym)))
    `((lambda (,old)
	(unwind-protect (progn (nointerrupt nil)
			       ,@body)
			(nointerrupt ,old)))
      (status nointerrupt))))

(defun 20X-^f-function (() ())
  (bind-nointerrupt-nil
    (loadf)
    (princ " Done." t)
    (terpri t)))

(defun ITS-^f-function (f ())
  (syscall #o1_22 'ttyfls f)
  (bind-nointerrupt-nil
    (loadf)
    (princ " Done." t)
    (terpri t)))

(defvar *elisp-^e-valret*
  (cond ((status feature ITS) "E")
	(t "EMACSî/")))

(defun elisp-20X-^e-function (() ())
  (valret *elisp-^e-valret*)
  (elisp-tty-return '^e))

(defun elisp-20X-^z-function (() ())
  (valret)
  (elisp-tty-return '^z))

(defun elisp-ITS-^e-function (f ())
  (syscall #o1_22 'ttyfls f)
  (valret *elisp-^e-valret*)
  (elisp-welcome-back))

(defun elisp-ITS-^z-function (f ())
  (syscall #o1_22 'ttyfls f)
  (valret 0)
  (elisp-welcome-back))

(defun elisp-tty-return (state)
  (check-for-elisp-turds)
  (unless (null state)
    (elisp-welcome-back)))

(defun elisp-welcome-back ()
  (cursorpos 'A t)
  (princ ";Back to Lispî/" t))

(defvar *elisp-filename* nil)

(defun check-for-elisp-turds ()
  (let ((name (probef (or *elisp-filename*
			  (setq *elisp-filename*
				(cond ((status feature ITS)
				       `((DSK ,(status hsname))
					 _ELISP ,(status uname)))
				      (t
				       `((TEMP) ELISP TMP))))))))
    (unless (null name)
      (cursorpos 'A t)
      (princ ";Reading... " t)
      (let ((f (open name)))
	(unwind-protect (progn (deletef name)
			       (bind-nointerrupt-nil (elisp-load f)))
			(close f)))
      (sstatus uuolinks)
      (princ "î/;Done.î/" t))
    name))

(defun elisp-load (f)
  (loop for form = (read f f)
	until (eq form f)
	for value = (eval form)
	do (when (atom value)
	     (prin1 value t)
	     (princ " " t))))

(defun print-runtimes (f)
  (terpri f)
  (princ "R=" f)
  (princ-time (runtime) f)
  (princ " GC=" f)
  (princ-time (status gctime) f))

(defun princ-time (r f)
  (declare (fixnum r))
  (let ((base 10.)
	(*nopoint t))
    (prog (m s d)
      (declare (fixnum m s d))
      (setq r (// r 100000.))
      (setq d (\ r 10.))
      (setq r (// r 10.))
      (setq s (\ r 60.))
      (setq r (// r 60.))
      (if (zerop r) (go S))
      (setq m (\ r 60.))
      (setq r (// r 60.))
      (if (zerop r) (go M))
      (princ r f)
      (princ ":" f)
      (if (< m 10.)
	  (princ "0" f))
    M (princ m f)
      (princ ":" f)
      (if (< s 10.)
	  (princ "0" f))
    S (princ s f)
      (princ "." f)
      (princ d f))))

(push '(print-runtimes t) errlist)

(defun 20X-^t-function (() ())
  (print-runtimes t)
  (terpri t)
  (check-for-elisp-turds))

(defun ITS-^t-function (f ())
  (syscall #o1_22 'ttyfls f)
  (print-runtimes t)
  (terpri t)
  (check-for-elisp-turds))

(declare (special gc-daemon-print))

(defun 20X-^d-function (() ())
  (if (setq gc-daemon-print (not gc-daemon-print))
      (princ "î/;GC Printing On.î/" t)
      (princ "î/;GC Printing Off.î/" t)))

(defun ITS-^d-function (f ())
  (syscall #o1_22 'ttyfls f)
  (if (setq gc-daemon-print (not gc-daemon-print))
      (princ "î/;GC Printing On.î/" t)
      (princ "î/;GC Printing Off.î/" t)))

(cond ((status feature ITS)
       (setq tty-return 'elisp-tty-return)
       (sstatus ttyint #^e 'elisp-ITS-^e-function)
       (sstatus ttyint #^z 'elisp-ITS-^z-function)
       (sstatus ttyint #^t #'ITS-^t-function)
       (sstatus ttyint #^d #'ITS-^d-function)
       (sstatus ttyint #^f #'ITS-^f-function))
      (t
       (sstatus ttyint #^e 'elisp-20X-^e-function)
       (sstatus ttyint #^z 'elisp-20X-^z-function)
       (sstatus ttyint #^t #'20X-^t-function)
       (sstatus ttyint #^d #'20X-^d-function)
       (sstatus ttyint #^f #'20X-^f-function)))

(defvar **-manager nil)
(defvar ** nil)
(defvar *** nil)

(defun **-manager (val)
  (setq *** **)
  (setq ** **-manager)
  (setq **-manager val)
  val)

(setq read-eval-*-print '**-manager)

(defvar ++-manager nil)
(defvar -- nil)
(defvar ++ nil)
(defvar +++ nil)

(defun ++-manager (form)
  (unless (eq form '+)
    (setq +++ ++)
    (setq ++ --)
    (setq -- ++-manager)
    (setq ++-manager form))
  form)

(setq read-*-eval-print '++-manager)

(setq miser-width 20)
(setq major-width 20)
(setq plp-properties
      '(convert xmacro defstruct-name defstruct-slot /:function /:value))
(setq gprint-array-contents nil)
(setq gsymbol-car-format '/:G1block)
(setq gnon-symbol-car-format '/:G1block)

(defun (bind-arguments /:gformat) (x)
  (GF |(2*_(1%gformat-bvl -*!*)<!*>)| x))

(defprop caseq gformat-caseq /:gformat)
(defprop selectq gformat-caseq /:gformat)
(defun gformat-caseq (x)
  (GF |(2*_*<!(2(1<*,>)<-*>)>)| x))

(defprop block gformat-catch /:gformat)
(defprop catch gformat-catch /:gformat)
(defprop *catch gformat-catch /:gformat)
(defun gformat-catch (x)
  (GF |(2*_<*->)| x))

(defun (defun /:gformat) (x)
  (GF |(2*_*_%gformat-bvl <!*>)| x))

;;;Do this even better someday:
(defun gformat-bvl (x)
  (cond ((null x) (GF |'()'|))
	((atom x) (GF |*| x))
	(t (GF |(1<*,>)| x))))

(defun (feature-case /:gformat) (x)
  (GF |{2'('*| (car x))
  (when (atom (cadr x))
    (setq x (cdr x))
    (GF |_*| (car x)))
  (GF |[<!(2(1<*,>)<-*>)>]')'}| (cdr x)))

(defun (iterate /:gformat) (x)
  (GF |(2*_*_(1<*->)<!*>)| x))

(defvar *gformat-loop-keywords*		;Use these if LOOP isn't loaded:
  '((for) (as) (repeat) (initially) (finally) (do) (doing) (return) (collect)
    (collecting) (append) (appending) (nconc) (nconcing) (count) (counting)
    (sum) (summing) (maximize) (minimize) (always) (never) (thereis) (while)
    (until) (when) (if) (unless) (with)))

(defun (loop /:gformat) (x)
  (let ((*gformat-loop-keywords*
	  (if (and (boundp 'loop-keyword-alist)
		   (boundp 'loop-iteration-keyword-alist))
	      (append loop-iteration-keyword-alist loop-keyword-alist)
	      *gformat-loop-keywords*)))
    (GF |(+2*_*<%gformat-loop-element >)| x)))

(defun gformat-loop-element (x)
  (if (assq x *gformat-loop-keywords*)
      (GF |!~-2*| x)
      (GF |,*| x)))

(defprop kappa gformat-lambda /:gformat)
(defprop lambda gformat-lambda /:gformat)
(defun gformat-lambda (x)
  (GF |(2*_%gformat-bvl <-*>)| x))

(defprop named-kappa gformat-named-lambda /:gformat)
(defprop named-lambda gformat-named-lambda /:gformat)
(defun gformat-named-lambda (x)
  (GF |(2*_*_%gformat-bvl <-*>)| x))

(defun (labels /:gformat) (x)
  (GF |(2*_(1<$gformat-definition !>)<!*>)| x))

(defun (perform /:gformat) (x)
  (GF |(2*_*<!$gformat-definition >)| x))

(defun gformat-definition (def)
  (GF |{2'('*| (car def))
  (if (symbolp (car def))	;should call gformat-bvl sometimes.
      (GF |_*| (cadr def))
      (GF |-*| (cadr def)))
  (GF |[<-*>]')'}| (cddr def)))

;;;Disarming this kludge once again.
(defun (macroexpanded /:gformat) (x)
  (GF |(2*<!*>)| x))

;;;Can't make PROGN (PROG1, PROG2) choose between:
;;;	(progn foo
;;;	       bar
;;;	       baz)
;;;and:
;;;	(progn
;;;	  foo
;;;	  bar
;;;	  baz)

;;;TAGBODY?  Ugh!

(defprop unwind-protect gformat-when /:gformat)
(defprop when gformat-when /:gformat)
(defprop unless gformat-when /:gformat)
(defun gformat-when (x)
  (GF |(2*_*<!*>)| x))

(defun (with-open-file /:gformat) (x)
  (GF |(2*_(*_*-*)<!*>)| x))

(defun (with-values /:gformat) (x)
  (GF |(2*_(1%gformat-bvl -*)<!*>)| x))

(defmacro try (f)
  (let ((g (gensym)))
    (or (get 'gprint1 'lsubr)
	(load '((liblsp) gprint fasl)))
    `(do ((,g '* (,f (read))))
	 (nil)
       (terpri)
       (gprint1 ,g nil nil nil nil nil nil)
       (terpri))))

(declare (special ++))

(defun unbound-variable-break (args)
  (declare (special args))
  (errprint nil msgfiles)
  (let ((obarray (get 'obarray 'array))
	(readtable (get 'readtable 'array)))
    (setq ++ (car args))
    (bind-nointerrupt-nil (break unbound-variable))
    args))

(defun undefined-function-break (args)
  (declare (special args))
  (errprint nil msgfiles)
  (let ((obarray (get 'obarray 'array))
	(readtable (get 'readtable 'array)))
    (setq ++ (car args))
    (bind-nointerrupt-nil (break undefined-function))
    args))

(defun wrong-type-argument-break (args)
  (declare (special args))
  (errprint nil msgfiles)
  (let ((obarray (get 'obarray 'array))
	(readtable (get 'readtable 'array)))
    (setq ++ (car args))
    (rplaca args
	    (bind-nointerrupt-nil (break wrong-type-argument)))
    args))

(declare (special flush))
(or (boundp 'flush) (setq flush t))

(defun autoload-warn (x)
  (cond ((or (eq flush 't)
	     (atom (cdr x))
	     (memq (caddr x) flush))
	 (terpri t)
	 (princ ";AutoLoading " t)
	 (prin1 x t)
	 (terpri t)))
      (+internal-autoload x))

(setq unbnd-vrbl 'unbound-variable-break
      undf-fnctn 'undefined-function-break
      wrng-type-arg 'wrong-type-argument-break
      autoload 'autoload-warn
      )
