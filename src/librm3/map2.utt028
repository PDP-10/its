<PACKAGE "MAP2">

%%<COND (<LOOKUP "f" <1 .OBLIST>>) (<LINK FORM "f" ;"laziness">)>

<ENTRY MAP2 MAP2RET MAP2AGAIN MAP2STOP MAP2CON>

<DEFMAC MAP2 (func 'list "AUX" any act var var1 var2 body)
#DECL ((func) <PRIMTYPE LIST>
       (body var act) <PRIMTYPE LIST>
       (var1 var2) ATOM)

   <SET act <COND (<TYPE? <SET any <1 .func>> ATOM>
                   <SET func <REST .func>>
                   (.any))>>
   <SET var <COND (<SET any <MEMBER "AUX" <1 .func>>> <REST .any>)
                  (<SET any <MEMBER "EXTRA" <1 .func>>> <REST .any>)
                  (())>>
   <SET var1 <1 <1 .func>>>
   <SET var2 <2 <1 .func>>>
   <SET body <REST .func>>

   <f PROG begin ((return .list) l unchecked checked .var1 .var2)
   #DECL ((unchecked checked l return VALUE) <PRIMTYPE LIST> (begin) ACTIVATION)

     '<COND (<LENGTH? .return 1> <RETURN .return>)>
     '<SET unchecked <REST .return>>
     '<PUTREST .return ()>

      <f REPEAT loop () #DECL ((loop) ACTIVATION)

        '<COND (<EMPTY? .unchecked> <RETURN>)>
        '<SET checked .return>

         <f REPEAT ()
            <f SET .var2 '<1 .unchecked> ;"for contin">
            <f SET .var1 '<1 .checked>>
            <f PROG !.act .var !.body>
           '<COND (<LENGTH? .checked 1>
                   <SET unchecked <REST <SET l .unchecked>>>;"rest unchecked"
                   <PUTREST .checked .l>                    ;"append to unchecked"
                   <PUTREST .l ()>                          ;"cut off"
                   <RETURN>)
                  (<SET checked <REST .checked>>)>>>        ;"resting down unchecked"

      '.return>>


   ; "This checks the argument and returns 1-4."

<DEFINE CHECKARG (arg) #DECL ((arg) LIST)
   <COND (<EMPTY? .arg> 1)
         (<MAPF <>
                #FUNCTION ((any) <COND (<TYPE? .any SEGMENT> <MAPLEAVE T>)>)
                 .arg>
          4)
         (<LENGTH? .arg 1> 2)
         (<LENGTH? .arg 2> 3)
         (T 4)>>

   ; "This dispatches according to the argument."

<DEFINE DISPATCH (arg vec "AUX" (flag <CHECKARG .arg>))
#DECL ((arg) LIST (flag) FIX)
   <APPLY <GVAL <NTH .vec .flag>>
         !<COND (<==? .flag 1> ())
                (<==? .flag 2> (<1 .arg>))
                (<==? .flag 3> (<1 .arg> <2 .arg>))
                (T .arg)>>>

   ; "An old fashion macro."

<DEFMAC APPEND ('a 'b)
   <f PROG ((a .a) (b .b))
      '<COND (<EMPTY? .a> .b) (T <PUTREST <REST .a <- <LENGTH .a> 1>> .b> .a)>>>


   ; "RELOP splices one element out of checked and continues operation."

<DEFMAC RELOP ()
  '<COND (<LENGTH? .return 1>
          <SET return .unchecked>
          <AGAIN .begin>)
         (T
          <PUT .checked 1 <1 .return>>
          <SET return <REST .return>>
          <AGAIN .loop>)>>

<DEFINE RET0 ()
  '<PROG ()
      <SET unchecked <REST .unchecked>>
      <RELOP>>>

<DEFINE RET1 (stuff)
   <f PROG ()
      <f PUT '.checked 1 .stuff>
     '<SET unchecked <REST .unchecked>>
     '<AGAIN .loop>>>

<DEFINE RET2 (stuff stuff2)
   <f PROG ()
      <f PUT '.checked 1 .stuff>
      <f PUT '<SET l .unchecked> 1 .stuff2>
     '<SET unchecked <REST .l>>
     '<PUTREST .checked <PUTREST .l <REST .checked>>>
     '<AGAIN .loop>>>

<DEFINE RETS ("TUPLE" stuffs)
   <f PROG ((l (!.stuffs)))
     '<SET unchecked <REST .unchecked>>
     '<COND (<LENGTH? .return 1>
             <SET return .l>
             <COND (<EMPTY? .return>
                    <SET return .unchecked>
                    <AGAIN .begin>)
                   (T
                    <AGAIN .loop>)>)
            (T
             <PUT .checked 1 <1 .return>>
             <SET return <REST .return>>
             <PUTREST <REST .checked <- <LENGTH .checked> 1>> .l>
             <AGAIN .loop>)>>>


<SETG AGAIN0 ,RET0>

<DEFINE AGAIN1 (stuff)
   <f PROG ()
      <f PUT '.unchecked 1 .stuff>
     '<RELOP>>>

<DEFINE AGAIN2 (stuff stuff2)
   <f PROG ()
      <f SET unchecked <f CONS .stuff <f PUT '.unchecked 1 .stuff2>>>
     '<RELOP>>>

<DEFINE AGAINS ("TUPLE" stuffs)
   <f PROG ()
      <f SET unchecked <f APPEND (!.stuffs) '<REST .unchecked>>>
     '<RELOP>>>


   ; "LEAVE splices off <1 .checked>, links up checked and unchecked
      and returns."

<DEFMAC LEAVE ()
  '<RETURN
     <COND (<LENGTH? .return 1> 
            .unchecked)
           (T
            <PUT .checked 1 <1 .return>>
            <PUTREST <REST .checked <- <LENGTH .checked> 1>> .unchecked>
            <REST .return>)>
     .begin>>

<DEFINE STOP0 ()
  '<PROG ()
      <SET unchecked <REST .unchecked>>
      <LEAVE>>>

<DEFINE STOP1 (stuff)
   <f PROG ()
      <f PUT '.checked 1 .stuff>
     '<PUTREST <REST .checked <- <LENGTH .checked> 1>> <REST .unchecked>>
     '<RETURN .return .begin>>>

<DEFINE STOP2 (stuff stuff2)
   <f PROG ()
      <f PUT '.checked 1 .stuff>
      <f PUT '.unchecked 1 .stuff2>
     '<PUTREST <REST .checked <- <LENGTH .checked> 1>> .unchecked>
     '<RETURN .return .begin>>>

<DEFINE STOPS ("TUPLE" stuffs)
   <f PROG ()
      <f SET unchecked <f APPEND '<REST .unchecked> (!.stuffs)>>
     '<LEAVE>>>


<DEFMAC CONTIN ()
  '<COND (<LENGTH? .return 1>
          <SET return .unchecked>
          <AGAIN .begin>)
         (T
          <PUT .checked 1 <1 .return>>
          <SET return <REST .return>>)>>

<SETG CON0 ,RET0>

<DEFINE CON1 (stuff)
   <f PROG ()
      <f PUT '.unchecked 1 .stuff>
     '<CONTIN>>>

<DEFINE CON2 (stuff stuff2)
   <f PROG ()
      <f SET unchecked <f CONS .stuff <f PUT '.unchecked 1 .stuff2>>>
     '<CONTIN>>>

<DEFINE CONZ (stuffs)
   <f PROG ()
      <f SET unchecked <f APPEND (!.stuffs) '<REST .unchecked>>>
     '<CONTIN>>>


<DEFMAC MAP2RET ("ARGS" arg)
   <DISPATCH .arg '![RET0 RET1 RET2 RETS]>>

<DEFMAC MAP2AGAIN ("ARGS" arg)
   <DISPATCH .arg '![AGAIN0 AGAIN1 AGAIN2 AGAINS]>>

<DEFMAC MAP2STOP ("ARGS" arg)
   <DISPATCH .arg '![STOP0 STOP1 STOP2 STOPS]>>

<DEFMAC MAP2CON ("ARGS" arg)
   <DISPATCH .arg '![CON0 CON1 CON2 CONZ]>>


<ENDPACKAGE>