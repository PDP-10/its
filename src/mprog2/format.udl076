
<PACKAGE "FORMAT">

<ENTRY FORMAT FORMAT-SPACES>

<SETG FORMAT-SPACES " 	">

;"SPACE, TAB"

<GDECL (FORMAT-SPACES) STRING>

"Macro for printing or creating nicely formatted strings.

Table of Format mode characters:

	 		@ - modifier		`
	!		A - princ
	\"		B
	# - gobble arg	C - character
	$		D - fix
	% - crlfs	E - (exponent)
	& - newline	F - float
	'		G
	(		H - headed info
	)		I
	* - ignore	J
	+		K
	, - arg		L
	-		M
	. - set		N
	/		O - (octal)
	0 - arg		P - plural
	1 - arg		Q - quote
	2 - arg		R - cardinals, etc.
	3 - arg		S - prin1
	4 - arg		T - tabs
	5 - arg		U
	6 - arg		V
	7 - arg		W
	8 - arg		X - spaces
	9 - arg		Y
	: - modifier	Z
	;		lsb		lcb
	lab				| - form feed
	= - set		rsb		rcb
	rab		^		~ - tildes
	?		_		^?

"

\ 

"~nD Takes any number and prints as a decimal integer.  If no arg, print
     without leading spaces.  If arg and it fits in, put in leading
     spaces; if it doesnt fit just print it.  If second arg, use that
     (or first char of STRING of it if not a number) instead of space as
     a pad char."

"~nO Like D but octal"

<DEFINE PFIX (N
	      "OPTIONAL" (L 0) (PSTR !\ )
	      "AUX" M PCHAR LCHAR (S? T) (OUTCHAN .OUTCHAN))
	#DECL ((M N L) FIX (OUTCHAN) CHANNEL (PSTR) <OR STRING CHARACTER>
	       (S?) ANY (LCHAR PCHAR) CHARACTER)
	<SET M <- .L <FLATSIZE .N 1000>>>
	<COND (<G? .M 0>
	       <COND (<TYPE? .PSTR STRING>
		      <SET PCHAR <1 .PSTR>>
		      <SET LCHAR <2 .PSTR>>)
		     (ELSE <SET PCHAR <SET LCHAR .PSTR>>)>
	       <OR <1? .M> <PCHARS .PCHAR <- .M 1>>>
	       <COND (<MEMQ .LCHAR ,FORMAT-SPACES>)
		     (ELSE <SET S? <>> <SET L <14 .OUTCHAN>>)> 
	       <PRINC .LCHAR>)>
	<COND (.S? <SET L <14 .OUTCHAN>>)>
	<PRINC .N>
	.L>

"~n,mF Floating point.  Prints the number in a column n wide, with a
fractional part m digits wide."

<DEFINE PFLOAT (N
		"OPTIONAL" (L 0) (R 1) (PSTR !\ )
		"AUX" (NEG? <L? .N 0.0>) (S? T) PCHAR LCHAR M F E D
		 (OUTCHAN .OUTCHAN))
	#DECL ((N) FLOAT (E) <OR FIX FLOAT> (M F L R D) FIX (OUTCHAN) CHANNEL
	       (S? NEG?) <OR ATOM FALSE> (PSTR) <OR STRING CHARACTER>
	       (PCHAR LCHAR) CHARACTER)
	<COND (.NEG? <SET N <ABS .N>>)>
	<SET D <+ .R 1 <COND (<G? .L <+ .R 1>> 1) (ELSE 0)>>>
	<SET F <FIX <+ 0.5 <* .N <SET E <EXP <* <FLOAT .R> <LOG 10.0>>>>>>>>
	<SET E <FIX .E>>
	<SET M <- .L <MAX .D <+ 1 <FLATSIZE .F 1000>>>>>
	<COND (.NEG? <SET M <- .M 1>>)>
	<COND (<G? .M 0>
	       <COND (<TYPE? .PSTR STRING>
		      <SET PCHAR <1 .PSTR>>
		      <SET LCHAR <2 .PSTR>>)
		     (ELSE
		      <SET PCHAR <SET LCHAR .PSTR>>)>
	       <OR <1? .M> <PCHARS .PCHAR <- .M 1>>>
	       <COND (<MEMQ .LCHAR ,FORMAT-SPACES>)
		     (ELSE <SET S? <>> <SET M <14 .OUTCHAN>>)>
	       <PRINC .LCHAR>)>
	<SET L </ .F .E>>
	<SET F <MOD .F .E>>
	<COND (.S? <SET M <14 .OUTCHAN>>)>
	<COND (.NEG? <PRINC !\->)>
	<PRINC .L>
	<PRINC !\.>
	<PFIX .F .R !\0>
	.M>

"~nE Exponential notation"

"~R cardinal/ordinal and Roman notation"

<DEFINE PROMAN (N "OPTIONAL" (OLD? <>)
		"AUX" (OUTCHAN .OUTCHAN) (RR '"IVXLCDM//"))
	#DECL ((N) FIX (OLD?) <OR ATOM FALSE> (OUTCHAN) CHANNEL (RR) STRING)
	<COND (<G? .N 3999> <PRINC "???">)
	      (ELSE
	       <ROMAN </ .N 1000> <REST .RR 6> .OLD?>
	       <SET N <MOD .N 1000>>
	       <ROMAN </ .N 100> <REST .RR 4> .OLD?>
	       <SET N <MOD .N 100>>
	       <ROMAN </ .N 10> <REST .RR 2> .OLD?>
	       <ROMAN <MOD .N 10> .RR .OLD?>)>
	<14 .OUTCHAN>>

<DEFINE ROMAN (N STR OLD? "AUX" (OUTCHAN .OUTCHAN))
	#DECL ((N) FIX (STR) STRING (OUTCHAN) CHANNEL)
	<COND (<==? .N 9> <PRINC <1 .STR>> <PRINC <3 .STR>>)
	      (<G=? .N 5>
	       <PRINC <2 .STR>>
	       <COND (<NOT <0? <SET N <- .N 5>>>>
		      <PCHARS <1 .STR> .N>)>)
	      (<AND <NOT .OLD?> <==? .N 4>>
	       <PRINC <1 .STR>> <PRINC <2 .STR>>)
	      (<NOT <0? .N>>
	       <PCHARS <1 .STR> .N>)>>
	      

<DEFINE PCARDINAL (N "OPTIONAL" (ORDINAL? <>) "AUX" (OUTCHAN .OUTCHAN))
	#DECL ((N) FIX (ORDINAL?) <OR ATOM FALSE> (OUTCHAN) CHANNEL)
	<CARDINAL .N
		  <FIX </ <LOG .N> <LOG 1000>>>
		  .ORDINAL?
		  .OUTCHAN>
	<14 .OUTCHAN>>

<DEFINE CARDINAL (N L ORDINAL? OUTCHAN "AUX" M)
	<COND (<0? .N>)
	      (<G? .N 19>
	       <SET M </ .N 1000>>
	       <SET N <- .N <* .M 1000>>>
	       <COND (<NOT <0? .M>>
		      <CARDINAL .M 0 <> .OUTCHAN>
		      <COND (<NOT <0? .L>>
			     <PRINC !\ >
			     <PRINC <NTH '["thousand" "million"
					   "billion" "trillion"
					   "quadrillion" "quintillion"
					   "sextillion" "septillion"]
					 .L>>
			     <COND (<AND <0? .N> .ORDINAL?>
				    <PRINC "th">)>)>
		      <COND (<NOT <0? .N>> <PRINC !\ >)>)
		     (<G=? .N 100>
		      <CARDINAL </ .N 100> 0 <> .OUTCHAN>
		      <PRINC " hundred">
		      <COND (<NOT <0? <SET N <MOD .N 100>>>>
			     <PRINC !\ >
			     <CARDINAL <MOD .N 100> 0 .ORDINAL? .OUTCHAN>)
			    (.ORDINAL? <PRINC "th">)>
		      <SET N 0>)
		     (ELSE
		      <COND (<OR <NOT .ORDINAL?> <NOT <0? <MOD .N 10>>>>
			     <PRINC <NTH '["teen" "twenty" "thirty" "forty"
					   "fifty" "sixty" "seventy" "eighty"
					   "ninety"]
					 </ .N 10>>>
			     <PRINC !\ >
			     <CARDINAL <MOD .N 10> 0 .ORDINAL? .OUTCHAN>)
			    (ELSE
			     <PRINC <NTH '["teenth" "twentieth" "thirtieth"
					   "fortieth" "fiftieth" "sixtieth"
					   "seventieth" "eightieth"
					   "ninetieth"]
					 </ .N 10>>>)>
		      <SET N 0>)>
	       <COND (<AND <NOT <0? .N>> <0? .M>>
		      <CARDINAL .N <- .L 1> .ORDINAL? .OUTCHAN>)>)
	      (ELSE
	       <COND (.ORDINAL?
		      <COND (<L=? .N 9>
			     <PRINC
			      <NTH '["first" "second" "third" "fourth" "fifth"
				      "sixth" "seventh" "eighth" "ninth"]
				    .N>>)
			    (ELSE
			     <CARDINAL .N 0 <> .OUTCHAN>
			     <PRINC "th">)>)
		     (T
		      <PRINC <NTH '["one" "two" "three" "four" "five"
				    "six" "seven" "eight" "nine" "ten"
				    "eleven" "twelve" "thirteen" "fourteen"
				    "fifteen" "sixteen" "seventeen" "eighteen"
				    "nineteen"]
				  .N>>)>)>>

\

"~nA Character string.  If there is an n then pad the string with spaces 
     on the right to make it n long.  If it doesn't fit, ignore n.
 (A m n minpad padchar) as a control list element means pad to occupy at least
     m columns, or if longer than that to begin with, pad to occupy
     m+p*n columns for some nonnegative integer p.
     at least minpad pad characters are produced in any case
     (default if not supplied = 1).
     padchar is used for padding purposes (default if not supplied = space).
      if padchar is not a number, the first character in STRING of it is used.
     A mode can actually be used to PRINC anything, not just a string."

<DEFINE POBJ (OBJ
	      "OPTIONAL" (M 0) (N 0) (MINPAD 1) (PCHAR !\ )
	      "AUX" (X 0) RW (OUTCHAN .OUTCHAN) (OC <14 .OUTCHAN>)
		    O (OL <16 .OUTCHAN>))
	#DECL ((OBJ) ANY (M N MINPAD X RW OC OL O) FIX (PCHAR) CHARACTER
	       (OUTCHAN) CHANNEL)
	<PRINC .OBJ>
	<SET O <14 .OUTCHAN>>
	<COND (<N==? .OL <16 .OUTCHAN>>)
	      (ELSE
	       <COND (<L=? <SET X <- .M <SET RW <- <14 .OUTCHAN> .OC>>>> 0>
		      <COND (<G? .N 0>
			     <SET X <- <* </ <+ .RW .N> .N> .N> .RW>>)>)>
	       <PCHARS .PCHAR <MAX .MINPAD .X>>)>
	.O>

"~m,nH Princ string under a header"

<DEFINE PHSTR (STR
	       "OPTIONAL" (M 0) (N 0) (PCHAR !\ )
	       "AUX" (X 0) (OUTCHAN .OUTCHAN) (OC <14 .OUTCHAN>)
	       O (OL <16 .OUTCHAN>))
	#DECL ((STR) STRING (M N MINPAD X OC OL O) FIX (PCHAR) CHARACTER
	       (OUTCHAN) CHANNEL)
	<PRINTSTRING .STR .OUTCHAN <MIN .M <LENGTH .STR>>>
	<SET O <14 .OUTCHAN>>
	<COND (<N==? .OL <16 .OUTCHAN>>)
	      (<G? <SET X <+ <- .M <- .O .OC>> .N>> 0>
	       <PCHARS .PCHAR .X>)>
	.O>

"same as above, but right justify string"

<DEFINE PHSTR1 (STR
	       "OPTIONAL" (M 0) (N 0) (PCHAR !\ )
	       "AUX" (OUTCHAN .OUTCHAN) (L <LENGTH .STR>) X O)
	#DECL ((STR) STRING (M N L X O) FIX (PCHAR) CHARACTER
	       (OUTCHAN) CHANNEL)
	<COND (<G? <SET X <- .M .L>> 0> <PCHARS .PCHAR .X>)>
	<PRINTSTRING .STR .OUTCHAN <MIN .M .L>>
	<SET O <14 .OUTCHAN>>
	<PCHARS .PCHAR .N>
	.O>

"~S  Prin1 an object.  Just like ~A (including parameters) but uses PRIN1."

<DEFINE POBJ1 (OBJ
	       "OPTIONAL" (M 0) (N 0) (MINPAD 1) (PCHAR !\ )
	       "AUX" (X 0) RW (OUTCHAN .OUTCHAN) (OC <14 .OUTCHAN>)
	       O (OL <16 .OUTCHAN>))
	#DECL ((OBJ) ANY (M N MINPAD X RW OC OL O) FIX (PCHAR) CHARACTER
	       (OUTCHAN) CHANNEL)
	<PRIN1 .OBJ>
	<SET O <14 .OUTCHAN>>
	<COND (<N==? .OL <16 .OUTCHAN>>)
	      (ELSE
	       <COND (<L=? <SET X <- .M <SET RW <- <14 .OUTCHAN> .OC>>>> 0>
		      <COND (<G? .N 0>
			     <SET X <- <* </ <+ .RW .N> .N> .N> .RW>>)>)>
	       <PCHARS .PCHAR <MAX .MINPAD .X>>)>
	.O>

"~C  One character, in any acceptable form.
     Control and meta bits print as alpha, beta, epsilon."

<DEFINE PCHAR (C "AUX" (OUTCHAN .OUTCHAN) (O <14 .OUTCHAN>)) 
	#DECL ((C) <PRIMTYPE WORD> (OUTCHAN) CHANNEL (O) FIX)
	<SET C <CHTYPE .C FIX>>
	<COND (<L? .C 32> <PRINC !\^> <PRINC <ASCII <+ .C 64>>>)
	      (<==? .C 177> <PRINC "^?">)
	      (ELSE <PRINC .C>)>
	.O>

"~n* Ignore the next n args.  n defaults to 1."

"~n% Insert n newlines.  n defaults to 1."

<DEFINE PCRLFS ("OPTIONAL" (N 1) "AUX" (OUTCHAN .OUTCHAN))
	#DECL ((N) FIX (OUTCHAN) CHANNEL)
	<REPEAT ()
		<CRLF>
		<AND <0? <SET N <- .N 1>>> <RETURN>>>
	0>

"~n| Insert n formfeeds.  n defaults to 1."

"~nX Insert n spaces.  n defaults to 1."

"~n~ Insert n tildes.  n defaults to 1."

<DEFINE PCHARS (C "OPTIONAL" (N 1) "AUX" (OUTCHAN .OUTCHAN))
	#DECL ((C) CHARACTER (N) FIX (OUTCHAN) CHANNEL)
	<REPEAT ()
		<PRINC .C>
		<AND <0? <SET N <- .N 1>>> <RETURN>>>>

"~&  Perform the FRESH-LINE operation on the stream."

<DEFINE PFRESH-LINE ("AUX" (OUTCHAN .OUTCHAN))
	#DECL ((OUTCHAN) CHANNEL)
	<COND (<NOT <0? <14 .OUTCHAN>>> <CRLF>)>
	0>

"~n,mT  Tab to column n+pm, for p an integer >= 0."

<DEFINE PCOLUMN (N "OPTIONAL" (M 0) (S 8))
	#DECL ((N M S) FIX)
	<INDENT-TO <SET N <+ .N <* .M .S>>>>
	.N>

"~Q  Apply the next arg to no arguments.
 (Q ...) Apply the next arg to the (unevaluated) parameters following the Q."

"~P  Insert an 's', unless the next arg is 1."

<DEFINE PLURAL (N "AUX" (OUTCHAN .OUTCHAN))
	#DECL ((N) <OR FIX FLOAT> (OUTCHAN) CHANNEL)
	<COND (<TYPE? .N FIX> <OR <1? .N> <PRINC !\s>>)
	      (<NOT <1? .N>> <PRINC !\s>)>>

\ 

"Here is where the format macro is actually expanded, and what follows is all
useless once you are compiled."

"<FORMAT channel control-arg \"TUPLE\" args>
   If channel is false, cons up and return a string.
   If channel is T, use .OUTCHAN"

<DEFMAC FORMAT ("ARGS" A "AUX" CH STR ARG P) 
	#DECL ((A ARG) LIST (CH) ANY (STR) STRING (VALUE P) FORM)
	<COND (<LENGTH? .A 1> <ERROR TOO-FEW-ARGS FORMAT>)>
	<SET CH <1 .A>>
	<COND (<==? .CH T> <SET CH '.OUTCHAN>)>
	<SET STR <2 .A>>
	<SET ARG <REST .A 2>>
	<SET P
	     <FORM PROG <LIST <LIST OUTCHAN .CH>>
		   #DECL ((OUTCHAN) <SPECIAL CHANNEL>)>>
	<FSTRING .STR (T !.ARG) <REST .P 2> .P>
	.P>

"This function is for a string format control arg"

<DEFINE FSTRING (STR TARG FL P "AUX" S)
	#DECL ((STR) STRING (FL TARG) LIST (S) <OR FALSE STRING> (P) FORM)
	<REPEAT ()
		<COND (<EMPTY? .STR> <RETURN>)
		      (<==? <1 .STR> !\~>
		       <SET STR <FCALL <REST .STR> .TARG .FL .P>>
		       <OR <LENGTH? .FL 1> <SET FL <REST .FL>>>)
		      (<SET S <MEMQ !\~ .STR>>
		       <PUTREST .FL
				<SET FL
				     (<FORM PRINC
					    <SUBSTRUC .STR 0
						      <- <LENGTH .STR>
							 <LENGTH .S>>>>)>>
		       <SET STR .S>)
		      (ELSE
		       <PUTREST .FL (<FORM PRINC .STR>)>
		       <RETURN>)>>>

"This function is for doing a single escape sequence"

<DEFINE FCALL (STR TARG FL P
	       "AUX" (FT <FORM PRINC>) (F <CHTYPE .FT LIST>) S C N V
	       (COLON <>) (ATSIGN <>))
	#DECL ((STR S) STRING (C) CHARACTER (TARG FL F) LIST (P) FORM (N) FIX
	       (FT) <OR FORM FALSE> (V) ANY)
	<SET S <FARGS .STR .TARG .F>>
	<REPEAT ()
		<COND (<EMPTY? .S> <ERROR NO-CONTROL-ARGUMENT?>)>
		<SET C <1 .S>>
		<COND (<==? .C !\:> <SET COLON T>)
		      (<==? .C !\@> <SET ATSIGN T>)
		      (ELSE <RETURN>)>
		<SET S <REST .S>>>
	<COND (<AND <G=? <ASCII .C> <ASCII !\a>>
		    <L=? <ASCII .C> <ASCII !\z>>>
	       <SET C <ASCII <- <ASCII .C> 32>>>)>
	<COND (<==? .C !\.>
	       <FVAR .P <SET V <FNEXT .TARG>>>
	       <PUT .FT 1 SET>
	       <PUTREST .FT (.V '<14 .OUTCHAN>)>)
	      (<==? .C !\=>
	       <FVAR .P <SET V <FNEXT .TARG>>>
	       <PUT .FL 1 <FORM SET .V <1 .FL>>>
	       <SET FT <>>)
	      (<==? .C !\D>
	       <PUT .FT 1 PFIX>
	       <PUTREST .FT (<FNEXT .TARG> !<REST .FT>)>)
	      (<==? .C !\F>
	       <PUT .FT 1 PFLOAT>
	       <PUTREST .FT (<FNEXT .TARG> !<REST .FT>)>)
	      (<==? .C !\A>
	       <PUT .FT 1 POBJ>
	       <PUTREST .FT (<FNEXT .TARG> !<REST .FT>)>)
	      (<==? .C !\H>
	       <PUT .FT 1 <COND (.COLON PHSTR1) (ELSE PHSTR)>>
	       <PUTREST .FT (<FNEXT .TARG> !<REST .FT>)>)
	      (<==? .C !\S>
	       <PUT .FT 1 POBJ1>
	       <PUTREST .FT (<FNEXT .TARG> !<REST .FT>)>)
	      (<==? .C !\C>
	       <PUT .FT 1 PCHAR>
	       <PUTREST .FT (<FNEXT .TARG> !<REST .FT>)>)
	      (<==? .C !\R>
	       <PUT .FT 1 <COND (.ATSIGN PROMAN)
				(ELSE PCARDINAL)>>
	       <COND (.COLON <PUTREST .FT (T)>)>
	       <PUTREST .FT (<FNEXT .TARG> !<REST .FT>)>)
	      (<==? .C !\%> <PUT .FT 1 PCRLFS>)
	      (<MEMQ .C "|X~">
	       <PUT .FT 1 PCHARS>
	       <PUTREST .FT
			(<COND (<==? .C !\|> <ASCII 12>)
			       (<==? .C !\X> <ASCII 32>)
			       (!\~)>
			 !<REST .FT>)>)
	      (<==? .C !\&>
	       <PUT .FT 1 PFRESH-LINE>)
	      (<==? .C !\T>
	       <PUT .FT 1 PCOLUMN>)
	      (<==? .C !\P>
	       <PUT .FT 1 PLURAL>
	       <PUTREST .FT (<FNEXT .TARG> !<REST .FT>)>)
	      (<==? .C !\Q>
	       <SET FT <FNEXT .TARG>>)
	      (<==? .C !\*>
	       <COND (<LENGTH? .FT 1> <SET N 1>)
		     (ELSE <SET N <2 .FT>>)>
	       <REPEAT ()
		       <FNEXT .TARG>
		       <AND <0? <SET N <- .N 1>>> <RETURN>>>)>
	<AND .FT <PUTREST .FL (.FT)>>
	<REST .S>>

<DEFINE FVAR (P V "AUX" (PL <2 .P>) (DL <3 .P>))
	#DECL ((P) FORM (V) ANY (PL) LIST (DL) DECL)
	<COND (<NOT <TYPE? .V ATOM>>
	       <ERROR COLUMN-MARKER-NOT-ATOM .V FORMAT>)
	      (<MEMQ .V .PL>)
	      (ELSE
	       <PUTREST .PL (.V !<REST .PL>)>
	       <PUTREST <REST .DL> ((.V) FIX)>)>>

"Parses out the args for a escape sequence"

<DEFINE FARGS (STR TARG F "AUX" (N 0) (N? <>) C) 
	#DECL ((STR) STRING (N C) FIX (N?) <OR ATOM FALSE> (F TARG) LIST)
	<REPEAT ()
		<COND (<EMPTY? .STR> <ERROR NO-COMMAND FORMAT>)>
		<SET C <ASCII <1 .STR>>>
		<COND (<AND <G=? .C <ASCII !\0>> <L=? .C <ASCII !\9>>>
		       <SET N <+ <* .N 10> <- .C <ASCII !\0>>>>
		       <SET N? T>)
		      (ELSE
		       <AND .N? <PUTREST .F <SET F (.N)>>>
		       <SET N? <>>
		       <SET N 0>
		       <COND (<==? .C <ASCII !\,>>)
			     (<==? .C <ASCII !\'>>
			      <REPEAT ((ST <>))
				      #DECL ((ST) <OR FALSE STRING CHARACTER>)
				      <COND (<EMPTY? <SET STR <REST .STR>>>
					     <ERROR QUOTED-ARG-NOT-FOUND>)>
				      <COND (.ST
					     <SET ST <STRING .ST <1 .STR>>>)
					    (ELSE <SET ST <1 .STR>>)>
				      <COND (<OR <EMPTY? <REST .STR>>
						 <N==? <2 .STR> !\'>>
					     <PUTREST .F <SET F (.ST)>>
					     <RETURN>)
					    (ELSE <SET STR <REST .STR>>)>>)
			     (<==? .C <ASCII !\#>>
			      <PUTREST .F <SET F (<FNEXT .TARG>)>>)
			     (ELSE <RETURN .STR>)>)>
		<SET STR <REST .STR>>>>

"Eats one argument from the call"

<DEFINE FNEXT (TARG "AUX" A) 
	#DECL ((TARG) LIST (A) ANY)
	<COND (<LENGTH? .TARG 1> <ERROR TOO-FEW-ARGS FORMAT>)
	      (ELSE <SET A <2 .TARG>> <PUTREST .TARG <REST .TARG 2>> .A)>>

<ENDPACKAGE>
