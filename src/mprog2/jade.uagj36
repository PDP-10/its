
<PACKAGE "JADE">

<ENTRY JADE-INSTANCE
       MUDDLEOB-USES
       CONCEPT
       USE-LIST
       DOWNS?
       DOWNS
       CNTH?
       CNTH
       USES
       SET-USES
       ADD-USE
       ADD-NUSE
       NCONCEPT
       DELETE-USE
       DELETE-JOBJ
       DELETE-USE&GC
       DELETE&GC
       DELETE&GCD
       REPLACE-ELE
       SUBST-ELE
       MERGE
       MATCH
       BMATCH
       FIND-COS
       FIND-CO>

<SETG INST-CNT 0				   ;"instance stuff due to ERB">

<GDECL (INST-CNT) FIX>

<DEFINE JADE-INSTANCE (X) 
	<NCONCEPT INSTANCE .X <SETG INST-CNT <+ ,INST-CNT 1>>>>

<SET MUDDLEOB-USES (HOWDY)		       ;"reset this to reset the world">

<NEWTYPE CONCEPT LIST
 ;
"1 of which is a vector of the down-structure (DOWNS) and the REST of which is the
use-list"
	 '<LIST DOWNS>>

<DEFINE CONCEPT-PRINT (CO "AUX" (DO <DOWNS .CO>))
	#DECL ((CO) CONCEPT (DO) DOWNS)
	<COND (<==? <CNTH .CO 1> INSTANCE>
	       <PRIN1 <CNTH .CO 2>>
	       <PRINC "-#INST-">
	       <PRINC <CNTH .CO 3>>)
	      (<PRIN1 <CHTYPE .DO VECTOR>>)>>

<PRINTTYPE CONCEPT ,CONCEPT-PRINT>

<NEWTYPE USE-LIST LIST>

<NEWTYPE DOWNS VECTOR>

<SETG DOWNS 1			     ;"returns the down structure of a CONCEPT">

<DEFINE DOWNS? (FROB) 
	<COND (<TYPE? .FROB CONCEPT> <DOWNS .CONCEPT>)
	      (ELSE #FALSE (DOWNS-OF-NON-CONCEPT))>>

<MANIFEST DOWNS>

<DEFINE CNTH (CONC NUM "AUX" (DNS <DOWNS .CONC>)) 
	#DECL ((CONC) CONCEPT (NUM) FIX)
        ;"returns the nth element of the down structure or false if n too large"
	<COND (<NOT <LENGTH? .DNS <- .NUM 1>>> <NTH .DNS .NUM>)
	      (ELSE #FALSE (CONCEPT-NOT-LONG-ENOUGH))>>

<DEFINE CNTH? (FROB NUM) 
	#DECL ((NUM) FIX)
        ;"returns the nth element of the down structure or false if n too large"
	<COND (<TYPE? .FROB CONCEPT> <CNTH .FROB .NUM>)
	      (ELSE #FALSE (CNTH?-OF-NON-CONCEPT))>>

<DEFINE USES (FROB) 
	#DECL ((VALUE) <OR FALSE USE-LIST>)     ;"returns the uses of a CONCEPT"
	<COND (<TYPE? .FROB CONCEPT> <CHTYPE <REST .FROB> USE-LIST>)
	      (ELSE <GETPROP .FROB .MUDDLEOB-USES>)>>

<DEFINE SET-USES (JOBJ "OPTIONAL" (NUSES <>) ) 
	#DECL ((NUSES VALUE) <PRIMTYPE LIST>)
					  ;"sets the use-list of FROB to NUSES."
	<COND (<TYPE? .JOBJ CONCEPT>
	       <PUTREST .JOBJ .NUSES>
	       <CHTYPE .NUSES USE-LIST>)
	      (<EMPTY? .NUSES> <PUTPROP .JOBJ .MUDDLEOB-USES> <>)
	     ;(<SET OUSES <GETPL .JOBJ .MUDDLEOB-USES>>
	       <SETLOC .OUSES <CHTYPE .NUSES USE-LIST>>)
	      (ELSE
	       <PUTPROP .JOBJ .MUDDLEOB-USES <CHTYPE .NUSES USE-LIST>>
	       <CHTYPE .NUSES USE-LIST>)>>

<DEFINE ADD-USE (FROB USE "AUX" (OUSES <USES .FROB>)) 
	#DECL ((VALUE OUSES) <OR FALSE USE-LIST>)
	<COND (<MEMQ .USE .OUSES> .OUSES)
	      (ELSE <SET-USES .FROB (.USE !.OUSES)>)>>

<DEFINE ADD-NUSE (FROB NUSE "AUX" (OUSES <USES .FROB>)) 
	#DECL ((OUSES VALUE) <OR FALSE USE-LIST>)
	<SET-USES .FROB (.NUSE !.OUSES)>>

<DEFINE CONCEPT ("TUPLE" TUP) 
	#DECL ((VALUE) CONCEPT)
	 ;"like FIND-CO except that if the concept doesn't exist, it is created"
	<COND (<FIND-CO !.TUP>) (<NCONCEPT !.TUP>)>>

<DEFINE NCONCEPT ("TUPLE" TUP
		  "AUX" (NOB <CHTYPE (<CHTYPE [!.TUP] DOWNS>) CONCEPT>))
        ;"creates and returns new concept. can be used for making new instances"
	<MAPF <> <FUNCTION (DOWN-OB) <ADD-USE .DOWN-OB .NOB>> .TUP>
	.NOB>

<DEFINE DELETE-USE (FROB OUSE "AUX" (USEL <USES .FROB>)) 
   #DECL ((USEL) <OR FALSE USE-LIST>)
   <COND
    (<EMPTY? .USEL> <>)
    (<==? .OUSE <1 .USEL>> <SET-USES .FROB <REST .USEL>>)
    (ELSE
     <MAPR <>
	   <FUNCTION (RUSEL) 
		   <COND (<LENGTH? .RUSEL 1> <>)
			 (<==? .OUSE <2 .RUSEL>>
			  <MAPLEAVE <PUTREST .RUSEL <REST .RUSEL 2>>>)>>
	   .USEL>)>>

<DEFINE DELETE-JOBJ (OCONCEPT) 
	#DECL ((OCONCEPT) <OR CONCEPT ATOM>)
	<COND (<TYPE? .OCONCEPT CONCEPT>
	       <MAPF <>
		     <FUNCTION (DOWN-OB) <DELETE-USE .DOWN-OB .OCONCEPT>>
		     <DOWNS .OCONCEPT>>)>
	<MAPF <> ,DELETE-JOBJ <USES .OCONCEPT>>>

<DEFINE DELETE-USE&GC (FROB OUSE "AUX" (USEL <USES .FROB>)) 
   #DECL ((USEL) <OR FALSE USE-LIST>)
   <COND
    (<EMPTY? .USEL> <>)
    (<==? .OUSE <1 .USEL>>
     <COND (<AND <LENGTH? .USEL 1> <TYPE? .FROB CONCEPT>>
	    <MAPF <>
		  <FUNCTION (DOWN-OB) <DELETE-USE&GC .DOWN-OB .FROB>>
		  <DOWNS .FROB>>)
	   (ELSE <SET-USES .FROB <REST .USEL>>)>)
    (ELSE
     <MAPR <>
	   <FUNCTION (RUSEL) 
		   <COND (<LENGTH? .RUSEL 1>)
			 (<==? .OUSE <2 .RUSEL>>
			  <MAPLEAVE <PUTREST .RUSEL <REST .RUSEL 2>>>)>>
	   .USEL>)>>

<DEFINE DELETE&GC (TH) 
	#DECL ((TH) <OR CONCEPT ATOM>)
	<COND (<TYPE? .TH CONCEPT>
	       <MAPF <>
		     <FUNCTION (DOWN-OB) <DELETE-USE&GC .DOWN-OB .TH>>
		     <DOWNS .TH>>)>
	<MAPF <> ,DELETE&GC <USES .TH>>>

<DEFINE DELETE&GCD (TH) 
	#DECL ((TH) <OR CONCEPT ATOM>)
	<COND (<TYPE? .TH CONCEPT>
	       <MAPF <>
		     <FUNCTION (DOWN-OB) <DELETE-USE&GC .DOWN-OB .TH>>
		     <DOWNS .TH>>)>
	<MAPF <> ,DELETE-JOBJ <USES .TH>>>

<DEFINE REPLACE-ELE (CON POS NELE)
		    ;"replace the POSth element in the downs of .CON with .NELE"
	#DECL ((CON) CONCEPT)
	<DELETE-USE&GC <NTH <DOWNS .CON> .POS> .CON>
	<PUT <DOWNS .CON> .POS .NELE>
	<ADD-USE .NELE .CON>>

<DEFINE SUBST-ELE (CON OELE NELE)
      ;"substitute the first occurance, in the downs of .CON, of .OELE in .NELE"
	#DECL ((CON) CONCEPT)
	<MAPR <>
	      <FUNCTION (RD) 
		      <COND (<==? .OELE <1 .RD>>
			     <PUT .RD 1 .NELE>
			     <DELETE-USE&GC .OELE .CON>
			     <ADD-USE .NELE .CON>
			     <MAPLEAVE>)>>
	      <DOWNS .CON>>>

<DEFINE MERGE (MERGED OLD)			       ;"make .OLD into .MERGED"
	<MAPF <>
	      <FUNCTION (CON) 
		      <MAPR <>
			    <FUNCTION (RD) 
				    <COND (<==? .OLD <1 .RD>>
					   <PUT .RD 1 .MERGED>
					   <ADD-USE .MERGED .CON>
					   <MAPLEAVE>)>>
			    <DOWNS .CON>>>
	      <USES .OLD>>
	<MAPF <>
	      <FUNCTION (DWN) <DELETE-USE&GC .DWN .OLD>>
	      <DOWNS .OLD>>
	<SET-USES .OLD <>>
	.MERGED>

<NEWTYPE MATCH VECTOR
	        ;"used by the finding functions to match several possibilities">

<EVALTYPE MATCH VECTOR>

<NEWTYPE BMATCH VECTOR
   ;"used by the finding functions to match anything but several possibilities">

<EVALTYPE BMATCH VECTOR>

<DEFINE FIND-COS ("TUPLE" TUP "AUX" (LTUP <LENGTH .TUP>))
 ;"returns all objects, if they exist in data-base, whose down structure is .TUP or
longer, except if the an element of the tuple is of type #MATCH, in which case any
of the elements of the #MATCH will match, or of type #BMATCH, in which case anything
but the elements of the #BMATCH will match.  THERE MUST BE ONE ELEMENT OF THE TUPLE
WHICH IS NOT OF TYPE MATCH OR BMATCH."
   #DECL ((LTUP) FIX (VALUE) <UVECTOR [REST CONCEPT]>)
   <MAPF ,UVECTOR
    <FUNCTION (FROB)<COND (<AND <TYPE? .FROB CONCEPT>
				<L=? .LTUP <LENGTH <DOWNS .FROB>>>
				<MAPF <>
				      <FUNCTION (DE TE) 
					      <COND (<==? .DE .TE>)
						    (<AND <TYPE? .TE MATCH>
							  <MEMQ .DE .TE>>)
						    (<AND <TYPE? .TE BMATCH>
							  <NOT <MEMQ .DE .TE>>>)
						    (ELSE <MAPLEAVE <>>)>>
				      <DOWNS .FROB>
				      .TUP>>
			   .FROB)
			  (ELSE <MAPRET>)>>
    <BGUL .TUP .LTUP>>>

<DEFINE FIND-CO ("TUPLE" TUP "AUX" (LTUP <LENGTH .TUP>))
 ;"like FIND-COS except that one thing that matches is returned, rather than a vector."
   #DECL ((LTUP) FIX (VALUE) <OR FALSE CONCEPT>)
   <MAPF <>
    <FUNCTION (FROB) 
	    <COND (<AND <TYPE? .FROB CONCEPT>
			<L=? .LTUP <LENGTH <DOWNS .FROB>>>
			<MAPF <>
			      <FUNCTION (DE TE) 
				      <COND (<==? .DE .TE>)
					    (<AND <TYPE? .TE MATCH>
						  <MEMQ .DE .TE>>)
					    (<AND <TYPE? .TE BMATCH>
						  <NOT <MEMQ .DE .TE>>>)
					    (ELSE <MAPLEAVE <>>)>>
			      <DOWNS .FROB>
			      .TUP>>
		   <MAPLEAVE .FROB>)
		  (ELSE #FALSE (CONCEPT-NOT-FOUND))>>
    <BGUL .TUP .LTUP>>>

<DEFINE BGUL (TUP LTUP) 
	#DECL ((TUP) TUPLE (LTUP) FIX)
	<COND (<AND <G=? .LTUP 2> <USES <2 .TUP>>>)
	      (<AND <G=? .LTUP 3> <USES <3 .TUP>>>)
	      (<MAPF <>
		     <FUNCTION (ELT) <AND <USES .ELT> <MAPLEAVE <USES .ELT>>>>
		     <AND <G=? .LTUP 4> <REST .TUP 3>>>)
	      (<USES <1 .TUP>>)>>

<ENDPACKAGE>
