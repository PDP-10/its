<PACKAGE "MCLEAN">

<ENTRY MOBY-CLEAN QUIET-CLEAN? MACRO-SURVIVORS PACKAGE-VICTIMS DONT-REMOVE>

<USE "GLUE">

<SETG QUIET-CLEAN? <>>		;"don't print garbage being flushed if T"
<SETG FLUSHED ()>		;"this is really in GLUE"
<SETG MACRO-SURVIVORS ()>	;"list of MACROs that are needed later"
<SETG PACKAGE-VICTIMS ()>	;"list of PACKAGEs that die regardless"
<SETG DONT-REMOVE []>		;"pnames of atoms that are kept regardless"
<SETG GRSUBR <>>		;"group rsubr of this group"
<GDECL (QUIET-CLEAN?) <OR ATOM FALSE>
       (FLUSHED) <LIST [REST ATOM]>
       (MACRO-SURVIVORS) <LIST [REST ATOM]>
       (PACKAGE-VICTIMS) <LIST [REST STRING]>
       (DONT-REMOVE) <VECTOR [REST STRING]>
       (GRSUBR) <OR RSUBR FALSE>>

<DEFINE MOBY-CLEAN (GRPNAME "OPTIONAL" (Q? ,QUIET-CLEAN?)
		    "AUX" GRP RGRP E F (P? <>) (PCK <>) (DEAD-PCKS ())
		    (LPACK <>) (OUTCHAN .OUTCHAN))
	#DECL ((GRPNAME) ATOM (GRP RGRP) LIST (P? Q?) <OR ATOM FALSE>
	       (E F) ANY (PCK) <OR FALSE LIST> (DEAD-PCKS) <LIST [REST STRING]>
	       (LPACK) <OR FALSE STRING> (OUTCHAN) CHANNEL)
	<COND (<AND <ASSIGNED? .GRPNAME> <TYPE? ..GRPNAME LIST>>
	       <SET GRP ..GRPNAME>)
	      (ELSE <ERROR NOT-A-GROUP .GRPNAME>)>
	<SETG GRSUBR <>>
	<REPEAT ()
		<COND (<LENGTH? .GRP 1> <RETURN .LPACK>)
		      (<TYPE? <SET E <1 <SET RGRP <REST .GRP>>>> STRING>
		       <COND (<NOT .Q?>
			      <PRINC "Flushing a string.">
			      <CRLF>)>
		       <SET P? T>)
		      (<AND <TYPE? .E ATOM> <=? <SPNAME .E> "">>
		       <SET P? T>)
		      (<TYPE? .E FORM>
		       <EXPAND-MANIFESTS .E>
		       <COND (<OR <EMPTY? .E>
				  <==? <1 .E> GDECL>
				  <==? <1 .E> MANIFEST>
				  <==? <1 .E> BLOAT>
				  <AND <==? <1 .E> DEFMAC>
				       <NOT <MEMBER <2 .E> ,MACRO-SURVIVORS>>>
				  <=? <SPNAME <1 .E>> "MSETG">>
			      <COND (<NOT .Q?>
				     <PRINC "Flushing a ">
				     <PRINC <1 .E>>
				     <PRINC !\.>
				     <CRLF>)>
			      <SET P? T>)
			     (<AND <==? <LENGTH .E> 4>
				   <==? <1 .E> AND>
				   <=? <2 .E> '<ASSIGNED? GLUE>>
				   <=? <3 .E> '.GLUE>
				   <TYPE? <4 .E> FORM>
				   <==? <LENGTH <SET F <4 .E>>> 4>
				   <==? <1 .F> PUT>
				   <==? <3 .F> GLUE>>
			      <PRINC "Flushing GLUE bits FORM.">
			      <CRLF>
			      <SET P? T>)
			     (<==? <1 .E> PACKAGE>
			      <SET LPACK <2 .E>>
			      <SET PCK .GRP>)
			     (<AND .PCK
				   <==? <1 .E> ENDPACKAGE>
				   <EMPTY-PACKAGE? <REST .PCK> .RGRP>>
			      <SET DEAD-PCKS (.LPACK !.DEAD-PCKS)>
			      <COND (<NOT .Q?>
				     <PRINC "Flushing PACKAGE ">
				     <PRINC .LPACK>
				     <PRINC !\.>
				     <CRLF>)>
			      <REMOVE-PACKAGE .LPACK>
			      <SET GRP .PCK>
			      <SET P? T>) 
			     (<AND <OR <==? <1 .E> PUT>
				       <==? <1 .E> PUTPROP>>
				   <==? <LENGTH .E> 4>
				   <==? <3 .E> DECL>>
			      <COND (<NOT .Q?>
				     <PRINC "Flushing associative DECL.">
				     <CRLF>)>
			      <SET P? T>)
			     (<AND <==? <1 .E> SETG>
				   <==? <LENGTH .E> 3>>
			      <COND (<NOT <OBLIST? <2 .E>>>
				     <COND (<NOT .Q?>
					    <PRINC
					      "Flushing SETG of dead atom ">
					    <PRIN1 <2 .E>>
					    <PRINC !\.>
					    <CRLF>)>
				     <SET P? T>)
				    (<AND <NOT ,GRSUBR> <TYPE? <3 .E> RSUBR>>
				     <SETG GRSUBR <3 .E>>
				     <COND (<NOT .Q?>
					    <PRINC "Found group Rsubr: ">
					    <PRIN1 <2 .E>>
					    <PRINC !\.>
					    <CRLF>)>)
				    (<AND <TYPE? <3 .E> FIX OFFSET>
					  <MANIFEST? <2 .E>>>
				     <COND (<NOT .Q?>
					    <PRINC "Flushing MANIFEST ">
					    <WIPE <PRIN1 <2 .E>>>
					    <PRINC !\.>
					    <CRLF>)>
				     <SET P? T>)>)
			     (<OR <==? <1 .E> USE> <==? <1 .E> USE-TOTAL>>
			      <COND (<CLEAN-USES .E .DEAD-PCKS .Q?>)
				    (ELSE
				     <COND (<NOT .Q?>
					    <PRINC "Flushing USE FORM.">
					    <CRLF>)>
				     <SET P? T>)>)
			     (<==? <1 .E> ENTRY>
			      <COND (<CLEAN-ENTRIES .E .Q?>)
				    (ELSE
				     <COND (<NOT .Q?>
					    <PRINC "Flushing ENTRY FORM.">
					    <CRLF>)>
				     <SET P? T>)>)>)>
		<COND (.P? <PUTREST .GRP <REST .RGRP>> <SET P? <>>)
		      (ELSE <SET GRP .RGRP>)>>>

"EMPTY-PACKAGE? -- determine if remains of package are worthless."

<DEFINE EMPTY-PACKAGE? (START END)
	#DECL ((START END) LIST)
	<MAPR <>
	      <FUNCTION (L "AUX" E)
		   #DECL ((L) LIST (E) ANY)
		   <COND (<==? .L .END> <MAPLEAVE T>)
			 (<TYPE? <SET E <1 .L>> FORM>
			  <COND (<AND <NOT <EMPTY? .E>>
				      <NOT <MEMQ <1 .E>
						 '[PACKAGE USE USE-TOTAL]>>>
				 <MAPLEAVE <>>)>)>
		   T>
	      .START>>

<DEFINE CLEAN-ENTRIES (FRM Q? "AUX" (F <CHTYPE .FRM LIST>) A V
		       (OUTCHAN .OUTCHAN))
	#DECL ((FRM) FORM (Q?) <OR ATOM FALSE> (F) LIST (A) ATOM
	       (OUTCHAN) CHANNEL (V) ANY)
	<REPEAT ()
		<COND (<LENGTH? .F 1>
		       <RETURN <NOT <EMPTY? <REST .FRM>>>>)>
		<COND (<GASSIGNED? <SET A <2 .F>>>
		       <COND (<OR <MANIFEST? .A>
				  <MEMQ .A ,FLUSHED>
				  <DEAD-RSUBR? <SET V ,.A>>
				  <AND <TYPE? .V RSUBR-ENTRY>
				       <DEAD-RSUBR? <2 <1 .V>>>>>
			      <COND (<NOT .Q?>
				     <PRINC "Flushing ENTRY ">
				     <WIPE <PRIN1 .A>>
				     <PRINC !\.>
				     <CRLF>)>
			      <PUTREST .F <REST .F 2>>
			      <AGAIN>)>)>
		<SET F <REST .F>>>>

<DEFINE DEAD-RSUBR? (V)
	#DECL ((V) ANY)
	<AND <TYPE? .V RSUBR>
	     <TYPE? <1 .V> CODE>
	     <EMPTY? <1 .V>>>>

<DEFINE CLEAN-USES (FRM DEAD Q? "AUX" (F <CHTYPE .FRM LIST>) A
		    (OUTCHAN .OUTCHAN))
	#DECL ((FRM) FORM (F) LIST (DEAD) <LIST [REST STRING]>
	       (Q?) <OR ATOM FALSE> (A) STRING (OUTCHAN) CHANNEL)
	<REPEAT ()
		<COND (<LENGTH? .F 1>
		       <RETURN <NOT <EMPTY? <REST .FRM>>>>)>
		<COND (<OR <MEMBER <SET A <2 .F>> .DEAD>
			   <MEMBER .A ,PACKAGE-VICTIMS>>
		       <COND (<NOT .Q?>
			      <PRINC "Flushing USE ">
			      <PRINC .A>
			      <PRINC !\.>
			      <CRLF>)>
		       <PUTREST .F <REST .F 2>>
		       <AGAIN>)>
		<SET F <REST .F>>>>

<DEFINE EXPAND-MANIFESTS (S "AUX" R)
	#DECL ((S R) ANY)
	<COND (<MONAD? .S>)
	      (<TYPE? .S FORM LIST>
	       <COND (<AND <TYPE? .S FORM>
			   <==? <LENGTH .S> 2>
			   <==? <1 .S> QUOTE>>)
		     (ELSE
		      <MAPR <>
			    <FUNCTION (E "AUX" (EE <1 .E>))
				 #DECL ((E) LIST (EE) ANY)
				 <COND (<AND <TYPE? <SET EE <1 .E>> FORM>
					     <SET R <EXPMAN .EE>>>
					<PUT .E 1 .R>)
				       (<TYPE? .EE LIST FORM VECTOR>
					<EXPAND-MANIFESTS .EE>)
				       (<TYPE? .EE UVECTOR>
					<PUT .E 1 <SET EE <FORM UVECTOR !.EE>>>
					<EXPAND-MANIFESTS .EE>)>>
			    .S>)>)
	      (<TYPE? .S VECTOR>
	       <MAPR <>
		     <FUNCTION (E "AUX" (EE <1 .E>))
			  #DECL ((E) VECTOR (EE) ANY)
			  <COND (<AND <TYPE? <SET EE <1 .E>> FORM>
				      <SET R <EXPMAN .EE>>>
				 <PUT .E 1 .R>)
				(<TYPE? .EE LIST FORM VECTOR>
				 <EXPAND-MANIFESTS .EE>)
				(<TYPE? .EE UVECTOR>
				 <PUT .E 1 <SET EE <FORM UVECTOR !.EE>>>
				 <EXPAND-MANIFESTS .EE>)>>
		     .S>)
	      (<TYPE? .S UVECTOR>
	       <MAPR <>
		     <FUNCTION (E "AUX" (EE <1 .E>))
			  #DECL ((E) UVECTOR (EE) ANY)
			  <COND (<AND <TYPE? <SET EE <1 .E>> FORM>
				      <SET R <EXPMAN .EE>>>
				 <PUT .E 1 .R>)
				(<TYPE? .EE LIST FORM VECTOR>
				 <EXPAND-MANIFESTS .EE>)
				(<TYPE? .EE UVECTOR>
				 <PUT .E 1 <SET EE <FORM UVECTOR !.EE>>>
				 <EXPAND-MANIFESTS .EE>)>>
		     .S>)>
	.S>

<DEFINE EXPMAN (S "AUX" A)
	#DECL ((S) FORM (A) ANY)
	<COND (<AND <==? <LENGTH .S> 2>
		    <==? <1 .S> GVAL>
		    <TYPE? <SET A <2 .S>> ATOM>
		    <MANIFEST? .A>
		    <GASSIGNED? .A>>
	       ,.A)>>

<DEFINE REMOVE-PACKAGE (S "AUX" P IP O IO (DUST <>))
	#DECL ((S) STRING (P IP DUST) <OR FALSE ATOM> (O) OBLIST
	       (IO) <OR OBLIST FALSE>)
	<COND (<SET P <LOOKUP .S <GET PACKAGE OBLIST>>>
	       <SET O <GET .P OBLIST>>
	       <COND (<SET IP <LOOKUP <STRING !\I .S> .O>>
		      <COND (<SET IO <GET .IP OBLIST>>
			     <SET DUST <REMOVE-OBLIST .IO .IP>>)>)>
	       <REMOVE-OBLIST .O .P .DUST>)>>

<DEFINE REMOVE-OBLIST (O P "OPTIONAL" (DUST <>))
	#DECL ((O) OBLIST (P) ATOM (DUST) <OR ATOM FALSE>)
	<MAPF <>
	      <FUNCTION (B)
		   #DECL ((B) LIST)
		   <MAPF <>
			 <FUNCTION (A)
			      #DECL ((A) <OR ATOM LINK>)
			      <SET DUST
				   <OR <WIPE <GUNASSIGN .A>>
				       .DUST>>>
			 .B>>
	      .O>
	<COND (<NOT .DUST>
	       <PUTPROP .P OBLIST>
	       <PUTPROP .O OBLIST>
	       <REMOVE .P>)>
	.DUST>

<DEFINE WIPE (A "AUX" (GRSUBR ,GRSUBR))
	#DECL ((A) ATOM (GRSUBR) <OR FALSE RSUBR>)
	<COND (<AND <MEMBER <SPNAME .A> ,DONT-REMOVE>
		    <NOT <ERROR DONT-REMOVE .A "<ERRET T> TO REMOVE ANYWAY">>>
	       <>)
	      (<AND .GRSUBR <MEMQ .A .GRSUBR>> <>)
	      (ELSE
	       <REMOVE .A>
	       T)>>

<ENDPACKAGE>
