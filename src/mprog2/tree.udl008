<PACKAGE "END-TREE">

<ENTRY ENDING-TREE ENDING MAKE-ENDING-TREE MAKE-ENDING-LIST
       NULL-ENDING TREE-SHARE ENDLIST>

<USE "MDTABLE" "DATA-SAVE">

<SETG DOT 1>

<SETG DASH 2>

<SETG LAST 3>

<MANIFEST DOT DASH LAST>

<SETG TREE-SHARE ()>

"Make an ending.  Takes letters to peel off and letters to add."

<DEFINE ENDING (EATOM
		"AUX" END ADD REND RADD TAIL X
		      (TR ,ENDING-TREE) MQ BRANCH)
	#DECL ((END ADD) <OR FALSE STRING> (X MQ) <OR FALSE LIST>
	       (REND RADD TAIL) <UVECTOR [REST FIX]>
	       (VALUE) <OR STRING ATOM> (BRANCH) LIST (TR) <LIST [3 LIST]>)
	<COND (<SET END <MEMQ !"+ <SPNAME .EATOM>>>
	       <SET END <STRING <REST .END>>>)
	      (ELSE <ERROR BAD-ENDING .EATOM>)>
	<COND (<SET ADD <MEMQ !"- <SPNAME .EATOM>>>
	       <SET ADD
		    <SUBSTRUC .ADD 1 <- <LENGTH .ADD> <LENGTH .END> 2>>>)
	      (ELSE <SET ADD '"">)>
	<COND (<SET X <MEMBER .ADD ,ESTR>>
	       <SET ADD <1 .X>>)
	      (ELSE <SETG ESTR (.ADD !,ESTR)>)>
	<COND (<SET X <MEMBER .END ,ESTR>>
	       <SET END <1 .X>>)
	      (ELSE <SETG ESTR (.END !,ESTR)>)>
	<COND (<SET MQ <MEMBER <SET REND <RLS-FOR-WORD .END>> ,TSHR>>
	       <SET REND <1 .MQ>>)
	      (ELSE <SETG TSHR (.REND !,TSHR)>)>
	<COND (<SET MQ <MEMBER <SET RADD <RLS-FOR-WORD .ADD>> ,TSHR>>
	       <SET RADD <1 .MQ>>)
	      (ELSE <SETG TSHR (.REND !,TSHR)>)>
	<SET TAIL <REST .REND <- <LENGTH .REND> 1>>>
	<REPEAT ()
		<COND (<0? <1 .TAIL>>
		       <COND (<EMPTY? <SET BRANCH <DOT .TR>>>
			      <PUT .TR ,DOT <SET BRANCH <LIST () () ()>>>)>)
		      (<EMPTY? <SET BRANCH <DASH .TR>>>
		       <PUT .TR ,DASH <SET BRANCH <LIST () () ()>>>)>
		<SET TR .BRANCH>
		<COND (<==? .TAIL .REND>
		       <PUT .TR
			    ,LAST
			    (<VECTOR .EATOM .END .ADD .RADD>
			     !<LAST .TR>)>
		       <RETURN .EATOM>)
		      (ELSE <SET TAIL <BACK .TAIL>>)>>>

\ 

"Hacks one variable:  ENDING-TREE -- the actual ending rls tree
"

<SETG NULL-ENDING [NULL "" "" ![!]]>

<GDECL (ESTR) <LIST [REST STRING]> (TSHR) <LIST [REST UVECTOR]>
       (NULL-ENDING) <VECTOR ATOM STRING STRING UVECTOR>>

<DEFINE MAKE-ENDING-TREE (SIN "OPTIONAL" (OFILE <>) "AUX" (N 0))
	#DECL ((SIN) UVECTOR (N VALUE) FIX)
	<COND (<SET EL <MAKE-ENDING-LIST .SIN>>
	       <SETG ENDING-TREE <LIST () () (,NULL-ENDING)>>
	       <SETG TREE-SHARE ()>
	       <SETG TSHR ()>
	       <SETG ESTR ()>
	       <MAPF <> <FUNCTION (X) <ENDING .X> <SET N <+ .N 1>>> .EL>
	       <COND (.OFILE <SAVE-DATA ENDING-TREE .OFILE>)>
	       .N)
	      (ELSE
	       <SETG ENDING-TREE <>>
	       .N)>>

<DEFINE MAKE-ENDING-LIST (WDS "AUX" (EL ()))
	#DECL ((WDS) UVECTOR (EL) <LIST [REST ATOM]> (VALUE) <OR FALSE UVECTOR>)
	<MAPF <>
	      <FUNCTION (W)
		#DECL ((W) VECTOR)
		<COND (<AND <G=? <LENGTH .W> 2> <TYPE? <2 .W> UVECTOR>>
		       <MAPF <>
			     <FUNCTION (E)
				<COND (<AND <TYPE? .E ATOM> <NOT <MEMQ .E .EL>>>
				       <SET EL (.E !.EL)>)>>
			     <2 .W>>)>>
	      .WDS>
	<COND (<EMPTY? .EL> <>) (ELSE <SETG END-LIST <UVECTOR !.EL>>)>>

<ENDPACKAGE>