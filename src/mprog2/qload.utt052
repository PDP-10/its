<COND (<ASSIGNED? KEEP-FIXUPS>) (<SET KEEP-FIXUPS %<>>)>

<SETG NULOB (DEFAULT)> ; "For getting the default."

<DEFINE BADD (goody goodies) #DECL ((goody) FIX (goodies) <LIST [REST FIX]>)
   <REPEAT ((goodies .goodies)) #DECL ((goodies) <LIST [REST FIX]>)
      <COND (<L? .goody <1 .goodies>>
             <PUT <PUTREST .goodies <CONS <1 .goodies> <REST .goodies>>> 1 .goody>
             <RETURN>)>
      <SET goodies <REST .goodies>>>
   .goodies>

<DEFINE GETCHAN (gf ob "AUX" file nam chan)
#DECL ((gf) <OR STRING ATOM>
       (ob) <LIST [REST <OR OBLIST 'DEFAULT>]>
       (chan VALUE) CHANNEL
       (file) STRING
       (nam) ATOM)
   <COND (<TYPE? .gf STRING>
          <SET file .gf>
          <SET chan <CHANNEL "READ" .file>>
          <SET nam <COND (<LOOKUP <7 .chan> <1 .OBLIST ;"who's DEFAULT?">>)
                         (<INSERT <7 .chan> <1 .OBLIST>>)>>)
         (T ;"atom"
          <SET nam .gf>
          <SET chan <CHANNEL "READ" <SET file <GET .nam QLOAD '<PNAME .nam>>>>>)>
   <PUT .nam QLOAD .file>
   <SET OBLIST <COND (<N==? .ob ,NULOB> .ob) (<GET .nam OBLIST '.OBLIST>)>>
   <PUT .nam OBLIST .OBLIST>
   .chan>

<DEFINE QLOAD (gf func? "OPTIONAL" (ob ,NULOB) (KEEP-FIXUPS .KEEP-FIXUPS) 
                             "AUX" (OBLIST .OBLIST) (REDEFINE T)
                                   (badies '(NULL)) (goodies (%<CHTYPE <MIN> FIX>))
                                   chan chan? any)
#DECL ((KEEP-FIXUPS REDEFINE) <SPECIAL ANY>
       (OBLIST) <SPECIAL <LIST [REST <OR OBLIST 'DEFAULT>]>>
       (gf) <OR ATOM STRING>
       (func?) <OR ATOM <LIST ATOM [REST ATOM]> <FALSE ATOM [REST ATOM]>>
       (ob) <LIST [REST <OR OBLIST 'DEFAULT>]>
       (chan?) <OR FALSE CHANNEL>
       (chan) CHANNEL
       (goodies) <LIST [REST FIX]>
       (badies) <LIST ATOM [REST ATOM]>
       (any) ANY)

  <COND (<NOT .func?>
         <SET badies <CONS NULL <CHTYPE .func? LIST>>>)
        (<TYPE? .func? LIST>
         <SET badies <CONS NULL .func?>>
         <REPEAT ((obad .badies) (bad <REST .obad>))
         #DECL ((bad obad) <LIST [REST ATOM]>)
            <COND (<AND <TYPE? <SET any <GET <1 .bad> NTH>> FIX> <G? .any 0>>
                   <SET goodies <BADD .any .goodies>>
                   <PUTREST .obad <REST .bad>>)
                  (<SET obad <REST .obad>>)>
            <COND (<EMPTY? <SET bad <REST .bad>>>
                   <RETURN>)>>)
        (<AND <TYPE? <SET any <GET .func? NTH>> FIX> <G? .any 0>>
         <SET goodies <CONS .any .goodies>>)
        (<SET badies (NULL .func?)>)>

   <UNWIND
      <PROG ()
         <SET chan <GETCHAN .gf .ob>>
         <COND (<SET chan? <RESET .chan>>) (<RETURN .chan?>)>
         <PROG SKIPA ((nth 0) obj char list atom op buffer)
         #DECL ((SKIPA) <SPECIAL ACTIVATION> 
                (nth) FIX
                (char) CHARACTER
                (list) <LIST [REST ATOM]>
                (buffer) STRING)
            <REPEAT ()
               <COND (<LENGTH? .badies 1> <RETURN>)>
               <SET char <STRUCRUNTO .chan !"F>>
               <COND (<N==? .char %<1 "<">>
                      <PUT .chan 14 0>
                      <PUT .chan 17 <+ <17 .chan> 1>>
                      <COND (<MEMQ .char "([{"> <STRUCFLY .chan .char>)>)
                     (<==? <1 .goodies> <SET nth <+ .nth 1>>>
                      <EVAL <READ .chan '<RETURN T .SKIPA>>>
                      <SET goodies <REST .goodies>>)
                     (T
                      <PUT .chan 14 0>
                      <PUT .chan 17 <+ <17 .chan> 1>>
                      <SET op <READ .chan '<RETURN T .SKIPA>>>
                      <COND (<NOT <MEMQ .op '![DEFINE SETG DEFMAC]>>
                             <STRUCFLY .chan !"< !">>
                             <AGAIN>)>
                      <SET atom <READ .chan '<RETURN>>>
                      <COND (<MAPR <> ;"it returns T when it cannot______ find the atom"
                                   #FUNCTION ((l) #DECL ((l) <LIST [REST ATOM]>)
                                      <COND (<==? .atom <1 .l>> <MAPLEAVE %<>>)
                                            (<SET list <REST .list>>)>)
                                   <REST <SET list .badies>>>
                             <STRUCFLY .chan !"< !">>
                             <AGAIN>)>
                      <COND (<==? .op SETG> ;"I like SETG"
                             <SET obj <READ .chan '<RETURN T .SKIPA>>>
                             <PUTREST .list <REST .list 2>>
                             <COND (<TYPE? .obj FORM>
                                    <COND (<==? <1 .obj> QUOTE> <SET obj <2 .obj>>)
                                          (T <SET obj <EVAL .obj>>)>)>
                             <SETG .atom .obj>
                             <PUT .chan 14 0>
                             <PUT .chan 17 <+ <17 .chan> 1>>
                             <PUT .atom NTH .nth>)
                            (T ;"assumes the channel always has a buffer"
                             <SET buffer <BACK <19 .chan>>>
                             <PUT .buffer 1 <CHTYPE <14 .chan> CHARACTER>>
                             <PUT .chan 19 .buffer>
                             <PUT .chan 17 <- <17 .chan> 1>>
                             <PUT .chan 14 %<1 "<">>
                             <SET obj <CHTYPE <READ .chan '<RETURN T .SKIPA>> FUNCTION>>
                             <PUTREST .list <REST .list 2>>
                             <COND (<==? .op DEFINE> <SETG .atom .obj>)
                                   (T; "DEFMAC" <SETG .atom <CHTYPE (.obj) MACRO>>)>
                             <PUT .atom NTH .nth>)>)>>
            <REPEAT ()
               <COND (<LENGTH? .goodies 1> <RETURN>)>
               <REPEAT ((loop <- <1 .goodies> .nth 1>))
                  <COND (<L=? .loop 0> <RETURN>)>
                  <SET char <STRUCRUNTO .chan !"F>>
                  <PUT .chan 14 0>
                  <PUT .chan 17 <+ <17 .chan> 1>>
                  <COND (<OR <COND (<==? .char %<1 "<">>
                                    <SET loop <- .loop 1>>
                                    <SET nth <+ .nth 1>>
                                    T)>
                             <MEMQ .char "([{">>
                         <STRUCFLY .chan .char>)>>
               <EVAL <READ .chan '<RETURN T .SKIPA>>>
               <SET nth <+ .nth 1>>
               <SET goodies <REST .goodies>>>>
         <CLOSE .chan>
         <COND (<LENGTH? .goodies 1>
                <REST .badies>)
               (T
                <PUTREST <REST .goodies <- <LENGTH .goodies> 2>> <REST .badies>>
                .goodies)>>
      <CLOSE .chan>>>

<PUT CHANNEL DECL '<VECTOR [13 ANY] <PRIMTYPE WORD> [2 ANY] FIX ANY STRING>>

