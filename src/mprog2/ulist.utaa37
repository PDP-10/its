<PACKAGE "ú³$Ó©">

<ENTRY ULIST ULIST-PRINT ULIST-RESET ULIST-CLOSE ULIST-FLUSH SPEC-BUILD>
<ENTRû(*Ì“ST-MATCH ULIST-GEN NEXT-ENTRY>

<USE "LSRTNS">

<FLOAD "TAA;ULISTC NBIN">

"SUBTITLE TOP-LEVEL STUFF"

<DEFINE ULIST (SPECS "OPTIONAL" (ENTRY? <>))
  #DECL ((SPECS) VECTOR (ENTRY?) <OR ATOM FIX FALSE>)
  <SET SPECS <SPEC-BUILD .SPECS>>
  <ULIST-RESET>
  <MAPF ,LIST
	<FUNCTION ("AUX" TEMP)
	  #DECL ((TEMP) <OR STRING FALSE>)
	  <COND (<SET TEMP <ULIST-GEN .SPECS>>
		 <COND (<TYPE? .ENTRY? ATOM> <STRING .TEMP>)
		       (<TYPE? .ENTRY? FIX>
			<MAPRET <STRING <LSR-EXTRACT .TEMP 0>>
				<STRING <LSR-EXTRACT .TEMP .ENTRY?>>>)
		       (<STRING <LSR-EXTRACT .TEMP 0>>)>)
		(<MAPSTOP>)>>>>

<DEFINE ULIST-PRINT (SPECS "OPTIONAL" (ENTRY? <>) "AUX" (OUTCHAN .OUTCHAN))
  #DECL ((SPECS) VECTOR (ENTRY?) <OR ATOM FIX FALSE> (OUTCHAN) CHANNEL)
  <SET SPECS <SPEC-BUILD .SPECS>>
  <ULIST-RESET>
  <MAPF ,LIST
	<FUNCTION ("AUX" TEMP)
	  #DECL ((TEMP) <OR STRING FALSE>)
	  <COND (<SET TEMP <ULIST-GEN .SPECS>>
		 <CRLF>
		 <PRINC <LSR-EXTRACT .TEMP 0>>
		 <INDENT-TO 9>
		 <PRINC <LSR-EXTRACT .TEMP ,$NAME>>
		 <PRINC "   ">
		 <PRINC <LSR-EXTRACT .TEMP
				     <COND (<TYPE? .ENTRY? FIX> .ENTRY?)
					   (,$NETA)>>>
		 <COND (<TYPE? .ENTRY? ATOM>
			<STRING .TEMP>)
		       (<TYPE? .ENTRY? FIX>
			<MAPRET <STRING <LSR-EXTRACT .TEMP 0>>
				<STRING <LSR-EXTRACT .TEMP .ENTRY?>>>)
		       (<STRING <LSR-EXTRACT .TEMP 0>>)>)
		(<MAPSTOP>)>>>>

<DEFINE ULIST-GEN (SPECS "AUX" STR)
  #DECL ((STR) <OR STRING FALSE> (SPECS) VECTOR)
  <REPEAT ()
    <COND (<SET STR <NEXT-ENTRY>>
	   <COND (<ULIST-MATCH .STR .SPECS>
		  <RETURN .STR>)>)
	  (<RETURN <>>)>>>


"SUBTITLE MATCHING STUFF"

<SETG PLACEH !\=>

<SETG STAR !\*>

<SETG QUOTER !\>
<GDECL (PLACEH STAR QUOTER) CHARACTER>
"Given a string (a data-base entry) and a spec, see if string matches spec."
<DEFINE ULIST-MATCH (STR SPEC "AUX" (OPER <1 .SPEC>)) 
	#DECL ((STR) STRING
	       (SPEC) <VECTOR <OR CHARACTER FIX> [REST <OR STRING VECTOR>]>)
	<COND (<TYPE? .OPER FIX> <MATCH-ONE .STR .SPEC>)
	      (<==? .OPER !\&>
	       <REPEAT ((SPEC <REST .SPEC>))
		       #DECL ((SPEC) VECTOR)
		       <COND (<EMPTY? .SPEC> <RETURN T>)
			     (<NOT <ULIST-MATCH .STR <1 .SPEC>>> <RETURN <>>)>
		       <SET SPEC <REST .SPEC>>>)
	      (<==? .OPER !\|>
	       <REPEAT ((SPEC <REST .SPEC>))
		       #DECL ((SPEC) VECTOR)
		       <COND (<EMPTY? .SPEC> <RETURN <>>)
			     (<ULIST-MATCH .STR <1 .SPEC>> <RETURN T>)>
		       <SET SPEC <REST .SPEC>>>)
	      (<==? .OPER !\~> <NOT <ULIST-MATCH .STR <2 .SPEC>>>)>>

"See if string matches spec of form [<fix> <stringspec>...]"
<DEFINE MATCH-ONE (STR SPEC "AUX" (RSTR <LSR-EXTRACT .STR <1 .SPEC>>)) 
	#DECL ((STR) STRING (SPEC) VECTOR)
	<SET SPEC <REST .SPEC>>
	<REPEAT (TLEN SIF MBL SIB TS)
		#DECL ((SIF) <OR FALSE ATOM> (MBL) FIX (SIB) <OR FALSE STRING>
		       (TS) <OR STRING VECTOR> (TLEN) FIX)
		<COND (<EMPTY? .SPEC> <RETURN <>>)>
		<COND (<TYPE? <SET TS <1 .SPEC>> STRING>
		       <COND (<CI=? .TS .RSTR> <RETURN T>)>)
		      (T
		       <SET SIB <2 .TS>>
		       <SET MBL <1 .TS>>
		       <COND (<NOT <3 .TS>>
			      <COND (<OR <==? <SET TLEN <LENGTH .RSTR>> .MBL>
					 <AND .SIB <G? .TLEN .MBL>>>
				     <RETURN T>)>)
			     (T
			      <COND (<4 .TS> <SET SIF <>> <SET TS <REST .TS 2>>)
				    (T <SET SIF T> <SET TS <REST .TS 4>>)>
			      <COND (<MATCH? .RSTR .SIF .MBL .SIB .TS> <RETURN T>)>)>)>
		<SET SPEC <REST .SPEC>>>>

"See if a string matches a string specification"
<DEFINE MATCH? (N SIF MBL SIB SPEC
		"AUX" (MFL <1 .SPEC>) (TS <2 .SPEC>)
		      (MINL <+ .MFL .MBL <LENGTH .TS>>) (NL <LENGTH .N>)
		      (TSL <LENGTH .TS>) TSTR TR)
   #DECL ((N TS) STRING (SIF TR) <OR ATOM FALSE> (SIB) <OR STRING FALSE>
	  (TSTR) <OR STRING FALSE> (MBL MFL MINL ML TSL) FIX
	  (SPEC) <VECTOR [REST <OR FIX FALSE> <OR STRING FALSE>]>)
   <SET SPEC <REST .SPEC 2>>
   <AND <G=? .NL .MFL> <SET N <REST .N .MFL>>>
   <COND
    (<L? .NL .MINL> <>)
    (<SET TSTR <CI-MEMBER .TS .N>>
     <COND
      (.SIF
       <COND
	(<1 .SPEC>
	 <SET TR
	      <COND (<2 .SPEC> <MATCH? <REST .TSTR .TSL> <> .MBL .SIB .SPEC>)
		    (T <MATCH? <REST .TSTR .TSL> T .MBL .SIB <REST .SPEC 2>>)>>
	 <SET SPEC <PUT <BACK .SPEC 2> 1 0>>
	 <REPEAT ((TMP .TSTR))
		 #DECL ((TMP) <OR FALSE STRING>)
		 <COND (<AND <NOT .TR> <SET TMP <MEMBER .TS <REST .TMP>>>>
			<SET TR <MATCH? .TMP T .MBL .SIB .SPEC>>)
		       (T <RETURN .TR>)>>
	 <PUT .SPEC 1 .MFL>
	 .TR)
	(T
	 <REPEAT ()
	   <COND
	    (<AND <NOT <SET TR
			    <OR <==? <SET MINL <LENGTH <REST .TSTR .TSL>>> .MBL>
				<AND .SIB <G? .MINL .MBL>>>>>
		  <SET TSTR <MEMBER .TS <REST .TSTR>>>>)
	    (T <RETURN .TR>)>>)>)
      (<==? .TSTR .N>
       <COND (<1 .SPEC>
	      <COND (<2 .SPEC> <MATCH? <REST .TSTR .TSL> <> .MBL .SIB .SPEC>)
		    (T <MATCH? <REST .TSTR .TSL> T .MBL .SIB <REST .SPEC 2>>)>)
	     (T
	      <OR <==? <SET MINL <LENGTH <REST .TSTR .TSL>>> .MBL>
		  <AND .SIB <G? .MINL .MBL>>>)>)>)>>


"Like MEMBER, but ignores case"
<DEFINE CI-MEMBER (TARG STR) 
   #DECL ((TARG STR) STRING)
   <COND (<EMPTY? .TARG> <>)
	 (<L=? <LENGTH .TARG> <LENGTH .STR>>
	  <REPEAT ((C1 <1 .TARG>))
		  <COND (<AND <CHAR=? .C1 <1 .STR>>
			      <REPEAT ((TTARG <REST .TARG>) (TSTR <REST .STR>))
				      <COND (<EMPTY? .TTARG> <RETURN T>)
					    (<EMPTY? .TSTR> <RETURN <>>)
					    (<CHAR=? <1 .TTARG> <1 .TSTR>>
					     <SET TTARG <REST .TTARG>>
					     <SET TSTR <REST .TSTR>>)
					    (<RETURN <>>)>>>
			 <RETURN .STR>)>
		  <SET STR <REST .STR>>
		  <COND (<G? <LENGTH .TARG> <LENGTH .STR>> <RETURN <>>)>>)>>

"Like =?, but ignores case"
<DEFINE CI=? SM (STR1 STR2)
  #DECL ((STR1 STR2) STRING)
  <COND (<==? <LENGTH .STR1> <LENGTH .STR2>>
	 <MAPF <>
	   <FUNCTION (C1 C2)
	     #DECL ((C1 C2) CHARACTER)
	     <COND (<CHAR=? .C1 .C2>)
		   (<RETURN <> .SM>)>>
	   .STR1 .STR2>
	 T)>>

"Case-independent character comparison"
<DEFINE CHAR=? (C1 C2)
  #DECL ((C1 C2) CHARACTER)
  <COND (<N==? .C1 .C2>
	 <COND (<AND <G=? <ASCII .C1> <ASCII !\a>>
		     <L=? <ASCII .C1> <ASCII !\z>>>
		<SET C1 <ASCII <- <ASCII .C1> 32>>>)>
	 <COND (<AND <G=? <ASCII .C2> <ASCII !\a>>
		     <L=? <ASCII .C2> <ASCII !\z>>>
		 <SET C2 <ASCII <- <ASCII .C2> 32>>>)>
	 <==? .C1 .C2>)
	(T)>>

"SUBTITLE SPEC HACKERS"

"Build specification from user arg"
<DEFINE SPEC-BUILD (OSPEC "AUX" (STAR ,STAR) (PLACEH ,PLACEH)) 
	#DECL ((OSPEC) VECTOR (STAR PLACEH) CHARACTER)
	<MAPF ,VECTOR
	      <FUNCTION (X) 
		      <COND (<TYPE? .X ATOM> <1 <SPNAME .X>>)
			    (<TYPE? .X VECTOR> <SPEC-BUILD .X>)
			    (<TYPE? .X FIX> .X)
			    (<TYPE? .X STRING>
			     <COND (<OR <MEMQ .STAR .X> <MEMQ .PLACEH .X>>
				    <SPEC-HACK .X>)
				   (.X)>)
			    (<ERROR>)>>
	      .OSPEC>>

"Build string specification for MATCH? from string containing special chars"
<DEFINE SPEC-HACK (AST
		   "AUX" (SPEC <IVECTOR 10 <>>)
			 (LASTCHR ,PLACEH)
			 (ASP <REST .SPEC 2>)
			 (STFLG <>))
	#DECL ((AST) STRING (LASTCHR) CHARACTER (ASP SPEC) VECTOR
	       (STFLG) <OR ATOM FALSE>)
	<REPEAT ((TST <OR <AND <GASSIGNED? A> ,A> <SETG A <ISTRING 40>>>)
		 (A .TST) (CT 0) CHR ACH)
		#DECL ((TST A) STRING (CT) FIX (CHR ACH) CHARACTER)
		<COND (<EMPTY? .AST>
		       <COND (<OR <==? .LASTCHR ,STAR>
				  <AND <==? .LASTCHR ,PLACEH> .STFLG>>
			      <PUT .SPEC 1 .CT>
			      <PUT .SPEC 2 "">
			      <PUT <BACK .ASP 2> 1 <>>)
			     (<==? .LASTCHR ,PLACEH>
			      <PUT .SPEC 1 .CT>
			      <PUT .SPEC 2 <>>
			      <PUT .ASP 1 <>>)
			     (T
			      <PUT .ASP 1 <SUBSTRUC .A 0 .CT>>
			      <PUT .ASP 2 <>>
			      <PUT .SPEC 1 0>
			      <PUT .SPEC 2 <>>)>
		       <RETURN .SPEC>)
		      (<==? <SET CHR <1 .AST>> ,STAR>
		       <COND (<N==? .LASTCHR ,STAR>
			      <COND (<N==? .LASTCHR ,PLACEH>
				     <PUT .ASP 1 <SUBSTRUC .A 0 .CT>>
				     <SET TST .A>
				     <SET CT 0>
				     <SET ASP <REST .ASP>>)>
			      <SET ASP <REST <PUT <PUT .ASP 1 0> 2 <>> 2>>
			      <SET STFLG T>)>)
		      (<==? .CHR ,PLACEH>
		       <COND (<==? .LASTCHR ,STAR> <SET CT <+ .CT 1>>)
			     (<N==? .LASTCHR ,PLACEH>
			      <SET ASP <REST <PUT .ASP 1 <SUBSTRUC .A 0 .CT>>>>
			      <SET TST .A>
			      <SET CT 1>)
			     (T <SET CT <+ .CT 1>>)>)
		      (T
		       <COND (<==? .CHR ,QUOTER>
			      <SET ACH <1 <SET AST <REST .AST>>>>)
			     (T <SET ACH .CHR>)>
		       <COND (<==? .LASTCHR ,STAR>
			      <SET ASP <REST <PUT .ASP 1 .CT>>>
			      <SET CT 0>)
			     (<==? .LASTCHR ,PLACEH>
			      <SET ASP <REST <PUT .ASP 1 .CT>>>
			      <SET CT 0>)>
		       <SET STFLG <>>
		       <SET TST <REST <PUT .TST 1 .ACH>>>
		       <SET CT <+ .CT 1>>)>
		<SET LASTCHR .CHR>
		<SET AST <REST .AST>>>>


"SUBTITLE FILE-HACKERS"

<DEFINE ULIST-CLOSE ("AUX" CH)
  #DECL ((CH) <CHANNEL FIX>)
  <COND (<NOT <0? <1 <SET CH <NTH ,DB </ <+ ,DB-CH 1> 2>>>>>>
	 <CLOSE .CH>)>>

<ENDPACKAGE>