<PACKø1â EEXTERNALS">

<ENTRY GLX EXTERNALS>

<SETGôgI©IAL-HACK <LIST <GET INITIAL OBLIST> <GET INITIAL OBLIST>>>

<DEFINE GLX (F "TUPLE" TT "AUX" A)
	#DECL ((F) STRING (TT) TUPLE (A) <OR ATOM FALSE>)
	<COND (<SET A <GROUP-LOAD .F>>
	       <EXTERNALS .A !.TT>
	       <UNASSIGN .A>)>>

<DEFINE EXTERNALS (GRP "TUPLE" TT "AUX" (P ,INITIAL-HACK) HACK RESTRICT)
	#DECL ((GRP) ATOM (TT) TUPLE (P) <LIST OBLIST OBLIST>
	       (RESTRICT) <LIST [REST OBLIST]> (HACK) <OR ATOM FALSE>)
	<SET RESTRICT
	     <MAPF ,LIST
		   <FUNCTION (P "AUX" A)
			#DECL ((P) STRING (A) <OR ATOM FALSE>)
			<COND (<SET A <LOOKUP .P <GET PACKAGE OBLIST>>>
			       <GET .A OBLIST>)
			      (ELSE <MAPRET>)>>
		   .TT>>
	<MAPF <>
	      <FUNCTION (E "AUX" A)
		   #DECL ((E) ANY (A) <OR ATOM FALSE>)
		   <COND (<TYPE? .E FORM>
			  <COND (<AND <G=? <LENGTH .E> 2>
				      <==? <1 .E> PACKAGE>>
				 <SET A <LOOKUP <2 .E> <GET PACKAGE OBLIST>>>
				 <COND (.A <SET P ,.A>)>)
				(ELSE
				 <COND (<AND <G=? <LENGTH .E> 3>
					     <MEMQ <1 .E>
						   '[SET SETG DEFINE DEFMAC]>
					     <TYPE? <2 .E> ATOM>>
					<SET HACK <2 .E>>)
				       (ELSE <SET HACK TOPLEVEL>)>
				 <CHECK-FORM .E .P .HACK .RESTRICT>)>)>>
	      ..GRP>
	,NULL>

<DEFINE CHECK-FORM (F P HACK RESTRICT "AUX" O (OUTCHAN .OUTCHAN))
	#DECL ((F) FORM (P RESTRICT) <LIST [REST OBLIST]> (OUTCHAN) CHANNEL
	       (O) <OR OBLIST FALSE> (HACK) <OR FALSE ATOM>)
	<MAPF <>
	      <FUNCTION (E)
		   #DECL ((E) ANY)
		   <COND (<TYPE? .E ATOM>
			  <SET O <OBLIST? .E>>
			  <COND (<OR <==? .O <ROOT>>
				     <==? .O <ERRORS>>
				     <==? .O <INTERRUPTS>>
				     <==? .O <1 .P>>
				     <==? .O <2 .P>>>)
				(<OR <EMPTY? .RESTRICT>
				     <MEMQ .O .RESTRICT>>
				 <COND (.HACK
					<CRLF>
					<PRINC .HACK>
					<SET HACK <>>)>
				 <CRLF>
				 <PRINC "  ">
				 <PRINC .E>
				 <PRINC " [">
				 <PRINC <GET .O OBLIST>>
				 <PRINC !\]>)>)
			 (<TYPE? .E FORM LIST SEGMENT>
			  <SET HACK <CHECK-FORM .E .P .HACK .RESTRICT>>)>>
	      .F>
	.HACK>

<ENDPACKAGE>
