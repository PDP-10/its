<PACKAGE "DCREATE">

<ENTRY DICT-CREATE NEW-DICTS>

<USE "MDDATA" "RLSDICT" "MAKE-DUV" "END-TREE" "DATA-SAVE" "SORTX">

<DEFINE DICT-CREATE (IN "OPTIONAL" (OUTFILE <>)
		     "AUX" (D ,.IN) (V '![]) (NL ()) NV)
	#DECL ((IN) ATOM (OUTFILE) <OR FALSE STRING> (NL) <LIST [REST STRING FIX]>
	       (V) UVECTOR (NV) <VECTOR [REST STRING FIX]>)
	<COND (<AND <TYPE? .D UVECTOR> <==? <UTYPE .D> VECTOR>>
	       <MAPF <>
		     <FUNCTION (V "AUX" W)
			       #DECL ((V) VECTOR (W) <OR VECTOR STRING>)
			       <COND (<TYPE? <SET W <1 .V>> VECTOR>
				      <SET NL (<1 .W> <2 .W> !.NL)>
				      <PUT .V 1 <1 .W>>)>>
		     .D>)
	      (<AND <TYPE? .D VECTOR> <TYPE? <1 .D> STRING VECTOR>>
	       <SET D
		    <MAPF ,UVECTOR
			  <FUNCTION (W "AUX" S)
				    #DECL ((W) <OR <VECTOR STRING FIX> STRING>
					   (S) STRING)
				    <COND (<TYPE? .W VECTOR>
					   <SET NL (<1 .W> <2 .W> !.NL)>
					   <SET S <1 .W>>)
					  (ELSE <SET S .W>)>
				    <VECTOR .S .V>>
			  .D>>)
	      (ELSE <SET D <>>)>
	<COND (<AND .D <MAKE-DICTS .D> <MAKE-DUV .D> <MAKE-ENDING-TREE .D>>
	       <COND (<NOT <EMPTY? .NL>>
		      <SET NV <VECTOR !.NL>>
		      <SORT <> .NV 2 0>)
		     (ELSE <SET NV '[]>)>
	       <SETG .IN
		     <VECTOR <1 ,CDICT>
			     <2 ,CDICT>
			     ,MDICT
			     ,ENDING-TREE
			     <PNAME .IN>
			     .NV>>
	       <COND (.OUTFILE <SAVE-DATA .IN .OUTFILE>)
		     (.IN)>)>>

<DEFINE NEW-DICTS ("TUPLE" DS)
	#DECL ((DS) <TUPLE [REST ATOM]>)
	<MAPF <>
	      <FUNCTION (D)
		  #DECL ((D) ATOM)
		  <COND (<DICT-CREATE .D> <NEW-DICTIONARY .D>)
			(ELSE <ERROR BAD-DICTIONARY .D>)>>
	      .DS>>

<ENDPACKAGE>
