
<PACKAGE "INIT">

<ENTRY INIT-DUMP INIT-LOAD>

<COND (<==? ,MUDDLE 53> <ERROR USE-MUDDLE-54!- >)>

<BLOCK (<ROOT>)>

BIND 

INIT 

ARG 

SPACE-ALTMODE

MODIFIED 

<SETG SPC '[GO !\@ TAG !\. SETG !\: GVAL !\=]>

<SETG SPC2 '[SPACE-ALTMODE "%" RETURN "@>" AGAIN "@<"]>

<SETG AV
      '![APPEND ILOPR COPY DELETE EXIST FILE-DEFAULT GET-CONSOLE HIPPOPOTAMUS IMAGE J-PRINT
	 ILOPR LINE MAKE NAME OUTPUT PRINT QUESTION RENAME SSVMOD TPL USER
	 VALRET WHEN ILOPR ILOPR ILOPR!]>

<ENDBLOCK>

<SETG FILE-DEFAULT ".DDT. (INIT)">
<GDECL (FILE-DEFAULT) STRING>

<DEFINE INIT-DUMP ("OPTIONAL" (FRM .INIT) (FILE ,FILE-DEFAULT)
		   "AUX" (OUTCHAN <OPEN "PRINT" "_INIT >">))
	#DECL ((FRM) FORM (FILE) STRING (OUTCHAN) <SPECIAL <OR FALSE CHANNEL>>)
	<OR .OUTCHAN <ERROR CANT-OPEN-FILE!-ERRORS>>
	<PUT .OUTCHAN 13 <MIN>>
	<PRINTSTRING ,STRNG
		     .OUTCHAN
		     <- <LENGTH ,STRNG>
			<LENGTH <MEMBER ":INIT" ,STRNG>>>>
	<PRINC ":INIT ">
	<MAKE-INIT .FRM .OUTCHAN>
	<CRLF .OUTCHAN>
	<PRINC <REST ,OSTRNG>>
	<RENAME .OUTCHAN .FILE>
	<CLOSE .OUTCHAN>
	"DONE">


<DEFINE MAKE-INIT (FRM OUTCHAN "AUX" M (BT <>) (CLOSIT T) (DEF <>)) 
	#DECL ((FRM) <OR LIST FORM> (ARG DEF BT CLOSIT) <OR 'T FALSE>
	       (OUTCHAN) <SPECIAL CHANNEL>)
	<AND <TYPE? .FRM LIST> <SET FRM <FORM BIND !.FRM>>>
	<MAPF <>
	      <FUNCTION (X) 
		      <COND (<TYPE? .X FORM LIST>
			     <COND (<SET M <MEMQ <1 .X> ,SPC>>
				    <PRINC <2 .M>>
				    <PRIN1 <2 .X>>)
				   (<SET M <MEMQ <1 .X> ,SPC2>> <PRINC <2 .M>>)
				   (<MAKE-INIT .X .OUTCHAN>)>)
			    (<TYPE? .X STRING> <PRIN1 .X>)
			    (<TYPE? .X FIX>
			     <COND (<OR <L? .X 1> <G? .X 9>>
				    <ERROR ILLEGAL-ARGUMENT .X>)>
			     <COND (.ARG <PRIN1 .X>) (<PRINC "!"> <PRIN1 .X>)>)
			    (.DEF
			     <COND (<TYPE? .X ATOM> <PRIN1 .X> <SET DEF <>>)
				   (<ERROR ILLEGAL-Q-REGISTER .X>)>)
			    (<==? .X MAPF> <PRINC "[!">)
			    (<==? .X APPLY> <PRINC "[@"> <SET DEF T>)
			    (<==? .X MODIFIED> <PRINC ";">)
			    (<==? .X MOD> <PRINC ";">)
			    (<==? .X DEFINE> <PRINC "[:"> <SET DEF T>)
			    (<==? .X NOT> <PRINC "[#">)
			    (<==? .X COND> <PRINC "[?">)
			    (<==? .X SPACE-ALTMODE> <PRINC "%"><SET CLOSIT <>>)
			    (<==? .X ARG>
			     <PRINC "!">
			     <SET ARG T>
			     <SET CLOSIT <>>)
			    (<==? .X OR> <PRINC "[\\">)
			    (<==? .X AND> <PRINC "[&">)
			    (<==? .X PROG> <PRINC "[">)
			    (<==? .X REPEAT> <PRINC "[*">)
			    (<==? .X BIND> <PRINC "("> <SET BT T>)
			    (<==? .X T> <PRINC "+">)
			    (<==? .X <>> <PRINC "-">)
			    (<SET Y <1 <SPNAME .X>>>
			     <SET CLOSIT <>>
			     <COND (<AND <SET Z <ASCII .Y>>
					 <G=? .Z <ASCII !\%>>
					 <L=? .Z <ASCII !\]>>>
				    <PRINC .Y>)
				   (<ERROR ILLEGAL-COMMAND .Y>)>)>>
	      .FRM>
	<AND .CLOSIT
	     <COND (.BT <PRINC ")"> <SET BT <>>) (<PRINC "]">)>>
	,NULL>

<DEFINE INIT-LOAD ("OPTIONAL" (FILE ".DDT. (INIT)") "AUX" STRNG CH 
		 		(MODFLG <>) (MOD2FLG <>))
  #DECL ((FILE) STRING (STRNG) <SPECIAL <OR STRING FALSE>> (CH) <OR FALSE CHANNEL>
	 (MODFLG MOD2FLG) <SPECIAL <OR 'T FALSE>>)
  <COND (<SET CH <OPEN "READ" .FILE>>
	 <SETG FILE-DEFAULT .FILE>
	 <SETG STRNG <SET STRNG <ISTRING <FILE-LENGTH .CH> <ASCII 3>>>>
	 <READSTRING .STRNG .CH>
	 <CLOSE .CH>
	 <COND (<SET STRNG <MEMBER ":INIT" .STRNG>>
		<SET STRNG <REST .STRNG 6>>
		<SET INIT <FROB>>
		<AND <==? <LENGTH .INIT> 2>
		     <SET INIT <2 .INIT>>>
		<SETG OSTRNG <REST .STRNG>>
		.INIT)>)>>

<DEFINE FROB ("OPTIONAL" (OFORM <FORM PROG>) "AUX" (AV ,AV) (OOFORM .OFORM)) 
   #DECL ((OFORM OOFORM) <OR LIST FORM> (AV) <UVECTOR [REST ATOM]>)
   <REPEAT (CHAR (OFORM .OFORM) TST)
     #DECL ((CHAR) CHARACTER (OFORM) FORM (TST) <OR FALSE STRING>)
     <COND
      (<COND (<AND .MODFLG .MOD2FLG> <SET MODFLG <SET MOD2FLG <>>> <SET CHAR !\]> <>)
	     (<==? <SET CHAR <1 .STRNG>> !\(>)>
       <SET STRNG <REST .STRNG>>
       <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		(<FROB <FORM BIND>>)>)
      (<==? .CHAR !\[>
       <COND (<==? <SET CHAR <1 <SET STRNG <REST .STRNG>>>> !\&>
	      <SET STRNG <REST .STRNG>>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FROB <FORM AND>>)>)
	     (<==? .CHAR !\!>
	      <SET STRNG <REST .STRNG>>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FROB <FORM MAPF>>)>)
	     (<==? .CHAR !\:>
	      <SET ATM <STRING <2 .STRNG>>>
	      <SET STRNG <REST .STRNG 2>>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FROB <FORM DEFINE <PARSE .ATM>>>)>)
	     (<==? .CHAR !\@>
	      <SET ATM <STRING <2 .STRNG>>>
	      <SET STRNG <REST .STRNG 2>>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FROB <FORM APPLY <PARSE .ATM>>>)>)
	     (<==? .CHAR !\#>
	      <SET STRNG <REST .STRNG>>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FROB <FORM NOT>>)>)
	     (<==? .CHAR !\?>
	      <SET STRNG <REST .STRNG>>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FROB <FORM COND>>)>)
	     (<==? .CHAR !\*>
	      <SET STRNG <REST .STRNG>>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FROB <FORM REPEAT>>)>)
	     (<==? .CHAR <ASCII 92>>
	      <SET STRNG <REST .STRNG>>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FROB <FORM OR>>)>)
	     (<PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FROB <FORM PROG>>)>)>)
      (<OR <==? .CHAR !\]> <==? .CHAR !\)>>
       <SET STRNG <REST .STRNG>>
       <RETURN .OFORM>)
      (<==? .CHAR !\!>
       <SET ATM <STRING <2 .STRNG>>>
       <SET STRNG <REST .STRNG 2>>
       <PUTREST <REST .OFORM <- <LENGTH .OFORM> 1>>
		(<FORM ARG <PARSE .ATM>>)>)
      (<==? .CHAR <ASCII 13>> <RETURN .OFORM>)
      (<MEMQ .CHAR " 	"> <SET STRNG <REST .STRNG>>)
      (<==? .CHAR !\@>
       <COND (<==? <2 .STRNG> !\>>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FORM RETURN>)>
	      <SET STRNG <REST .STRNG 2>>)
	     (<==? <2 .STRNG> !\<>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FORM AGAIN>)>
	      <SET STRNG <REST .STRNG 2>>)
	     (<SET ATM <PARSE <STRING <2 .STRNG>>>>
	      <SET STRNG <REST .STRNG 2>>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FORM GO .ATM>)>)>)
      (<==? .CHAR !\%>
       <SET STRNG <REST .STRNG>>
       <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>> (<FORM SPACE-ALTMODE>)>)
      (<==? .CHAR !\=>
       <SET ATM <PARSE <STRING <2 .STRNG>>>>
       <SET STRNG <REST .STRNG 2>>
       <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		(<FORM GVAL .ATM>)>)
      (<==? .CHAR !\|> <SET STRNG <REST .STRNG>>)
      (<==? .CHAR !\->
       <SET STRNG <REST .STRNG>>
       <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>> (#FALSE ())>)
      (<==? .CHAR !\+>
       <SET STRNG <REST .STRNG>>
       <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>> (T)>)
      (<==? .CHAR !\|> <SET STRNG <REST .STRNG>>)
      (<==? .CHAR !\;> 
       <COND (<==? <2 .STRNG> !\!>
	      <SET STRNG <REST .STRNG>>
	      <SET MODFLG T>
	      <PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       (<FROB <FORM MODIFIED>>)>) 
 	     (<SET STRNG <REST .STRNG>>)>)
      (<==? .CHAR !\">
       <PROG ((NS .STRNG))
	     #DECL ((NS) STRING)
	     <COND (<SET TST <MEMQ !\" <REST .NS>>>
		    <COND (<==? <1 <BACK .TST>> !\> <SET NS .TST> <AGAIN>)
			  (<PUTREST <REST .OFORM <- <LENGTH .OFORM> 1>>
				    (<SUBSTRUC <SET STRNG <REST .STRNG>>
					       0
					       <- <LENGTH .STRNG>
						  <LENGTH .TST>>>)>
			   <AND .MODFLG <SET MOD2FLG T>>
			   <SET STRNG <REST .TST>>)>)
		   (<ERROR UNEXPECTED-END-OF-COMMAND!-ERRORS>)>>)
      (T
       <SET ATM <NTH .AV <+ <- <ASCII .CHAR> <ASCII !\A>> 1>>>
       <SET STRNG <REST .STRNG>>
       <COND (<==? .ATM ILOPR> <ERROR ILLEGAL-COMMAND!-ERRORS .CHAR>)
	     (<PUTREST <REST .OOFORM <- <LENGTH .OOFORM> 1>>
		       <COND (<==? <1 <BACK .STRNG 2>> !\;>
			      (<SET OFORM <FORM MODIFIED .ATM>>))
			     ((<SET OFORM <FORM .ATM>>))>>)>)>>
   <AND <==? <1 .OOFORM> BIND>
	<SET OOFORM <LIST !<REST .OOFORM>>>>
   .OOFORM>

<ENDPACKAGE>
