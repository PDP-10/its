<PACKAGE "MORPH">

<ENTRY MORPH	LOOK-UP	MISS	n\'t
       \'s	ing	est	ed
       er	en	ly	s	ion>

<NEWTYPE MISS STRING>

<USE "MNEME" "MWORDS">

"The following should be done right eventually:
	1. ,M-A-P-S for LOOK-UP.
	2. MORPHOLOGY for -e on ing endings."

<DEFINE ALL-END (WRD LEN)
	#DECL ( (WRD) STRING (LEN) FIX (VALUE) <OR FALSE <LIST ATOM ANY>>)
	<AND <G? .LEN 3>
	     <PROG ((RW <REST .WRD <- .LEN 3>>)(L1 <3 .RW>) (L2 <2 .RW>) (L3 <1 .RW>))
		   #DECL ((L1 L2 L3) CHARACTER (RW) <STRING [3 CHARACTER]>)
		   <COND (<AND <==? .L1 !\t> <==? .L2 !\'> <==? .L3 !\n>>
			  (n\'t !<WORDM? .WRD <- .LEN 3> n\'t>))
			 (<AND <==? .L1 !\s> <==? .L2 !\'>>
			  (\'s !<WORDM? .WRD <- .LEN 2> \'s>))
			 (<AND <==? .L1 !\'> <==? .L2 !\s> <G? .LEN 5>>
			  (\'s !<WORDM? .WRD <- .LEN 1> \'s>))
			 (<AND <==? .L1 !\s><N==? .L2 !\s>>  <S-END .WRD <- .LEN 1>>)
			 (<AND <==? .L1 !\y> <==? .L2 !\l>> <LY-END .WRD <- .LEN 2>>)
			 (<AND <==? .L1 !\g> <==? .L2 !\n> <==? .L3 !\i>>
			  <POP-END .WRD <- .LEN 2> ing>)
			 (<AND <==? .L1 !\t> <==? .L2 !\s> <==? .L3 !\e>>
			  <POP-END .WRD <- .LEN 2> est>)
			 (<==? .L2 !\e>
			  <COND (<==? .L1 !\d> <POP-END .WRD <- .LEN 1> ed>)
				(<==? .L1 !\r> <POP-END .WRD <- .LEN 1> er>)
				(<==? .L1 !\n> <POP-END .WRD <- .LEN 1> en>)>)
			 (<AND <==? .L1 !\n><==? .L2 !\o><==? .L3 !\i>>
			  <ION-END .WRD <- .LEN 3>>)>>>>

<DEFINE S-END (WRD LEN "AUX" TMP (RW <REST .WRD <- .LEN 3>>)
				(L1 <3 .RW>) (L2 <2 .RW>) (L3 <1 .RW>))
	#DECL ( (WRD RW) <STRING [3 CHARACTER]> (LEN) FIX (VALUE) <LIST ATOM ANY>
		(TMP) <OR FALSE <LIST ANY>> (L1 L2 L3) CHARACTER)
	(s  !<COND (<NOT <==? .L1 !\e>> <WORDM? .WRD .LEN s>)
		   (<==? .L2 !\i>
		    <PUT .RW 2 !\y>
		    <SET TMP <WORDM? .WRD <- .LEN 1> s>>
		    <PUT .RW 2 !\i> .TMP)
		   (<==? .L2 !\h>
		    <COND (<==? .L3 !\t> <WORDM? .WRD .LEN s>)
			  (T <WORDM? .WRD <- .LEN 1> s>)>)
		   (<==? .L2 !\x> <WORDM? .WRD <- .LEN 1> s>)
		   (<OR <==? .L2 !\z> <==? .L2 !\s>>
		    <COND (<==? .L2 .L3> <WORDM? .WRD <- .LEN 1> s>)
			  (T <WORDM? .WRD .LEN s>)>)
		   (<==? .L2 !\v>
		    <OR <WORD? .WRD .LEN s>
			<PROG ()<PUT .RW 2 !\f>
				<SET TMP <WORD? .WRD .LEN s>>
				<PUT .RW 2 !\v>
				.TMP>
			<WORDM? .WRD .LEN s>>)
		   (T <WORDM? .WRD .LEN s>)>)>

<DEFINE LY-END (WRD LEN "AUX" TMP (RW <REST .WRD <- .LEN 1>>))
	#DECL ( (WRD RW) <STRING CHARACTER> (LEN) FIX (VALUE) <LIST ATOM ANY>
		(TMP) <OR FALSE LIST>)
	(ly !<COND (<==? <1 .RW> !\i>
		    <PUT .RW 1 !\y>
		    <SET TMP <WORDM? .WRD .LEN ly>>
		    <PUT .RW 1 !\i> .TMP)
		   (<WORD? .WRD .LEN ly>)
		   (<PUT .RW 3 !\e>		;"E.g. simple"
		    <SET TMP <WORD? .WRD <+ .LEN 2> ly>>
		    <PUT .RW 3 !\y>
		    <COND (.TMP)
			  (<PUT .RW 2 !\e>
			   <SET TMP <WORDM? .WRD <+ .LEN 1> ly>>
			   <PUT .RW 2 !\l>
			   .TMP)>)>)>

<DEFINE POP-END (WRD LEN ENDING "AUX" TMP2 TMP (RW <REST .WRD <- .LEN 2>>))
	#DECL ((WRD RW) STRING (ENDING) ATOM (LEN) FIX (VALUE) <LIST ATOM ANY>
		(TMP TMP2) <LIST ANY>)
	<COND (<AND <==? <1 .RW> !\i>
		    <==? <2 .RW> !\e>>
	       <COND (<G? .LEN 3>
		      <PUT .RW 1 !\y>	;"DLD (8/25/77) for 'tied' 'died' etc."
		      <SET TMP <WORDM? .WRD <- .LEN 1> .ENDING>>
		      <PUT .RW 1 !\i>)
		     (ELSE
		      <SET TMP <WORDM? .WRD .LEN .ENDING>>)>)
	      (<AND <==? <2 .RW> !\e>
		    <NOT <TYPE? <NTH <SET TMP <WORDM? .WRD .LEN .ENDING>>
				     <LENGTH .TMP>> MISS>>>)
	      (<NOT <TYPE? <NTH <SET TMP <WORDM? .WRD <- .LEN 1> .ENDING>>
				<LENGTH .TMP>> MISS>>)
	      (<L? .LEN 4>)
	      (<==? <NTH .WRD <- .LEN 2>> <1 .RW>>	;"Doubled consonant?"
		<SET TMP <WORDM? .WRD <- .LEN <COND(<MEMQ <1 .RW> '![!\l !\s !\v !\z!]>
						     1)
						    (2)>> .ENDING>>)
	      (<==? <2 .RW> !\i>			;"blue -> bluing"
		<PUT .RW 2 !\e>
	;"Small bug here--copying at WORDM doesn't get restored"
		<SET TMP <WORDM? .WRD .LEN .ENDING>>
		<PUT .RW 2 !\i>
		<COND (<TYPE? <NTH .TMP <LENGTH .TMP>> MISS>
			<SET TMP2 <WORDM? .WRD <- .LEN 1> .ENDING>>
			<COND (<NOT <TYPE? <NTH .TMP2 <LENGTH .TMP2>> MISS>>
			       <SET TMP .TMP2>)
			      ;"DLD 6/21/78 -- no 'e' on long words."
			      (ELSE <OR <LENGTH? .WRD 6>  
					<SET TMP .TMP2>>)>)>)>
	(.ENDING !.TMP)>

<DEFINE COPY-STRING (STR LEN)
	#DECL ((STR VALUE) STRING (LEN) FIX)
	<SUBSTRUC .STR 0 .LEN <REST ,MORFSTR <- 60 .LEN>>>>

<SETG MORFSTR <ISTRING 60 !\ >>
<GDECL (MORFSTR) <STRING [60 CHARACTER]>>

<DEFINE WORD? (WRD LEN ENDING
	       "AUX" (FOUND <LOOK-UP <COPY-STRING .WRD .LEN> .ENDING>))
	#DECL ( (WRD) STRING (LEN) FIX
		(ENDING) ATOM (VALUE) <OR FALSE <LIST ANY>>
		(FOUND) <OR FALSE <PRIMTYPE WORD>>)
       <COND (.FOUND (.FOUND))
	     (<ALL-END .WRD .LEN>)>>

<DEFINE WORDM? (WRD LEN ENDING
		"AUX" (FOUND <LOOK-UP <COPY-STRING .WRD .LEN> .ENDING>))
	#DECL ((WRD) STRING (LEN) FIX
		(ENDING) ATOM (VALUE) <LIST ANY> (FOUND) <OR FALSE <PRIMTYPE WORD>>)
       <COND (.FOUND (.FOUND))
	     (<ALL-END .WRD .LEN>)
	     (ELSE (<CHTYPE <SUBSTRUC .WRD 0 .LEN> MISS>))>>

<DEFINE MORPH (WRD "AUX" FOUND)
	#DECL ((WRD) STRING
	       (VALUE) <LIST <PRIMTYPE STRING>> (FOUND) <OR FALSE <LIST ANY>>)
	<COND (<SET FOUND <ALL-END .WRD <LENGTH .WRD>>>
	       (.WRD !.FOUND))
	      ((<CHTYPE .WRD MISS>))>>

;"To do -ion, you will get about 60% of them or better just by
changing to -e or nothing.  -sion to -d or -t gets more and -tion to either
-e or nothing still more.  Lesser ones include -ption to -be,
-<VOWEL>cation to -y. This exhausts all IONs in ENGLSH DATA"

<DEFINE ION-END (WRD LEN "AUX" TMP)
	#DECL ((WRD) STRING (LEN) FIX (VALUE) <LIST ATOM ANY> (TMP) <LIST ANY>)
	<PUT .WRD <+ .LEN 1> !\e>
	<SET TMP <WORDM? .WRD <+ .LEN 1> ion>>
	<PUT .WRD <+ .LEN 1> !\i>
	(ion !<COND (<NOT <TYPE? <NTH .TMP <LENGTH .TMP>> MISS>> .TMP)
		    (<WORD? .WRD .LEN ion>)
		    (.TMP)>)>

<DEFINE LOOK-UP (STR ENDING "AUX" (M <MNEME-EXIST .STR>) MAPS)
	#DECL ((STR) STRING (ENDING) ATOM (M) <OR FALSE OWT>
	       (MAPS) <OR FALSE <LIST [REST OWT]>>)
	<COND  (<NOT .M><>)
	       (<SET MAPS <SUPERFIND .M 4 ,M-A-P-S 1 !\A 3>>
		<MAPF <><FUNCTION (POS) #DECL ((POS) OWT)
			    <AND <OR <AND <MEMQ .ENDING '![ed s n\'t en ing ion er]>
					  <MEMQ .POS ,VERB-TYPES>>
				     <AND <MEMQ .ENDING '![er ly est en]>
					  <MEMQ .POS ,ADJECTIVE-TYPES>>
				     <AND <MEMQ .ENDING '![s \'s]>
					  <MEMQ .POS ,NOUN-TYPES>>
				     <AND <==? .ENDING ly>
					  <MNEME-COMP .POS "ADVERB">>>
				  <MAPLEAVE .M>>>   .MAPS>)
	       (<>)>>

<ENDPACKAGE>

