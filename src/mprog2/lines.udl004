<PACKAGE "LINES">

<ENTRY READ-LINE FIND-LINE BUILD-LINES PRINT-LINES>

<SETG BSTR <ISTRING 150 !\ >>
<SETG CRSTR <STRING <ASCII 13>>>

<DEFINE READ-LINE (CHAN "AUX" (B ,BSTR) D)
	#DECL ((CHAN) CHANNEL (B) STRING (D) <OR FALSE FIX>)
	<COND (<AND <NOT <0? <1 .CHAN>>>
		    <SET D <READSTRING .B .CHAN ,CRSTR <>>>>
	       <COND (<L? .D 150>
		      <AND <READCHR .CHAN <>>
			   <READCHR .CHAN <>>>)
		     (ELSE
		      <REPEAT ()
			      <COND (<==? <READCHR .CHAN> <ASCII 10>>
				     <RETURN>)>>)>
	       <SUBSTRUC .B 0 .D <SET B <REST .B <- <LENGTH .B> .D>>>>
	       .B)
	      (ELSE <CLOSE .CHAN> <>)>>

<DEFINE FIND-LINE (CHAN "TUPLE" LINES "AUX" L)
	#DECL ((LINES) <TUPLE [REST STRING]> (CHAN) CHANNEL
	       (L) <OR STRING FALSE>)
	<REPEAT ()
		<COND (<SET L <READ-LINE .CHAN>>
		       <COND (<MAPF <>
				    <FUNCTION (LINE)
					 #DECL ((LINE) STRING)
					 <AND <MEMBER .LINE .L> <MAPLEAVE T>>>
				    .LINES>
			      <RETURN .L>)>)
		      (ELSE <RETURN <>>)>>>

<DEFINE BUILD-LINES (CHAN)
	#DECL ((CHAN) CHANNEL)
	<MAPF ,VECTOR
	      <FUNCTION ("AUX" (L <READ-LINE .CHAN>))
		   #DECL ((L) <OR STRING FALSE>)
		   <COND (.L <STRING .L>)
			 (ELSE <MAPSTOP>)>>>>

<DEFINE PRINT-LINES (L)
	#DECL ((L) <VECTOR [REST STRING]>)
	<MAPF <>
	      <FUNCTION (L)
		   #DECL ((L) STRING)
		   <PRINC .L> <CRLF>>
	      .L>
	<LENGTH .L>>

<ENDPACKAGE>
