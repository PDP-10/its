<PACKAGE "CHKADR">

<ENTRY CHECK-ADDRESSEES>

<USE "HOSTS" "LSRTNS" "NSTR" "VCTSRC">

<SETG HOSTNUMBER 3073>

<DEFINE CHECK-ADDRESSEES (L
			  "OPTIONAL"
			  (EXPUS '("COMEXP"))
			  "AUX" (OUTCHAN .OUTCHAN) DATA EXPDB LEX)
   #DECL ((DATA) <OR FALSE LIST> (EXPDB L LEX) LIST (EXPUS) <OR FALSE LIST>
	  (OUTCHAN) CHANNEL)
   <COND (<SET DATA <GETDB .EXPUS>>
	  <SET EXPDB .DATA>
	  <MAPF <>
		<FUNCTION (S)
		     #DECL ((S) STRING)
		     <CRLF>
		     <PRINC .S>
		     <PRINC " -- ">
		     <COND (<SET LEX <LA-EXP <LIST .S> .EXPDB>>
			    <COND (<LENGTH? .LEX 1>
				   <GOOD-BAD .LEX>)
				  (ELSE
				   <MAPR <>
					 <FUNCTION (L "AUX" (S <1 .L>))
					      #DECL ((L) LIST
						     (S) <OR ATOM STRING>)
					      <COND (<TYPE? .S ATOM>
						     <SET S <SPNAME .S>>)>
					      <COND (<G? <LENGTH .S>
							 <- <13 .OUTCHAN>
							    <14 .OUTCHAN>>>
						     <CRLF>
						     <PRINC !\	>)>
					      <PRINC .S>
					      <OR <LENGTH? .L 1>
						  <PRINC ", ">>>
					 .LEX>)>)>>
		.L>
	  T)>>

<DEFINE GOOD-BAD (L "AUX" E (S <>) (OUTCHAN .OUTCHAN)) 
   #DECL ((L) LIST (S) <OR STRING FALSE> (E) ANY (OUTCHAN) CHANNEL)
   <REPEAT ()
	   <COND (<EMPTY? .L> <RETURN>)>
	   <SET E <1 .L>>
	   <COND (<AND <TYPE? .E STRING> <NOT <ATSIGN? .E>>>
		  <UPPERCASE <SET E <STRING .E>>>)>
	   <COND (<AND <TYPE? .E STRING> <SET S <KEYGET .E>>>)
		 (<AND <TYPE? .E ATOM>
		       <SET E <UPPERCASE <STRING <PNAME .E>>>>
		       <SET S <KEYGET .E>>>)>
	   <COND (.S
		  <COND (<=? .S .E> <PRINC "Okay.">)
			(ELSE <PRINC .S>)>)
		 (<NOT <EMPTY? .S>>
		  <MAPF <>
			<FUNCTION (S)
			     #DECL ((S) STRING)
			     <PRINC .S>
			     <PRINC !\ >>
			.S>)
		 (ELSE <PRINC "Illegal addressee.">)>
	   <SET L <REST .L>>>>

\

<DEFINE LA-EXP (L DBS) 
	#DECL ((L DBS VALUE) LIST)
	<MAPF <>
	      <FUNCTION (DD) 
		   #DECL ((DD) VECTOR)
		   <SET L <L-EXP .L .DD>>>
	      .DBS>
	.L>

<DEFINE L-EXP (L DB) 
	#DECL ((VALUE L) <LIST [REST <OR STRING ATOM>]> (DB) VECTOR)
	<UNIQUIFY <MAPF ,LIST
			<FUNCTION (EE) 
				#DECL ((EE) <OR ATOM STRING>)
				<COND (<TYPE? .EE STRING>
				       <MAPRET !<S-EXP .EE .DB>>)
				      (<MAPRET .EE>)>>
			.L>>>

<DEFINE S-EXP (S DB
	       "OPTIONAL" (DEPTH 0)
	       "AUX" IV US EV)
   #DECL ((S) STRING (DB) <VECTOR [REST STRING LIST]> (EV) LIST
	  (VALUE) <LIST [REST <OR STRING ATOM>]> (US) <OR FALSE STRING>
	  (DEPTH) FIX (IV) <OR VECTOR FALSE>)
   <COND (<G? .DEPTH 25> <ERROR RECURSION-DEPTH-EXCESSIVE S-EXP>)>
   <COND (<AND <==? <EXTRACT-HOST .S> ,HOSTNUMBER>
	       <N==? .S <SET US <EXTRACT-RCVR .S>>>>
	  <SET S .US>)>
   <COND (<AND <NOT <SET IV <VCTSRC .DB .S>>> <SET US <UC? .S>>>
	  <SET IV <VCTSRC .DB .US>>)>
   <COND
    (.IV
     <SET EV <2 .IV>>
     <UNIQUIFY
      <MAPF ,LIST
	    <FUNCTION (EE) 
		    #DECL ((EE) <OR ATOM STRING>)
		    <COND (<TYPE? .EE ATOM> <MAPRET .EE>)
			  (ELSE <MAPRET !<S-EXP .EE .DB <+ .DEPTH 1>>>)>>
	    .EV>>)
    (ELSE <LIST .S>)>>

<DEFINE GETDB (EX "AUX" (OUTCHAN .OUTCHAN)) 
   #DECL ((EX) LIST (VALUE) <OR LIST FALSE> (OUTCHAN) CHANNEL)
   <MAPF ,LIST
	 <FUNCTION (EE "AUX" DD) 
		#DECL ((EE) <OR STRING LIST> (DD) ANY)
		<COND (<TYPE? .EE STRING>
		       <SET DD <DATUM .EE>>
		       <COND (<TYPE? .DD VECTOR>)
			     (.DD
			      <PRINC .EE>
			      <PRINC " -- Data base is not in proper format.">
			      <MAPLEAVE <>>)
			     (ELSE
			      <PRINC .EE>
			      <PRINC " -- Data base not found: ">
			      <PRINC .DD>
			      <MAPLEAVE <>>)>
		       <MAPRET .DD>)
		      (ELSE <MAPRET <GETDB .EE>>)>>
	 .EX>>

"UC? -- given string, returns new string of all upper-case, only
  if original had lower case somewhere"

<DEFINE UC? (S "AUX" (LC? <>)) 
	#DECL ((S) STRING (LC?) <OR 'T FALSE> (VALUE) <OR STRING FALSE>)
	<MAPR ,STRING
	      <FUNCTION (SS "AUX" (C <1 .SS>) (CF <ASCII .C>)) 
		      #DECL ((SS) STRING (C) CHARACTER (CF) FIX)
		      <COND (<AND <G=? .CF 97> <L=? .CF 122>>
			     <SET LC? T>
			     <MAPRET <ASCII <- .CF 32>>>)>
		      <COND (<AND <LENGTH? .SS 1> <NOT .LC?>>
			     <MAPLEAVE <>>)
			    (ELSE <MAPRET .C>)>>
	      .S>>

\

"utilities for use with user specifications, addressees, etc."

<SETG ALLOW-TOURISTS <>>      ;"T to allow tourists mailboxes (for testing...)"

<GDECL (ALLOW-TOURISTS) <OR ATOM FALSE>>

"EXTRACT-HOST -- given string usr@host, returns fix, host number, or
 string, if host unknown in tables.  for simple usr type key, returns
 ,HOSTNUMBER"

<DEFINE EXTRACT-HOST EH (KEY "AUX" TT DD) 
	#DECL ((KEY) STRING (VALUE) <OR FIX STRING> (TT) <OR FALSE STRING>
	       (DD) <OR FALSE FIX STRING> (EH) ACTIVATION)
	<COND (<SET TT <ATSIGN? .KEY>>
	       <SET TT <REST .TT>>
	       <REPEAT ()
		       <COND (<EMPTY? .TT> <RETURN ,HOSTNUMBER .EH>)
			     (<MEMQ <1 .TT> " 	"> <SET TT <REST .TT>>)
			     (<RETURN>)>>
	       <COND (<SET DD <HOST .TT>>)
		     (<AND <SET DD <NUMBER? .TT>> <HOST .DD>>
		      .DD)
		     (ELSE .TT)>)
	      (ELSE ,HOSTNUMBER)>>

<DEFINE ATSIGN? (KEY "AUX" C (SKIP <>) (BEST <>)) 
	#DECL ((KEY) STRING (C) CHARACTER (SKIP) <OR ATOM FALSE>
	       (BEST) <OR FALSE STRING>)
	<MAPR <>
	      <FUNCTION (S) 
		      #DECL ((S) STRING)
		      <COND (.SKIP <SET SKIP <>>)
			    (<==? <SET C <1 .S>> !\@>
			     <SET BEST .S>)
			    (<==? .C !\> <SET SKIP T>)
			    (ELSE <SET SKIP <>>)>>
	      .KEY>
	.BEST>

<DEFINE NUMBER? (S "AUX" (N 0)) 
	#DECL ((S) STRING (N) <OR FIX FALSE>)
	<MAPF <>
	      <FUNCTION (C) 
		      #DECL ((C) <OR FIX CHARACTER>)
		      <SET C <ASCII .C>>
		      <COND (<OR <L? .C <ASCII !\0>> <G? .C <ASCII !\9>>>
			     <MAPLEAVE <SET N <>>>)
			    (ELSE <SET N <+ <- .C <ASCII !\0>> <* .N 10>>>)>>
	      .S>
	.N>

"EXTRACT-RCVR -- given usr key, returns user string (i.e. all but @host)"

<SETG RCVR-STRING <REST <ISTRING 30 !\ > 30>>

<GDECL (RCVR-STRING) STRING>

<DEFINE EXTRACT-RCVR (KEY "AUX" TT L) 
	#DECL ((VALUE KEY) STRING (TT) <OR FALSE STRING> (L) FIX)
	<COND (<SET TT <ATSIGN? .KEY>>
	       <SET L <- <LENGTH .KEY> <LENGTH .TT>>>
	       <COND (<G? .L 30> <SUBSTRUC .KEY 0 .L>)
		     (ELSE
		      <SUBSTRUC .KEY 0 .L <BACK ,RCVR-STRING .L>>)>)
	      (ELSE .KEY)>>

\ 

<DEFINE KEYGET (S
		"OPTIONAL" (UPPERCASEL? T) (LNM? T)
		"AUX" IV (DD 0) U H (KDB <DATUM "COMKEY">)
		LNM NA HS)
        #DECL ((U S) STRING (IV) <OR VECTOR FALSE> (DD) <OR FALSE FIX STRING ATOM>
	       (UPPERCASEL? LNM?) <OR ATOM FALSE> (NA VALUE) <OR FALSE STRING>
	       (KDB) VECTOR (LNM) <OR FALSE VECTOR> (H) <OR FIX STRING>
	       (HS) <OR STRING FALSE>)
	<COND (<SET HS <ATSIGN? .S>>
	       <SET HS <REST .HS>>
	       <SET H <EXTRACT-HOST .S>>
	       <SET U <EXTRACT-RCVR .S>>
	       <COND (<EMPTY? .U>
		      <COND (.UPPERCASEL? #FALSE ("Empty Addressee Name"))
			    (ELSE #FALSE ("Empty Addressee in Forwarding Address"))>)
		     (<NOT <TYPE? .H FIX>>
		      <COND (.UPPERCASEL? #FALSE ("Invalid Host Address"))
			    (ELSE ,BADHOST)>)
		     (<==? .H ,HOSTNUMBER>
		      <COND (.UPPERCASEL? <KEYGET .U>)
			    (<AND <SIXBIT? .U>
				  <FILE-EXISTS? ".FILE." "(DIR)" "DSK" .U>>
			     .U)
			    (,ALLOW-TOURISTS .U)
			    (ELSE #FALSE ("Invalid Local Addressee"))>)
		     (ELSE .S)>)
	      (<=? .S "UNKNOWN"> #FALSE ("Addressee was UNKNOWN"))
	      (ELSE			        ;"CONVERT ALL UPPERCASE CHARS TO UC"
	       <SET S <UPPERCASE <STRING .S>>>
	       <COND (<AND <SET IV <VCTSRC .KDB .S>> <SET DD <2 .IV>>>
		      <COND (<==? .DD 0>		     ;"TERMINAL MAILBOX"
			     .S)
			    (<TYPE? .DD STRING>			 ;"LINK TO NEXT"
			     <KEYGET .DD>)
			    (<TYPE? .DD ATOM>	       ;"TERMINAL ALSO, NO LINK"
			     <SPNAME .DD>)>)
		     (ELSE
		      <COND (<AND .DD
				  <OR <FILE? .S>
				      <STRUC? .S>
				      <==? .S <MEMBER "BUG-" .S>>>>
			     .S)
			    (<SET NA <LSR-EXTRACT <LSR-ENTRY .S> ,$NETA>>
			     <COND (<EMPTY? .NA> ,BADHOST)
				   (<SET NA <CHECK-NET-ADDRESS .S .NA>>)>)
			    (<AND .LNM? <SET LNM <LAST-NAME <UPPERCASE .S>>>>
			     <COND (<SET NA <CHECK-LAST-NAME .LNM>>)
				   (ELSE ,NOBOX)>)
			    (ELSE ,NOBOX)>)>)>>

<SETG BADHOST #FALSE ("Invalid Host in Forwarding Address")>
<SETG NOBOX #FALSE ("No Mailbox for that name")>

<GDECL (BADHOST NOBOX) <FALSE STRING>>

<DEFINE CHECK-NET-ADDRESS (S NA) 
	#DECL ((S NA) STRING)
	<COND (<ATSIGN? .NA>)
	      (<OR <FILE? .S> <STRUC? .S>>)
	      (ELSE <SET NA <STRING .S !\@ .NA>>)>
	<KEYGET .NA <>>>

<DEFINE CHECK-LAST-NAME (KDB "AUX" (K .KDB) (UU <>)) 
   #DECL ((KDB K) <VECTOR [REST STRING]> (UU) <OR FALSE VECTOR>)
   <COND (<G? <LENGTH .KDB> 2>
	  <REPEAT ()
		  <COND (<LENGTH? .K 1>
			 <COND (.UU <RETURN <KEYGET <1 .UU> T <>>>)
			       (ELSE
				<RETURN <CHTYPE ("Ambiguous Last Name" .KDB) FALSE>>)>)
			(<==? <HOST <UPPERCASE <2 .K>>> ,HOSTNUMBER>
			 <COND (.UU
				<RETURN <CHTYPE ("Ambiguous Local Name" .KDB) FALSE>>)
			       (ELSE <SET UU .K>)>)>
		  <SET K <REST .K 2>>>)
	 (<==? <LENGTH .KDB> 2> <KEYGET <1 .KDB> T <>>)>>

<DEFINE SIXBIT? (S)
	#DECL ((S) STRING)
	<COND (<AND <LENGTH? .S 6>
		    <MAPF <>
			  <FUNCTION (C "AUX" (A <ASCII .C>))
				    #DECL ((C) CHARACTER (A) FIX)
				    <COND (<OR <AND <G? .A *40*>
						    <L? .A *140*>>
					       <AND <G=? .A <ASCII !\a>>
						    <L=? .A <ASCII !\z>>>>
					   .S)
					  (ELSE <MAPLEAVE <>>)>>
			  .S>>
	       .S)>>

\ 

"UNIQUIFY -- given list of strings and atoms, returns same
  list with duplicates removed."

<DEFINE UNIQUIFY (L "AUX" (M .L)) 
	#DECL ((M L VALUE) <LIST [REST <OR STRING ATOM>]>)
	<COND (<LENGTH? .M 1> .M)
	      (ELSE
	       <REPEAT ()
		       <COND (<LENGTH? .M 1> <RETURN>)
			     (<MEMBER <1 .M> <REST .M>>
			      <SET L <SET M <REST .M>>>)
			     (ELSE <RETURN>)>>
	       <REPEAT ()
		       <COND (<LENGTH? .M 2> <RETURN .L>)
			     (<MEMBER <2 .M> <REST .M 2>>
			      <PUTREST .M <REST .M 2>>)
			     (ELSE <SET M <REST .M>>)>>)>>

"FILE? -- given string, returns string of file spec if a file addressee"

<DEFINE FILE? (SS "AUX" FF) 
	#DECL ((SS) STRING (FF) <OR STRING FALSE>)
	<COND (<AND <SET FF <OR <MEMBER !\[ .SS> <MEMBER !\{ .SS>>>
		    <MAPR ,STRING
			  <FUNCTION (S) 
				  #DECL ((S) STRING)
				  <COND (<OR <=? <1 .S> !\]> <=? <1 .S> !\}>>
					 <MAPSTOP>)
					(<LENGTH? .S 1> <MAPLEAVE #FALSE ()>)
					(<G=? <ASCII <1 .S>> 32>
					 <MAPRET <1 .S>>)
					(<AND <==? <1 .S> !\>
					      <MEMQ <2 .S> ":; []{}">>
					 <MAPRET <1 .S>>)
					(ELSE <MAPRET>)>>
			  <REST .FF>>>)>>

<DEFINE STRUC? (SS) 
	#DECL ((SS) STRING (VALUE) <OR FALSE STRING>)
	<COND (<AND <MEMBER !\( .SS> <MEMBER !\) .SS>>)>>

\

<DEFINE DATUM (DNAME "AUX" A R (LAST <>) ATM (OBLIST .OBLIST)) 
	#DECL ((DNAME) STRING (A) <OR CHANNEL FALSE> (R LAST DTYPE) ANY
	       (ATM) <OR ATOM FALSE> (OBLIST) <LIST [REST OBLIST]>)
	<COND (<AND <SET ATM <LOOKUP .DNAME <1 .OBLIST>>>
		    <GASSIGNED? .ATM>
		    ,.ATM>)
	      (<OR <AND <MEMBER !\; .DNAME>
			<SET A <OPEN "READB" .DNAME>>>
		   <SET A <OPEN "READB" .DNAME ">" "DSK" "COMDAT">>>
	       <SET LAST
		    <REPEAT ()
		       <SET R <READ .A '<>>>
		       <COND (<NOT .R>
			      <SET ATM <INSERT .DNAME <1 .OBLIST>>>
			      <SETG .ATM .LAST>
			      <RETURN .LAST>)
			     (ELSE <SET LAST .R>)>>>
	       <AND <NOT <0? <1 .A>>> <CLOSE .A>>
	       .LAST)>>

<ENDPACKAGE>
