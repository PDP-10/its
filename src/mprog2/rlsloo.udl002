
<PACKAGE "RLSLOOK">

<ENTRY DICT-LOOK>

<FLOAD "LIBRM4;ZEROS NBIN">

"DICT-LOOK -- look up an rls in the dictionary.  Takes:
	1) a Haverform (the RLS)
	2) a Dictionary
	3) (optionally) whether to return the value, or just check
	   for existence.
"

<DEFINE DICT-LOOK (HAVERF DS "OPTIONAL" (RETVAL T)
		   "AUX" (HF <0REST .HAVERF>) (H1 <1 .HF>) (HL <LENGTH .HF>)
			 (KL <- <* 36 <LENGTH .HF>> 1 <ZEROS .H1>>) NN
			 (DL <* 2 .KL>) HD WD (LOW 1) LI HIGH HI (MID 0) MI MM)
	#DECL ((HAVERF HF) <UVECTOR [REST FIX]> (DS WD) VECTOR (NN) FIX
	       (VALUE) <OR FALSE VECTOR STRING <LIST [REST <OR VECTOR STRING>]>>
	       (LI MI HI H1 HL KL DL LOW HIGH MID) FIX (MM) <OR FIX UVECTOR>
	       (RETVAL) <OR ATOM FALSE> (HD) <OR UVECTOR FALSE>)
	<PROG ()
	      <COND (<G? .DL <LENGTH .DS>> <RETURN <>>)>
	      <COND (<SET HD <NTH .DS <- .DL 1>>> <SET WD <NTH .DS .DL>>)
		    (ELSE <RETURN <>>)>
	      <COND (<1? .HL>
		     <SET HIGH <LENGTH .HD>>
		     <COND (<==? .H1 <NTH .HD .HIGH>> <SET NN .HIGH>)
			   (<==? .H1 <NTH .HD .LOW>> <SET NN .LOW>)
			   (<REPEAT ()
				    <SET MID </ <+ .LOW .HIGH> 2>>
				    <COND (<OR <==? .MID .HIGH> <==? .MID .LOW>>
					   <RETURN <>>)>
				    <COND (<==? .H1 <NTH .HD .HIGH>>
					   <RETURN <SET NN .HIGH>>)
					  (<==? .H1 <SET MM <NTH .HD .MID>>>
					   <RETURN <SET NN .MID>>)
					  (<L? .H1 .MM> <SET HIGH .MID>)
					  (ELSE <SET LOW .MID>)>>)
			   (ELSE <RETURN <>>)>
		     <COND (.RETVAL <NTH .WD .NN>) (ELSE ())>)
		    (ELSE
		     <SET LI 0>
		     <SET HIGH </ <LENGTH .HD> .HL>>
		     <SET HI <- <LENGTH .HD> .HL>>
		     <COND (<KEY=? .HF <REST .HD .HI>> <SET NN .HIGH>)
			   (<KEY=? .HF <REST .HD .LI>> <SET NN .LOW>)
			   (<REPEAT ()
				    <SET MID </ <+ .LOW .HIGH> 2>>
				    <SET MI <- <* .MID .HL> .HL>>
				    <COND (<OR <==? .MID .HIGH> <==? .MID .LOW>>
					   <RETURN <>>)>
				    <COND (<KEY=? .HF <REST .HD .HI>>
					   <RETURN <SET NN .HIGH>>)
					  (<KEY=? .HF <SET MM <REST .HD .MI>>>
					   <RETURN <SET NN .MID>>)
					  (<KEYL? .HF .MM>
					   <SET HIGH .MID>
					   <SET HI .MI>)
					  (ELSE
					   <SET LOW .MID>
					   <SET LI .MI>)>>)
			   (ELSE <RETURN <>>)>
		     <COND (.RETVAL <NTH .WD .NN>) (ELSE ())>)>>>

<DEFINE 0REST (X)
	#DECL ((VALUE X) <UVECTOR [REST FIX]>)
	<REPEAT ()
		<OR <0? <1 .X>> <RETURN .X>>
		<SET X <REST .X>>>>

<DEFINE KEY=? (HF ENTRY)
	#DECL ((HF ENTRY) <UVECTOR [REST FIX]>)
	<MAPF <>
	      <FUNCTION (H E) #DECL ((H E) FIX) <OR <==? .H .E> <MAPLEAVE <>>>>
	      .HF
	      .ENTRY>>

<DEFINE KEYL? (HF ENTRY)
	#DECL ((HF ENTRY) <UVECTOR [REST FIX]>)
	<MAPF <>
	      <FUNCTION (H E) #DECL ((H E) FIX) <OR <G=? .H .E> <MAPLEAVE <>>>>
	      .HF
	      .ENTRY>>

<ENDPACKAGE>
