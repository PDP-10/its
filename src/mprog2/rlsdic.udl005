
<PACKAGE "RLSDICT">

<ENTRY CDICT
       MAKE-DICTS
       MAKE-ENTRY
       MAKE-RLS
       ENTRY-TYPES>

<USE "MDTYPE" "MDTABLE" "HAVERFORM" "SORTX" "DATA-SAVE">

"MAKE-DICTS -- takes word vector, optional maximum word rls size, optional
flag which tells whether to check for word duplicates"

<DEFINE MAKE-DICTS (WL
		    "OPTIONAL" (OFILE <>) (MW 72) (CHECK <>)
			       (EMAKE ,MAKE-ENTRY) (RMAKE ,MAKE-RLS)
		    "AUX" (TBLSIZ <* 2 .MW>)
			  (RLSTBL <IVECTOR .TBLSIZ '()>)
			  (PRETBL <IVECTOR .TBLSIZ '()>))
   #DECL ((WL) <UVECTOR [REST VECTOR]> (EMAKE RMAKE) APPLICABLE
	  (RLSTBL PRETBL) <VECTOR [REST STRUCTURED]>)
   <MAPF <>
    <FUNCTION (W "AUX" RLS WRD P R) 
       #DECL ((WRD) ANY (W) <VECTOR STRING UVECTOR> (RLS) <UVECTOR [REST FIX]>
	      (P R) <VECTOR [REST STRUCTURED]> (MW TBLSIZ) FIX)
       <SET WRD <APPLY .EMAKE .W>>
       <SET RLS <APPLY .RMAKE .W>>
       <REPEAT ((PRESIZ 10))
	       #DECL ((PRESIZ) FIX)
	       <COND (<L? <LENGTH .RLS> .PRESIZ> <RETURN>)
		     (<G? <LENGTH .RLS> .MW> <ERROR WORD-TOO-BIG .WRD>)>
	       <SET P <REST .PRETBL <* 2 <- .PRESIZ 1>>>>
	       <DINSERT .P <SUBSTRUC .RLS 0 .PRESIZ> <> .CHECK>
	       <SET PRESIZ <+ .PRESIZ 10>>>
       <SET R <REST .RLSTBL <* 2 <- <LENGTH .RLS> 1>>>>
       <DINSERT .R .RLS .WRD .CHECK>>
    .WL>
   <REPEAT ((R .RLSTBL))
	   #DECL ((R) <VECTOR [REST STRUCTURED]>)
	   <COND (<EMPTY? .R> <RETURN>)
		 (<EMPTY? <1 .R>> <PUT .R 1 <>> <PUT .R 2 <>>)
		 (ELSE
		  <PUT .R 1 <UVECTOR !<1 .R>>>
		  <PUT .R 2 <VECTOR !<2 .R>>>)>
	   <SET R <REST .R 2>>>
   <REPEAT ((P .PRETBL))
	   #DECL ((P) <VECTOR [REST STRUCTURED]>)
	   <COND (<EMPTY? .P> <RETURN>)
		 (<EMPTY? <1 .P>> <PUT .P 1 <>> <PUT .P 2 <>>)
		 (ELSE
		  <PUT .P 1 <UVECTOR !<1 .P>>>
		  <PUT .P 2 <VECTOR !<2 .P>>>)>
	   <SET P <REST .P 2>>>
   <SETG CDICT [.RLSTBL .PRETBL]>
   <COND (.OFILE <SAVE-DATA CDICT .OFILE>)>
   "DONE">

"MAKE-ENTRY -- the default dictionary entry maker.  Should return
a two element vector of the entry id (the word) and anything else,
such as the vector of parts of speech or morphology.  Or if just the
word is interesting, return it as a string."

<SETG ENTRY-TYPES ()>

<DEFINE MAKE-ENTRY (W "AUX" WRD TT W2)
	#DECL ((W) VECTOR (WRD VALUE) <OR STRING <VECTOR STRING UVECTOR>>)
	<COND (<==? <LENGTH .W> 3>
	       <COND (<TYPE? <3 .W> UVECTOR>
		      <SET WRD <VECTOR <1 .W> <2 .W>>>)
		     (ELSE <ERROR BAD-DICTIONARY-ENTRY .W>)>)
	      (<==? <LENGTH .W> 2> <SET WRD .W>)
	      (ELSE <ERROR BAD-DICTIONARY-ENTRY .W>)>
	<COND (<EMPTY? <2 .W>> <SET WRD <1 .W>>)
	      (ELSE
	       <SORT <> <SET W2 <2 .W>>>
	       <COND (<SET TT <MEMBER .W2 ,ENTRY-TYPES>>
		      <PUT .W 2 <1 .TT>>)
		     (ELSE
		      <SETG ENTRY-TYPES (.W2 !,ENTRY-TYPES)>)>)>
	.WRD>

"MAKE-RLS -- the default rls maker for dictionaries.  Should return
a uvector of fixes."

<DEFINE MAKE-RLS (W)
	#DECL ((W) <OR STRING VECTOR> (VALUE) <UVECTOR [REST FIX]>)
	<COND (<TYPE? .W STRING> <RLS-FOR-WORD .W>)
	      (<==? <LENGTH .W> 3>
	       <COND (<TYPE? <3 .W> UVECTOR>
		      <3 .W>)
		     (ELSE <ERROR BAD-DICTIONARY-ENTRY .W>)>)
	      (<==? <LENGTH .W> 2>
	       <RLS-FOR-WORD <1 .W>>)
	      (ELSE <ERROR BAD-DICTIONARY-ENTRY .W>)>>

\ 

"DINSERT -- takes a table, an rls (the key) and an entry (the word)
and adds them to the table's first two lists"

<DEFINE DINSERT (TBL KEY ENT C?
		 "AUX" (DNS <0REST <DENSER .KEY <UVECTOR 0 0>>>)
		       (SIZ <+ 1 </ <LENGTH .KEY> 36>>) (KL <- .SIZ 1>)
		       (KTOP <1 .TBL>) (ETOP <2 .TBL>))
	#DECL ((TBL) <VECTOR [REST STRUCTURED]> (KEY DNS) <UVECTOR [REST FIX]>
	       (ENT) <OR FALSE VECTOR STRING> (C?) ANY (SIZ KL) FIX
	       (KTOP ETOP) LIST)
	<COND (<EMPTY? .KTOP>
	       <SET KTOP <LIST !.DNS>>
	       <AND .ENT <SET ETOP (.ENT)>>)
	      (<HAVER=? .DNS .KTOP>
	       <AND .ENT <COGNATE .ENT .ETOP .C?>>)
	      (<HAVERL? .DNS .KTOP>
	       <SET KTOP (!.DNS !.KTOP)>
	       <AND .ENT <SET ETOP (.ENT !.ETOP)>>)
	      (ELSE
	       <REPEAT ((K .KTOP) (E .ETOP) (NXT <REST .K .SIZ>)
			(LST <REST .K .KL>))
		       #DECL ((K E NXT LST) LIST)
		       <COND (<EMPTY? .NXT>
			      <PUTREST .LST (!.DNS)>
			      <AND .ENT <PUTREST .E (.ENT)>>
			      <RETURN>)
			     (<HAVER=? .DNS .NXT>
			      <AND .ENT <COGNATE .ENT <REST .E> .C?>>
			      <RETURN>)
			     (<HAVERL? .DNS .NXT>
			      <PUTREST .LST (!.DNS !.NXT)>
			      <AND .ENT <PUTREST .E (.ENT !<REST .E>)>>
			      <RETURN>)
			     (ELSE
			      <SET LST <REST .LST .SIZ>>
			      <SET NXT <REST .LST>>
			      <AND .ENT <SET E <REST .E>>>)>>)>
	<PUT .TBL 1 .KTOP>
	<PUT .TBL 2 .ETOP>>

"COGNATE -- puts a word vector into the word entry list.  If there is
already a word there, makes a list, printing a message if checking is on
and the word is already there."

<DEFINE COGNATE (ENT ENTABLE C? "AUX" (ET <1 .ENTABLE>))
	#DECL ((ENT) <OR VECTOR STRING> (ENTABLE) LIST (C?) ANY)
	<OR <TYPE? .ET LIST> <SET ET (.ET)>>
	<COND (<AND .C?
		    <MAPF <>
			  <FUNCTION (W) 
			       <AND <=? <1 .W> <1 .ENT>>
				    <MAPLEAVE T>>>
			  .ET>>
	       <PRINT "DUPLICATE WORD">
	       <PRIN1 <COND (<TYPE? .ENT VECTOR> <1 .ENT>)(ELSE .ENT)>>)
	      (ELSE <SET ET (.ENT !.ET)>)>
	<PUT .ENTABLE 1 .ET>>

"0REST -- rest a haverform until its first element is non-zero"

<DEFINE 0REST (X)
	#DECL ((X VALUE) <UVECTOR [REST FIX]>)
	<REPEAT ()
		<OR <0? <1 .X>> <RETURN .X>>
		<SET X <REST .X>>>>

"HAVER=? -- compare two haverforms, one entered in a table of same, for
equality."

<DEFINE HAVER=? (DNS TBL) 
	#DECL ((DNS) <UVECTOR [REST FIX]> (TBL) <LIST [REST FIX]>)
	<REPEAT ()
		<COND (<EMPTY? .DNS> <RETURN T>)
		      (<N==? <1 .DNS> <1 .TBL>> <RETURN <>>)
		      (ELSE <SET DNS <REST .DNS>> <SET TBL <REST .TBL>>)>>>

"HAVERL? -- return T only if dns is 'less-than' the haverform in the table."

<DEFINE HAVERL? (DNS TBL) 
	#DECL ((DNS) <UVECTOR [REST FIX]> (TBL) <LIST [REST FIX]>)
	<REPEAT ()
		<COND (<EMPTY? .DNS> <RETURN <>>)
		      (<L? <1 .DNS> <1 .TBL>> <RETURN T>)
		      (ELSE <SET DNS <REST .DNS>> <SET TBL <REST .TBL>>)>>>

<ENDPACKAGE>

\