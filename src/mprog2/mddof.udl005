<PACKAGE "MDDOF">

<ENTRY FDOF NEW-DOF>

<USE "MDTYPE" "MDTABLE" "MDERRS">

"FDOF -- given a word (STRING), length, MCOD and error correction code
makes a DOF which measures the fit of the word to the code"

<DEFINE FDOF (WRD L COD "OPTIONAL" (CORR ,NOSALE) (CPOS 0) (DF <NEW-DOF>)
	      "AUX" (CFSM 0.0000000) (FDSM 0.0000000) (POS 0) RLS SP? E E1 RTYP
		    RTYP1 TYP TYP1 CNF CNF1 (MERRS 0) (EV ,ERROR-VECTOR)
		    (SKIP-MARK? T) (CORRECTED? <>))
   #DECL ((VALUE DF) DOF (WRD) STRING (COD) MCOD (CFSM FDSM CNF CNF1) FLOAT
	  (TYP TYP1 RTYP RTYP1) ATOM (L CORR CPOS POS) FIX (E) ELT (MERRS) FIX
	  (E1) <OR FALSE ELT> (RLS) <UVECTOR [REST ATOM]>
	  (EV) <UVECTOR [REST FIX]> (SP? SKIP-MARK? CORRECTED?) <OR ATOM FALSE>)
   <COND (<==? .CORR ,NOSALE> <SET CORRECTED? T>)>
   <COND (<G? .CPOS .L> <SET CPOS .L>)>
   <SET RLS <RLS&SPACES .WRD>>
   <MAPR <>
	 <FUNCTION (X)
		   #DECL ((X) <UVECTOR [REST FIX]>)
		   <PUT .X 1 0>>
	 .EV>
   <REPEAT ()
     <COND (<EMPTY? .RLS> <RETURN>)
	   (.CORRECTED?)
	   (<ERROR-LOC? .CORR .CPOS .POS>
	    <SET SKIP-MARK? T>
	    <SET E <MSD <1 .COD>>>
	    <COND (<==? .CORR ,DD-DSH>
		   <COND (<N==? <2 .RLS> ELT>
			  <SET FDSM <+ .FDSM 0.5>>
			  <SET CFSM
			       <- .CFSM <SPACE-ERROR ELT <2 .RLS> 0.5 .EV>>>
			  <SET MERRS <+ .MERRS 1>>)>
		   <SET RLS <REST .RLS 2>>)
		  (<==? .CORR ,DSH-DD>
		   <COND (<N==? <STYP .E> ELT>
			  <SET FDSM <+ .FDSM 0.5>>
			  <SET CFSM
			       <- .CFSM <SPACE-ERROR <STYP .E> ELT 0.5 .EV>>>
			  <SET MERRS <+ .MERRS 1>>)>
		   <SET COD <MREST .COD>>)
		  (<==? .CORR ,CHGMRK>
		   <COND (<==? <1 .RLS> DASH> <SET CORR ,DSHDOT>)>)>
	    <SET MERRS <+ .MERRS 1>>
	    <SET CORRECTED? T>)>
     <SET E <MSD <1 .COD>>>
     <COND (<NOT .SKIP-MARK?>
	    <SET FDSM <+ .FDSM <SET CNF <ABS <MCNF .E>>>>>
	    <COND (<==? <MTYP .E> <1 .RLS>>)
		  (<SET CNF <- .CNF>> <SET MERRS <+ .MERRS 1>>)>
	    <SET CFSM <+ .CFSM .CNF>>)>
     <SET TYP <STYP .E>>
     <SET CNF <ABS <SCNF .E>>>
     <SET RTYP <2 .RLS>>
     <COND (.CORRECTED?)
	   (<ERROR-LOC? .CORR .CPOS .POS T>
	    <COND (<OR <==? .CORR ,DRPDOT>
		       <==? .CORR ,DRPDSH>
		       <==? .CORR ,DRPTWO>>
		   <COND (<0? .POS>
			  <COND (<==? .CORR ,DRPTWO>
				 <COND (<N==? <2 .RLS> ELT>
					<SET MERRS <+ .MERRS 1>>)>
				 <SET RLS <REST .RLS 2>>)>
			  <SET RLS <REST .RLS 2>>
			  <SET FDSM <+ .FDSM 0.5>>
			  <SET CFSM <- .CFSM <SPACE-ERROR .TYP ELT 0.5 .EV>>>)
			 (ELSE
			  <SET RTYP <2 .RLS>>
			  <COND (<==? .CORR ,DRPTWO>
				 <SET RLS <REST .RLS 2>>
				 <COND (<N==? <2 .RLS> ELT>
					<SET MERRS <+ .MERRS 1>>)>)>
			  <SET RTYP1 <4 .RLS>>
			  <SET TYP1 ELT>
			  <SET CNF1 0.5>
			  <COND (<OR <==? .RTYP ELT>
				     <AND <==? .RTYP LTR> <N==? .RTYP1 ELT>>>
				 <SET TYP1 .TYP>
				 <SET TYP ELT>
				 <SET CNF1 .CNF>
				 <SET CNF 0.5>)>
			  <SET FDSM <+ .FDSM .CNF1>>
			  <SET CFSM
			       <- .CFSM <SPACE-ERROR .TYP1 .RTYP1 .CNF1 .EV>>>
			  <SET RLS <REST .RLS 2>>)>)
		  (ELSE
		   <SET E1 <>>
		   <COND (<==? .CORR ,ADDMRK>
			  <COND (<==? DSH
				      <COND (<0? .POS> <MTYP .E>)
					    (<SET E1 <MSD <2 .COD>>>
					     <MTYP .E1>)>>
				 <SET CORR ,ADDDSH>)>
			  <SET COD <MREST .COD>>)
			 (<==? .CORR ,ADDTWO>
			  <SET E1 <MSD <2 .COD>>>
			  <SET CNF1 <SCNF .E1>>
			  <SET TYP1 <STYP .E1>>
			  <SET FDSM <+ .FDSM .CNF1>>
			  <SET CFSM <- .CFSM <SPACE-ERROR .TYP1 ELT .CNF1 .EV>>>
			  <COND (<N==? .TYP1 ELT> <SET MERRS <+ .MERRS 1>>)>
			  <OR <0? .POS> <SET E1 <MSD <3 .COD>>>>
			  <SET COD <MREST .COD 2>>)>
		   <COND (.E1
			  <SET E <BETTER-ELT .RTYP .E .E1>>
			  <SET TYP <STYP .E>>
			  <SET CNF <ABS <SCNF .E>>>)>)>
	    <SET MERRS <+ .MERRS 1>>
	    <SET CORRECTED? T>)>
     <COND (<NOT <0? .POS>>
	    <SET FDSM <+ .FDSM .CNF>>
	    <SET CFSM <- .CFSM <SPACE-ERROR .TYP .RTYP .CNF .EV>>>
	    <SET RLS <REST .RLS 2>>
	    <SET COD <MREST .COD>>)>
     <SET POS <+ .POS 1>>
     <SET SKIP-MARK? <>>>
   <SET SP? <NOT <0? <+ !.EV>>>>
   <PUT .DF ,CNFSUM .CFSM>
   <PUT .DF ,FRDSUM .FDSM>
   <PUT .DF ,NMELTS .L>
   <PUT .DF ,ETOL <EL .EV>>
   <PUT .DF ,LTOW <LW .EV>>
   <PUT .DF ,LTOE <LE .EV>>
   <PUT .DF ,WTOL <WL .EV>>
   <PUT .DF ,ETOW <EW .EV>>
   <PUT .DF ,WTOE <WE .EV>>
   <PUT .DF ,SPCERR .SP?>
   <PUT .DF ,MRKERR <NOT <0? .MERRS>>>
   <PUT .DF ,MKCHNG .MERRS>
   <PUT .DF ,MRKCOR .CORR>
   <PUT .DF ,MRKPOS .CPOS>>

"NEW-DOF -- make an empty dof for someone to use."

<DEFINE NEW-DOF ()
	#DECL ((VALUE) DOF)
	<DOF 0.0 0.0 0 0 0 0 0 0 0 <> <> 0 0 0>>

\ 

"SPACE-ERROR -- type-sent, type-wanted, confidence, space-error-vector"

<DEFINE SPACE-ERROR (TYP RTYP CNF EV "AUX" (EDGE <G? ,ON-EDGE .CNF>)) 
	#DECL ((TYP RTYP) ATOM (CNF VALUE) FLOAT (EV) <UVECTOR [6 FIX]>
	       (EDGE) <OR ATOM FALSE>)
	<COND (<==? .RTYP .TYP> <SET CNF <- .CNF>>)
	      (<==? .RTYP ELT>
	       <COND (<==? .TYP LTR>
		      <PUT .EV ,EL <+ <EL .EV> <COND (.EDGE 1) (ELSE 2)>>>)
		     (<==? .TYP WRD> <PUT .EV ,EW <+ <EW .EV> 1>>)>)
	      (<==? .RTYP LTR>
	       <COND (<==? .TYP ELT>
		      <COND (,SQUASH <SET CNF 0.0>)
			    (<PUT .EV ,LE <+ <LE .EV> <COND (.EDGE 1) (ELSE 2)>>>)>)
		     (<==? .TYP WRD>
		      <PUT .EV ,LW <+ <LW .EV> <COND (.EDGE 1) (ELSE 2)>>>)>)
	      (<==? .RTYP WRD>
	       <COND (,SQUASH <SET CNF 0.0>)
		     (<==? .TYP LTR>
		      <PUT .EV ,WL <+ <WL .EV> <COND (.EDGE 1) (ELSE 2)>>>)
		     (<==? .TYP ELT> <PUT .EV ,WE <+ <WE .EV> 1>>)>)>
	.CNF>

\ 

<DEFINE BETTER-ELT (TYP E1 E2
		    "AUX" (T1 <STYP .E1>) (T2 <STYP .E2>)
			  (A1 <ABS <SCNF .E1>>) (A2 <ABS <SCNF .E2>>))
	#DECL ((TYP) ATOM (E1 E2 VALUE) ELT (A1 A2) FLOAT (T1 T2) ATOM)
	<COND (<==? .TYP .T1>
	       <COND (<==? .TYP .T2> <COND (<G? .A1 .A2> .E1) (ELSE .E2)>)
		     (ELSE .E1)>)
	      (<==? .TYP .T2> .E2)
	      (<OR <==? .TYP ELT> <==? .TYP WRD>>
	       <COND (<==? .T1 LTR>
		      <COND (<==? .T2 LTR> <COND (<L? .A1 .A2> .E1) (ELSE .E2)>)
			    (ELSE .E2)>)
		     (<==? .T2 LTR> .E2)
		     (<L? .A1 .A2> .E1)
		     (ELSE .E2)>)
	      (<==? .TYP LTR>
	       <COND (<L? .A1 .A2> .E1)(ELSE .E2)>)>>

<DEFINE BETTER-TYP (E T1 T2 "AUX" (TYP <STYP .E>))
	#DECL ((E) ELT (T1 T2 TYP VALUE) ATOM)
	<COND (<==? .T1 .T2> .T1)
	      (<==? .T1 .TYP> .T1)
	      (<==? .T2 .TYP> .T2)
	      (<==? .TYP LTR> .T1)
	      (<==? .T1 LTR> .T1)
	      (<==? .T2 LTR> .T2)
	      (ELSE .T1)>>

"ERROR-LOC? -- takes the error type and position and the current position
and returns T if it is the appropriate location to take action.

DRPDOT, DRPDSH, DRPTWO -- at the space before the correction
DD-DSH, ADDMRK, CHGMRK -- one mark before the correction position
DSH-DD, ADDTWO -- two marks before the correction position

"

<DEFINE ERROR-LOC? (CORR CPOS POS "OPTIONAL" (SP? <>))
	#DECL ((SP?) ANY (CORR CPOS POS) FIX)
	<COND (.SP?
	       <COND (<==? .CORR ,DRPDOT> <==? .POS .CPOS>)
		     (<==? .CORR ,DRPDSH> <==? .POS .CPOS>)
		     (<==? .CORR ,DRPTWO> <==? .POS .CPOS>)
		     (<==? .CORR ,ADDMRK> <==? <+ .POS 1> .CPOS>)
		     (<==? .CORR ,ADDTWO> <==? <+ .POS 2> .CPOS>)>)
	      (<==? .CORR ,DD-DSH> <==? .POS .CPOS>)
	      (<==? .CORR ,DSH-DD> <==? <+ .POS 1> .CPOS>)
	      (<==? .CORR ,CHGMRK> <==? .POS .CPOS>)>>

\ 

<SETG DOFUV <IUVECTOR 150 'ELT>>

<GDECL (DOFUV) <UVECTOR [150 ATOM] [REST ATOM]>>

"RLS&SPACES -- takes a string and returns the expanded RLS with spaces in a
uvector of atoms."

<DEFINE RLS&SPACES (DEC
		    "AUX" (WRD <REST .DEC <- <LENGTH .DEC> 1>>)
			  (U <REST ,DOFUV <- <LENGTH ,DOFUV> 1>>) RLS R)
	#DECL ((DEC WRD) STRING (VALUE) <OR FALSE <UVECTOR [REST ATOM]>>
	       (U) <UVECTOR [REST ATOM]> (RLS) UVECTOR (R) <UVECTOR [REST FIX]>)
	<REPEAT ()
		<COND (<NOT <EMPTY? <SET RLS <RLS-FOR-CHAR <1 .WRD>>>>>
		       <SET R <REST .RLS <- <LENGTH .RLS> 1>>>
		       <REPEAT ()
			       <COND (<LENGTH? .R 1>
				      <COND (<LENGTH? .U 1> <PUT .U 1 WRD>)
					    (ELSE <PUT .U 1 LTR>)>)
				     (ELSE <PUT .U 1 ELT>)>
			       <SET U <BACK .U>>
			       <PUT .U 1 <COND (<0? <1 .R>> DOT) (DASH)>>
			       <SET U <BACK .U>>
			       <AND <==? .RLS .R> <RETURN>>
			       <SET R <BACK .R>>>)
		      (ELSE <RETURN <>>)>
		<AND <==? .DEC .WRD> <RETURN <REST .U>>>
		<SET WRD <BACK .WRD>>>>

<ENDPACKAGE>
