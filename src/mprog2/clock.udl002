<PACKAGE "CLOCK">

<ENTRY CLOCK-QUEUE CLOCK-ON CLOCK-OFF ALARM ALARM-OFF
       CLOCK-HANDLER CLOCK-INTERVAL CINT>

<USE "ITIME">

<NEWTYPE CINT
	 VECTOR
	 '<<PRIMTYPE VECTOR>
	    FIX
	    FIX
	    <OR ATOM APPLICABLE>>>

<SETG CTIME 1>
<SETG CINTERVAL 2>
<SETG CHANDLER 3>
<MANIFEST CTIME CINTERVAL CHANDLER>

<SETG CLOCK-DEBUG? <>>
<SETG CLOCK-QUEUE ()>
<SETG CLOCK-HANDLER <>>
<SETG CLOCK-INTERVAL 60>
<GDECL (CLOCK-DEBUG?) <OR ATOM FALSE>
       (CLOCK-QUEUE) <LIST [REST CINT]>
       (CLOCK-HANDLER) <OR HANDLER FALSE>
       (CLOCK-INTERVAL) FIX>

<DEFINE CLOCK-ON ("OPTIONAL" (INIT? <>))
	#DECL ((INIT?) <OR ATOM FALSE>)
	<COND (.INIT? <SETG CLOCK-QUEUE ()>)>
	<REALTIMER 0>
	<REALTIMER ,CLOCK-INTERVAL>
	<COND (<NOT ,CLOCK-HANDLER>
	       <SETG CLOCK-HANDLER <ON "REALT" ,CLOCK-MANAGER 4>>)>>

<DEFINE CLOCK-OFF ("OPTIONAL" (INIT? <>))
	#DECL ((INIT?) <OR ATOM FALSE>)
	<COND (.INIT? <SETG CLOCK-QUEUE ()>)>
	<OFF "REALT">
	<REALTIMER 0>
	<SETG CLOCK-HANDLER <>>>

<DEFINE CLOCK-MANAGER ("AUX" (QQ ,CLOCK-QUEUE) (Q .QQ) (I <ITIME>)
		       NEXT? C H A)
	#DECL ((QQ Q) <LIST [REST CINT]> (NEXT?) <OR ATOM FALSE> (C) CINT
	       (I) FIX (H) <OR ATOM APPLICABLE> (A) ANY)
	<REPEAT ()
		<SET NEXT? T>
		<COND (<EMPTY? .Q> <RETURN>)
		      (<G=? .I <CTIME <SET C <1 .Q>>>>
		       <SET NEXT? <>>
		       <COND (<G? <CINTERVAL .C> 0>
			      <SET NEXT? T>
			      <PUT .C ,CTIME <+ <CTIME .C> <CINTERVAL .C>>>)
			     (<==? .QQ .Q>
			      <SETG CLOCK-QUEUE <SET Q <SET QQ <REST .QQ>>>>)
			     (ELSE
			      <PUTREST .QQ <SET Q <REST .Q>>>)>
		       <COND (<TYPE? <SET H <CHANDLER .C>> ATOM>
			      <COND (<AND <ASSIGNED? .H>
					  <TYPE? <SET A ..H> ACTIVATION>
					  <LEGAL? .A>>
				     <DISMISS <> .A 0>)
				    (<NOT ,CLOCK-DEBUG?>
				     <CRLF ,OUTCHAN>
				     <PRINC ">>>> Stray alarm?: " ,OUTCHAN>
				     <PRINC .C ,OUTCHAN>
				     <PRINC " <<<<" ,OUTCHAN>)
				    (ELSE
				     <ERROR ILLEGAL-ACTIVATION!-ERRORS
					    .C>)>)
			     (ELSE
			      <APPLY .H .C>)>)>
		<COND (.NEXT?
		       <SET QQ .Q>
		       <SET Q <REST .Q>>)>>>

<DEFINE ALARM (HANDLER START "OPTIONAL" (PERIOD 0.0) "AUX" C)
	#DECL ((HANDLER) <OR CINT APPLICABLE ATOM> (START) <OR FIX FLOAT>
	       (PERIOD) FLOAT (C VALUE) CINT)
	<CLOCK-ON>
	<COND (<TYPE? .HANDLER CINT>
	       <SET C .HANDLER>)
	      (ELSE
	       <SET C <CHTYPE <VECTOR 0 0 .HANDLER> CINT>>)>
	<PUT .C
	     ,CTIME
	     <COND (<TYPE? .START FLOAT>
		    <+ <ITIME>
		       <FIX <* 262144.0
			       </ .START <* 60.0 60.0 24.0>>>>>)
		   (ELSE .START)>>
	<PUT .C
	     ,CINTERVAL
	     <FIX <* 262144.0 </ .PERIOD <* 60.0 60.0 24.0>>>>>
	<SETG CLOCK-QUEUE (.C !,CLOCK-QUEUE)>
	.C>

<DEFINE ALARM-OFF (C "AUX" (QQ ,CLOCK-QUEUE) (Q .QQ))
	#DECL ((C) CINT (QQ Q) <LIST [REST CINT]>)
	<REPEAT ()
		<COND (<EMPTY? .Q> <RETURN <>>)
		      (<==? .C <1 .Q>>
		       <COND (<==? .Q .QQ>
			      <SETG CLOCK-QUEUE <REST .QQ>>)
			     (ELSE
			      <PUTREST .QQ <REST .Q>>)>
		       <RETURN .C>)>
		<SET QQ .Q>
		<SET Q <REST .Q>>>>

<DEFINE CINT-PRINT (C "OPTIONAL" (OUTCHAN .OUTCHAN) "AUX" H)
	#DECL ((C) CINT (OUTCHAN) ANY (H) <OR ATOM APPLICABLE>)
	<PRINC "#CINT [">
	<PTIME <CTIME .C> .OUTCHAN>
	<COND (<NOT <0? <CINTERVAL .C>>>
	       <PRINC " *">
	       <PTIME <CINTERVAL .C> .OUTCHAN>)>
	<PRINC !\ >
	<COND (<TYPE? <SET H <CHANDLER .C>> ATOM>
	       <PRINC .H>
	       <PRINC ":ACTIVATION">)
	      (<TYPE? .H RSUBR RSUBR-ENTRY>
	       <PRINC <2 .H>>)
	      (ELSE <PRINC <TYPE .H>>)>
	<PRINC !\]>>

<DEFINE PTIME (C "OPTIONAL" (OUTCHAN .OUTCHAN) "AUX" (M <2 <LTIME .C>>))
	#DECL ((C) FIX (M) <LIST [3 FIX]> (OUTCHAN) ANY)
	<COND (<L? <1 .M> 10> <PRINC !\0>)>
	<PRINC <1 .M>>
	<PRINC !\:>
	<COND (<L? <2 .M> 10> <PRINC !\0>)>
	<PRINC <2 .M>>
	<PRINC !\:>
	<COND (<L? <3 .M> 10> <PRINC !\0>)>
	<PRINC <3 .M>>>

<PRINTTYPE CINT ,CINT-PRINT>

<ENDPACKAGE>
