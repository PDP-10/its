
<PACKAGE "R.CMP">

<ENTRY LAZY-MSG
       GET-HOST-SYMTABLE
       GET-ACK-CONDS
       ACK-SYMS
       ADD-BREAK
       ALLCLEAR
       ALLP
       ALLPRINT
       APPEND-AUTHORS
       APPEND-BLIND
       APPEND-BUF
       APPEND-CC
       APPEND-FILES
       APPEND-FROM
       APPEND-KEYWORDS
       APPEND-MESSAGE
       APPEND-REFS
       APPEND-REPLY
       APPEND-SUBJECT
       APPEND-TO
       APPENDER
       ASK
       BUFLEX
       CHANGE-PRIMCH
       COMMSYMS
       COMPOS-CHRTABLE
       COMPOS-FILEINP
       COPY-FIELD
       DELETER
       FADDR					   ;"ADDRESSEES (REQ HOST PROC)"
       FIELDPRINT
       FINDHOST
       FLST						 ;"LIST TYPE (KEYWORDS)"
       FSTR				       ;"STRING TYPE (MESSAGE, SUBJECT)"
       GOPROG
       KEYWEX
       MESSCOMMAND
       OPCH
       OPEN-FAILED
       PADDR
       PFLX
       PFROM
       PLINK
       PLST
       PRINTER
       PRINTPROMPT
       PRMAIL
       PSTR
       PTO
       PUTOUT
       QUICKSENDER
       SET-EDITOR-FCN
       TOP-LEVEL-MESSAGE
       TTY-SENDER
       USE-IMLAC-EDITOR
       USE-TECO>

<USE "R.DATA"
     "R.UTI"
     "LIBDAT"
     "CALSYM"
     "CALRDR"
     "BUF"
     "STR"
     "CALCOM"
     "MUDCAL"
     "TIMFCN"
     "CALUTL"
     "PRTUTI">

<SETG COMMSYMS
      <MAKEBST "Message commands"
	       ["acknowledge"
		'<GET-ACK-CONDS>
		"append.to.field"
		'<APPENDER>
		"blind.carbon.to"
		'<APPEND-BLIND>
		"carbon.copy.to"
		'<APPEND-CC>
		"change.primary.output.channel"
		'<CHANGE-PRIMCH>
		"coordinate.with"
		'<APPEND-COORDINATE>
		"delete.field"
		'<DELETER>
		"display.hosts"
		'<COPY-FILE "DSK:COMSYS;HOSTS PRINTS" "TTY:">
		"don't.record"
		'<SETG RECORD-IT <>>
		"duplicate.field"
		'<COPY-FIELD>
		"file.under"
		'<APPEND-FILE-UNDER>
		"files.for.output"
		'<APPEND-FILES>
		"forwarded-by"
		'<APPEND-FORWARD-BY>
		"forwarded-to"
		'<APPEND-FORWARD-TO>
		"from"
		'<APPEND-FROM>
		"keywords"
		'<APPEND-KEYWORDS>
		"leave.composer.and.flush.message"
		'<COND (<AND <ASSIGNED? MESSTOP> <LEGAL? .MESSTOP>>
			<RETURN T .MESSTOP>)>
		"local.attachments"
		'<APPEND-LOCAL-ATTACHMENTS>
		"other.authors"
		'<APPEND-AUTHORS>
		"print.field"
		'<PRINTER>
		"re-read"
		'<RE-READ>
		"record"
		'<SETG RECORD-IT T>
		"references"
		'<APPEND-REFS>
		"reply-to"
		'<APPEND-REPLY>
		"scratch"
		'<APPEND-SCRATCH>
		"send.immediate"
		'<QUICKSENDER>
		"send.queued"
		'<SENDER>
		"send.to.tty"
		'<TTY-SENDER>
		"subject"
		'<APPEND-SUBJECT>
		"text"
		'<APPEND-MESSAGE>
		"to"
		'<APPEND-TO>
		"use.imlac.editor"
		'<USE-IMLAC-EDITOR>
		"use.teco"
		'<USE-TECO>
		"verbose.host.display"
		'<COPY-FILE "DSK:SYSENG;HOSTS PRETTY" "TTY:">]>>

<SETG ACK-SYMS
      <MAKEBST "Acknowledgement conditions"
	       ["delivered"
		"DELIVERY"
		"read"
		"READING"
		"recorded"
		"RECORD"]>>

<SET TTY1 <PUTBITS .TTY1 <BITS 1 13> 1>>

;"TURN ON 'ACTIVATE ON ?'"

<SET PROMPT1 "">

<SET CONT-PROMPT "-continued-">

<SET SYN-PROMPT " (BUFFER)">

<SET DONE-PROMPT ": ">

<SET VERNUM 17>

<DEFINE TOP-LEVEL-MESSAGE ()			  ;"SETS UP TOP-LEVEL VARIABLES"
	<COND (.IMLAC? <USE-IMLAC-EDITOR>)    ;"CHECK TO SEE IF SHOULD USE TECO"
	      (ELSE <USE-TECO>)>
	<MAPF <>
	      <FUNCTION (A) <SET <1 .A> <EVAL <2 .A>>>>
	      '((REPLY-NUM -1)
		(CPU-START <TIME>)
		(CONSOLE-START <DTNOW>)
		(REPLY-NAME "")
		(MESSAGE <BUFMAKE 400>)
		(FROM <ADDSTRING <BUFMAKE 10> <UNAME>>)
		(TO <ADDSTRING <BUFMAKE 100> .REPLY-NAME>)
		(SUBJECT <BUFMAKE 100>)
		(CC-TO <BUFMAKE 40>)
		(AUTHORS <BUFMAKE 20>)
				      ;"OTHER-AUTHORS (FROM IS PRINCIPAL AUTHOR"
		(BLIND <BUFMAKE 20>)
		(COORDINATE <BUFMAKE 20>)
		(ACK-CONDS ())				 ;"acknowledgment conds"
		(RECORD-IT <>)
		(RECORD-ACK-IT <>)
		(FORWARD-BY <BUFMAKE 10>)
		(FORWARD-TO <BUFMAKE 20>)
		(KEYWORDS <BUFMAKE 100>)
		(FILE-UNDER <BUFMAKE 20>)
		(FILES <BUFMAKE 20>)
			        ;"OUTPUT FILES, OTHER THAN 'MSG >' OR 'MSGD >' "
		(SCRATCH <BUFMAKE 20>)
		(REFS <BUFMAKE 10>)
		(REPLY-TO
		 <ADDSTRING <BUFMAKE 10>
			    <COND (<L? .REPLY-NUM 0> "")
				  (ELSE <UNPARSE .REPLY-NUM>)>>))>>

;"SETS UP SAME VARIABLES AS MESSAGE FUNCTION."

<DEFINE SET-EDITOR-FCN (FCN "AUX" TEM) 
	#DECL ((TEM) <OR FALSE VECTOR>)
	<COND (<SET TEM <MEMBER <ASCII 5> ,COMPOS-CHRTABLE>>	    ;"CONTROL-E"
	       <PUT .TEM 2 .FCN>)>>

<DEFINE USE-TECO () <SET-EDITOR-FCN ,BUFTECO>>

<DEFINE USE-IMLAC-EDITOR () 
	<COND (.IMLAC? <SET-EDITOR-FCN ,EFUNCTION>)
	      (<PRINC "Console is not an IMLAC?
">)>>

<DEFINE GET-ACK-CONDS ("AUX" TEM) 
	#DECL ((TEM) <OR FALSE <VECTOR LIST>> (VALUE) <OR FALSE LIST>)
	<COND (<SET TEM
		    <READARGS ,ACK-SYMS
			      "when"
			      '[
"Type the names of conditions which you wish
to have acknowledged"
				""]
			      '["MULT" "SYM"]>>
	       <MAPR <>
		     <FUNCTION (A) #DECL ((A VALUE) LIST) <PUT .A 1 <2 <1 .A>>>>
		     <1 .TEM>>				      ;"symbol-to-value"
	       <SET ACK-CONDS
		    <COND (<MEMBER "RECORD" <1 .TEM>>
			   <SET RECORD-ACK-IT T>
			   <MAPF ,LIST
				 <FUNCTION (S) 
					 #DECL ((S VALUE) STRING)
					 <COND (<=? "RECORD" .S> <MAPRET>)
					       (.S)>>
				 <1 .TEM>>)
			  (ELSE <SET RECORD-ACK-IT #FALSE ()> <1 .TEM>)>>)>>

<DEFINE GOPROG () 
	<PRINC "
DMS Message Commands Available.">
	<INIT>
	<ADDSTRING .FROM <UNAME>>
	<COND (.IMLAC? <USE-IMLAC-EDITOR>)    ;"check to see if should use teco"
	      (ELSE <USE-TECO>)>
	<SET CPU-START <TIME>>
	<SET CONSOLE-START <DTNOW>>
	<SET PRIMCH <DATUM "COMSYS-INPUT-FILE-DEFERRED">>
	<SET IMMEDCH <DATUM "COMSYS-INPUT-FILE">>>

<DEFINE PRINTPROMPT (BUF "OPTIONAL" (P1? T)) 
	#DECL ((BUF VALUE) BUFFER (P1?) <OR FALSE ATOM>
	       (PROMPT1 SYN-PROMPT CONT-PROMPT DONE-PROMPT) STRING)
	<AND .P1? <PRINC .PROMPT1>>
	<PRINC .SYN-PROMPT>
	<COND (<NOT <0? <BUFLENGTH .BUF>>> <PRINC .CONT-PROMPT>)>
	<PRINC .DONE-PROMPT>
	.BUF>

<DEFINE COMPOS-BUFPRINT (BUF CHR "AUX" (CONT-PROMPT "")) 
	#DECL ((BUF) BUFFER (CHR) CHARACTER (CONT-PROMPT) <SPECIAL STRING>)
	<PRINC "C">						 ;"CLEAR SCREEN"
	<PUT ,OUTCHAN 16 0>				    ;"top line position"
	<PRINTPROMPT .BUF>
	<BUFPRINT .BUF>>

<DEFINE QUESTION (BUF CHR) 
	#DECL ((BUF) BUFFER (CHR) CHARACTER)
	<COND (<0? <BUFLENGTH .BUF>>
	       <TERPRI>
	       <PRINC .VERBOSE-PROMPT>
	       <TERPRI>
	       <PRINTPROMPT .BUF>)
	      (ELSE <ADDCHR .BUF .CHR>		       ;"IF BUFFER NOT EMPTY")>>

<DEFINE BUFLEX (BF
		"OPTIONAL" (BRKS " ,
")							       ;"SP,CR,COMMA,LF"
		"AUX" (L <LEX <1 .BF> <BUFLENGTH .BF> .BRKS>))
	#DECL ((BF) BUFFER (BRKS) STRING (VALUE L) <LIST [REST STRING]>)
	<MAPF ,LIST
	      <FUNCTION (S) #DECL ((S) STRING) <AND <EMPTY? .S> <MAPRET>> .S>
	      .L>>

<DEFINE OPCH ("OPTIONAL" (BF .FILES) "AUX" L) 
	#DECL ((L) LIST (VALUE) <LIST [REST CHANNEL]>)
	<SET L
	     <MAPF ,LIST
		   <FUNCTION (ST) #DECL ((ST) STRING) <OPEN "PRINT" .ST>>
		   <BUFLEX .BF ",
">>>
	<MAPF ,LIST
	      <FUNCTION (CH) <AND <TYPE? .CH CHANNEL> <MAPRET .CH>> <MAPRET>>
	      .L>>

<DEFINE EMPTY-FIELD (FIELD) 
	#DECL ((FIELD) ATOM)
	<COND (<==? .FIELD TO>
	       <AND <0? <BUFLENGTH .TO>> <EMPTY-FIELD FORWARD-TO>>)
	      (<0? <BUFLENGTH ..FIELD>>)>>

<DEFINE SENDER ("OPTIONAL" (PRIMCH .PRIMCH) (ALL? ".")
		"AUX" L CH
		"NAME" SENDACT)
	#DECL ((ALL?) <OR FALSE STRING> (SENDACT) ACTIVATION (L) LIST
	       (CH) <OR FALSE CHANNEL>
	       (PRIMCH) <OR <VECTOR [REST STRING]> STRING>)
	<MAPF <>
	      <FUNCTION (FIELD) 
		      <AND <EMPTY-FIELD .FIELD>
			   <PROG ()
				 <TERPRI>
				 <PRINC <GET .FIELD PRETTY>>
				 <PRINC 
"--empty? Please specify before sending.">
				 <TERPRI>
				 <RETURN 0 .SENDACT>>>>
	      ,ALWAYSFIELDS>
	<SET CH
	     <COND (<TYPE? .PRIMCH STRING> <OPEN "PRINT" .PRIMCH>)
		   (ELSE <OPEN "PRINT" !.PRIMCH>)>>
	<OR <OR .CH <SET CH <OPEN-FAILED .CH .PRIMCH>>>
	    <RETURN 0 .SENDACT>>	        ;"flush if user types ^R or ESC"
	<AND .ALL?
	     <OR <EMPTY? <SET L <OPCH>>> <PUT <TOP .CH> 1 .L>>>
	<PRMAIL .CH>
	<CLOSE .CH>
	<AND .ALL?
	     <PROG ()
		   <TERPRI>
		   <PRINC "Message queued">
		   <PRINC .ALL?>			    ;"additional string"
		   <TERPRI>
		   <SET CPU-START <TIME>>	   ;"initialize timer variables"
		   <SET CONSOLE-START <DTNOW>>
		   <ALLCLEAR>
		   <MAPF <> ,CLOSE .L>		      ;"CLOSE EXTRA CHANNELS">>>

<DEFINE CHANGE-PRIMCH ("AUX" TEM PRIMCHAN-PARSE) 
	#DECL ((PRIMCHAN-PARSE) <VECTOR [REST <OR LOSE STRING>]>)
	<SET PRIMCHAN-PARSE <FSP-PARSE .PRIMCH>>
	<SET TEM
	     <READER <MAPF ,VECTOR
			   <FUNCTION (NM) 
				   #DECL ((NM) <OR LOSE STRING>)
				   <COND (<TYPE? .NM STRING> <MAPRET .NM> T)>>
			   .PRIMCHAN-PARSE>
		     "new name"
		     '[
"Type the name of the file for 'queued' output.
(type ^R for 'same')"
		       ""]
		     '["FILE"]>>
	<AND .TEM <SET PRIMCH .TEM>>>

<DEFINE FINDHOST (S "AUX" (FIXP <MEMQ !"@ .S>) NM FX LP SYMB HST "NAME" NOHOST) 
	#DECL ((FIXP) <OR FALSE STRING> (SYMB) <OR SYMBOL FALSE> (NM) STRING
	       (LP) LIST (FX) ANY (VALUE) STRING)
	<COND (.FIXP						      ;"FOUND @"
	       <SET NM <EXTRACT .S <- <LENGTH .S> <LENGTH .FIXP>>>>
	       <SET FIXP <REST .FIXP>>			        ;"get rid of @")
	      (ELSE <RETURN .S .NOHOST>)>
	<SET HST <HOST <UPPERCASE .FIXP>>>
	<COND (.HST <STRING .NM !"@ <UNPARSE .HST>>)		  ;"name@number"
	      (<AND <NOT <EMPTY? <SET LP <LPARSE .FIXP>>>>
		    <TYPE? <SET FX <1 .LP>> FIX>
		    <G? .FX 0>
		    <L? .FX 256>>
	       <STRING .NM !"@ <UNPARSE .FX>>)
	      (ELSE
	       <PROG ((OUTCHAN ,OUTCHAN))
		     #DECL ((OUTCHAN) <SPECIAL CHANNEL>)
		     <PRINC "
***error
unknown host: ">
		     <PRINC .FIXP>
		     <PRINC "
for addressee: ">
		     <PRINC .NM>
		     <PRINC !".>
		     <TERPRI>
		     <SET SYMB
			  <READER <GET-HOST-SYMTABLE>
				  "Please retype host name"
				  [<STRING 
"Please retype the host name for addressee "
					   .NM>
				   ""]
				  '["SYM"]>>
		     <COND (.SYMB <STRING .NM !"@ <UNPARSE <2 .SYMB>>>)
			   (ELSE .NM)>
				   ;"if he gives a FALSE back, give no host">)>>

<DEFINE OPEN-FAILED (CH PRIMCH) 
	<REPEAT ()
		<TERPRI>
		<PRINC "Open of ">
		<PRINC .PRIMCH>
		<PRINC " failed, ">
		<PRINC <COND (<LENGTH? .CH 1> <1 .CH>) (".")>>
		<TERPRI>
		<SET PRIMCH
		     <READER '[]
			     "alternate"
			     '["please type a new file name for output" ""]
			     '["FILE"]>>
		<OR .PRIMCH <RETURN <NOT <SET PRIMCH "TTY:">>>>
							   ;"IF TYPED NUL OR ^R"
		<AND <SET CH <OPEN "PRINT" .PRIMCH>> <RETURN .CH>>
					   ;"successful open, returns channel">
				      ;"else prints message again and iterates">

<DEFINE QUICKSENDER () 
	<COND (<==? <SENDER .IMMEDCH " and daemon signalled."> 0> 0)   ;"Failed"
	      (<DEMSIG "COMDMN">)>>

<DEFINE TTY-SENDER () <SENDER "TTY:" #FALSE ()>>

\ 

<DEFINE PUTOUT (L1 L2) 
	#DECL ((L1 VALUE) <LIST [REST ATOM]> (L2) <LIST [REST STRING]>)
	<MAPF <> <FUNCTION (A B) <PUT .A OUTSTRING .B>> .L1 .L2>
	.L1>

<SET FLX (REFS REPLY-TO)>

<PUTOUT .FLX ("REFERENCES" "REPLY-TO")>

<SET FADDR (AUTHORS)>

<PUTOUT .FADDR ("OTHER-AUTHORS")>

<PUT FROM OUTSTRING "FROM">

<SET FSTR (SUBJECT MESSAGE)>

<PUTOUT .FSTR ("SUBJECT" "TEXT")>

<SET FLST (KEYWORDS FILE-UNDER FORWARD-TO)>

<PUTOUT .FLST ("KEYWORDS" "FILED-UNDER" "FORWARDED-TO")>

<DEFINE PRMAIL ("OPTIONAL" (OUTCHAN .OUTCHAN)) 
	#DECL ((OUTCHAN) <SPECIAL CHANNEL>)
	<PRINT "WHEN-ORIGINATED">
	<PRINT <DTNOW>>					   ;"time,date,timezone"
	<PTO>						       ;"to,blind,cc-to"
	<PFROM .FROM "FROM" T>				     ;"Print FROM field"
	<PFROM .FORWARD-BY "FORWARDED-BY" <>>	  ;"Print FORWARD field, if any"
	<MAPF <> ,PADDR .FADDR>				      ;"ADDRESSEE TYPES"
	<MAPF <> ,PSTR .FSTR>					 ;"STRING TYPES"
	<MAPF <> ,PFLX .FLX>				    ;"LIST-OF-FIX TYPES"
	<MAPF <> ,PLST .FLST>					   ;"LIST TYPES"
	<PRINT "CONSOLE-MINUTES">
	<PRINC <DTDIFF <DTNOW> .CONSOLE-START>>
	<PRINT "CPU-SECONDS">
	<PRINC <- <TIME> .CPU-START>>
	<PRINT "SCHEDULE">				 ;"initiate tranmission"
	<PRINT '("SENDING" #FALSE ())>
	<COND (.RECORD-IT
	       <PRINT "SCHEDULE">
	       <PRINT '("RECORD" #FALSE ())>
	       <COND (.RECORD-ACK-IT		 ;"set/cleared in GET-ACK-CONDS"
		      <PRINT "SCHEDULE">
		      <PRINT '("RECORD-ACKNOWLEDGE" #FALSE ())>)>)>
	<COND (<NOT <EMPTY? .ACK-CONDS>>
	       <PRINT "ACKNOWLEDGE">
	       <PRINT <MAPF ,LIST
			    <FUNCTION (S) 
				    #DECL ((S) STRING)
				    <LIST .S #FALSE () 2>
							 ;"STANDARD ACK FCN #2">
			    .ACK-CONDS>>)>>

<DEFINE PLINK () 
	<PRINT '("LINK-TO-ADDRESSEE-AREA" "REMOVE")>
	<PRINT 12> ;"(TO) DON'T WANT THIS AVAILABLE TO ADD'S -- CONTAINS BLINDS"
	<PRINT '("LINK-TO-ADDRESSEE-AREA" "APPEND")>
	<PRINT '("ACTION-TO")>		     ;"THIS IS THE USER-GENERATED 'TO'">

<DEFINE PTO ("AUX" TOL BLOL CCTOL FORWTO) 
	#DECL ((FORWTO TOL BLOL CCTOL) LIST)
	<SET TOL <MAPF ,LIST ,FINDHOST <BUFLEX .TO>>>
	<SET BLOL <MAPF ,LIST ,FINDHOST <BUFLEX .BLIND>>>
	<SET CCTOL <MAPF ,LIST ,FINDHOST <BUFLEX .CC-TO>>>
	<PRINT "TO">
	<COND (<AND <SET FORWTO <MAPF ,LIST ,FINDHOST <BUFLEX .FORWARD-TO>>>
		    <NOT <EMPTY? .FORWTO>>>
	       <PRINT .FORWTO>
	       <PRINT "FORWARDED-TO">
	       <PRINT .FORWTO>)
	      (<PRINT <LIST !.TOL !.CCTOL !.BLOL>>)>
	<PRINT "ACTION-TO">				    ;"USER'S 'TO' FIELD"
	<PRINT .TOL>
	<OR <EMPTY? .CCTOL>
	    <PROG ()
		  <PRINT "CARBON-COPY-TO">
		  <PRINT .CCTOL>>>
	<OR <EMPTY? .BLOL>
	    <PROG ()
		  <PRINT "BLIND">
		  <PRINT <MAPF ,LIST <FUNCTION (A) ((.A) (.A))> .BLOL>>>>>

<DEFINE PFLX (FIELD) 
	<OR <0? <BUFLENGTH ..FIELD>>
	    <PROG ()
		  <PRINT <GET .FIELD OUTSTRING>>
		  <PRINT <MAPF ,LIST ,PARSE <BUFLEX ..FIELD>>>>>>

<DEFINE PADDR (FIELD) 
	<OR <0? <BUFLENGTH ..FIELD>>
	    <PROG ()
		  <PRINT <GET .FIELD OUTSTRING>>
		  <PRINT <MAPF ,LIST ,FINDHOST <BUFLEX ..FIELD>>>>>>

<DEFINE PSTR (FIELD) 
	<OR <0? <BUFLENGTH ..FIELD>>
	    <PROG ()
		  <PRINT <GET .FIELD OUTSTRING>>
		  <BUFSPRINT ..FIELD>
			       ;"print string with double quotes backslashed">>>

<DEFINE PLST (FIELD) 
	<OR <0? <BUFLENGTH ..FIELD>>
	    <PROG ()
		  <PRINT <GET .FIELD OUTSTRING>>
		  <PRINT <BUFLEX ..FIELD>>>>>

<DEFINE PFROM (BUF STR REQ "AUX" L) 
	#DECL ((BUF) BUFFER (STR) STRING (L) <LIST [REST STRING]>
	       (REQ) <OR 'T FALSE>)
	<SET L <BUFLEX .BUF>>
	<COND (<NOT <EMPTY? .L>> <PRINT .STR> <PRINT <1 .L>>)
	      (.REQ <PRINT .STR> <PRINT "UNKNOWN">)>>

\ 

<DEFINE MSG ("OPTIONAL" (INPUT? T) (REPLY-NUM -1) (REPLY-NAME "")
	     "AUX" (CHRTABLE
		    [!"
		     #FUNCTION ((B C) <RETURN <> .MESSTOP>)
		     !"
		     ,KEYWEX
		     !.CHRTABLE])
		   (MESSAGE <BUFMAKE 400>)
		   (FROM <ADDSTRING <BUFMAKE 10> <UNAME>>)
		   (TO <ADDSTRING <BUFMAKE 100> .REPLY-NAME>)
		   (SUBJECT <BUFMAKE 100>)
		   (CC-TO <BUFMAKE 20>)
		   (AUTHORS <BUFMAKE 10>)
				      ;"OTHER-AUTHORS (FROM IS PRINCIPAL AUTHOR"
		   (BLIND <BUFMAKE 10>)
		   (COORDINATE <BUFMAKE 20>)
		   (ACK-CONDS ())			 ;"acknowledgment conds"
		   (RECORD-IT <>)
		   (KEYWORDS <BUFMAKE 100>)
		   (FILE-UNDER <BUFMAKE 20>)
		   (FILES <BUFMAKE 20>)
			        ;"OUTPUT FILES, OTHER THAN 'MSG >' OR 'MSGD >' "
		   (SCRATCH <BUFMAKE 20>)
		   (FORWARD-BY <BUFMAKE 10>)
		   (FORWARD-TO <BUFMAKE 20>)
		   (REFS <BUFMAKE 10>)
		   (CPU-START <TIME>)
		   (CONSOLE-START <DTNOW>)
		   (REPLY-TO
		    <ADDSTRING <BUFMAKE 10>
			       <COND (<L? .REPLY-NUM 0> "")
				     (ELSE <UNPARSE .REPLY-NUM>)>>)
	     "NAME" MESSTOP)
	<COND (.INPUT? <APPEND-TO> <APPEND-SUBJECT> <APPEND-MESSAGE>)>
	<MESSCOMMAND>>

<DEFINE REPLY-TO (MSG-NUM MSG-NAME) 
	#DECL ((MSG-NUM) FIX (MSG-NAME) STRING)
	<MSG T .MSG-NUM .MSG-NAME>>

\ 

;"KEYWORD EXTRACTORS
"

<SETG KEYBREAKS
      <MAPF ,STRING ,ASCII (13 9 10 32 <ASCII !",> <ASCII !".>)>>

<DEFINE ADDBREAK (BF CHR) 
	#DECL ((VALUE BF) BUFFER (CHR) CHARACTER)
	<COND (<OR <==? <1 .BF> <2 .BF>>		    ;"nothing in buffer"
		   <MEMQ <1 <BACK <2 .BF>>> ,KEYBREAKS>>
	       .BF)					       ;"already broken"
	      (<ADDCHR .BF .CHR>)>>

<DEFINE KEYWEX (BUF CHR
		"AUX" (BST ,KEYBREAKS) (IK .KEYWORDS) (L <BUFLENGTH .BUF>)
		      (BB <2 .BUF>) CH)
	#DECL ((BUF VALUE IK) BUFFER (CHR CH) CHARACTER (BST BB) STRING (L) FIX)
	<COND (<0? .L> .BUF)
	      (ELSE
	       <REPEAT ((LC .L))
		       #DECL ((LC) <UNSPECIAL FIX>)
		       <SET CH <1 <SET BB <BACK .BB>>>>
		       <COND (<MEMQ .CH .BST>
			      <ADDBREAK .IK !" >			   ;"sp"
			      <ADDSTRING .IK
					 <REST .BB>
					 <- <LENGTH .BB> <LENGTH <2 .BUF>> 1>>
			      <RETURN .BUF>)
			     (<0? <SET LC <- .LC 1>>>
			      <ADDBREAK .IK !" >
			      <ADDSTRING .IK .BB .L>
			      <RETURN .BUF>)>>)>>

\ 

<DEFINE COMPOS-FILEINP (BF CHR "AUX" FIL (VPOS <16 .OUTCHAN>) CH) 
	#DECL ((BF VALUE) BUFFER (CHR) CHARACTER (FIL) <OR FALSE STRING>
	       (CH) <OR CHANNEL FALSE> (VPOS) FIX)
	<COND (<SET FIL
		    <READER '[]
			    "named"
			    ["type the name of the file to be inserted" ""]
			    ["FILE"]>>
	       <COND (<SET CH <OPENTELL "READ" .FIL>>
		      <ADDFILE .BF .CH>
		      <PRINT "DONE">)>)
	      (<AND .IMLAC? <==? .VPOS <16 .OUTCHAN>>>
	       <HPOS-BUF .BF>
	       <DEL-TO-EOL>)
	      (ELSE <PRINC "---continue:">)>
	<MY-TTY-OFF>					     ;"reset TTY status"
	.BF>

\ 

;"SHORT MESSAGE SENDER
"

<DEFINE LAZY-MSG (FLDS
		  "OPTIONAL" (START 0)
		  "EXTRA" (MBF ,MSGFLDBUFS) OUTCOME FOO FLDNAM)
	#DECL ((FLDS) <LIST [REST STRING]> (OUTCOME) <OR STRING FALSE>)
	<SET OUTCOME
	     <PROG LAZY-LOOP ()
		   #DECL ((LAZY-LOOP) <SPECIAL ACTIVATION>)
		   <MAPF <>
			 <FUNCTION (X) 
				 #DECL ((X) STRING)
				 <COND (<SET FLDNAM <MEMBER .X .MBF>>
					<DOWNSHIFT .X>
					<APPLY <GET <2 .FLDNAM> APPENDER>>)>>
			 <REST .FLDS .START>>
		   <>>>
	<COND (.OUTCOME
	       <LAZY-MSG .FLDS <MAX <- <POSQ .OUTCOME .FLDS <>> 2> 0>>)
	      (T
	       <XFPOP>
	       <SET FOO <READER ,SENDSYMS "
Send?" ["" ""] ["SYM"]>>
	       <COND (.FOO <EVAL <2 .FOO>>)>)>>

<DEFINE DOWNSHIFT (STR) 
	#DECL ((STR) STRING)
	<TERPRI>
	<PRINC <1 .STR>>
	<MAPF <>
	      <FUNCTION (X "EXTRA" (ASC <ASCII .X>)) 
		      <COND (<AND <G? .ASC 64> <L? .ASC 92>>
			     <PRINC <ASCII <+ .ASC 32>>>)
			    (<PRINC .X>)>>
	      <REST .STR>>
	T>

<SETG SENDSYMS
      <MAKEBST "SENDSYMS"
	       ["False"
		#FALSE ()
		"Immediate"
		'<COND (<==? <SENDER .IMMEDCH " and daemon signalled."> 0> <>)
		       (T <DEMSIG "COMDMN"> T)>
		"No"
		#FALSE ()
		"Queued"
		'<N==? <SENDER> 0>
		"Tty"
		'<N==? <SENDER "TTY:" #FALSE ()> 0>]>>

\ 

<SETG COMPOS-CHRTABLE
      <VECTOR !" 
	      ,IBUFCLEAR				     ;"CLEAR THE BUFFER"
	      !"
	      <FUNCTION (B C) <RETURN .B .GETSTRACT>>
	      !"
	      <FUNCTION (A B) 
		      <COND (<ASSIGNED? LAZY-LOOP> <RETURN .X .LAZY-LOOP>)
			    (<RETURN 0 .GETSTRACT>)>>
	      !"
	      ,KEYWEX
	      !"
	      ,DWORD
	      !"
	      ,DLINE
	      !"
	      ,QUOTECHR
	      <ASCII 127>
	      ,IDELCHR						       ;"RUBOUT"
	      !"
	      ,EFUNCTION
	      !"
	      ,COMPOS-FILEINP
	      <ASCII 13>
	      ,ADDCRLF					      ;"CARRIAGE RETURN"
	      !"?
	      ,QUESTION						      ;"PROMPTS"
	      !"
	      ,IBUFPRINT
	      <ASCII 12>
	      ,COMPOS-BUFPRINT				        ;"WITH PROMTS">>

\ 

<DEFINE APPEND-BUF (BUF
		    "OPTIONAL" (PROMPT1 "") (VERBOSE-PROMPT "")
			       (DONE-PROMPT .DONE-PROMPT))
	#DECL ((BUF VALUE) BUFFER
	       (PROMPT1 VERBOSE-PROMPT DONE-PROMPT) <SPECIAL STRING>)
	<PRINTPROMPT .BUF <>>				  ;"DON'T PRINT PROMPT1"
	<GETSTR .BUF ,COMPOS-CHRTABLE>>

<DEFINE APPEND-TO () 
	#DECL ((VALUE) BUFFER)
	<ADDBREAK .TO !",>				   ;"break if necessary"
	<APPEND-BUF .TO
		    "To"
		    
"List the action addressees, separated
by space, CR__ or comma.">>

<DEFINE APPEND-FROM () 
	#DECL ((VALUE) BUFFER)
	<APPEND-BUF .FROM
		    "From"
		    "Type the name of the principal author.">>

<DEFINE APPEND-FORWARD-BY () 
	#DECL ((VALUE) BUFFER)
	<APPEND-BUF .FORWARD-BY
		    "Forwarded-by"
		    "Type the name of the forwarder of the message.">>

<DEFINE APPEND-FORWARD-TO () 
	#DECL ((VALUE) BUFFER)
	<APPEND-BUF .FORWARD-TO
		    "Forwarded-to"
		    "Type the those who will receive the forwarded message.">>

<DEFINE APPEND-SUBJECT () 
	#DECL ((VALUE) BUFFER)
	<APPEND-BUF .SUBJECT
		    "Subject"
		    "Type a short description
of the message's contents.">>

<DEFINE APPEND-SCRATCH () 
	#DECL ((VALUE) BUFFER)
	<APPEND-BUF .SCRATCH
		    "Scratch-pad"
		    
"Type anything -- this field is
not sent, but is used for temporary storage">>

<DEFINE APPEND-CC () 
	#DECL ((VALUE) BUFFER)
	<ADDBREAK .CC-TO !",>
	<APPEND-BUF .CC-TO
		    "Carbon-copy-to"
		    
"List the names of recipients of
a carbon copy.  Separate the names
by space,CR__ or comma.">>

<DEFINE APPEND-BLIND () 
	#DECL ((VALUE) BUFFER)
	<ADDBREAK .BLIND !",>
	<APPEND-BUF .BLIND
		    "Blind-copy-to"
		    
"List the names of recipients of
'Blind' carbons.  The people in the
'Carbon-copy' list will not be apprised
of the names in the 'Blind' list.">>

<DEFINE APPEND-COORDINATE () 
	#DECL ((VALUE) BUFFER)
	<ADDBREAK .COORDINATE !",>
	<APPEND-BUF .COORDINATE
		    "Coordinate.with"
		    
"List the names of people with whom
you wish to coordinate this message.  Separate
the names with CR__ or comma.">>

<DEFINE APPEND-AUTHORS () 
	#DECL ((VALUE) BUFFER)
	<ADDBREAK .AUTHORS !",>
	<APPEND-BUF .AUTHORS
		    "Other Authors"
		    
"List the names of collaborating
authors.  Separate names with
space,CR__ or comma.">>

<DEFINE APPEND-FILE-UNDER () 
	#DECL ((IFILES VALUE) BUFFER)
	<ADDBREAK .FILE-UNDER !",>
	<APPEND-BUF .FILE-UNDER
		    "File under"
		    
"Type the name of the classification group(s)
under which the message should be retrieved by IRS.">>

<DEFINE APPEND-FILES () 
	#DECL ((VALUE) BUFFER)
	<ADDBREAK .FILES !",>
	<APPEND-BUF .FILES
		    "Output to"
		    
"List the names of files to which
you want the output to be sent, in
addition to the primary output
channel.  The names should be
separated by CR__ or comma.">>

<DEFINE APPEND-REFS () 
	#DECL ((VALUE) BUFFER)
	<ADDBREAK .REFS !",>
	<APPEND-BUF .REFS
		    "References"
		    
"List the identification numbers of 
messages you wish to cite.  Separate
the numbers by space,CR__ or comma.">>

<DEFINE APPEND-REPLY () 
	#DECL ((VALUE) BUFFER)
	<APPEND-BUF .REPLY-TO
		    "Reply-to message number"
		    
"Type the identification number of the
message to which this is a reply.">>

<DEFINE APPEND-KEYWORDS () 
	#DECL ((VALUE) BUFFER)
	<ADDBREAK .KEYWORDS !",>
	<APPEND-BUF .KEYWORDS
		    "Keywords"
		    
"List any keywords, separated
by comma,CR__ or space.  The keywords will
be available for searching the data-base">>

<DEFINE APPEND-MESSAGE () 
	#DECL ((VALUE) BUFFER)
	<APPEND-BUF .MESSAGE
		    "Text"
		    
"Type the text of the message.
You may edit the message by
typing 'Control E', or insert a file
by typing 'Control Y'."
		    ":
">>

<PUT TO APPENDER ,APPEND-TO>

<PUT SUBJECT APPENDER ,APPEND-SUBJECT>

<PUT MESSAGE APPENDER ,APPEND-MESSAGE>

<PUT CC-TO APPENDER ,APPEND-CC>

<PUT AUTHORS APPENDER ,APPEND-AUTHORS>

<PUT FILES APPENDER ,APPEND-FILES>

<PUT BLIND APPENDER ,APPEND-BLIND>

<PUT FROM APPENDER ,APPEND-FROM>

<PUT KEYWORDS APPENDER ,APPEND-KEYWORDS>

<PUT FILE-UNDER APPENDER ,APPEND-FILE-UNDER>

<PUT FORWARD-BY APPENDER ,APPEND-FORWARD-BY>

<PUT FORWARD-TO APPENDER ,APPEND-FORWARD-TO>

<PUT REPLY-TO APPENDER ,APPEND-REPLY>

<PUT SCRATCH APPENDER ,APPEND-SCRATCH>

<PUT REFS APPENDER ,APPEND-REFS>

<PUT COORDINATE APPENDER ,APPEND-COORDINATE>

<MAPF <> <FUNCTION (A) <PUT .A DELETER ,BUFCLEAR>> ,FIELDS>

<DEFINE ALLCLEAR ("OPTIONAL" (FLDS ,ALLCLEAR-FIELDS)) 
	<MAPF <> <FUNCTION (FIELD) <BUFCLEAR ..FIELD>> .FLDS>>

<DEFINE FIELDPRINT (FIELD) 
	#DECL ((FIELD) ATOM)
	<TERPRI>
	<PRINC <GET .FIELD PRETTY>>
	<BUFPRINT ..FIELD>>

<MAPF <>
      <FUNCTION (AT PRETTY) 
	      <PUT .AT PRINTER ,FIELDPRINT>
	      <PUT .AT PRETTY .PRETTY>>
      ,FIELDS
      ("Forwarded to:    "
       "Forwarded by:    "
       "To:              "
       "Carbon-copy to:  "
       "Blind carbon to: "
       "From:            "
       "Other authors:   "
       "Subject:         "
       "Message:
"
       "Output files:    "
       "References:      "
       "Reply to msg. #: "
       "Keywords:        "
       "File under:      "
       "Scratch:         "
       "Coordinate with: ")>

<SETG ALWAYSFIELDS (TO FROM MESSAGE)>

<DEFINE ALLP (FIELD) 
	#DECL ((FIELD) ATOM)
	<COND (<MEMQ .FIELD ,ALWAYSFIELDS> <FIELDPRINT .FIELD>)
	      (<NOT <0? <BUFLENGTH ..FIELD>>> <FIELDPRINT .FIELD>)>>

<DEFINE ALLPRINT (FIELD) #DECL ((FIELD) ATOM) <MAPF <> ,ALLP ,FIELDS> <TERPRI>>

<PUT ALL PRINTER ,ALLPRINT>

<DEFINE MESSCOMMAND () 
	<PRINC "
Message Composer Command Level.
">
	<REPEAT MESSCOMMACT (T (CHRTABLE ,MESSCOMM-CHRTABLE))
		#DECL ((T) <OR FALSE SYMBOL> (CHRTABLE) <SPECIAL VECTOR>)
		<TERPRI>
		<SET T
		     <READER ,COMMSYMS
			     "Function"
			     '["type a command for the composer" ""]
			     '["SYM"]>>
		<AND .T <EVAL <2 .T>>>>>

<DEFINE COPY-FIELD ("AUX" FIF FIT BS "NAME" NOCOPY) 
	#DECL ((VALUE) <OR ATOM FALSE> (NOCOPY) ACTIVATION (BS) STRING)
	<COND (<AND <SET FIF
			 <READER ,FIELDSYMS
				 "from"
				 '["type the name of the field you want to copy"
				   ""]
				 '["SYM"]>>
		    <BOUND? <SET FIF <2 .FIF>>>		        ;"value is ATOM"
		    <ASSIGNED? .FIF>
		    <TYPE? ..FIF BUFFER>
		    <SET FIF ..FIF>>					 ;"win")
	      (.FIF
	       <TERPRI>
	       <PRINC "Can't read field">
	       <RETURN <> .NOCOPY>)
	      (<AND <NOT <EMPTY? .FIF>> <TYPE? <1 .FIF> STRING>>
	       <SET FIF .SCRATCH>)			 ;"default for nul-line"
	      (<RETURN <> .NOCOPY>)>
	<COND (<AND <SET FIT
			 <READER ,FIELDSYMS
				 "into"
				 '[
"type the name of the field you want to append to."
				   ""]
				 '["SYM"]>>
		    <BOUND? <SET FIT <2 .FIT>>>		 ;"value should be ATOM"
		    <ASSIGNED? .FIT>
		    <TYPE? ..FIT BUFFER>
		    <SET FIT ..FIT>>					 ;"win")
	      (.FIT
	       <TERPRI>
	       <PRINC "Can't append to that field.">
	       <TERPRI>
	       <RETURN <> .NOCOPY>)
	      (<AND <NOT <EMPTY? .FIT>> <TYPE? <1 .FIT> STRING>>
	       <SET FIT .SCRATCH>)			 ;"default for nul-line"
	      (<AGAIN .NOCOPY>)>
	<SET BS <BUFTOS .FIF>>					  ;"from buffer"
	<ADDSTRING .FIT .BS>
	T>

<DEFINE APPENDER ("AUX" FU FI) 
	<COND (<SET FI
		    <READER ,FIELDSYMS
			    "named"
			    '["type the name of the field to be appended to"
			      ""]
			    '["SYM"]>>
	       <AND <SET FU <GET <SET FI <2 .FI>> APPENDER>>
		    <BOUND? .FI>
		    <ASSIGNED? .FI>
		    <APPLY .FU ..FI>>)
	      (<AND <NOT <EMPTY? .FI>> <1 .FI>>			     ;"nul line"
	       <APPEND-MESSAGE>)>>

<DEFINE DELETER ("AUX" FU FI) 
	<COND (<SET FI
		    <READER ,FIELDSYMS
			    "named"
			    '["type the name of the field to be deleted" ""]
			    '["SYM"]>>
	       <SET FI <2 .FI>>
	       <COND (<==? .FI ALL> <ALLCLEAR ,FIELDS>)
		     (<AND <SET FU <GET .FI DELETER>>
			   <BOUND? .FI>
			   <ASSIGNED? .FI>
			   <APPLY .FU ..FI>>)>)>>

<DEFINE PRINTER ("AUX" FU FI) 
	<COND (<SET FI
		    <READER ,FIELDSYMS
			    "named"
			    '["type the name of the field to be printed" ""]
			    '["SYM"]>>
	       <AND <SET FU <GET <SET FI <2 .FI>> PRINTER>>
		    <APPLY .FU .FI>>)
	      (<TYPE? <1 .FI> STRING> <ALLPRINT ALL>)>
					   ;"PRINTS ALL FIELDS IF CR__ TYPED">

\ 

;"HOST SYMBOLS
"

<DEFINE GET-HOST-SYMTABLE ("OPTIONAL" (RELOAD <>)) 
	#DECL ((VALUE) SYMTABLE)
	<COND (<OR .RELOAD <NOT <GASSIGNED? HOST-SYMTABLE>>>
	       <SETG HOST-SYMTABLE
		     <MAKEBST "Hosts"
			      <COND (.RELOAD <QDATUM "HOST-INVERTED-NAMES">)
				    (ELSE <DATUM "HOST-INVERTED-NAMES">)>>>)>
	,HOST-SYMTABLE>

<ENDPACKAGE>
