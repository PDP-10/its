<PACKø1â EOOPS">

<ENTRY OOPS OOPS-PRINT OOPS-LIST OOPS-ON OOPS-OFF>

<OR <GASSIGNED? OOPS-LIST> <SETG OOPS-LIST ()>>
<GDECL (OOPS-LIST) <LIST [REST ATOM]>>

<DEFINE OOPS ("OPTIONAL" PCK
	      "AUX" (ATM <>) S (POB <GET PACKAGE OBLIST>) P
	      ERRF (R #FALSE ("NOT DEFINED")) (DUP? <>))
	#DECL ((ATM) <OR ATOM FALSE> (PCK S) STRING (POB) OBLIST
	       (P DUP? R) <OR ATOM FALSE> (ERRF) FRAME)
	<REPEAT ((F <FRAME>) A)
		#DECL ((F) FRAME (A) TUPLE)
		<COND (<==? <FUNCT .F> TOPLEVEL> <RETURN <>>)>
		<SET A <ARGS .F>>
		<COND (<AND <==? <FUNCT .F> ERROR>
			    <==? <LENGTH .A> 3>
			    <OR <AND <==? <1 .A> UNASSIGNED-VARIABLE!-ERRORS>
				     <==? <3 .A> GVAL>>
				<AND <==? <1 .A> UNBOUND-VARIABLE!-ERRORS> 
				     <OR <==? <3 .A> CALLER>
					 <==? <3 .A> VALUE>>>>>
		       <SET ATM <2 .A>>
		       <SET S <SPNAME .ATM>>
		       <SET ERRF .F>
		       <RETURN>)
		      (ELSE <SET F <FRAME .F>>)>>
	<COND (<NOT .ATM> <SET R #FALSE ("NO ERROR")>)
	      (<ASSIGNED? PCK>
	       <COND (<SET P <LOOKUP .PCK .POB>>
		      <SET R <INPACK .S .P>>)>)
	      (ELSE
	       <MAPF <>
		     <FUNCTION (B)
			  #DECL ((B) LIST)
			  <MAPF <>
				<FUNCTION (P "AUX" W)
				     #DECL ((P) ATOM (W) <OR ATOM FALSE>)
				     <COND (<AND <SET W <INPACK .S .P>>
						 <GASSIGNED? .W>
						 <APPLICABLE? ,.W>>
					    <COND (.R <SET DUP? T>)
						  (ELSE <SET R .W>)>)>>
				.B>>
		     .POB>)>
	<COND (.R
	       <COND (.DUP? #FALSE ("DUPLICATION?"))
		     (ELSE
		      <SETG OOPS-LIST (.ATM .R !,OOPS-LIST)>
		      <SETG .ATM ,.R>
		      <ERRET ,.R .ERRF>)>)>>

<DEFINE OOPS-ON ()
	<COND (<GASSIGNED? OOPSH>
	       <HANDLER <EVENT "ERROR"> ,OOPSH>)
	      (ELSE
	       <SETG OOPSH <ON "ERROR" ,OOPS-ERROR-HANDLER 3>>)>
	"OOPSING">

<DEFINE OOPS-OFF ()
	<AND <GASSIGNED? OOPSH> <OFF ,OOPSH>>
	"NOT-OOPSING">

<DEFINE OOPS-ERROR-HANDLER ("TUPLE" E "AUX" (OUTCHAN ,OUTCHAN))
	#DECL ((E) TUPLE (OUTCHAN) CHANNEL)
	<COND (<AND <==? <LENGTH .E> 4>
		    <OR <AND <==? <2 .E> UNASSIGNED-VARIABLE!-ERRORS>
			     <==? <4 .E> GVAL>>
			<AND <==? <2 .E> UNBOUND-VARIABLE!-ERRORS> 
			     <==? <4 .E> CALLER>
			     <==? <4 .E> VALUE>>>>
	       <INT-LEVEL 0>
	       <PRINC "{OOPS: ">
	       <PRINC <SPNAME <3 .E>>>
	       <PRINC !\}>
	       <PROG (LERR\ !-INTERRUPTS)
		     #DECL ((LERR\ !-INTERRUPTS) <SPECIAL FRAME>)
		     <SET LERR\ !-INTERRUPTS <CHTYPE <1 .E> FRAME>>
		     <COND (<OOPS> #DISMISS T)>>)>>

<DEFINE INPACK (S P "AUX" O)
	#DECL ((S) STRING (P) ATOM (O) LIST)
	<COND (<GASSIGNED? .P>
	       <SET O ,.P>
	       <OR <LOOKUP .S <1 .O>>
		   <LOOKUP .S <2 .O>>>)>>

<DEFINE OOPS-PRINT ("OPTIONAL" OUT "AUX" (O ,OOPS-LIST) (OUTCHAN .OUTCHAN) C)
	#DECL ((OUT) STRING (O) <LIST [REST ATOM]> (OUTCHAN) CHANNEL
	       (C) <OR CHANNEL FALSE>)
	<COND (<ASSIGNED? OUT>
	       <COND (<SET C <OPEN "PRINT" .OUT>>
		      <SET OUTCHAN .C>)>)>
	<REPEAT ()
		<COND (<LENGTH? .O 1>
		       <COND (<ASSIGNED? OUT> <CLOSE .C>)>
		       <RETURN ,NULL>)>
		<CRLF>
		<PRINC <SPNAME <1 .O>>>
		<PRINC ": ">
		<PRIN1 <GET <OBLIST? <1 .O>> OBLIST>>
		<PRINC " => ">
		<PRIN1 <GET <OBLIST? <2 .O>> OBLIST>>
		<SET O <REST .O 2>>>>

<ENDPACKAGE>
