.ADD(ALLLOCS,FOONLY,FOOTV)
MDWL,<
.ADD(ALLWW,FOONLY,FOOWTV)
>;MDWL
;Note! These .ADD's must be outside of block structure

BEGIN FOONLY

COMMENT 

Foonly nomenclature old version (pre DRWVER=27)

DIPS	BYTE(6) letter-code (12) number
CONNS	BYTE(3) letter (3) [0,11,12,13,21,22,23,0] (12) number

New version, (changed by LOCFUK routine)

DIPS	BYTE(3) letter (3) group (3) row (3) col (6) offset
CONNS	BYTE(3) letter (3) [0,11,12,13,21,22,23,0] (12) number

The Foonly board is a 1320 DIP panel.
There are 8 major rows of dips, labeled A-F, vertically
Each row consists of 6 groups of 30 dips (except group 6
  is only 15 DIPs) arranged horizontally within row.

	A6	A5	A4	A3	A2	A1	conns
	B6	B5	B4	B3	B2	B1	conns
	C6	C5	C4	C3	C2	C1	conns
	D6	D5	D4	D3	D2	D1	conns

	E6	E5	E4	E3	E2	E1	conns
	F6	F5	F4	F3	F2	F1	conns
	H6	H5	H4	H3	H2	H1	conns
	J6	J5	J4	J3	J2	J1	conns

The group is a 5 row by 6 columns, DIP 11 in upper right

		16 15 14 13 12 11
		26	       21
		36	       31
		46	       41
		56 55 54 53 52 51

All directions are viewed from the DIP side


%DIPL__<POINT 3,,20>-=18		;DIP LETTER (A,B,C,D,E,F,H,J)
%DIPG__<POINT 3,,23>-=18		;DIP GROUP (1-6)
%DIPR__<POINT 3,,26>-=18		;DIP ROW (1-5)
%DIPC__<POINT 3,,29>-=18		;DIP COL
%DIPOF__<POINT 6,,35>-=18		;DIP OFFSET

%CONL__<POINT 3,,20>-=18		;CONNECTOR LETTER
%CONN__<POINT 3,,23>-=18		;CONNECTOR NUMBER (11,12,13,21,22,23)
%CONP__<POINT 9,,35>-=18		;CONNECTOR PIN #

BRDGND__=1				; PIN 1 IS DEDICATED GROUND
BRDPWR__=8				; PIN 16 IS DEDICATED POWER

CONTAB:	0
	=11
	=12
	=13
	=21
	=22
	=23
	0


MWL,<
comment 

All calculations are done from the DIP side.

(0,0) at LOWER left hand corner in left handed coordinate system.
X+ to right, Y+ is up
0,0 corresponds to FV1 of DEC connectors.



XPINSP__ =300
YPINSP__=100

>;MWL

;THE TRANSFER VECTOR FOR THE AUGUAT FOONLY

^FOOTV:			
	JRST LCINIT		;BOARD INITIALIZATION
	JRST QUPIN		;CHECKS FOR WILD CONNECTOR BODIES
	JRST $SLTOUT		;PRINTS CARD LOC (B-R-S)
	JRST $GETSLT		;READS CARD LOC (B-R-S)
	JRST PRNLOC		;PRINTS SOCKET, DIP, OR CONNECTOR LOC
	JRST PRNPIN		;PRINTS SOCKET, DIP, OR CONNECTOR PIN
	JRST CPNSEP		;SEPARATE CONNECTORS LOC/PIN PARTS FROM 18 BIT FORM
	JRST CPNMER		;MERGE CONN LOC/PIN PARTS BACK
	JRST CPNMAP		;MAP CARD LOC, CPIN-LOC INTO BACKPANEL PIN LOC
MDWL,<	JRST MAPOST  >		;CONVERT FROM DIP-LOC/PIN TO POST

MDPC,<
	JRST GTSLTL		;READS (B-R-S) AND BODY LOCN
MD,<	JRST GTCONP		;READS (B-R-S) AND CONNECTOR PIN
	JRST locfuk		;LOCFUK
>;MD
>;MDPC

MWL,<
	JRST GETLOC		;READS EITHER DIP LOC, OR CONNECTOR LOC
	JRST RAYDIP		;PRINTS DIP, OR CONNECTOR LOC IN FORTRAN FORM
	JRST CPARTP		; (PRINT EDGE PIN TO PARTITION FILE)
	JRST SEQLOC		;TESTS FOR BODY LOCS BEING SEQUENTIAL 
	JRST CONGIN		;GENERATE NEXT INVENTED PIN TO REPLACE "U" PINS
	JRST $GTSLTT		;GETSLT, BUT WITH FIRST CHAR IN CHRREG
>;MWL
	[ASCIZ/L#/]		; CUE FOR BOARD SLOT
	[ASCIZ /#/]		; CUE FOR BOARD PIN
MDPC,<	[ASCIZ/LJ#-#/]		;CUE FOR CONNECTOR PIN
	[ASCIZ/L# /]		;CUE FOR BODY LOC
	[ASCID /A111/]		;PROTOTYPE FOR BODY LOC
>;MDPC
MWL,<	[ASCIZ/L#/]		;WIRELISTER BODY CUE
	[ASCIZ/LJ#/]		;WIRELISTER CONNECTOR BODY CUE
>;MWL
CHECK footv,LTVLEN

L2NSUB:	BLOCK L2NLEN			;*******
N2LSUB:	REPEAT N2LLEN, < "?"
>
EN2L__.

NNN__1
FOR I IN(A,B,C,D,E,F,H,J,K,L,M,N,P,R,S,T,U,V)
<	L2N2L I,0
>
FOR I IN (G,I,O,Q)
<	L2N2L I,1B0
>

N2LMAX__NNN-1

ORG EN2L


LCINIT:	MOVE T,[L2NSUB,,L2N]
	BLT T,L2N+L2NLEN+N2LLEN-1
	MOVEI T,N2LMAX
	MOVEM T,MAXN2L
	POPJ P,


;Locfuk - convert from old blody location nomenclature.

MD,<
;T = LOCATION FOR BODY
;(TT= RDVER .LT. 27)

LOCFUK:	CAIL TT,27		;OLD VERSIONS HAVE DIFFERENT
	 POPJ P,
	LDB TT,[POINT 6,T,23]
	DPB TT,[%DIPL,,T]
	MOVE TT,T
	ANDI TT,7777		;GET NUMBER, FORM OF "A156"
	IDIVI TT,=10		;STRIP OFF COL
	PUSH P,TTT
	IDIVI TT,=10
	TRZ T,7777
	DPB TT,[%DIPG,,T]
	DPB TTT,[%DIPR,,T]
	POP P,TT
	DPB TT,[%DIPC,,T]
	POPJ P,
>;MD

PRNLOC:	SETZ TT,
	JUMPE A,CPOPJ
	JUMPL A,CNLOC			
	LDB T,[%DIPL,,A]		;GROUP LETTER
	PUTBYT @N2L+1(T)		;CONVERT TO LETTER AND PRINT
	LDB T,[%DIPG,,A]
	PUTBYT "0"(T)
	LDB T,[%DIPR,,A]
	PUTBYT "0"(T)
	LDB T,[%DIPC,,A]
	PUTBYT "0"(T)
	LDB T,[%DIPOF,,A]
	JUMPE T,PRNLC1
	PUTBYT "@"
	PUSHJ P,PUTDEC
PRNLC1:	MOVEI TT,"-"
	POPJ P,

CNLOC:	LDB T,[%CONL,,A]
	PUTBYT @N2L+1(T)
	PUTBYT "J"
	LDB T,[%CONN,,A]
	MOVE T,CONTAB(T)
	MOVEI TT,2
	MOVEM TT,NDIG
	PUSHJ P,NPUTDEC
	MOVEI TT,"-"
	POPJ P,

PRNPIN:	LDB T,[%%PINN,,A]
MWL,<
	 MOVEI TT,2
	MOVEM TT,NDIG
	JRST NPUTDEC
>;MWL
MDPC,<	JRST PUTDEC >

;CONVERT PIN-SPEC TO POST-SPEC
;MAPOST (DWL) - CONVERT FROM DIP-LOC,PIN# TO SOCKET-LOC, PIN#
;A = MBIT+PIN#,,LOC
;B = PACKAGE
;Skips if can map, with MAPSOC set.
; Possibly MAPPWR or MAPGND if V or G posts on board
;A = New MBIT+PIN#,,LOC
;B = FLAGS,,PIN CHANGE
;	%MPLOC	;LOC WAS CHANGED
;	%MPPIN	;PIN WAS CHANGED, DIFFERENCE IN RH (TO CHECK FOR +1)
;	%MPPL1	;PIN NUMBER CHANGED BY 1 (KLUDGE)

MDWL,<
MAPOST:	TLNN A,CRDPIN		;SHOULDN'T BE ON
	TLOE A,MAPSOC
	 OUTSTR [ASCIZ /PIN ALREADY MAPPED TO POST???
/]
	JUMPL A,[SETZ B,	;CONNECTOR, NO CHANGE
		JRST CPOPJ1]
	PUSH P,C
	PUSH P,D
	PUSH P,A
	LDB D,[%DIPOF,,A]	;OFFSET FIELD WITHIN SOCKET
	LDB A,[%%PINN,,A]
	JUMPE A,MAPOS1
	MOVEI C,=16		;BOARD HAS 16 PIN SOCKETS
	PUSHJ P,MAPPER
	 JRST MAPOSX
	LDB T,[%DIPC,,(P)]	;NOW OFFSET COLUMN
	SUB T,C
	JUMPLE T,MAPOSX		;OVERFLOWS GROUP
	DPB T,[%DIPC,,(P)]
	LDB T,[%DIPR,,(P)]	;FIRST ROW IS 1
	ADD T,D			;DOES OFFSET OVERFLOW NO. OF ROWS?
	CAILE T,=6
	 JRST MAPOSX
	DPB T,[%DIPR,,(P)]
MAPOS1:	SETZ T,
	DPB T,[%DIPOF,,(P)]	;WITHIN SOCKET OFFSET GOES AWAY
	DPB A,[%%PINN,,(P)]
	AOS -3(P)
MAPOSX:	POP P,A
	POP P,D
	POP P,C
	POPJ P,
>;MDWL

GTSLTL:	PUSH P,A
	MOVEI A,[[ASCIZ /L#./]
		 0]
	PUSHJ P,LNPARS
	 JRST GTSL0
	 JRST GTSL1
	SETZ T,
	PUSHJ P,GATLOC
	 JRST GTSL0
	CAIE CHRREG,"@"
	 JRST GTSL2
	PUSH P,T
	GETNUM
	MOVE TT,NUMREG
	POP P,T
	JUMPE TT,GTSL0
	DPB TT,[%DIPOF,,T]
GTSL2:	MOVEM T,DESTIN
	AOS -1(P)
GTSL1:	AOS -1(P)
GTSL0:	POP P,A
	POPJ P,

GATLOC:	MOVE TT,ARG1
	SOS TT
	DPB TT,[%DIPL,,T]
	MOVE TT,ARG2
	IDIVI TT,=10
	PUSH P,TTT
	IDIVI TT,=10
	DPB TT,[%DIPG,,T]
	DPB TTT,[%DIPR,,T]
	POP P,TT
	DPB TT,[%DIPC,,T]
 	JRST CPOPJ1

MD,<
;THIS SHOULD PROBABLY TRY FOR B-R-S ALSO, BUT...?
GTCONP:	PUSH P,A
	MOVEI A,[[ASCIZ /LJ#-#/]
		 0]
	PUSHJ P,LNPARSE
	 JRST GTCON0
	 JRST GTCON1			;NULL INPUT
	PUSHJ P,GATCON		;GET JACK OR PADDLE PART OF LOC
	 JRST GTCON0
	MOVE A,ARG5
GTCON3:	DPB A,[%CONP,,TT]
	HRRZM TT,DESTIN
	AOS -1(P)
GTCON1:	AOS -1(P)
GTCON0:	POP P,A
	POPJ P,
>;MD

GATCON:	SETZ TT,
	SOS A,ARG1
	DPB A,[%CONL,,TT]	;THE LETTER
	MOVSI TTT,-8
	MOVE T,ARG3		;THE 11,12,13,...
	CAME T,CONTAB(TTT)
	 AOBJN TTT,.-1
	JUMPGE TTT,CPOPJ	
	DPB TTT,[%CONN,,TT]
	TLO TT,MAPCON
	JRST CPOPJ1

MWL,<

GETLOC:	MOVEI A,[[ASCIZ /LJ#/]	;0 - Scotchflex connector
		 [ASCIZ /L#/]	;1 - Board socket
		 [ASCIZ /L#@#/]	;2 - Board socket with offset
		 0]
	PUSHJ P,LNPARSE
	 POPJ P,
	 POPJ P,
	SKIPN A			;STRING 0,3 ARE CONNECTOR FORMATS
	 JRST GATCON
	SETZ TT,
	MOVE T,ARG4
	CAIN A,2			;THE OFFSET CASE
	 DPB T,[%DIPOF,,TT]
	JRST GATLOC

;Print location for fixed format card image
;8 cols wide, with "group" left justified, "pin number" right justified
RAYDIP:	TLNN A,MAPSOC
	 PUSHJ P,FUCKUP
	PUSHJ P,PRNLOC		;A01 or J01 or C
	LDB T,[%%PINN,,A]		;DIP PIN NUMBER
	PUTSTR [ASCIZ /   /]	    	;3 SPACES
	MOVEI TTT,2
	MOVEM TTT,NDIG
	JRST NPUTDEC		;"A01" + 3 spaces + ## = 8

FOR NAME IN (CPARTP:,CONGIN:,SEQLOC:)
<NOTYET(NAME)
>
>;MWL

CPNSEP:	LDB TT,[%CONP,,T]
	MOVEI TTT,0
	DPB TTT,[%CONP,,T]
	POPJ P,

;Merge connector'pin with connector'loc
; but check for overflow of connector pin,
; and carry into next connector loc - this
; is used by the UML printer

CPNMER:	PUSH P,A
	SKIPN T			;INITIALIZE?
	SKIPE TT
	 JRST CPNMR1
	MOVEI TT,1		;J11 AND PIN 1
	DPB TT,[%CONN,,T]	;CONNECTOR TYPE STARTS AT ZERO
CPNMR1:	LDB TTT,[%CONP,,T]
	CAIG TT,=20
	 JRST CPNMR2
;Carry into the next connector
	MOVEI TT,1		;RESET PIN#
	LDB TTT,[%CONN,,T]
	AOS TTT
	DPB TTT,[%CONN,,T]
	SKIPE CONTAB(TTT)	;OVERFLOWS GROUP?
	 JRST CPNMR2
;Overflows from one major row to next
	MOVEI TTT,1		;RESET TO J11
	DPB TTT,[%CONN,,T]
	LDB TTT,[%CONL,,T]
	AOS TTT
	DPB TTT,[%CONL,,T]	
CPNMR2:	DPB TT,[%CONP,,T]
	POP P,A
	POPJ P,

QUPIN:	SETZ A,			;NO RULE NUMBER
	POPJ P,			;AND IT'S NOT WILD
NOTYET(CPNMAP:)

MDWL,<
MWL,<
SUBTTL WIRE WRAP ROUTINES  -- FOONLY BOARDS

^^FOOWTV__.

	-1			;FLAGS IF WIRE WRAP OR PC BOARD
	JRST CPOPJ		;THE INIT ROUTINE
	JRST MAPRC		;MAP ROW/COLS INTO GENERATED LOCS
	JRST MAPPAD		;MAP PADDLE/LETTER/SIDE INTO CONN LOCS
	JRST DISTPP		;DISTANCE CALC ROUTINE
	JRST FPWR		;FIND A POST WITH POWER
	JRST FGND		;FIND A POST WITH GND
	JRST MAPIT		;CONVERT POST INTO X,Y,BITS
	JRST PAKSIZ		;FIND DIMENSION OF DIP OUTLINE
	JRST GNDCLR		;?
	JRST WAGGND		;?
	JRST GNDOUT		;?
	JRST VCCOUT		;?

	5*8			;NROWS		    (USED FOR UML ONLY)
	6*6			;NCOLS		    (USED FOR UML ONLY)
	6			;NCLPRG		    (USED FOR UML ONLY)
	5			;NRWPRP		    (USED FOR UML ONLY)
	=1560			;DIPSLT_NROWS*NCOLS (USED FOR UML ONLY)
	SETPAD(6*8)		;NPADS		    (USED FOR UML ONLY)
	XWD -=20,1		;PADLET		    (USED FOR UML ONLY)
	XWD -1,0		;PADPIN		    (USED FOR UML ONLY)
	=10			;FRACTN
	=200*2			;WRAPMG .200" INSULATION AROUND EACH POST
	=1500			;POSTMG .750" BARE WIRE AROUND EACH POST
	0			;NEXTR
CHECK FOOWTV,WTVLEN

;TABLES FOR MAPIT

;**************************************** DIP PINS

DEFINE XY(X,Y)
<	X*XPINSP,,Y*YPINSP
>

;Pin position offset from socket origin (pin 10, lower left). DIP side!
PINTAB:
FOR Y_7, 0, -1
<	XY(0,Y)
>
FOR Y_0, 7, 1
<	XY(1,Y)
>

MAPIT:	JUMPL A,CONMAP			;MAP CONNECTOR LOCATION
	PUSHJ P,MAPLOC			;MAP DIP LOCN
	 POPJ P,			;BAD LOCN
	LDB TTT,[%%PINN,,A]		;PIN #
MAPIT0:	ADD T,PINTAB-1(TTT)		;ADD EXTRA XY FOR PIN
	SETZ TT,
	CAIN TTT,BRDGND
	 MOVSI TT,GND
	CAIN TTT,BRDPWR
	 MOVE TT,[PWR,,-=520]		;-5.20 VOLTS
	SETZ TTT,			;FLUSH AWAY THOSE GOODIES
	JRST CPOPJ1

;Convert PIN-SPEC in A into DIP X,Y locn (T)
;Y + UP
;X + RIGHT (FROM DIP SIDE)

;For Y, <6-major row>*6" + <5-ROW>*1.0"

MAPLOC:	LDB T,[%DIPL,,A]
	MOVNS T
	ADDI T,6
	IMULI T,=6000
	LDB TT,[%DIPR,,A]
	MOVNS TT
	ADDI TT,5
	IMULI TT,=1000
	ADD T,TT
;For X, <6-Group>*3.0" + <6-Column>*.5"
	LDB TT,[%DIPG,,A]
	MOVNS TT
	ADDI TT,6
	IMULI TT,=3000
	LDB TTT,[%DIPC,,A]
	MOVNS TTT
	ADDI TTT,6
	IMULI TTT,=500
	ADD TT,TTT
	HRL T,TT
	JRST CPOPJ1

;HERE FOR CONNECTOR PINS

;For Y, <6-major row>*6" + <2-JNx>*3.0" + <20-conp> *.1"
;For X, 20.0" + <3-JxN>*.5"

CONMAP:	LDB T,[%CONL,,A]
	MOVNS T
	ADDI T,6
	IMULI T,=6000
	LDB TT,[%CONN,,A]
	ADD T,CONTBL(TT)
	LDB TT,[%CONP,,A]
	MOVNS TT
	ADDI TT,=20
	ADD T,TT
	JRST CPOPJ1	


CONTBL:	0
	=21500,,=4000
	=21000,,=4000
	=20500,,=4000
	=21500,,=2000
	=21000,,=2000
	=20500,,=2000
	0


PAKSIZ:	SKIPE ILLPAK(B)
	 POPJ P,
	LDB T,[%DIPC,,A]
	SUB T,PAKWID(B)
	JUMPL T,CPOPJ
	LDB T,[%DIPR,,A]
	ADD T,PAKHGT(B)
	CAILE T,5
	 POPJ P,
	JRST PAKDIM

;Define illegal package types in this board
; -1 if illegal
ILLPAK:	BLOCK NPACK
	FOR @' I IN (22,24,36,40,48,64)
	<ORG ILLPAK+K.'I 	-1
	>
	ORG ILLPAK+NPACK


;For UML, MAP a UML row, column into a diploc

MAPRC:	HLRZ TT,T		;ROW
	HRRZS T			;COL
	PUSH P,[0]
	PUSH P,TT		;THE ROW
	SOS T
	IDIVI T,6
	ADDI TT,1
	DPB TT,[%DIPC,,-1(P)]
	ADDI T,1
	DPB T,[%DIPG,,-1(P)]
	POP P,T
	SOS T
	IDIVI T,5
	AOS TT
	DPB TT,[%DIPR,,(P)]
	DPB T,[%DIPL,,(P)]
	POP P,T
	JRST CPOPJ1

;Map a connector number (T) and pin number (tt,ttt) into
; a connector spec

MAPPAD:	MOVSI TTT,MAPCON(TT)
	SOS T
	IDIVI T,6		;6 CONNECTORS PER MAJOR ROW
	DPB T,[%CONL,,TTT]
	AOS TT
	DPB TT,[%CONN,,TTT]
	MOVE T,TTT
	POPJ P,


FPWR:	SKIPA B,[BRDPWR]
FGND:	 MOVEI B,BRDGND
	DPB B,[%%PINN,,A]
	TLO A,MAPSOC
	JUMPL A,FGNDC
	POPJ P,

FGNDC:	SETZ A,		;NOT CLEVER FOR NOW
	POPJ P,

FOR NAME IN (GNDCLR:,WAGGND:,GNDOUT:,VCCOUT:)
<NOTYET(NAME)
>
>;MWL
>;MDWL
BEND FOONLY
