;<WIRELIST>W940.FAI.13, 15-NOV-75 19:05:04, EDIT BY HELLIWELL
MDWL,<
.ADD(ALLWW,W940,W940TV)
.ADD(ALLWW,W941,W941TV)
.ADD(ALLWW,W942,W940TV)
.ADD(ALLWW,W943,W941TV)
.ADD(ALLWW,W946,W946TV)
;Note! These .ADD's must be outside of block structure

MWL,<

BEGIN WW940

comment 

These are formats for W940 series wire wrap cards.  If the sign bit is 0
then it is a dip pin otherwise it is a connector pin.

dip pin spec:  E#(#)
The E must literally be there.  The first # is the slot, the letter is the pin.
There is a hack for specifying slots via a letter number-matrix.

______|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
|                      11          17          23                      35
|           12		|     6	    |     6	|           12		|
|_______________________|___________|___________|_______________________|
	     |		      |		  |		     |
<	     |		      |		  |		     |----------->loc #
	     |		      |		  |
<	     |		      |		  |------------------------------>loc letter
	     |		      |
<	     |		      |------------------------------------------>dip pin #
	     |
<	     |----------------------------------------------------------->flags

connector pin spec:	LL#
The first letter is the paddle, the second letter is the pin and the # is the
side of the board.

______|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
|                      11          17          23          29          35
|	    12		|     6	    |     6     |     6     |     6     |
|_______________________|___________|___________|___________|___________|
	     |		      |		  |	      |		  |
<	     |		      |		  |	      |		  |------>side
	     |		      |		  |	      |
<	     |		      |		  |	      |------------------>pin letter
	     |		      |		  |
<	     |		      |		  |------------------------------>paddle
	     |		      |
<	     |		      |------------------------------------------>not used
	     |
<	     |----------------------------------------------------------->flags


^W941TV__.	;TRANSFER VECTOR FOR DOUBLE HEIGHT DEC BOARDS
	-1			;FLAGS IF WIRE WRAP OR PC BOARD
	JRST CPOPJ		;THE W/W INIT ROUTINE
	JRST MAPRC		;MAP ROW/COLS INTO GENERATED LOCS
	JRST MAPPAD		;MAP PADDLE/LETTER/SIDE INTO CONN LOCS
	JRST DISTCB		;DISTANCE CALC ROUTINE
	JRST FPWR		;FIND A POST WITH POWER
	JRST FGND		;FIND A POST WITH GND
	JRST MAPIT		;CONVERT POST INTO X,Y,BITS
	JRST PAKSIZ		;FIND DIMENSION OF DIP OUTLINE
	JRST GNDCLR		;?
	JRST WAGGND		;?
	JRST GNDOUT		;?
	JRST VCCOUT		;?

	5			;NROWS  FOR DOUBLE HEIGHT
	5			;NCOLS
	0			;NCLPRG
	0			;NRWPRP
	=25			;DIPSLT_NROWS*NCOLS
	SETPAD(2)		;NPADS
	XWD -=18,1		;PADLET
	XWD -2,1		;PADPIN
	=8			;FRACTN
	ITS,<=400;>0		;WRAPMG
	ITS,<=1500;>=1000	;POSTMG
	=250			;NEXTR
CHECK W941TV,WTVLEN

^W940TV__.	;TRANSFER VECTOR FOR QUAD HEIGHT DEC BOARDS
	-1			;FLAGS IF WIRE WRAP OR PC BOARD
	JRST CPOPJ		;THE W/W INIT ROUTINE
	JRST MAPRC		;MAP ROW/COLS INTO GENERATED LOCS
	JRST MAPPAD		;MAP PADDLE/LETTER/SIDE INTO CONN LOCS
	JRST DISTCB		;DISTANCE CALC ROUTINE
	JRST FPWR		;FIND A POST WITH POWER
	JRST FGND		;FIND A POST WITH GND
	JRST MAPIT		;CONVERT POST INTO X,Y,BITS
	JRST PAKSIZ		;FIND DIMENSION OF DIP OUTLINE
	JRST GNDCLR		;?
	JRST WAGGND		;?
	JRST GNDOUT		;?
	JRST VCCOUT		;?

	=10			;NROWS	FOR QUAD HEIGHT
	5			;NCOLS
	0			;NCLPRG
	0			;NRWPRP
	=50			;DIPSLT
	SETPAD(4)		;NPADS
	XWD -=18,1		;PADLET
	XWD -2,1		;PADPIN
	=8			;FRACTN
	ITS,<=400;>0		;WRAPMG
	ITS,<=1500;>=1000 	;POSTMG
	=250			;NEXTR
CHECK W940TV,WTVLEN

CONOFF__=57*=125
XFDG__=250
	

MAPRC:	SKIPE LNGRID			;IF LNGRID SET,
	JRST [	TDNE T,[777700,,770000]
		POPJ P,
		HLRZ TT,T		;THEN RC IS LN
		MOVNS T
		ADD T,NCOLS
		ADDI T,1		;REVERSE COLUMNS
		DPB TT,[POINT 24,T,23]
		JRST CPOPJ1]
	HLRZ TT,T
	CAMLE TT,NROWS
	POPJ P,
	HRRZ T,T
	CAMLE T,NCOLS
	POPJ P,
	IMUL TT,NCOLS
	SUB T,NCOLS
	ADDI T,(TT)
	HRRZ TT,L2N+"E"
	LSH TT,14
	IOR T,TT
	JRST CPOPJ1

;MAP NUMBERS IN T, TT, AND TTT INTO EDGE PIN NAME
MAPPAD:	LSH T,14
	LSH TT,6
	IOR T,TT
	IOR T,TTT
	POPJ P,

PINMAP:	PUSHJ P,MAPIT
	JRST PINERR
	JRST CONERR
	JRST CPOPJ1

PINBIT:	PUSHJ P,MAPIT
	JFCL
	SETZ TT,
	POPJ P,

MAPIT:	JUMPL A,CONMAP		;IS IT A CONNECTOR PIN?
	LDB T,[POINT 6,A,23]	;GET LOC LETTER
	LDB TT,[POINT 12,A,35]	;GET LOC NUMBER
	JUMPE TT,CPOPJ		;0 IS A NO,NO
	SKIPE LNGRID		;LETTER NUMBER GRID?
	JRST LNGMAP		;YES, DIFFERENT MAPPING
	MOVE TTT,N2L(T)		;GET LETTER
	CAIE TTT,"E"		;IT'S GOT TO BE AN "E" OR ITS WRONG
	POPJ P,
LNGMPD:	CAMLE TT,DIPSLT		;THATS TOO BIG
	POPJ P,
	MOVE T,DIPLOC-1(TT)	;PUT XY IN T
	LDB TT,[POINT 6,A,17]	;GET THE PIN #
	TLNE A,MAPPWR!MAPGND	;POWER OR GROUND PIN?
	JRST PINPGP
	CAIN B,=14		;I KNOW WHICH WAY 14 PIN DIPS GO IN TOO!
	CAIG TT,7		;WHICH MEANS PIN #'S GREATER THAN 7 ADD 2
	JRST MAPIT0		;NO
	ADDI TT,2		;YES, FUDGE PIN # BY 2
;I THINK I STILL NEED THIS!
	ADD A,[2,,0]		;ALSO RETURN CORRECTED PIN # FOR DSTCLC
	TLO A,PLUS2		;AND INDICATE IT IS A PLUS 2 VERSION
MAPIT0:	ADD T,PINTAB-1(TT)	;ADD EXTRA XY FOR PIN
	MOVE TTT,DETAB-1(TT)	;GET DISTANCE TO END OF DIP PATTERN (SHORTEST)
	SETZ TT,		;NO AUTOMATIC GND OR PWR
	JRST CPOPJ2

LNGMAP:	CAMLE T,NROWS
	POPJ P,
	IMUL T,NCOLS
	SUBI T,-1(TT)
	MOVE TT,T
	JRST LNGMPD

PINPGP:	JUMPN TT,CPOPJ		;PIN FIELD SHOULD BE CLEAR
	ADD T,[=8*=125,,0]	;BOTH GET THIS
	TLNN A,MAPPWR		;POWER?
	JRST [	MOVSI TT,GND	;NO, RETURN GND BIT
		SETZ TTT,	;AT END
		JRST CPOPJ2]
	SUBI T,6*=125		;YES, IT IS UP THIS MUCH
	MOVSI TT,PWR
	SETZ TTT,
	JRST CPOPJ2

CONMAP:	AOS (P)
	LDB T,[POINT 6,A,29]	;GET PIN LETTER
	MOVEM T,LETTER#
	CAILE T,=18		;LEGAL?
	POPJ P,
	SUBI T,1		;NORMALIZE TO 0
	IMULI T,=125		;GENERATE Y POSITION
	LDB TT,[POINT 6,A,23]	;GET PADDLE
	JUMPLE TT,CPOPJ
	CAMLE TT,NPADS
	POPJ P,
	ADD T,YFDG-1(TT)
	LDB TT,[POINT 6,A,35]	;GET SIDE
	MOVEM TT,SIDE#
	SOJL TT,CPOPJ		;FUDGE IT AND CHECK FOR LEGAL
	CAILE TT,1		;TOO BIG?
	POPJ P,
	LSH TT,1
	LDB TTT,[POINT 1,A,29]	;EVEN OR ODD CONNECTOR PIN
	TRC TTT,1
	IOR TT,TTT
	IMULI TT,XFDG
	ADDI TT,CONOFF
	HRL T,TT
	MOVE TT,LETTER
	LSH TT,2
	IOR TT,SIDE
VGCON1:	CAIN TT,<1*4>+2		;CHECK FOR POWER AND GROUND PINS
	MOVSI TT,PWR
	CAIN TT,<3*4>+2
	MOVSI TT,GND
	CAIN TT,<=16*4>+1
	MOVSI TT,GND
	SETZ TTT,		;NO SHORTEST DISTANCE TO END OF DIP!
	JRST CPOPJ1

VGCON:	LDB TT,[POINT 8,A,31]
	TRO TT,1
	TRNE A,2
	ADDI TT,1
	JRST VGCON1

PINERR:	LDB T,[POINT 6,A,23]
	OUTCHR N2L(T)
	LDB T,[POINT 12,A,35]
	PUSHJ P,NUMPNT
	OUTCHR["("]
	LDB T,[POINT 6,A,17]
LSTNUM:	PUSHJ P,NUMPNT
	OUTSTR[ASCIZ/) MAPPING ERROR!
/]
	POPJ P,

CONERR:	LDB T,[POINT 6,A,23]
	OUTCHR N2L(T)
	OUTCHR["("]
	LDB T,[POINT 6,A,29]
	OUTCHR N2L(T)
	LDB T,[POINT 6,A,35]
	JRST LSTNUM
;FIND POWER AND GROUND PINS
FPWR:	JUMPL A,FPWRC
	TLZ A,$$PINN		;CLEAR PIN FIELD
	TLO A,MAPPWR		;AND SET MAPPWR BIT
	POPJ P,

FPWRC:	TRZ A,7777		;CLEAR THIS PART
	HRRZ T,"A"+L2N
	LSH T,6
	TRO A,2(T)		;SET AS A2
	POPJ P,

FGND:	JUMPL A,FGNDC
	TLZ A,$$PINN
	TLO A,MAPGND		;MAKE IT "G" PIN
	POPJ P,

FGNDC:	LDB T,[POINT 6,A,29]	;GET LETTER
	TRZ A,7777		;CLEAR THIS
	CAMG T,"K"+L2N	;SHOULD ONLY LOOK AT RH, BUT SIGN BIT PROBABLY ISN'T ON FOR "K"
	JRST [	HRRZ T,"C"+L2N
		LSH T,6
		TRO T,2		;C2
		JRST FGNDC1]
	HRRZ T,"T"+L2N
	LSH T,6
	TRO T,1			;T1
FGNDC1:	TRO A,(T)
	POPJ P,

PGPRTM:	SETOM PMINUS#
	CAIA
PGPRNT:	SETZM PMINUS
	LDB T,[POINT 6,A,23]
	PUTBYT @N2L(T)
	JUMPL A,PGCPNT
	LDB T,[POINT 12,A,35]
	PUSHJ P,DECOUT
	PUTBYT "("
	TLNN A,MAPPWR!MAPGND
	JRST NPGPNT
	TLNN A,MAPPWR
	SKIPA T,["G"]
	MOVEI T,"V"
	PUTBYT @T
PGPN1:	PUTBYT ")"
	POPJ P,

NPGPNT:	LDB T,[%%PINN,,A]
	SKIPN PMINUS
	JRST NPGPN1
	TLNE A,PLUS1
	JRST [	PUSHJ P,DECOUT
		PUTBYT "-"
		JRST PGPN1]
	TLNE A,PLUS2
	CAIG T,7
	JRST PGPN0
	PUSHJ P,DECOUT
	PUTSTR[ASCIZ/-2/]
	JRST PGPN1

NPGPN1:	TLNE A,PLUS1
	SOJA T,PGPN2
	CAIG T,7
	JRST [PGPN0:	PUSHJ P,DECOUT	;LESS THAN 8 AND NOT PLUS1 FORM, NO + AT ALL
			JRST PGPN1]
	TLNE A,PLUS2
	SUBI T,2
PGPN2:	PUSHJ P,DECOUT
	TLNE A,PLUS1
	PUTBYT "+"
	TLNE A,PLUS2
	PUTSTR[ASCIZ/+2/]
	JRST PGPN1

PGCPNT:	PUTBYT "("
	LDB T,[POINT 6,A,29]
	PUTBYT @N2L(T)
	LDB T,[POINT 6,A,35]
	PUSHJ P,DECOUT
	JRST PGPN1
GNDCLR:	OUTSTR[ASCIZ/YOU CAN'T PUT 24 PIN DIPS ON DEC CARDS!
/]
	POPJ P,

WAGGND:	MOVSI B,-GNDLEN
WGLOP:	HLRZ TTT,GNDNAM(B)		;PICK UP SIDE NUMBER
	JUMPE TTT,WGLOP1
	PUTSTR[ASCIZ/777777000000000000/];CPIN ID OF -1, NO FILE NAME
	LDB TTT,[POINT 7,GNDNAM(B),6]	;PADDLE LETTER
	HRRZ T,L2N(TTT)
	IMULI T,=100
	LDB TTT,[POINT 7,GNDNAM(B),6]
	HRRZ TTT,L2N(TTT)
	LSH TTT,1
	ADD T,TTT
	HRRZ TTT,GNDNAM(B)
	ANDI TTT,1
	SUB T,TTT
	PUSHJ P,DECOUT			;GUARANTEED TO BE 3 DIGITS
	PUTSTR[ASCIZ/    3/]		;MARK AS GROUND
	PUSHJ P,F4CRLF
WGLOP1:	AOBJN B,WGLOP
	MOVSI B,-VCCLEN
VCCLOP:	HLRZ TTT,VCCNAM(B)		;PICK UP SIDE NUMBER
	JUMPE TTT,VCCLP1
	PUTSTR[ASCIZ/777777000000000000/];CPIN ID OF -1, NO FILE NAME
	LDB TTT,[POINT 7,VCCNAM(B),6]	;PADDLE LETTER
	HRRZ T,L2N(TTT)
	IMULI T,=100
	LDB TTT,[POINT 7,VCCNAM(B),6]
	HRRZ TTT,L2N(TTT)
	LSH TTT,1
	ADD T,TTT
	HRRZ TTT,VCCNAM(B)
	ANDI TTT,1
	SUB T,TTT
	PUSHJ P,DECOUT			;GUARANTEED TO BE EXACTLY 3 DIGITS
	PUTSTR[ASCIZ/    2/]		;MARK AS VCC
	PUSHJ P,F4CRLF
VCCLP1:	AOBJN B,VCCLOP
	POPJ P,
;FORMAT:
;	777777000000000000NNN    M
;NNN = PADDLE # * 100 + PIN * 2 - (SIDE MOD 2)
;M = 2 FOR VCC, 3 FOR GND


GNDOUT:	MOVSI A,-GNDLEN
	JRST GNDO2

GNDO0:	TRNN A,3		;MULTIPLE OF 4?
	JRST GNDO1
	PUTBYT 11
	JRST GNDO2

GNDO1:	PUTSTR[ASCIZ/
/]
GNDO2:	HLLZ T,GNDNAM(A)
	JUMPE T,[PUTBYT "E"
		MOVE T,GNDNAM(A)
		PUSHJ P,DECOUT
		PUTSTR[ASCIZ/(G)/]
		JRST GNDO3]
	LDB TTT,[POINT 7,GNDNAM(A),6]
	XCT PUTCHR
	PUTBYT "("
	LDB TTT,[POINT 7,GNDNAM(A),13]
	XCT PUTCHR
	HRRZ T,GNDNAM(A)
	PUSHJ P,DECOUT
	PUTBYT ")"
GNDO3:	PUTBYT 11
	HLRE T,GNDTAB(A)
	PUSHJ P,MILOUT
	PUTBYT ","
	HRRE T,GNDTAB(A)
	PUSHJ P,MILOUT
	AOBJN A,GNDO0
	PUTSTR[BYTE(7)15,14]
	POPJ P,

VCCOUT:	MOVSI A,-VCCLEN
	JRST VCCO2

VCCO0:	TRNN A,3		;MULTIPLE OF 4?
	JRST VCCO1
	PUTBYT 11
	JRST VCCO2

VCCO1:	PUTSTR[ASCIZ/
/]
VCCO2:	HLLZ T,VCCNAM(A)
	JUMPE T,[PUTBYT "E"
		MOVE T,VCCNAM(A)
		PUSHJ P,DECOUT
		PUTSTR[ASCIZ/(V)/]
		JRST VCCO3]
	LDB TTT,[POINT 7,VCCNAM(A),6]
	XCT PUTCHR
	PUTBYT "("
	LDB TTT,[POINT 7,VCCNAM(A),13]
	XCT PUTCHR
	HRRZ T,VCCNAM(A)
	PUSHJ P,DECOUT
	PUTBYT ")"
VCCO3:	PUTBYT 11
	HLRE T,VCCTAB(A)
	PUSHJ P,MILOUT
	PUTBYT ","
	HRRE T,VCCTAB(A)
	PUSHJ P,MILOUT
	AOBJN A,VCCO0
	PUTSTR[BYTE(7)15,14]
	POPJ P,
;TABLES

RADIX =10

DEFINE F(I)
<<I*125>>

DEFINE XY(A,B,SECTION)
<	<XWD A*125,0>+B*125+5250*SECTION
>


DEFINE ONESECTION(SECTION)
<	XY(41,6,SECTION)
	XY(31,6,SECTION)
	XY(20,6,SECTION)
	XY(10,6,SECTION)
	XY(0,6,SECTION)
	XY(41,14,SECTION)
	XY(31,14,SECTION)
	XY(20,14,SECTION)
	XY(10,14,SECTION)
	XY(0,14,SECTION)
	XY(41,22,SECTION)
	XY(31,22,SECTION)
	XY(20,22,SECTION)
	XY(10,22,SECTION)
	XY(0,22,SECTION)
	XY(41,30,SECTION)
	XY(31,30,SECTION)
	XY(20,30,SECTION)
	XY(10,30,SECTION)
	XY(0,30,SECTION)
	XY(41,38,SECTION)
	XY(31,38,SECTION)
	XY(20,38,SECTION)
	XY(10,38,SECTION)
	XY(0,38,SECTION)
>

DIPLOC:	ONESECTION(0)	;DOUBLE HEIGHT
	ONESECTION(1)	;QUAD
	ONESECTION(2)	;HEX

PINTAB:	XY(0,0,0)
	XY(1,0,0)
	XY(2,0,0)
	XY(3,0,0)
	XY(4,0,0)
	XY(5,0,0)
	XY(6,0,0)
	XY(7,0,0)
	XY(7,-6,0)
	XY(6,-6,0)
	XY(5,-6,0)
	XY(4,-6,0)
	XY(3,-6,0)
	XY(2,-6,0)
	XY(1,-6,0)
	XY(0,-6,0)

DEFINE DIST(A)
<	A*125
>

DETAB:	DIST(0)
	DIST(1)
	DIST(2)
	DIST(3)
	DIST(4)
	DIST(3)
	DIST(2)
	DIST(1)
	DIST(1)
	DIST(2)
	DIST(3)
	DIST(4)
	DIST(3)
	DIST(2)
	DIST(1)
	DIST(0)

YFDG:
FOR I_0,5
<	I*=21*=125
>
;GROUND AND POWER PINS
DEFINE PINS
<	ONEPINS(0)
	ONEPINS(1)
	ONEPINS(2)
>

DEFINE ONEPINS(SECTION)
<
	VGMAC(SECTION,8,6,5)
	VGMAC(SECTION,8,14,10)
	VGMAC(SECTION,8,22,15)
	VGMAC(SECTION,8,30,20)
	VGMAC(SECTION,8,38,25)
	VGMAC(SECTION,18,6,4)
	VGMAC(SECTION,18,14,9)
	VGMAC(SECTION,18,22,14)
	VGMAC(SECTION,18,30,19)
	VGMAC(SECTION,18,38,24)
	VGMAC(SECTION,28,06,3)
	VGMAC(SECTION,28,14,8)
	VGMAC(SECTION,28,22,13)
	VGMAC(SECTION,28,30,18)
	VGMAC(SECTION,28,38,23)
	VGMAC(SECTION,39,06,2)
	VGMAC(SECTION,39,14,7)
	VGMAC(SECTION,39,22,12)
	VGMAC(SECTION,39,30,17)
	VGMAC(SECTION,39,38,22)
	VGMAC(SECTION,49,06,1)
	VGMAC(SECTION,49,14,6)
	VGMAC(SECTION,49,22,11)
	VGMAC(SECTION,49,30,16)
	VGMAC(SECTION,49,38,21)
	VGCMAC(SECTION,53,2,A,C,2)
	VGCMAC(SECTION,55,15,A,T,1)
	VGCMAC(SECTION,53,23,B,C,2)
	VGCMAC(SECTION,55,36,B,T,1)
>

DEFINE VGMAC(A,B,C,D)
<	XY(B,C,A)
>

DEFINE VGCMAC(A,B,C,D,E,F)
<	XY(B,C,A)
>

GNDTAB:	PINS
GNDLEN__.-GNDTAB

DEFINE VGMAC(A,B,C,D)
<	D
>

DEFINE VGCMAC(A,B,C,D,E,F)
<	<BYTE(7)"D"+2*A,"E">+F
>

GNDNAM:	PINS

DEFINE ONEPINS(SECTION)
<
	VGMAC(SECTION,8,0,5)
	VGMAC(SECTION,8,8,10)
	VGMAC(SECTION,8,16,15)
	VGMAC(SECTION,8,24,20)
	VGMAC(SECTION,8,32,25)
	VGMAC(SECTION,18,0,4)
	VGMAC(SECTION,18,8,9)
	VGMAC(SECTION,18,16,14)
	VGMAC(SECTION,18,24,19)
	VGMAC(SECTION,18,32,24)
	VGMAC(SECTION,28,0,3)
	VGMAC(SECTION,28,8,8)
	VGMAC(SECTION,28,61,13)
	VGMAC(SECTION,28,24,18)
	VGMAC(SECTION,28,32,23)
	VGMAC(SECTION,39,0,2)
	VGMAC(SECTION,39,8,7)
	VGMAC(SECTION,39,16,12)
	VGMAC(SECTION,39,24,17)
	VGMAC(SECTION,39,32,22)
	VGMAC(SECTION,49,0,1)
	VGMAC(SECTION,49,8,6)
	VGMAC(SECTION,49,16,11)
	VGMAC(SECTION,49,24,16)
	VGMAC(SECTION,49,32,21)
	VGCMAC(SECTION,57,0,A,A,2)
	VGCMAC(SECTION,57,21,B,A,2)
>

DEFINE VGMAC(A,B,C,D)
<	XY(B,C,A)
>

DEFINE VGCMAC(A,B,C,D,E,F)
<	XY(B,C,A)
>

VCCTAB:	PINS
VCCLEN__.-VCCTAB

DEFINE VGMAC(A,B,C,D)
<	D
>

DEFINE VGCMAC(A,B,C,D,E,F)
<	<BYTE(7)"D"+2*A,"E">+F
>

VCCNAM:	PINS

RADIX 8
BEGIN WW946

;PIN DATA STRUCTURE SAME AS OTHER DEC BOARDS

^W946TV:
	-1			;FLAGS IF WIRE WRAP OR PC BOARD
	JRST W946IN		;THE W/W INIT ROUTINE
	JRST MAPRC		;MAP ROW/COLS INTO GENERATED LOCS
	JRST MAPPAD		;MAP PADDLE/LETTER/SIDE INTO CONN LOCS
	JRST DISTCB		;DISTANCE CALC ROUTINE
	JRST FPWR		;FIND A POST WITH POWER
	JRST FGND		;FIND A POST WITH GND
	JRST MAPIT		;CONVERT POST INTO X,Y,BITS
	JRST PAKSIZ		;FIND DIMENSION OF DIP OUTLINE
	JRST GNDCLR		;?
	JRST WAGGND		;?
	JRST GNDOUT		;?
	JRST VCCOUT		;?

	=18			;NROWS
	6			;NCOLS
	0			;NCLPRG
	0			;NRWPRP
	=108			;DIPSLT=NROWS*NCOLS
	SETPAD(6)		;NPADS
	XWD -=18,1		;PADLET
	XWD -2,1		;PADPIN
	=8			;FRACTN
	ITS,<=400;>=500		;WRAPMG--TOTAL FOR BOTH ENDS OF RUN!!
	ITS,<=1500;>=2000	 ;POSTMG--"
	=250			;NEXTR
CHECK W946TV,WTVLEN

W946IN:	SETOM LNGRID
	SETOM WIRGND
	POPJ P,

;MAPIT, PINMAP, PINBIT, MAPRC, PINPGP, CONMAP

MAPRC:	TDNE T,[777700,,770000]	;ROW,,COLUMN FROM UML ROUTINE IN T
        POPJ P,			;BLESS THE RC FROM UML
	MOVSS T			;PUT THE ROW FROM UML INTO THE NUMBER POSITION
        HLRZ TT,T		;PUT THE COLUMN FROM UML INTO RIGHT SIDE OF TT
	MOVNS TT		;AND MUNG THE COLUMN LETTER SO TED LIKES IT
	ADDI TT,1
	ADD TT,NCOLS
        DPB TT,[POINT 24,T,23]	; SO IT CAN BE STUFFED INTO THE LOC LETTER FIELD
        JRST CPOPJ1

PINMAP:	PUSHJ P,MAPIT
	JRST PINERR
	JRST CONERR
	JRST CPOPJ1

PINBIT:	PUSHJ P,MAPIT
	JFCL
	SETZ TT,
	POPJ P,

MAPIT:	JUMPL A,CONMAP		;IS IT A CONNECTOR PIN?
	LDB T,[POINT 6,A,23]	;GET LOC LETTER (COLUMN A-F)
	LDB TT,[POINT 12,A,35]	;GET LOC NUMBER (ROW 1-18)
	JUMPE TT,CPOPJ		;0 IS A NO,NO
	CAMLE T,NCOLS		;CHECK FOR OUT OF BOUNDS
	POPJ P,
	CAMLE TT,NROWS
	POPJ P,

;PUT XY IN T:
	SUBI T,1		;T_COL-1
	IMULI T,=1125		;T_(COL-1)*INTER.COLUMN.SPACING
	SUBI TT,1		;TT_ROW-1
	IDIVI TT,6		;TT_(ROW-1) DIV 6, TTT_(ROW-1) MOD 6
	IMULI TT,=5250		;TT_((ROW-1) DIV 6)*INTER.PATTERN.SPACING
	IMULI TTT,=750		;TTT_((ROW-1) MOD 6)*INTER.ROW.SPACING
	ADDI TT,=250(TTT)	;DIP PATTERN STARTS INSIDE OF CONNECTOR PATTERN
	HRLZS T			; ON THIS TURKEY CARD.
	HRR T,TT		;MOVE X TO LHW(T), Y TO RHW(T)

	LDB TT,[POINT 6,A,17]	;GET THE PIN #
	TLNE A,MAPPWR!MAPGND	;POWER OR GROUND PIN?
	JRST PINPGP
	CAIN B,=14		;I KNOW WHICH WAY 14 PIN DIPS GO IN TOO!
	CAIG TT,7		;WHICH MEANS PIN #'S GREATER THAN 7 ADD 2
	JRST MAPIT0	;NO (14 PIN DIPS NORMALLY GET MUNGED BEFORE THEY GET HERE)
	ADDI TT,2		;YES, FUDGE PIN # BY 2
;I THINK I STILL NEED THIS! (I BET NONE OF THIS CODE EVER GETS EXECUTED-TAG)
	ADD A,[2,,0]		;ALSO RETURN CORRECTED PIN # FOR DSTCLC
	TLO A,PLUS2		;AND INDICATE IT IS A PLUS 2 VERSION
MAPIT0:	PUSH P,TT
	CAIG TT,=8		;CALCULATE EXTRA XY FOR PIN-DIPLOC IS XY OF PIN 16
	JRST MAPIT1		;DO IT DIFFERENT IF PIN IS 8 OR LESS
	MOVEI TTT,=16		;PIN IS 9-16, NEEDS NO Y CORRECTION
	SUB TTT,TT		;GET #PINS FROM PIN 16
	IMULI TTT,=125		;MULTIPLY BY INTERPIN SPACING
	HRLZ TT,TTT		;LINE IT UP WITH X IN T
MAPIT3:	ADD T,TT		;FIX T
	POP P,TT
	MOVE TTT,DETAB-1(TT)	;GET DISTANCE TO END OF DIP PATTERN (SHORTEST)
	SETZ TT,		;NO AUTOMATIC GND OR PWR
	JRST CPOPJ2

MAPIT1:	SUBI TT,1		;PIN IS 8 OR LESS, GET #PINS FROM PIN 1
	IMULI TT,=125		;CONVERT TO MILS
	HRLZS TT		;LINE UP WITH X IN T
	HRRI TT,=625		;INCLUDE INTERROW SPACING
	JRST MAPIT3


PINPGP:	JUMPN TT,CPOPJ		;PIN FIELD SHOULD BE CLEAR
	TRNN A,10000		;IS COLUMN A,C, OR E? (ODD COLUMNS GET DIFFERENT
	JRST EVENCL		;POWER AND GROUND TREATMENT)
	ADD T,[=8*=125,,0]	;BOTH GET THIS
	TLNN A,MAPPWR		;POWER?
	JRST [	MOVSI TT,GND	;NO, RETURN GND BIT
		ADDI T,=625	;AND FUDGE Y
		SETZ TTT,	;AT END OF PATTERN
		JRST CPOPJ2]
	MOVSI TT,PWR
	SETZ TTT,
	JRST CPOPJ2

EVENCL:	TLNN A,MAPPWR		;POWER?
	JRST [	MOVSI TT,GND	;MAKE INTO PHANTOM GND PIN IN SAME PLACE AS PIN 8
		ADD T,[7*=125,,=625]
		SETZ TTT,
		JRST CPOPJ2]
	MOVSI TT,PWR
	SUB T,[=125,,0]		;MAP TO POWER PIN BETWEEN SOCKETS
	SETZ TTT,
	JRST CPOPJ2

CONMAP:	AOS (P)
	LDB TT,[POINT 6,A,23]	;GET PADDLE
	CAMLE TT,NPADS		;TOO LARGE?
	POPJ P,
	SOJL TT,CPOPJ		;NORMALIZE & CHECK FOR TOO SMALL
	MOVEM TT,SAVPAD#

	LDB T,[POINT 6,A,29]	;GET PIN
	MOVEM T,LETTER#
	CAILE T,=18		;LEGAL?
	POPJ P,
	SOJL T,CPOPJ		;NORMALIZE AND CHECK
	TRNE TT,1		;SKIP UNLESS WE'RE ON PADDLE B, C, OR F
	ADDI T,=18		;CPIN PATTERN REPEATS EVERY TWO PADDLES ON A W946

	LDB TT,[POINT 6,A,35]	;GET SIDE
	MOVEM TT,SIDE#
	SOJL TT,CPOPJ		;NORMALIZE AND CHECK
	CAILE TT,1		;TOO BIG?
	POPJ P,
	CAIE TT,		;IF WE'RE ON SIDE 2,
	ADDI T,=36		;THEN INDEX TO SIDE TWO PORTION OF CPIN TABLE
	MOVE T,CPINTB(T)	;GET X,Y OF CPIN RELATIVE TO AA2
	ADD T,[=6750,,0]	;ADD OFFSET OF AA2
	MOVE TT,SAVPAD		;GET PADDLE AGAIN
	ADD T,YFDG(TT)		;ADD PADDLE Y OFFSET
	MOVE TT,LETTER		;SET UP FOR VGCON1
	LSH TT,2
	IOR TT,SIDE
VGCON1:	CAIN TT,<1*4>+2		;CHECK FOR POWER AND GROUND PINS (A2,C2,OR T1)
	MOVSI TT,PWR
	CAIN TT,<3*4>+2
	MOVSI TT,GND
	CAIN TT,<=16*4>+1
	MOVSI TT,GND
	SETZ TTT,		;TTT OTHER THAN ZERO HAS NO MEANING FOR CPIN
	JRST CPOPJ1

VGCON:	LDB TT,[POINT 8,A,31]
	TRO TT,1
	TRNE A,2
	ADDI TT,1
	JRST VGCON1

FOR NAME (GNDCLR,WAGGND,GNDOUT,VCCOUT)
<NAME:	OUTSTR [ASCIZ /NAME NOT IMPLEMENTED FOR W946!
/]
	JRST ERRET
>
;TABLES FOR W946

RADIX =10

DEFINE XY(X,Y)<XWD 125*X,125*Y>

DEFINE Y(Y)<XWD 0,125*Y>

CPINTB:	XY(3,1)	;AA1
	XY(1,1)	;AB1
	XY(3,3)	;AC1
	XY(1,3)	;AD1
	XY(3,5)	;AE1
	XY(1,5)	;AF1
	XY(3,7)	;AH1
	XY(1,7)	;AJ1
	XY(3,9)	;AK1
	XY(1,9)	;AL1
	XY(3,11);AM1
	XY(1,11);AN1
	XY(3,13);AP1
	XY(1,13);AR1
	XY(3,15);AS1
	XY(1,15);AT1
	XY(1,18);AU1 YEAH, IT'S SCREWY, ALL RIGHT.
	XY(2,18);AV1
	XY(3,20);BA1
	XY(1,20);BB1
	XY(3,22);BC1
	XY(1,22);BD1
	XY(3,24);BE1
	XY(1,24);BF1
	XY(3,26);BH1
	XY(1,26);BJ1
	XY(3,28);BK1
	XY(1,28);BL1
	XY(3,30);BM1
	XY(1,30);BN1
	XY(3,32);BP1
	XY(1,32);BR1
	XY(3,34);BS1
	XY(1,34);BT1
	XY(3,37);BU1 HICCUP
	XY(1,37);BV1
	Y(0)	;AA2
	Y(1)	;AB2
	Y(2)	;AC2
	Y(3)	;AD2
	Y(4)	;AE2
	Y(5)	;AF2
	Y(6)	;AH2
	Y(7)	;AJ2
	Y(8)	;AK2
	Y(9)	;AL2
	Y(10)	;AM2
	Y(11)	;AN2
	Y(12)	;AP2
	Y(13)	;AR2
	Y(14)	;AS2
	Y(15)	;AT2
	Y(17)	;AU2 HICCUP
	Y(18)	;AV2
	Y(20)	;BA2
	Y(21)	;BB2
	Y(22)	;BC2
	Y(23)	;BD2
	Y(24)	;BE2
	Y(25)	;BF2
	Y(26)	;BH2
	Y(27)	;BJ2
	Y(28)	;BK2
	Y(29)	;BL2
	Y(30)	;BM2
	Y(31)	;BN2
	Y(32)	;BP2
	Y(33)	;BR2
	Y(34)	;BS2
	Y(35)	;BT2
	Y(37)	;BU2 HICCUP
	Y(38)	;BV2


YFDG:	0
	0
	=5250
	=5250
	=10500
	=10500

RADIX 8

BEND WW946
^W946TV__W946TV
BEND WW940
>;MWL
>;MDWL
