.ADD(ALLLOCS,DEC,DECTV)
MDWL,<
.ADD(ALLWW,DEC,DECWTV)
>;MDWL
;Note! These .ADD's must be outside of block structure

BEGIN DEC

%DIPL__<POINT 6,,23>-=18		;DIP GROUP (The letter)
%DIPS__<POINT 6,,29>-=18		;DIP SLOT  (The number)
;%DIPOF__<POINT 6,,35>-=18		;DIP OFFSET

%CONL__<POINT 6,,23>-=18		;PADDLE LETTER
%CONN__<POINT 6,,29>-=18		;CONNECTOR NUMBER (LETTER OR JACK #)
%CONP__<POINT 6,,35>-=18		;CONNECTOR PIN #

MXDPIN__=18
MXDCON:	6



MWL,<
comment 

All calculations are done from the DIP side.

(0,0) at LOWER left hand corner in left handed coordinate system.
X+ to right, Y+ is up
0,0 corresponds to FV1 of DEC connectors.




XDIPSP__ =500		; .500" DIP HORIZONTAL SPACING
YDIPSP__=1100		;1.100" DIP VERTICAL SPACING

;assume any old spacing

xgrpof__=600
YGRPOF__=600		;VERTICAL DISTANCE FROM ORIGIN TO DIP PIN10 OF F1

XPINSP__ =300		; .300" DIP PIN HORIZONTAL SPACING
YPINSP__ =100		; .100" DIP PIN VERTICAL SPACING
XGNDOFF__-=100		;OFFSET FROM DIP SLOT ORIGIN (ON EXTRA GROUND ROW) TO FIRST DIP
			;PIN ROW

;CONNECTORS, DEC
DECCNY__=0		;0.0" UP TO BOTTOM ROW OF DEC CONNECTORS
DCPINO__=200		;.2" UP FROM BOTTOM TO SECOND ROW
DECX1__=2700		;2.7" LEFT FOR LARGE CONNECTOR SPACES
DECX2__=2600		;2.6" LEFT FOR SMALL CONNECTOR SPACES
GAP1T2__DECX2-=1900	; THE SMALLER GAP BETWEEN DEC PADDLES
DCPINS__=1900		;1.9" RIGHT FOR PIN A1 RELATIVE TO START OF CONNECTOR
DCPNSP__=100		;.1" BETWEEN PINS HORIZONTALLY
DCGRSP__=200		;.2" BETWEEN GROUPS OF PINS

>;MWL

;THE TRANSFER VECTOR FOR THE AUGUAT dec

^dectv:			
	JRST LCINIT		;BOARD INITIALIZATION
	JRST QUPIN		;CHECKS FOR WILD CONNECTOR BODIES
	JRST $SLTOUT		;PRINTS CARD LOC (B-R-S)
	JRST $GETSLT		;READS CARD LOC (B-R-S)
	JRST PRNLOC		;PRINTS SOCKET, DIP, OR CONNECTOR LOC
	JRST PRNPIN		;PRINTS SOCKET, DIP, OR CONNECTOR PIN
	JRST CPNSEP		;SEPARATE CONNECTORS LOC/PIN PARTS FROM 18 BIT FORM
	JRST CPNMER		;MERGE CONN LOC/PIN PARTS BACK
	JRST CPNMAP		;MAP CARD LOC, CPIN-LOC INTO BACKPANEL PIN LOC
MDWL,<	JRST MAPOST  >		;CONVERT FROM DIP-LOC/PIN TO POST

MDPC,<
	JRST GTSLTL		;READS (B-R-S) AND BODY LOCN
MD,<	JRST GTCONP		;READS (B-R-S) AND CONNECTOR PIN
	JRST CPOPJ		;LOCFUK
>;MD
>;MDPC

MWL,<
	JRST GETLOC		;READS EITHER DIP LOC, OR CONNECTOR LOC
	JRST RAYDIP		;PRINTS DIP, OR CONNECTOR LOC IN FORTRAN FORM
	JRST CPARTP		; (PRINT EDGE PIN TO PARTITION FILE)
	JRST SEQLOC		;TESTS FOR BODY LOCS BEING SEQUENTIAL 
	JRST CONGIN		;GENERATE NEXT INVENTED PIN TO REPLACE "U" PINS
	JRST $GTSLTT		;GETSLT, BUT WITH FIRST CHAR IN CHRREG
	JRST AUGDIP
>;MWL
	[ASCIZ/L#/]		; CUE FOR BOARD SLOT
	[ASCIZ /#/]		; CUE FOR BOARD PIN
MDPC,<	[ASCIZ/LL# /]	;CUE FOR CONNECTOR PIN
	[ASCIZ/L# /]		;CUE FOR BODY LOC
	[ASCID /A01/]		;PROTOTYPE FOR BODY LOC
>;MDPC
MWL,<	[ASCIZ/L#/]		;WIRELISTER BODY CUE
	[ASCIZ/L/]	;WIRELISTER CONNECTOR BODY CUE
>;MWL
CHECK dectv,LTVLEN

L2NSUB:	BLOCK L2NLEN			;*******
N2LSUB:	REPEAT N2LLEN, < "?"
>
EN2L__.

NNN__1
FOR I IN(A,B,C,D,E,F,H,J,K,L,M,N,P,R,S,T,U,V)
<	L2N2L I,0
>
FOR I IN (G,I,O,Q)
<	L2N2L I,1B0
>

N2LMAX__NNN-1

ORG EN2L


LCINIT:	MOVE T,[L2NSUB,,L2N]
	BLT T,L2N+L2NLEN+N2LLEN-1
	MOVEI T,N2LMAX
	MOVEM T,MAXN2L
	POPJ P,


MWL,<

DEC684__4

;**************************************** DEC CONNECTOR PINS

DCLOC:				;LOCATION OF DEC STYLE CONNECTORS

X__DECX1*<DEC684/2>+DECX2*<DEC684/2-1>	;THE X OF V1 ON THE RIGHTMOST PADDLE!
	;INITIALLY FAR TO THE RIGHT, CONNECTORS LETTERED IN REVERSE
REPEAT DEC684/2,
<	X,,DECCNY
X__X-DECX1
	X,,DECCNY
X__X-DECX2
>
>;MWL



PRNLOC:	SETZ TT,
	JUMPE A,CPOPJ
	JUMPL A,CNLOC			
	LDB T,[%DIPL,,A]		;GROUP LETTER
	JUMPE T,CPOPJ			;GROUP NULL?
	PUTBYT @N2L(T)			;CONVERT TO LETTER AND PRINT
	MOVEI T,2			;SETUP FOR 2 DIGIT NUMBER PRINT
	MOVEM T,NDIG
	LDB T,[%DIPS,,A]		;SLOT NUMBER WITHIN GROUP
	PUSHJ P,NPUTDEC			;PRINT IT OUT
;	MOVEI T,2			;SETUP FOR 2 DIGIT NUMBER PRINT
;	MOVEM T,NDIG
;	LDB T,[%DIPOF,,A]		;ANY SLOT OFFSET?
;	JUMPE T,PRNLC1
;	PUTBYT "@"
;MWL,<	PUSHJ P,NPUTDEC >
;MDPC,<	PUSHJ P,PUTDEC >
PRNLC1:	MOVEI TT,"-"
	POPJ P,

CNLOC:

CNDEC:	LDB T,[%CONL,,A]		;CONNECTOR ROW NUMBER
	PUTBYT @N2L(T)
	SETZ TT,		;DEC DOESN'T WANT SEP BETWEEN A,A1
	POPJ P,	

PRNPIN:	LDB T,[%%PINN,,A]
	JUMPL A,PRNPNC
MWL,<
	 MOVEI TT,2
	MOVEM TT,NDIG
	JRST NPUTDEC
>;MWL
MDPC,<	JRST PUTDEC
	JRST PUTDEC >

PRNPNC:
	ASH T,-1
	PUTBYT @N2L(T)		;PRINT DEC CONNECTOR LETTER
	LDB T,[%%PINN,,A]
	ANDI T,1
	ADDI T,1
	JRST PUTDEC

;CONVERT PIN-SPEC TO POST-SPEC
;MAPOST (DWL) - CONVERT FROM DIP-LOC,PIN# TO SOCKET-LOC, PIN#
;A = MBIT+PIN#,,LOC
;B = PACKAGE
;Skips if can map, with MAPSOC set.
; Possibly MAPPWR or MAPGND if V or G posts on board
;A = New MBIT+PIN#,,LOC
;B = FLAGS,,PIN CHANGE
;	%MPLOC	;LOC WAS CHANGED
;	%MPPIN	;PIN WAS CHANGED, DIFFERENCE IN RH (TO CHECK FOR +1)
;	%MPPL1	;PIN NUMBER CHANGED BY 1 (KLUDGE)

MDWL,<
MAPOST:	TLNN A,CRDPIN		;SHOULDN'T BE ON
	TLOE A,MAPSOC
	 OUTSTR [ASCIZ /PIN ALREADY MAPPED TO POST???
/]
	JUMPL A,[SETZ B,	;CONNECTOR, NO CHANGE
		JRST CPOPJ1]
	PUSH P,C
	PUSH P,D
	PUSH P,A
	SETZ D,
;	LDB D,[%DIPOF,,A]	;OFFSET FIELD WITHIN SOCKET
	LDB A,[%%PINN,,A]
	JUMPE A,MAPOS1
	MOVEI C,=16		;BOARD HAS 20 PIN SOCKETS
	PUSHJ P,MAPPER
	 JRST MAPOSX
	LDB T,[%DIPS,,(P)]	;NOW OFFSET SLOT
	ADD T,C
	DPB T,[%DIPS,,(P)]
	LDB T,[%DIPL,,(P)]	;FIRST ROW IS A (=1)
	ADD T,D			;DOES OFFSET OVERFLOW NO. OF ROWS?
	DPB T,[%DIPL,,(P)]
MAPOS1:	SETZ T,
;	DPB T,[%DIPOF,,(P)]	;WITHIN SOCKET OFFSET GOES AWAY
	DPB A,[%%PINN,,(P)]
	AOS -3(P)
MAPOSX:	POP P,A
	POP P,D
	POP P,C
	POPJ P,
>;MDWL

GTSLTL:	PUSH P,A
	MOVEI A,[[ASCIZ /L#./]
		 0]
	PUSHJ P,LNPARS
	 JRST GTSL0
	 JRST GTSL1
	SETZ TT,
	PUSHJ P,GATLOC
	 JRST GTSL0
IFN 0,<	CAIE CHRREG,"@"
	 JRST GTSL2
	PUSH P,TT
	GETNUM
	POP P,TT
	JUMPE NUMREG,GTSL0
	DPB NUMREG,[%DIPOF,,TT]
>;IFN 0
GTSL2:	MOVEM TT,DESTIN
	AOS -1(P)
GTSL1:	AOS -1(P)
GTSL0:	POP P,A
	POPJ P,

GATLOC:	MOVE A,ARG1
	DPB A,[%DIPL,,TT]
	MOVE A,ARG2
	DPB A,[%DIPS,,TT]
 	JRST CPOPJ1

MD,<
;THIS SHOULD PROBABLY TRY FOR B-R-S ALSO, BUT...?
GTCONP:	PUSH P,A
	MOVEI A,[[ASCIZ /LL#/]
		 0]
	PUSHJ P,LNPARSE
	 JRST GTCON0
	 JRST GTCON1			;NULL INPUT
	PUSHJ P,GATCON		;GET JACK OR PADDLE PART OF LOC
	 JRST GTCON0
	SKIPE A,ARG2		;READ AND CONVERT DEC CONNECTOR PIN NUMBER
	CAILE A,MXDPIN/2
	 JRST GTCON0		;LETTER TOO BIG
	SOSL A,ARG3
	CAILE A,1
	 JRST GTCON0
	MOVE A,ARG2
	ASH A,1
	IOR A,ARG3
GTCON3:	DPB A,[%CONP,,TT]
	HRRZM TT,DESTIN
	AOS -1(P)
GTCON1:	AOS -1(P)
GTCON0:	POP P,A
	POPJ P,

>;MD

GATCON:	SETZ TT,
GTCN1:	SKIPE A,ARG1
	CAMLE A,MXDCON			;MAX NUMBER OF DEC CONNECTORS
	 POPJ P,
	DPB A,[%CONL,,TT]
GTCN2:	TLO TT,MAPCON
	JRST CPOPJ1


MWL,<

GETLOC:	MOVEI A,[[ASCIZ /L#/]	;0 - Board socket
		 [ASCIZ /L/]	;1 - Dec connector
		 0]
	PUSHJ P,LNPARSE
	 POPJ P,
	 POPJ P,
	SKIPE A
	 JRST GATCON
	SETZ TT,
	JRST GATLOC

;Print location for fixed format card image
;8 cols wide, with "group" left justified, "pin number" right justified
RAYDIP:	TLNN A,MAPSOC
	 PUSHJ P,FUCKUP
	PUSHJ P,PRNLOC		;A01 or J01 or C
	LDB T,[%%PINN,,A]		;DIP PIN NUMBER
	JUMPL A,RAYCON
	PUTSTR [ASCIZ /   /]	    	;3 SPACES
	MOVEI TTT,2
	MOVEM TTT,NDIG
	JRST NPUTDEC		;"A01" + 3 spaces + ## = 8

RAYCON:	PUTSTR [ASCIZ /   /]	;3 spaces
	PUTSTR [ASCIZ /  /]	;"C" + 5 spaces
	LDB T,[%%PINN,,A]
	TRNN T,1
	 PUTBYT "1"
	TRNE T,1
	 PUTBYT "2"
	ASH T,-1
	PUTBYT @N2L(T)
	POPJ P,			;"C" + 5 spaces + #L = 8


FOR NAME IN (AUGDIP:,CPARTP:,CONGIN:,SEQLOC:)
<NOTYET(NAME)
>
>;MWL

CPNSEP:	LDB TT,[%CONP,,T]
	LDB TTT,[%CONN,,T]
	LSH TTT,1
	ADD TT,TTT
	MOVEI TTT,0
	DPB TTT,[%CONP,,T]
	DPB TTT,[%CONN,,T]
	POPJ P,

CPNMER:	PUSH P,A
	SKIPN T
	SKIPE TT
	 JRST CPNMR1
	MOVEI TT,1			;T,TT=0 MEANS INITIALIZE TO FIRST
	DPB TT,[%CONL,,T]
CPNMR1:	CAIG TT,=36
	 JRST CNPMR1
	MOVEI TT,1
	LDB TTT,[%CONL,,T]
	AOS TTT
	DPB TTT,[%CONL,,T]
CNPMR1:	SOS TT
	IDIVI TT,2
	AOS TT
	DPB TT,[%CONN,,T]
	AOS TTT
	DPB TTT,[%CONP,,T]
	POP P,A
	POPJ P,

QUPIN:	SETZ A,			;NO RULE NUMBER
	POPJ P,			;AND IT'S NOT WILD
NOTYET(CPNMAP:)

MDWL,<
MWL,<
SUBTTL WIRE WRAP ROUTINES  --  HEX DEC 20 PIN BOARDS

^^DECWTV__.	;TRANSFER VECTOR FOR QUAD HEIGHT 20 PIN DEC BOARDS


	-1			;FLAGS IF WIRE WRAP OR PC BOARD
	JRST CPOPJ		;THE INIT ROUTINE
	JRST MAPRC		;MAP ROW/COLS INTO GENERATED LOCS
	JRST MAPPAD		;MAP PADDLE/LETTER/SIDE INTO CONN LOCS
	JRST DISTPP		;DISTANCE CALC ROUTINE
	JRST FPWR		;FIND A POST WITH POWER
	JRST FGND		;FIND A POST WITH GND
	JRST MAPIT		;CONVERT POST INTO X,Y,BITS
	JRST PAKSIZ		;FIND DIMENSION OF DIP OUTLINE
	JRST GNDCLR		;?
	JRST WAGGND		;?
	JRST GNDOUT		;?
	JRST VCCOUT		;?

	=30			;NROWS		    (USED FOR UML ONLY)
	=12			;NCOLS		    (USED FOR UML ONLY)
	6			;NCLPRG		    (USED FOR UML ONLY)
	6			;NRWPRP		    (USED FOR UML ONLY)
	=180			;DIPSLT_NROWS*NCOLS (USED FOR UML ONLY)
	SETPAD(=12)		;NPADS		    (USED FOR UML ONLY)
	XWD -=18,1		;PADLET		    (USED FOR UML ONLY)
	XWD -2,1		;PADPIN		    (USED FOR UML ONLY)
	=10			;FRACTN
	=200*2			;WRAPMG .200" INSULATION AROUND EACH POST
	=1500			;POSTMG .750" BARE WIRE AROUND EACH POST
	0			;NEXTR
CHECK DECWTV,WTVLEN

;TABLES FOR MAPIT

;**************************************** DIP PINS

DEFINE XY(X,Y)
<	X*XPINSP,,Y*YPINSP
>

;Pin position offset from socket origin (pin 10, lower left). DIP side!
PINTAB:
FOR Y_9, 0, -1
<	XY(0,Y)
>
FOR Y_0, 9, 1
<	XY(1,Y)
>

;**************************************** DEC CONNECTOR PINS
;PIN POSITIONS WITHIN ONE PADDLE

X__DCPINS			;INITIAL X STARTING LOCATION
DCPINL:

REPEAT 3,
<
	REPEAT 6,
	<	X,,0
		X,,DCPINO
	X__X-DCPNSP
	>
X__X-DCGRSP+DCPNSP		;ALREADY SUB'ED AN EXTRA DCPNSP AT END OF RPT
>

DCPWRG:	0	;A1
	PWR,,500
	0	;B1
	0
	0	;C1
	GND,,0
DCGNDT__.-DCPWRG+1
	0	;D1
	0
	0	;E1
	0
	0	;F1
	0
	0	;H1
	0
	0	;J1
	0
	0	;K1
	0
	0	;L1
	0
	0	;M1
	0
	0	;N1
	0
	0	;P1
	0
	0	;R1
	0
	0	;S1
	0
	GND,,0	;T1
DCGNDB__.-DCPWRG+1
	0
	0	;U1
	0
	0	;V1
	0

MAPIT:	JUMPL A,CONMAP			;MAP CONNECTOR LOCATION
	PUSHJ P,MAPLOC			;MAP DIP LOCN
	 POPJ P,			;BAD LOCN
	LDB TTT,[%%PINN,,A]		;PIN #
MAPIT0:	ADD T,PINTAB-1(TTT)		;ADD EXTRA XY FOR PIN
	SETZ TT,
	SETZ TTT,			;FLUSH AWAY THOSE GOODIES
	JRST CPOPJ1


;Convert PIN-SPEC in A into DIP X,Y locn (T)
;Y + UP
;X + RIGHT (FROM DIP SIDE)
MAPLOC:	LDB TT,[%DIPL,,A]		;GROUP LETTER
	JUMPE TT,CPOPJ
	LDB T,[%DIPS,,A]		;DIP #
;Slot 1 is X=0 
	SOS T
	IMULI T,XDIPSP			;SLOT NUMBER IS OFFSET HORIZONTALLY
	HRLZ T,T
;Row F is Y=0
	IMULI TT,YDIPSP			;CALCULATE Y OFFSET
	HRR T,TT
	ADD T,[XGRPOF,,YGRPOF]			;ADD IN OFFSET FOR ENTIRE DIP ARRAY
	JRST CPOPJ1

;HERE FOR CONNECTOR PINS

CONMAP:

CONDEC:	LDB TT,[%CONN,,A]
	JUMPE TT,CPOPJ
	CAMLE TT,MXDCON
	 POPJ P,
	MOVE T,DCLOC-1(TT)	;PADDLE X,Y
	LDB TT,[%%PINN,,A]
	CAIL TT,2		;2+0 IS A+1 PIN
	CAILE TT,MXDPIN+2-1
	 POPJ P,
	ADD T,DCPINL-2(TT)
	MOVE TT,DCPWRG-2(TT)
	SETZ TTT,
	JRST CPOPJ1

PAKSIZ:	SKIPE ILLPAK(B)
	 POPJ P,
	JRST PAKDIM

;Define illegal package types in this board
; -1 if illegal
ILLPAK:	BLOCK NPACK
	FOR @' I IN (22,24,36,40,48,64)
	<ORG ILLPAK+K.'I 	-1
	>
	ORG ILLPAK+NPACK

MAPRC:	HLRZ TT,T		;(1,1) IS DIP IN UPPER LEFT HAND CORNER
	HRRZS T			;ROW IN TT, COL IN T
	PUSH P,[0]
	DPB TT,[%DIPS,,(P)]
	DPB T,[%DIPL,,(P)]
	POP P,T
	JRST CPOPJ1

MAPPAD:	SOS TT
	ASH TT,1		;TT,TTT HAVE COMPLEX PIN#
	ADDI TT,(TTT)
	AOS TT			;DEC PADDLES ARE PINLETTER*2+SIDE
	CAILE TT,MXDPIN+2-1	;EXISTS?
	 JRST MAPPDL		;NO, ERROR
MAPPD2:	MOVSI TTT,MAPCON(TT)	;PIN# IN LH
	DPB T,[%CONN,,TTT]
	HLRZS T
	SKIPA T,TTT
MAPPDL:	 SETZ T,		;LOSE RETURN
	POPJ P,

FPWR:	SETZ A,
	POPJ P,
IFN 0,<
	CAIE B,=500		;+5.00V??
	 JRST [	SETZ A,
		POPJ P,]
	MOVE T,A		;SAVE IF CONN PIN
	MOVEI B,BRDPWR
	DPB B,[%%PINN,,A]
	TLO A,MAPSOC
	JUMPL A,FPWRC
	POPJ P,
>;IFN 0

FGND:	SETZ A,
	POPJ P,
IFN 0,<
	MOVE T,A
	MOVEI B,BRDGND
	DPB B,[%%PINN,,A]
	TLO A,MAPSOC
	JUMPL A,FGNDC
	POPJ P,

FGNDC:	LDB TT,[%CONT,,A]
	JUMPE TT,FGNDDC
	LDB TT,[%CONN,,A]	;USE ROW OF GNDS ON OTHER HALF OF CONN
	LDB T,[%%PINN,,T]	;ORIGINAL PIN#
	HRRZ TT,JACKSZ(TT)
	ASH TT,-1
	CAMG T,TT
	 ADD T,TT
FGNDC1:	DPB T,[%%PINN,,A]
	TLO A,MAPSOC
	POPJ P,

>;IFN 0

FOR NAME (GNDCLR:,WAGGND:,GNDOUT:,VCCOUT:)
<NOTYET(NAME)
>
>;MWL
>;MDWL
BEND DEC
