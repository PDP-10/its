
.SYMTAB 10000.
.MLLIT==1
NEWPLS==0	;USE NEW PLAUSIFER
TITLE CHESS C

.XCREF ZR,A,B,C,D,T,TT,R,Q,I,J,S,T1,T2,W,P

KLNTS==0	;KL10 NON TS
DBG==1		;0 TO FLUSH SELF CHECKING AND SOME DEBUGGING ROUTINES
KILLH==0	;0 NO KILL HEURSTIC 1 KILL HEURSTIC
HSCOD==1	;HASH CODE FEATURE
BOOK==1		;INCLUDE CODE FOR BOOK OPENINGS
UTAPE==1	;INCLUDE UTAPE ROUTINES
DSPLY==1	;INCLUDE DISPLAY (TS OR NO)
DECTS==0
DEC==0
CHEOPS==1	;INCLUDE STUFF FOR CHEOPS SPECIAL PURPOSE CHESS PROCESSOR
		; (THIS WINS, OF COURSE, ONLY ON AI MACHINE IN TS)
CHNET==1	;--NOW CAN NOW WIN IN BUFFERED MODE ON "ANY" MACHINE WITH 
  		;  CHAOS NET CONNECTION TO CHEOPS.
 CHHSTN==434		;CHAOSNET HOST NUMBER TO USE
CMFLAG==0	;TELL .INSRT FILES THEY ARE IN OCM (NOT CM, ETC)

TS==1	;0 FOR NON TS
IFN KLNTS,[
	TS==0
	UTAPE==0
	DSPLY==0
	BOOK==0

	PAG==10			;PAGING DEVICE
	CCA==14			;CACHE SWEEPING DEVICE
	TIM==20			;TIMER
	MTR==24			;METER

	EPT==0			;EXEC PAGE TABLE
	.INSRT SYSTEM; EPT >
]

IFE TS+KLNTS,RELOCATABLE
IFN TS,[DEC==1
UTAPE==1]

IFN DECTS,[
.DECREL
DEC==1
TS==0
DSPLY==0
DECASA==140
]


IF1 [ EXPUNGE MOVST]	;CRUFTY KL-10 STRING INSTRUCTION

LOC 100


IFN KLNTS+DECTS,[
LOC 20000
	JRST GO
]
IFE DEC+TS+KLNTS,[
IRPS A,,PILPT LINEPOS LPTWAT
	.GLOBAL A
	.LIBRQ A
	TERMIN
IRPS A,,A P LPTCHN LPTBSZ
	.GLOBAL A
	TERMIN
]

ZR=0
A=1
B=2
C=3
D=4
T=5
TT=6
R=7
Q=10
I=11
J=12
S=13
T1=14
T2=15
W=16
P"=17

PDLL=10000.

;MOVE FORMAT ON PDL
;WD1 LH SQUARE RH PIECE (NORMAL HACK FOR O-O ETC)
;WD2 PLAUSIBILITY
;WD3 4.9 ALWAYS INVESTIGATE  3.1 BAD DEV RH NUMBER FORCES
; 4.8 MOVE IS A FORK (IE LMFORS >1)
;4.7 MOVE DISCOVERS AN IMPORTANT ATTACK (LMFOR)

BMTHR==200000
BIDSF==100000

;PIN TABLE ENTRY
;WD1 LINK  4.9 TO K
;WD2 4.9-4.4 ATTACKING PIECE
PINATP==360600
;4.3-3.5 PINNED SQUARE (OCC BY PIECE WHICH IS PINNED)
PINOPS==261000
;3.1-3.4 PIN DIRECTION
PINDIR==220400
;1.1-1.6 PIN BASE SQUARE
PINBS==700
;BIT 2.9 USED IN IC CHECKER
DPBIT==200000	;PIN BY DOUBLED P
BPDPB==200100	;BYTE PNTR TO ABOVE SET ON PIN BY DOUBLED PIEECES

LPINE==2	;WORDS IN PIN ENTRY
LPINDT==30.*2	;MAX NUMBER OF ACTIVE PINS

;ASSORTED OUTPUT UUO'S
PTTY=1000,,
SOUT=2000,,
ERRTTY=3000,,
;UUOS 4-12 USED FOR PLS MOVE TRACE
ISOUT=13000,,	;LIKE SOUT BUT INTERPRET * FROBS ETC
TSOUT==14000,,	;LIKE ISOUT, BUT OUTPUT TO TRACE BUFFER AREA (FOR USE IN TP, ETC)
;CHEOPS UUOS
IFN CHEOPS,[
HLUUO==TSOUT+<1000,,>	;LOWEST CHEOPS UUO
HXCT==HLUUO		;PUT INST POINTED TO BY E IN CHEOPS IR AND XCT IT
HLOAD==HXCT+<1000,,>	;AC HAS LOAD SELECT CODE, DATA IN C(E). STORES DATA IN CHEOPS
HSTORE==HLOAD+<1000,,>	;AS HAS MUX SELECT CODE, DATA READ FROM THERE INTO E
HLOADIR==HSTORE+<1000,,>;PUT INST POINTED TO BY E INTO CHEOPS IR
HSOUT==HLOADIR+<1000,,>	;CHEOPS STRING OUTPUT
HHUUO==HSOUT		;HIGHEST CHEOPS UUO

CBABL==40		;LOCATION IN CHEOPS ES BUFFER MEMORY OF HIGH-PRIORITY ARG BLOCK
			; (USE THIS CONSTANT +HBMEM TO ADDRESS BLOCK FROM 10)
CBBBL==100		;FIRST LOCN IN BUFFER MEM TO USE FOR BACKGROUND BLOCK

]
			
IFE DEC,[
	HSTB=200000	;IF AT HACK USE MOBY TABLE IN MOBY MEMORY
	HTNE=100000	;MUST BE A POWER OF 2
	HSTBV=HSTB+HTNE
	HSTBL=HSTB+2*HTNE
]

IFE DECTS,IFN DEC,HTNE=40000
IFN DECTS,HTNE=400
HSHMSK==HTNE-1

IFN BOOK,[BMXS==600.	;MAX NO TAGS
	BKSS==22000.	;NO BYTES IN ACTUAL BOOK
]

IFN DECTS,[
BKSS=5900.
BXMS==85.
]
DEFINE RC A,B/
	RCSTO \.+1,A,\NRMM,ZZ
	NRMM==NRMM+1
	B
	TERMIN

DEFINE RCSTO A,B,C,D
	DEFINE D!C
		A,,[.ASCII ?B?]
	TERMIN
	TERMIN

DEFINE RS A,B/
	RCSTO \.+1,A,\NSMM,ZQ
	NSMM==NSMM+1
	B
	TERMIN

DEFINE RT A,B/
	RCSTO \.+1,A,\NTMM,ZW
	NTMM==NTMM+1
	B
	TERMIN

NRMM==0	;NUMBER REMOTE MACROS OF FORM ZZ...
NSMM==0	;NUMBER REMOTE MACROS OF FORM ZQ...
NTMM==0	;NUMBER REMOTE MACROS OF FORM ZW...

DEFINE FIX A
.ZZQ==A
	MULI .ZZQ,400
	TSC .ZZQ,.ZZQ
	ASH .ZZQ+1,-243(.ZZQ)
TERMIN

DEFINE FLOAT A
.ZZQ==A
	TLC .ZZQ,232000
	FAD .ZZQ,.ZZQ
TERMIN

DEFINE MMSAVAC
	MOVEM 16,CATCSA+16
	MOVEI 16,CATCSA
	BLT 16,CATCSA+15
TERMIN

DEFINE MMRSAC
	MOVSI 16,CATCSA
	BLT 16,16
	TERMIN

;SUMMARY OF ARRAYS AFFECTED BY MOVE AND UNMOVE

;PIECE (PIECE NUMBER)
	;4.9=BLACK  3.6-3.8=TYPE OF PIECE 
	;1.1-2.9=ADR OF "MM" ROUTINE OR ZERO IF PIECE NON EXTANT

;NMOVES (PIECE NUMBER)
	;=NUMBER OF MOVES MADE SO FAR

;NMKING (SIDE)
	;0=>UNCASTLED 1=>CASTLED

;NUMORP (SIDE)
	;=NUMBER OF ORTHAGONALLY SLIDING PIECES

;PCATV (PIECE NUMBER)
	;3.1-4.9=1
	;1.1-2.9=1 FOR K, 2 FOR Q, 3 FOR R, 4 FOR B, 5 FOR N, 6 FOR P

;RPIECE (PIECE NUMBER)
	;4.9=KING

;BOARD (SQUARE NUMBER)
	;-1=>OFF BOARD
	;0=>EMPTY
	;>0=POINTER INTO PIECE ARRAY

;PIECEL (PIECE NUMBER)
	;FOR EXISTANT PIECES THEIR SQUARE NUMBER

;RFPCS (PIECE NUMBER)
	;4.9=ORTHAGONALLY SLIDING

;DDPCS (PIECE NUMBER)
	;4.9=DIAGONALLY SLIDING

;SLDPC (PIECE NUMBER)
	;4.9=SLIDING

;PVALUE (PIECE NUMBER)
	;=VALUE OF PIECE

;RPVAL (PIECE NUMBER)
	;=REAL VALUE OF PIECE

;PCBAL (SIDE)
	;TOTAL MATERIAL (K=600)

;LMGT (PIECE NUMBER)
	;4.9=PAWN
	;1.1-2.9=ADR OF "LM" ROUTINE

;LMGSTD (PIECE NUMBER)
	;4.9=WHITE PAWN
	;1.1-2.9=ADR OF "LM" OR "LS" ROUTINE

;SNFBP (PIECE NUMBER)
	;4.9=BLACK PAWN

;PLPWN (PIECE NUMBER)
	;PLY AT WHICH PAWN WAS PROMOTED OR -1

;ASSOCIATED WITH BOARD CONTROL HACK
;NWK BOARD SIZE JFCL EXCEPT ADD C,NSKI FOR
;SQUARES IN 8 NEIGHBORHOOD OF WK.
;NBK SAME FOR NEAR BK
;PINVF VALUE INV. PROPORTIONAL TO PIECE VALUE

;RMDTB (PIECE NUMBER)
;DISPATCH FOR INCREMENTAL UPDATING ROUTINES
;SIGN SET FOR BISHOPS

;SUMMARY OF ARRAYS SET BY CAT

;BDBLK (SQUARE NUMBER)
	;BLOCKING DATA

;ONEB (SQ N)
	;POTENTIAL PIN DATA ETC
	;SQUARE NUMBER OF FIRST OBSTRUCTION A SLIDING PIECE HITS FROM THAT SQUARE TO
	;SECOND OBSTRUCTION

;PPASED (PIECE NUMBER)
	;4.9=PASSED PAWN BLOCKED BY FRIENDLY PAWN
	;1.1-2.9=RANK IF PASSED PAWN,0 OTHERWISE

;PPTP (PIECE NUMBER)
	;-1=>PAWN DEFENDED BY PAWN
	;1=>FORWARD, 2=>BACKWARD, 3=>ISOLATED PAWN
	;0 OTHERWISE

;WPNFLS (FILE)
	;=NUMBER OF WHITE PAWNS

;BPNFLS (FILE)
	;=NUMBER OF BLACK PAWNS

;WNPNFL (FILE)
	;=NUMBER OF NON PASSED WHITE PAWNS

;BNPNFL (FILE)
	;=NUMBER OF NON PASSED BLACK PAWNS

;PINT (PIECE NUMBER)
	;PIN DATA

;BDA1, BDA2, AND BDA3 (SQUARE NUMBER)
	;ATTACK DIRECTION DATA

;BA (SQUARE NUMBER)
	;=BLACK ATTACKS

;WA (SQUARE NUMBER)
	;=WHITE ATTACKS


;SUMMARY OF MISCELLANEOUS ARRAYS

;NSM (PIECE NUMBER)
	;=NUMBER OF APPARENTLY SAFE MOVES AVAILABLE

;PNTB (PIECE NUMBER)
	;=BYTE POINTER TO BIT IN BPCSOP

;NPODT (PIECE NUMBER)
	;BYTE POINTER TO BIT IN NPODBT(C)

;NPOD (PIECE NUMBER)
	;=NUMBER OF ATTACKED PIECES GIVEN PIECE IS ONLY DEFENDER OF

;NPODBT (PIECE NUMBER)
	;BITS FOR NPOD

;BPREL (SQUARE NUMBER)
	;4.1-4.9=FILE NUMBER
	;3.1-3.9=RANK NUMBER
	;2.1-2.9=POSITIVE DIAGONAL NUMBER
	;1.1-1.9=NEGATIVE DIAGONAL NUMBER

;CDEVT (PIECE NUMBER)
	;CURRENT DEVELOPMENT VALUE

;ASSIGNMENTS IN PIECE ARRAY

NPC==32.
NPCS==16.
BD2==12.*10.
BW==10.
PTID==270300

PID==0
KNID==1
BID==2
RID==3
QID==4
KID==5

LGAME==300.	;MAX LENGTH OF GAME IN PLYS

;BOARD ORG.
;	WHITE
;	-1 ...
;	-1 ...
;	-1 WKR1 WKN1 ... -1
;  	..


;STANDARD INTERNAL MOVE FORMAT

;4.9 =0 NO CAPT 1 = CAPT
;4.8 =0 WHITE =1 BLACK
;4.7-4.2 =NO OF MOVING PIECE  6 BITS
;4.1 3.4 =ORG SQUARE  7 BITS
;3.3 2.7 =CAP PIECE  6 BITS
;1.9 2.6 DESTIN SQ  7 BITS
;1.8 1 IF MOVE A CHECK
;1.4 1.7 GHOST ELIM  4 BITS
;	IF WHITE MOVES, SQUARE IS 2*BW+5*BW+N+1
;	IF BLACK MOVES, 2*BW+2*BW+N+1
;1.1 1.3 0 -  1 O-O 2 O-O-O 3 EP 
;4  PROMOTED TO QUEEN 5 ROOK 6 BIS 7 KNT


;HASH TABLE FORMAT

;HSTB
;1 WD KEY 1.1=0 WHITE TO MOVE  1 BLACK

;HSTBV
HTVCOD==410300	;RH VALUE 4.9 4.7 INFO CODE  0  ACTUAL POS VALU
		;1  ACTUAL VALUE IS >= THIS VALUE(BETTER FOR SIDE TO MOVE)
		;2  ACT VALUE IS <= THIS VALUE(WORSE FOR SIDE TO MOVE)
		;3 POSITION REACHED IN GAME
		;4 POSITION PENDING IN CURRENT SEARCH
		;5 POSITION MARKED IN BY CHEOPS
		;6 POSITION MARKED OUT BY CHEOPS
		;REST LH PLYS DEEP THIS INFO BASED ON 0- STATEV 69 ACT GAME
HNPLB==220400	;PLIES DEEP FIELD
MHPLN==15.	;LARGEST # IN ABOVE.
;HSTBL
;RH LINK TO PRINC VARIATION IN HASH TBL OR -1
HSTPON==310700	;SQ OF PC TO MOVE (PRINC VAR)
HSTSQN==220700	;SQ TO MOVE TO, 1- O-O 2- O-O-O
HSTPRN==400300	;SPECIAL MOVE BITS

;OPENING BOOK FORMAT

;6 BIT BYTES, 77=E  76=T  (NEXT 2 CHRS GIVE TAG NO TRANSFERRED TO)
;75 MOVE >= ADD 75 TO NEXT CHR UNLESS IT IS A 75 ETC
;REST = NO OF MOVE AS GEN BY PLAUS MOVE GEN PRIOR TO SORT
;BOOK SYM TAB  FIRST BLOCK BKSMT 6 BIT SYM
;SECOND BKSMTV RH=CHR ADR LH=DEPTH ALONG TREE

;MACRO FOR ASSEMBLING WORDS WITH VARIOUS BITS SET
DEFINE BIT A/
ZZ==0
IRPS Q,CC,[A]
IFSE [CC]+,ZZ=ZZ+Q
.ELSE ZZ==ZZ+<SETZ>_-<Q!.>
TERMIN
ZZ
TERMIN

DEFINE CONC A,B
A!B!TERMIN

DEFINE FLT A
<.OP FADR <.OP TLC A 233000 > 0 >TERMIN

;MACRO FOR TAGING ARRAYS OFFSET BY ONE
DEFINE PP A
IRPS Z,,A
	Z=.-1
	TERMIN
	TERMIN

;SYMBOLIC BYTE POINTERS INTO STANDARD MOVE FORMAT
MPC=340600
MPO=250700
MPTK=170600
MPTO=100700
MGHEL=30400
CHKBT==200

PTIDS=320400
SBRLNG==40	;SEARCH WIDTH VECTOR LENGTH

NWDPM==4	;# WDS PER MODE ON PDL


PP PIECE:,
OPIECE:	REPEAT 2,[
ZZ=1
	REPEAT 8,0 PID,MMWPWN	;WHITE
IFE .RPCNT,WKR:
	<<ZZ>_3+RID>_23.+MMRK
ZZ=ZZ+1
	0 KNID,RMWN
	<<ZZ>_3+BID>_23.+MMBS
ZZ=ZZ+1
IFE .RPCNT,WKING:
	0 KID,RMWK
	<<ZZ>_3+QID>_23.+MMQN
ZZ=ZZ+1
	<<ZZ>_3+BID>_23.+MMBS
ZZ=ZZ+1
	0 KNID,RMWN
IFE .RPCNT,WQR:
	<<ZZ>_3+RID>_23.+MMRK
ZZ=ZZ+1

IFE .RPCNT, BPIECE:  BPV=.-PIECE

	REPEAT 8,SETZ PID,MMBPWN	;BLACK
IFE .RPCNT,BKR:
	SETZ+<<ZZ>_3+RID>_23.+MMRK
ZZ=ZZ+1
	SETZ KNID,RMBN
	SETZ+<<ZZ>_3+BID>_23.+MMBS
ZZ=ZZ+1
IFE .RPCNT,BKING:
	SETZ KID,RMBK
	SETZ+<<ZZ>_3+QID>_23.+MMQN
ZZ=ZZ+1
	SETZ+<<ZZ>_3+BID>_23.+MMBS
ZZ=ZZ+1
	SETZ KNID,RMBN
IFE .RPCNT,BQR:
	SETZ+<<ZZ>_3+RID>_23.+MMRK
ZZ=ZZ+1
]

PP NMOVES:,	BLOCK NPC	;NUMBER OF MOVES FOR EACH PIECE

NMKING:	0	;0=UNCASTLED 1=CASTLED FOR WHITE
	0	;FOR BLACK

NUMORP:	3	;NUMBER OF ORTHAGONALLY SLIDING PIECES FOR WHITE
	3	;FOR BLACK

BDAST:	0	;MAPS COMPACTED CODE USED IN BDBLK TO PIECE NUMBER
	REPEAT 2,[
	IRP A,,[WKR,WKR+2,WKING+1,WKING+2,WQR]
	A+NPCS*.RPCNT-PIECE
TERMIN
]
	LOC BDAST+20


PP PCATV:,	REPEAT 32.,1


PP RPIECE:,	REPEAT 2,[
	REPEAT 11.,0	;SIGN NEG FOR KINGS
	SETZ
	REPEAT 4,0
]


TXTB:	ASCII /WP!/
	ASCII /WN!/
	ASCII /WB!/
	ASCII /WR!/
	ASCII /WQ!/
	ASCII /WK!/

	ASCII /BP!/
	ASCII /BN!/
	ASCII /BB!/
	ASCII /BR!/
	ASCII /BQ!/
	ASCII /BK!/

TXTB1:	ASCII /P!/+"P
	ASCII /N!/+"N
	ASCII /B!/+"B
	ASCII /R!/+"R
	ASCII /Q!/+"Q
	ASCII /K!/+"K

TXTB3:	112	;FOR XGP
	110
	106
	104
	102
	100
	152
	150
	146
	144
	142
	140

PP PLPWN:,	REPEAT NPC,-1	;PLY AT WHICH PAWN WAS PROMOTED

PP RMDTB:,	REPEAT 8,RMWP	;REMOVE PIECES ROUTINES SIGN SET FOR B'S
	RMWR
	RMWN
	SETZ RMWB
	RMWK
	RMWQ	;RMWQ +RMBQ REALLY SAME
	SETZ RMWB
	RMWN
	RMWR
	REPEAT 8, RMBP
	RMBR
	RMBN
	SETZ RMBB
	RMBK
	RMBQ
	SETZ RMBB
	RMBN
	RMBR

GHLOC:	0	;LOCN OF GHOST OR ZERO IF NONE
GHSD:	0	;   - = BLACK + WHITE

DIRDT:	0
RDT:	-1
	1
	BW
	-BW

BDT:	BW-1
	BW+1
	-BW+1
	-BW-1

RDTINS:	CAMG S,A	;SKIP  IF SQ IN A MIGHT BE IN DIR FROM S
	CAML S,A
	CAML S,A
	CAMG S,A

BDTINS:	CAML S,A
	CAML S,A
	CAMG S,A
	CAMG S,A

TXDIR:	ASCII /LR!/	;NAMES OF DIRECTION AS PER ENTIRES IN BDA'S
	ASCII /RR!/
	ASCII /DF!/
	ASCII /UF!/
	ASCII /LLD!/
	ASCII /LRD!/
	ASCII /URD!/
	ASCII /ULD!/
	ASCII /NLR2!/
	ASCII /NLL2!/
	ASCII /NUR2!/
	ASCII /NRL2!/
	ASCII /NLR!/
	ASCII /NLL!/
	ASCII /NUR!/
	ASCII /NUL!/
	ASCII /EPL!/
	ASCII /EPR!/

INVDT:	1	;NUMBER OF OPPOSITE DIRECTION
	0
	3
	2
	6
	7
	4
	5


BOARD:	REPEAT 2*BW,-1	;THE INTERNAL BOARD
	REPEAT 8,[-1
	REPEAT 8,0
	-1
]
	REPEAT 2*BW,-1

PP PIECEL:,	;FOR EACH EXISTANT PIECE, A POINTER INTO BOARD
	BLOCK NPC

PP PFILE:,	BLOCK NPC	;FILE PC ON
PP PRANK:,	BLOCK NPC	;RANK (FROM BPREL DIRECT)
PP RPRANK:,	BLOCK NPC	;RANK (REVERSED FOR BLACK PCS)

PP NPCPT:,	;ADDRESS TO SOS IF PIECE GOES AWAY
	REPEAT 8,WPNC
	WRKC
	WKNC
	WBSC
	NWKG	;!
	SETZ WQNC
	WBSC
	WKNC
	WRKC
	REPEAT 8,BPNC
	BRKC
	BKNC
	BBSC
	NBKG	;!
	SETZ BQNC
	BBSC
	BKNC
	BRKC

PP NPCP1:,	;ANOTHER ADDRESS TO SOS IF PC GOES AWAY
	REPEAT 10.,NPCTEM	;DOES SOMETHING ONLY FOR B'S
	WLBC
	REPEAT 2,NPCTEM
	WDBC
	REPEAT 12.,NPCTEM
	BDBC
	REPEAT 2,NPCTEM
	BLBC
	REPEAT 2,NPCTEM

NPCTEM:	0	;RANDOM

PP PCCPNR:,	;YET ANOTHER ADDRESS TO SOS IF PC GOES AWAY
	REPEAT 8,NPCTEM
	REPEAT 8,WPCCNT
	REPEAT 8,NPCTEM
	REPEAT 8,BPCCNT

BFLIP:	0	;FLIP BOARD
MSSW:	1	;MULTIPLE SEARCH SWITCH
ICSW:	1	;INCREMENTAL CAT SWITCH 0 NO IC -1 CHK OR 1 IC
LNSW:	0	;.NE. 0 ENABLE LINE ANALYSIS
PPVSW:	0	;+ PRINT STATIC EVAL - ALSO DEVEL VALUES AFTER MOVE TYPED IN
INVCLK:	0	;XORED WITH CLOCK KLUDGE
PARSW:	0	;1 MACHINE SELECTS PARAMETERS
ALGSW:	0	;0 DESCRIPTIVE 1 ALGBRADIC -1 BOTH
EST:	0	;ESTIMATE FOR MULT SEARCH
ESTSW:	0	;-1 EST SET BY COMMAND, DONT RECOMPUTE IF SAME PLYN
SETESP:	0	;PLYN FOR ABOVE
GESTSW:	0	;-1 EST FROM GAME, 0 OTHERWISE
CANCSW:	0	;CONTROL CANCUT S.  0-> NONE, OTHERWISE ONLY AT PLY LEVELS >= THIS.
SLEEPT:	0	;DO A .SLEEP THIS AMT BEFORE CALLING LMG (PRESUMABLY TO LET CHEOPS RUN)
CNTSW:	2	;.NE. 0 TURN ON CENTRALIZE KNIGHTS AND PAWNS FACTOR IN STATEV
		; (INTEGER VALUE MULTIPLIES WEIGHT).
HDUOSW:	2	;.NE. 0 TURN ON ADVANCED DUO FACTOR IN STATEV
		; (INTEGER VALUE MULTIPLIES WEIGHT).
OKFILE:	2	;.NE. 0 OPEN FILE NEAR K IN STATEV (INTEGER VALUE MULT. WEIGHT)
KCUT:	40	;WEIGHT K CUTTOFF FACTOR
PINWSQ:	10	;WEIGHT FOR PIN OF PIECE ON A SQUARE NOT DEF BY PAWN
RKPOS:	1	;WEIGHT FOR ROOK POSITION TERM
AVGSW:	1	;.NE. 0 TURN ON AVERAGING HACK IN STATEV.
CDELT:	3	;AMT OTHER MOVE MUST BETTER THAN MAIN OCM MOVE TO BE SELECTED IN CHEOPS
		; 10 MODE (IN CHEOPS UNITS)
		;3 SAYS DONT GO FOR JUST MINOR EXCHANGE
NBKST:	0	;FLAG IN HACK1.  -1 SAYS BACKGROUND NOT STARTED YET.

;4.9-4.7 0 SOUT 1 TYPE AS SIXBIT 2 PUSHJ 3 DPT 4 DPT RIGHT ADJ TO 24 MULT
;4.6 SAYS NO CR 4.5 SAYS TAB TO 24 MULT
INFDT:	100000,,VNAME1
	100000,,VNAME2
IFN TS,[200000,,DATP
	200000,,TIMP
]
	40000,,[ASCIZ /SETD=/]
	300000,,HK1V
	40000,,[ASCIZ /SETW=/]
	200000,,PSETW
	40000,,[ASCIZ /SETF=/]
	300000,,MCFB
	40000,,[ASCIZ /ALPHA/]
	300000,,BPREV
	40000,,[ASCIZ /BETA/]
	300000,,BPREV+1
	40000,,[ASCIZ /EST=/]
	300000,,MSIBB
	40000,,[ASCIZ /SETEST=/]
	300000,,ESTSW
	40000,,[ASCIZ /EMTLSW=/]
	300000,,EMTLSW
	40000,,[ASCIZ /WTPWSW=/]
	300000,,WTPWSW
	40000,,[ASCIZ /WTPCSW=/]
	300000,,WTPCSW
;	40000,,[ASCIZ /PWBSW=/]
;	300000,,PWBSW
	40000,,[ASCIZ /ACTIVITY DELTA/]
	300000,,ACTV
	40000,,[ASCIZ /BCS=/]
	300000,,NSBVS
	40000,,[ASCIZ /CNTSW=/]
	300000,,CNTSW
	40000,,[ASCIZ /HDUOSW=/]
	300000,,HDUOSW
	40000,,[ASCIZ /OKFILE=/]
	300000,,OKFILE
	40000,,[ASCIZ /KCUT=/]
	300000,,KCUT
	40000,,[ASCIZ /PINWSQ=/]
	300000,,PINWSQ
	40000,,[ASCIZ /RKPOS=/]
	300000,,RKPOS
	40000,,[ASCIZ /AVGSW=/]
	300000,,AVGSW
	40000,,[ASCIZ /HASH=/]
	300000,,NHSW
	40000,,[ASCIZ /PCGPWN=/]
	300000,,PCGPWN
	40000,,[ASCIZ /FDCTSW=/]
	300000,,FDCTSW
	40000,,[ASCIZ /CANCSW=/]
	300000,,CANCSW
	40000,,[ASCIZ /SLEEPT=/]
	300000,,SLEEPT
IFN CHEOPS,[
	40000,,[ASCIZ /CRCYC=/]
	300000,,CRCYC
	40000,,[ASCIZ /CHEOSW=/]
	300000,,CHEOSW
	40000,,[ASCIZ /CHCSTP=/]
	300000,,CHCSTP
	40000,,[ASCIZ /CHMPC=/]
	300000,,CHMPC
	40000,,[ASCIZ /CHPSTP=/]
	300000,,CHPSTP
	40000,,[ASCIZ /CHFDL=/]
	300000,,CHFDL
]

LINFDT==.-INFDT

VNAME1:	.FNAM1
VNAME2:	.FNAM2

STAPT:	60000,,[ASCIZ /P.M.G. RUN/]
	400000,,NPL
	60000,,[ASCIZ /STATEV RUN/]
	400000,,NSV
	60000,,[ASCIZ /FEEDOVERS/]
	400000,,NFD
	60000,,[ASCIZ /FEEDOV LIM REACHED/]
	400000,,NMFD
	60000,,[ASCIZ /MOVES MADE/]
	400000,,NMMV
	60000,,[ASCIZ /TRAPP CALLED/]
	400000,,TRAPS
	60000,,[ASCIZ /TRAPP TRUE/]
	400000,,TRAPSC
	60000,,[ASCIZ /HASH MATCH P.M./]
	400000,,NHMCH
	60000,,[ASCIZ /HASH MATCH STATEV/]
	400000,,NHMSB
	60000,,[ASCIZ /TOTAL HASH MATCH/]
	400000,,THTM
	60000,,[ASCIZ /SECONDARY LINE ANAL/]
	400000,,NSLA
	60000,,[ASCIZ /MULT SEARCHES/]
	400000,,NSRCHS
	60000,,[ASCIZ /CANCUTS/]
	400000,,CANCUT
IFN CHEOPS,[
	60000,,[ASCIZ /CHEOPS FORCES/]
	400000,,NCHFRC
]
LSTAPT==.-STAPT

IFN CHEOPS,[
CHSDT:	40000,,[ASCIZ /NOT RDY/]
	300000,,CSNRDY
	40000,,[ASCIZ /BUSY/]
	300000,,CSNBSY
	40000,,[ASCIZ /CHEOPS STOPPED FEEDOVER/]
	300000,,NCHNFD
	40000,,[ASCIZ /PMG LVL, # SRCHS/]
	300000,,PMSRCH
	40000,,[ASCIZ /BETTER FOR STM/]
	300000,,CPBSTM
	40000,,[ASCIZ /EVEN/]
	300000,,CPEVEN
	40000,,[ASCIZ /WORSE FOR STM/]
	300000,,CPWSTM
	40000,,[ASCIZ /SUGGESTED MOVE/]
	300000,,CPMVPC
	40000,,[ASCIZ /FOUND MATE/]
	300000,,CPMATD
	40000,,[ASCIZ /CANCUTS STOPPED/]
	300000,,CPCTS
	40000,,[ASCIZ /PCG LVL, # SRCHS/]
	300000,,CSSRCH
	40000,,[ASCIZ /BETTER FOR STM/]
	300000,,CSBSTM
	40000,,[ASCIZ /EVEN/]
	300000,,CSEVEN
	40000,,[ASCIZ /WORSE FOR STM/]
	300000,,CSWSTM
	40000,,[ASCIZ /MADE CHEOPS MV PLAUS CAPT/]
	300000,,CSMVPC
	40000,,[ASCIZ /FOUND MATE/]
	300000,,CSMATD
	40000,,[ASCIZ /CAUSED FEEDOVERS/]
	300000,,NCHFDO
	40000,,[ASCIZ /FEEDOVERS WOULD LIKE TO HAVE CAUSED/]
	300000,,NCHWFD
	40000,,[ASCIZ /AVG STATC PMG/]
	300000,,CPSTAV
	40000,,[ASCIZ /AVG STATC PCG/]
	300000,,CSSTAV
LCHSDT==.-CHSDT
]

LHFLT==20
HFLT:	BLOCK LHFLT
LSHFLT==20
SHFLT:	BLOCK LSHFLT	;MUST IMMEDIATELY FOLLOW HFLT

IFN TS,[
EHRNM:	0	;RUN TIME AT WHICH ENTERED HACK1
EHRTM:	0	;REAL TIME AT WHICH ENTERED HACK1
]

MSIB:	200	;OFFSET FOR INITIAL ALPHA AND BETA
MSIBB:	0	;INITIAL GUESS EVALUATION
LSSFL:	0	;-1 IF CURRENT SEARCH MUST GIVE FINAL RESULTS
NPLNCP:	0	;NUMBER PLY SINCE P MOVE OR CAPTURE
CURCKS:	0	;CLOCK AT ENTRY

PPNTF1:	0
PPNTF2:	0

NPL:	0	;NO TIMES PLAUS MV GEN RUN
NSV:	0	;NO TIMES STATEV RUN
NFD:	0	;NO FEEDOVERS
NABF:	0	;NO ALPHA BETA FLUSHES
NMFD:	0	;NO TIMES REACHED MAX FEDDOVER LIMIT
IFN CHEOPS,[
NCHNFD:	0	;# FEEDOVERS CHEOPS "STOPPED"
]
NSVS:	0	;NO TIMES STATEV CALLED SELF
NCAT:	0	;NO TIMES CAT RUN
NMMV:	0	;NO TIMES MMOVE RUN
NHMCH:	0	;NO HASH MATCHES PLS MOVE
NHMSB:	0	;NO HASH MATCHES STAT BOARD EV
NFDCK:	0	;NO OF FEEDOVERS IN CH AND NO KING MOVES
NSLA:	0	;NO SECONDARY LINE ANAL
THTM:	0	;NET TOTAL HASH MATCHES
.TIME:	0	;THINKING TIME
..TIME:	0	;THINK PER MAIN VARIATION
TRAPS:	0	;NO TIMES TRAPP RUN
TRAPSC:	0	;NO TRAPPED PIECES FOUND
OPNMID:	0
CANCUT:	0	;NUMBER OF CANTAKE CUTTOFFS
ATEVEC:	0	;NUMBER OF ATEVE CALLS
IFN CHEOPS,[
CSSRCH:	0	;# CHEOPS SEARCHES IN PCG MODE
PMSRCH:	0	;# CHEOPS SEARCHES IN PMG MODE
CSNRDY:	0	;# TIMES CHEOPS NOT READY WHEN 10 WANTED RESULTS
CSNBSY:	0	;# TIMES CHEOPS "BUSY" WHEN DESIRED TO INITIATE SEARCH
CSBSTM:	0	;# OF CHEOPS PCG SEARCHES THAT RESULTED IN "BETTER FOR SIDE-TO-MOVE" 
CSEVEN:	0	;# "   "  .. IN NO MATERIAL GAIN FOR EITHER SIDE 
CSWSTM:	0	;# "   "  .. WORSE FOR SIDE TO MOVE 
CPBSTM:	0	; SIMILAR TO CSBSTM BUT AT PMG LVL
CPEVEN:	0	;   "     "  CSEVEN
CPWSTM:	0	;   "     "  CSWSTM
CSMVPC:	0	;# TIMES MADE CHEOPS MOVE A PLAUS CAPT
CPMVPC:	0	;# TIMES CHEOPS "GRONKED UP" MOVE IN PMG
CSMATD:	0	;# TIMES CHEOPS DETECTED FORCED MATE FROM PCG LVL
CPMATD:	0	;# TIMES CHEOPS DETECTED FORCED MATE FROM PMG LVL
NCHFRC:	0	;# TIMES CHEOPS "FORCED" MOVE AT EVM
NCHFDO:	0	;# FEEDOVERS CHEOPS CAUSED
NCHWFD:	0	;# FEEDOVERS CHEOPS WOULD LIKE TO HAVE CAUSED
CPCTS:	0	;# CANCUTS CHEOPS STOPPED AT PMG LVL
CPSTA:	0	;STATISTICS COUNT FROM PMG (SUM OF ALL)
CSSTA:	0	;   "        "     "   PCG      "
CPSTAC:	0	;# COUNTS SUMMED INTO CPSTA
CSSTAC:	0	;    "      "     "   CSSTA
]
OPENF:	0	;LAST LOCN CLEARED AT HACK1

DISSUP:	0	;-1 DONT UPDATE DISPLAY AT MNLP2

PCRAT1:	0	;CHANGE IN RATIO HACK (SEE STVL4)
PCRAT2:	0	;PCBAL DIFF AT TOP
PNRAT2:	0	;PNBAL DIFF AT TOP

NSRCHS:	0	;NUMBER SEARCHES REQUIRED
IFN TS,..TSTM:	0	;RUN TIME AT LAST P.V.

EMTLSW:	0	;-1 IF MATL SUBSTANTUALLY EQUAL AT TOP
		;IE ELEMINATE PC RATIO HACK
WTPWSW:	0	;1 W WANTS TO TRADE PAWNS 0 DOESNT CARE -1 DOESNT WANT TO
WTPCSW:	0	;1 W WANTS TO TRADE PCS 0 DOESNT CARE -1 DOESNT WANT TO


LSQBT1:	SUBI C,4
	ADDI C,4

LSQBT2:	ADDI C,10
	SUBI C,10

LMGD:	0	;REAL PLY DEPTH OF CURRENT ANALYSIS
LMGD2:	0	;PSEUDO DEPTH ("WEIGHTED" IE DOESNT GET AOS ED ON REPLY TO CHECK,
		;  AND ALSO GETS HACKED ON SECONDARY SEARCH)

LGMST1:	0
	NPCS
	0

LGMST2:	-NPCS,,0+1
	-NPCS,,NPCS+1
	-NPCS,,0+1

HASV:	BPREV+1		;HIS ASSURED VAL
OASV:	BPREV		;OUR ASSURED VAL
	BPREV+1

HPLMVD:	0	;PIECE HE LAST MOVED
PCSATS:	0	;PIECES AS THEY STAND (MATERIAL ONLY)
AHDATS:	0	;NET LACKING FOR ABCUT (-POSBGF)
ABFATS:	0	;NET LACKING FOR BSF (-POSBGF)
POSBGF:	20	;AMOUNT TO ALLOW IN ABOVE FOR POSITIONAL CHNGS ETC

PP LNCP:,	BLOCK NPC	;PIECE CAPTURED IN PRINCIPLE VARIATION

BPREV:	0	;BEST KNOWN WHITE
	0	;BEST KNOWN BLACK

IBPRV:	0	;INITIALIZED VALUES OF BPREV AT HACK1
	0	;IF NOT = TO EVMST  OK FOR BEST SO FAR TO BE POSSIBLY BETTER

LMG5T1:	0

PCSWSM:	0	;NO PIECES W/ SAFE MOVES
NSMVS:	0	;NO SAFE MOVES FOR CURRENT PIECE
NCKF:	0	;NO SAFE CHECKS
ICKF:	0	;CURRENT MOVE A SAFE CHECK
IDISKF:	0	;-1 IF CURRENT MOVE DISCOVERED AN LMFORS

;IN REPLAY MODE
RWPF:	0	;-1 PLAY WHITE MOVES 0 READ WHITE MOVES
RBPF:	0	;SAME FOR BLACK
RPLYPN:	0	;PLY #

;BDPV:	3	;CHANGE TO FINAL SCORE IF MOVE WAS BAD POSITIONALLY
;MSP1MV:	2	;DOUBLE MOVE OF PIECE POSSIBLE IN ONE MOVE
;MSP0MV:	4	;MOVE PIECE BACK TO ORIGINAL SQUARE
;MSPMV:	1	;MOVE PIECE TWICE IN OPENING

RDAT:	BDARL(A)
	BDARR(A)
	BDAFB(A)
	BDAFT(A)
BDAT:	BDALL(A)
	BDALR(A)
	BDAUR(A)
	BDAUL(A)

	BDALR2(A)
	BDALL2(A)
	BDAUR2(A)
	BDAUL2(A)
	BDALR1(A)
	BDALL1(A)
	BDAUR1(A)
	BDAUL1(A)
	BDAEPL(A)
	BDAEPR(A)

RDATS:	BDARL(C)
	BDARR(C)
	BDAFB(C)
	BDAFT(C)
	BDALL(C)
	BDALR(C)
	BDAUR(C)
	BDAUL(C)

RDATSS:	BDARL(S)
	BDARR(S)
	BDAFB(S)
	BDAFT(S)
	BDALL(S)
	BDALR(S)
	BDAUR(S)
	BDAUL(S)

RDAT1:	BDARL(T1)
	BDARR(T1)
	BDAFB(T1)
	BDAFT(T1)
	BDALL(T1)
	BDALR(T1)
	BDAUR(T1)
	BDAUL(T1)

RDATI:	BDARR(A)	;RDAT FOR OPPOSITE DIRECTION
	BDARL(A)
	BDAFT(A)
	BDAFB(A)
	BDAUR(A)
	BDAUL(A)
	BDALL(A)
	BDALR(A)


RMPPT1:	CAIE B,6
	CAIE B,3

RMPPT2:	SKIPLE T1,BOARD+BW(A)
	SKIPLE T1,BOARD-BW(A)

RMPPT3:	SKIPL SNFBP-PIECE(T1)
	SKIPL LMGSTD-PIECE(T1)

RMPPT4:	CAIN B,5
	CAIN B,4

RMPPT5:	SKIPE T1,BOARD+2*BW(A)
	SKIPE T1,BOARD-2*BW(A)

RMPPT7:	BOARD+BW+1(A)
	BOARD-BW+1(A)

RMPPT8:	BOARD+BW-1(A)
	BOARD-BW-1(A)

RMPTA:	BOARD-BW+1(A)
	BOARD+BW+1(A)

RMPTB:	BOARD-BW-1(A)
	BOARD+BW-1(A)

RMINS:	ADDM R,WA(A)
	ADDM R,BA(A)

RMDTT:	CAILE C,5	;SKIP ON DIAG TOWARD BLACK
	CAIG C,5	;SKIP ON DIAG TOWARD WHITE
	CAILE C,5

RMDTT1:	CAILE D,5
	CAIG D,5

RMP5T:	REPEAT 4,RFPCS(S)
	REPEAT 4,DDPCS(S)

RMP5T1:	REPEAT 4,RFPCS-PIECE(D)
	REPEAT 4,DDPCS-PIECE(D)


	;DATA BASE ARRAYS SETUP BY CAT
	;
BDBLK:	BLOCK BD2	;BLOCKING DATA
ONEB1:	BLOCK BD2
ONEB2:	BLOCK BD2
PP PDV:,	BLOCK NPC	;CURRENT PIECE DEVELOPMENT VAL
WAV:	BLOCK BD2	;VALUE FOR WHITE ATTACK ON EACH SQUARE
BAV:	BLOCK BD2	;VALUE FOR BLACK ATTACK ON EACH SQUARE

AT:	ADD W,WAV(A)
	ADD W,BAV(A)

ATS:	SUB W,WAV(A)
	SUB W,BAV(A)

NWPPP:	0	;# WHITE PASSED P
NBPPP:	0	;# BLACK PASSED P

NHPPP:	NBPPP
	NWPPP
	NBPPP

	;
	;PAWN STRUCTURE ARRAYS
PP PPASED:,	;RANK IF PASSED PAWN, O OTHERWISE
		;4.9=1 IF PASSED AND BLOCKED BY FRIENDLY PAWN
	BLOCK NPC
PP PPTP:,	;-1=PAWN DEFENDED BY PAWN
		;1=FORWARD, 2=BACKWARD, 3=ISOLATED PAWN
		;0 OTHERWISE
	BLOCK NPC	;CAT DEPENDS ON LAST REGISTER OF PPTP TO =0

PP PMOB:,	;FACTORS AFFECTING PAWN MOBILITY
	BLOCK NPC

  ;FREE
  ;BLOCKED BY OUR PC
  ;BLOCKED BY OUR PAWN
  ;BLOCKADED BY HIS PC
  ;BLOCKADED BY HIS PAWN

  ; WILL BE DEFENDED BY P IF PUSHED

  ; ADVANCE SQ CONTROLED BY US
  ; ADVANCE SQ CONTROLED B HIM

  ;PAWN HOLDING OUR PAWN
  ;PAWN HOLDING OUR PIECE

  ;PAWN PINNED

SNPNFL:	WNPNFL(TT)	;NUMBER OF PAWNS IN FILE S FOR SIDE
	BNPNFL(TT)
	WNPNFL(TT)

SQNPNF:	WNPNFL+1(TT)	;NUMBER OF PAWNS IN FILE ONE TO Q SIDE
	BNPNFL+1(TT)
	WNPNFL+1(TT)

SQNPN2:	WNPNFL+2(TT)	;NUMBER OF PAWNS IN FILE TWO TO Q SIDE
	BNPNFL+2(TT)
	WNPNFL+2(TT)

SKNPNF:	WNPNFL-1(TT)	;NUMBER OF PAWNS IN FILE ONE TO K SIDE
	BNPNFL-1(TT)
	WNPNFL-1(TT)

SKNPN2:	WNPNFL-2(TT)	;NUMBER OF PAWNS IN FILE TWO TO K SIDE
	BNPNFL-2(TT)
	WNPNFL-2(TT)

;START OF AREA CLEARED BY COMMON BLT IN CAT

WPNFLS:	BLOCK 10.	;NUMBER OF WHITE PAWNS IN FILES
BPNFLS:	BLOCK 10.	;BLACK (MUST HAVE 0 FOR FILES 0 & 9)
WNPNFL:	BLOCK 10.	;NUMBER OF NON-PASSED WHITE PAWNS IN FILES
BNPNFL:	BLOCK 10.	;BLACK (MUST HAVE 0 FOR FILES 0 & 9)
;NUMMM:	BLOCK 1	;NUMBER OF PAWN GROUPS ON BOARD
;	BLOCK 4	;ENTRY FOR EACH GROUP  >0 WHITE MAJORITY  <0 BLACK MAJORITY
		;IN UNITS OF 1/2 PAWN
;PP PFILES:,	;-1=DOUBLE OPEN FILE
		;0=FILE HAS ONLY PASSED PAWNS IN IT
		;>0=POINTER TO GROUP (NUMMM+1 TO 4)
	BLOCK 8
	;
PP PINT:,	;PIN DATA
	BLOCK NPC	;0 PIECE NOT PINNED ELSE PNTR TO PINDT
	;
; END OF AREA CLEARED IN COMMON BLT
BDA1:	BLOCK BD2	;ATTACK DIRECTION DATA
BDA2:	BLOCK BD2
BDA3:	BLOCK BD2
	;
BA:	BLOCK BD2	;BLACK ATTACKS ON EACH SQUARE
	;
WA:	BLOCK BD2	;WHITE ATTACKS ON EACH SQUARE

DEFINE ATA
	XCT RMINS(I)
	XCT AT(I)
TERMIN

	[0]	;MUST BE AT PPT, MAY BE REFERENCED AT MMBPWN
PP PPT:,	REPEAT 2,[REPEAT 8,PIECEL+.-PPT
	REPEAT 8, [0]
]

PP PDVPNR:,	REPEAT NPCS,WTDVL
		REPEAT NPCS,BTDVL

BDBSQ:	400400,,BDBLK(A)
	340400,,BDBLK(A)
	300400,,BDBLK(A)
	240400,,BDBLK(A)

BDBD:	200400,,BDBLK(A)
	140400,,BDBLK(A)
	100400,,BDBLK(A)
	40400,,BDBLK(A)

ONEBSQ:	331100,,ONEB1(A)
	221100,,ONEB1(A)
	111100,,ONEB1(A)
	1100,,ONEB1(A)

ONEBBD:	331100,,ONEB2(A)
	221100,,ONEB2(A)
	111100,,ONEB2(A)
	1100,,ONEB2(A)

ONEBS:	331100,,ONEB1(S)
	221100,,ONEB1(S)
	111100,,ONEB1(S)
	1100,,ONEB1(S)
	331100,,ONEB2(S)
	221100,,ONEB2(S)
	111100,,ONEB2(S)
	1100,,ONEB2(S)

REVERS:	REPEAT 10.,9-.RPCNT	;RANKS FROM BLACKS SIDE

OURGY:	SKIPGE (D)
	SKIPL (D)
	SKIPGE (D)

HKNG:	CAIN D,BKING
	CAIN D,WKING

OURGY1:	SKIPL (T1)
	SKIPGE (T1)

OURGY2:	SKIPGE (T2)
	SKIPL (T2)
	SKIPGE (T2)

OURGYJ:	SKIPGE (J)
	SKIPL (J)
	SKIPGE (J)

RMOY:	SKIPGE PIECE(B)
	SKIPL PIECE(B)

RMOY1:
RMOY3:	SKIPGE PIECE(S)
	SKIPL PIECE(S)
	SKIPGE PIECE(S)

RMOY2:	SKIPGE PIECE(Q)
	SKIPL PIECE(Q)
	SKIPGE PIECE(Q)

RMOY4:	SKIPGE PIECE(T1)
	SKIPL PIECE(T1)

RMOY5:	SKIPGE PIECE(D)
	SKIPL PIECE(D)

RMOY6:	SKIPGE PIECE(T2)
	SKIPL PIECE(T2)
	SKIPGE PIECE(T2)

RMOYTT:	SKIPGE PIECE(TT)
	SKIPL PIECE(TT)
	SKIPGE PIECE(TT)

RMOYJ:	SKIPGE PIECE(J)
	SKIPL PIECE(J)
	SKIPGE PIECE(J)


PCPINS:	0		;ALL LIST OF ALL PINS OF PIECES.

PINFS:	PINDT
PINDT:	BLOCK LPINDT*LPINE
EPINDT:

BASQ1:	0	;BITS CORRESP TO SQ (FIRST 32)
BASQ2:	0	;GETS SET WITH SQS CURRENTLY ATTS

BAZZQ==430100
BATTSQ==.-2*BW
REPEAT 4,[
	0
	REPEAT 8,[	BAZZQ,,BASQ1
			BAZZQ==BAZZQ-10000
]
	0
]
BAZZQ==430100
REPEAT 4,[
	0
	REPEAT 8,[	BAZZQ,,BASQ2
			BAZZQ==BAZZQ-10000
]
	0
]

;WHITE NEAR SIDE
;HIGHER NOS TOWARD BLACK
BDARL=360600,,BDA1	;RANK FROM LEFT
BDARR=300600,,BDA1	;"  "  RIGHT
BDAFB=220600,,BDA1	;FILE  "  BOT
BDAFT=140600,,BDA1	; "  "  TOP
BDALL=60600,,BDA1	;DIAG  "  LOWER LEFT
BDALR=600,,BDA1		;DIAG "  "  RIGHT
BDAUR=360600,,BDA2	;DIAG  "  UPPER  "
BDAUL=300600,,BDA2	;"  "  "  LEFT
BDALR2=220600,,BDA2	;KNIGHT  2*BW  FROM  LR
BDALL2=140600,,BDA2	;KNIGHT  "   "    LL
BDAUR2=60600,,BDA2	;"  "   "  UR
BDAUL2=600,,BDA2	;"  "  "  UL
BDALR1=360600,,BDA3	;"  BW  "  LR
BDALL1=300600,,BDA3	;"  "  "  LL
BDAUR1=220600,,BDA3	;"   "    "   "  UR
BDAUL1=140600,,BDA3	;"  "  "  UL
BDAEPL=60600,,BDA3	;EP FROM L
BDAEPR=600,,BDA3	;EP FROM R

MCATT2:	REPEAT 4,	SKIPL RFPCS(D)
	REPEAT 4,	SKIPL DDPCS(D)

MCATT3:	-1	;PIECE AND SIDE BEING PINNED AGREE
	1	;DISAGREE


CATFLG:	-1

MMPWNF:	0	;PASSED PAWN BLOCKED BY FRIENDLY PAWN FLAG

PP RFPCS:,	;NEGATIVE FOR ORTHAGONALLY SLIDING PIECES
	REPEAT 2,[
	BLOCK 8
	-1
	BLOCK 3
	-1
	BLOCK 2
	-1
]

PP DDPCS:,	;NEGATIVE FOR DIAGONALLY SLIDING PIECES
	REPEAT 2,[
	BLOCK 12
	-1
	0
	-1
	-1
	BLOCK 2
]
PP SLDPC:,	;NEG FOR SLIDING PIECES
	REPEAT 2,[
	BLOCK 8
	-1
	0
	-1
	0
	-1
	-1
	0
	-1
]


LPINTB=100
PINTB:	BLOCK LPINTB

RMERR1:	0
LCHAR:	0	;LAST CHAR READ (AT GSYL4)
IFN HSCOD,[
NHSW:	1	;-1=SUPPRESS ALL HASH 0=ALLOW DRAW DET ONLY
]
IFN BOOK,[
UBKF:	0	;0=DON'T USE BOOK  1=USE BOOK
]
IFN CHEOPS,[
CHEOSW:	0	;0 DONT USE CHEOPS, NON-ZERO -> DO
		; -1 -> BRUTE FORCE MODE.
		;IF >0, BIT DECODED TO SAY WHAT TO USE CHEOPS FOR.
		; 1 BIT -> STATEV STABILITY PREDICATE MODE.
		; 2 BIT -> PMG HACKERY
		; 4 BIT -> RUN BLUNDER STOPPER
		;10 BIT -> ACTUALLY "USE" BLUNDER STOPPER TO PLAY MOVE.
		;20 BIT -> 10 BIT, PLUS RECYCLE OCM TO IMPLEMENT 
		;	     CHEOPS MOVE SELECTOR IF DECIDE TO PLAY CHEOPS MOVE.
CHEOS:	PUSHJ P,GETONM	;READ IN OCTAL NUMBER
	MOVEM C,CHEOSW
	JUMPN C,HINITC	;INITIALIZE IT AND EVERYTHING
	CLEARM HINITD
	.CLOSE CHELCH,	;RELEASE CHEOPS LOCK
	POPJ P,

CRCYC:	0	;-1 -> IN VERIFY MODE AFTER CHEOPS VETOED INTENDED OCM MOVE
STABD:	3	;SETD TO USE IN STAB PRED MODE
PMGAD:	3	;SETD TO USE FOR LMG A SEARCH.
PMGBD:	3	;SETD TO USE FOR LMG B SEARCH.
STABEP:	10000	;EPISLON TO USE SETTING UP INITIAL ALPHA AND BETA IN STAB PRED MODE
PMGEP:	10000	; " " FOR LMG SEARCHES
LMCHAC:	0	;IF IN PMG, 0 -> CHEOPS NOT ACTIVE
		; 	   -1 -> CHEOPS DOING A SEARCH
		;	    1 -> CHEOPS DOING B SEARCH
CHCSTP:	-1	;CHEOPS PCG STOP SWITCH. IF IN PCG AND DEPTH > THIS AND CHEOPS SAYS
		; POSITION COMPLETELY STABLE (DELTA = 0), RETURN PCSATS WITHOUT
		; ALLOWING EITHER SIDE TO MOVE! -1 TURNS OFF THIS FEATURE.
CHPSTP:	-1	;CHEOPS PMG STOP SWITCH.  SIMILAR TO CHCSTP
CHMPC:	8	;CHEOPS MOVE PLAUSIBLE CAPTURE SWITCH. IF .NE. 0 AND CHEOPS RETURNS
		;BETTER FOR STM AT PCG LVL, AND LMGD < CHMPC, FORCE FIRST MV IN 
		;CHEOPS'ES P.V. TO BE A PLAUSIBLE CAPT IF IT ISNT ALREADY.
CHMPM:	30	;CHEOPS PMG MAKE PLAUSIBLE SWITCH. SIMILAR TO CHMPC BUT OPERATES AT PMG
		;AND FORCES MOVE TO BE MOST PLAUSIBLE IF ACTIVATED.
CHPMV:	0	;MOVE (IN PC,,SQ FORMAT) MADE PLAUSIBLE BY CHEOPS OR 0
CHCUTF:	0	;-1 IF CHPSTP .NE. -1 & LMGD>CHPSTP & CHEOPS SAYS POSITION STABLE
		; CAUSES IMMEDIATE RETURN OF PCSATS.
CHFDVF:	8	;FEEDOVER VERIFY SWITCH.  IF CHFDVF .NE. 0, AND LMGD > OR = CHFDVF, 
		;AND PCG WANTS TO FEEDOVER,
		;USE CHEOPS TO "VERIFY" NEED TO FEEDOVER.  IE IF FEEDOVER IS BECAUSE
		;MAY BE BETTER FOR STM, DONT DO IT UNLESS CHEOPS IN FACT RETURNS BETTER
		;FOR STM.  LIKEWISE FOR WORSE FOR STM.
CHFDL:	20	;CHEOPS PCG FEEDOVER LIMIT.  DONT PERMIT CHEOPS TO CAUSE FEEDOVER ON
		; WORSE FOR STM AT PCG LEVEL IF LMGD > THIS. (OR THIS 0)
CHBLFL:	0	;-1 -> BLUNDER STOPPER SEARCH HAS BEEN INITIALIZED AND IS RUNNING NOW ON CHEOPS
BACKEP:	21	;EPSILON TO USE IN SETTING INITIAL ALPHA AND BETA
		; FOR BACKGROUND CHEOPS SEARCH.  0-> +/- INF.
]

IVVDD:	2	;EFFECTIVE SETD FOR SEC INV
INVD:	0	;SEC INVEST START FROM THIS PLY OR LESS

HACKVV:	0	;CONTAINS NET POSITION VALUE FROM LAST SEARCH
HACKVR:	0	;RELIABILITY

PP EVMPB:,	REPEAT NPC, <43-.RPCNT>_12.+100,,ESPHI(P)
SBR:	;SEARCH BREADTH VECTOR
	REPEAT SBRLNG,6

IFN KILLH,[
AKHS:	1
IRPC X,,ABC
ABFT!X:	BLOCK SBRLNG+1
TERMIN
]

PP LGLMPT:,	;PIECE IN B CUR LOC IN A DESTIN IN S
	REPEAT 8,LWPWN
	LROOK
	LKNT
	LBIS
	LKING
	LQUEEN
	LBIS
	LKNT
	LROOK
	REPEAT 8,LBPWN
	LROOK
	LKNT
	LBIS
	LKING
	LQUEEN
	LBIS
	LKNT
	LROOK

STPLVL:	0	;DISPLAY STOP LEVEL
;DBS1:	0	;0 NO DISP 1 DISPLAY 2 DISPLAY FEEDOVERS
		;3 TYPE LIST OF PLAUSIBLE MOVES
;DBS2:	0	;0 NO LOOK AHEAD 1 LOOK AHEAD AFTER DISPLAY
;MVDS:	0	;MAIN VARIATION DIS SWITCH
INCSHW:	0	;UPDATE TV DISPLAY DURING SEARCH, + BOTH PMG AND STATEV, - PMG ONLY
SELSHW: 0	;SHOW "REASON" FOR SELECTION, + BOTH PMG AND STATEV, - PMG ONLY
SELTXT: 0	;TEXT STRING POINTER TO REASON FOR LATEST SELECTION.

OKINGT:	WKING-PIECE+PIECEL
	BKING-PIECE+PIECEL
	WKING-PIECE+PIECEL

KFILE:	PFILE+WKING-PIECE
	PFILE+BKING-PIECE
	PFILE+WKING-PIECE

KRNK:	PRANK+WKING-PIECE
	PRANK+BKING-PIECE
	PRANK+WKING-PIECE

RKRNK:	RPRANK+WKING-PIECE
	RPRANK+BKING-PIECE
	RPRANK+WKING-PIECE

LMUATS:	0
LMUDR:	0
ATTHF:	0	;-1 IF S ROUTINE MOVES THRU OPPONENTS PIECE OF HIGHER VAL (OR=)

LMUAT1:	BRANK,,BPREL(S)
	BRANK,,BPREL(S)
	BFILE,,BPREL(S)
	BFILE,,BPREL(S)
	BPDAG,,BPREL(S)
	BMDAG,,BPREL(S)
	BPDAG,,BPREL(S)
	BMDAG,,BPREL(S)

LMUAT:	BRANK,,BPREL(A)
	BRANK,,BPREL(A)
	BFILE,,BPREL(A)
	BFILE,,BPREL(A)
	BPDAG,,BPREL(A)
	BMDAG,,BPREL(A)
	BPDAG,,BPREL(A)
	BMDAG,,BPREL(A)


;ATTRIBUTE VALUES

OPATV:	10	;UNCOVERING ATTACK ON ADEQUATELY DEFENDED PIECE
IVLU:	1000	;INITIAL
MJVLU:	100	;MORE ATTACKS THAN OPP
TTVLU:	20	;ATTACK POORLY DEFENDED PIECE
BSQVAL:	10	;BASIC SQUARE VALUE
NKVLU:	20	;NEAR KING VALUE
CSQV:	20	;CENTER SQUARE VALUE EARLY
NCSQV:	10	;NEAR CENTER VALUE EARLY
WPVLU:	-400	;TOO EARLY TO MOVE PIECE UNLESS ATTACKED
BRKVLU:	50	;PAWN BREAK
FMKING:	40	;FIRST KING MOVE
KKCAS:	200	;FIRST KING MOVE IF CASTLE IS POSSIBLE
FMROOK:	60	;FIRST ROOK MOVE IF CASTLE IS POSSIBLE
MPFMV:	44	;FIRST MOVE OF MINOR PIECE

PTFVLU:	20	;MOVING TO SAME RANK OR FILE AS OPP KING +
POFVLU:	60	;MOVEING TO OPEN FILE SAME AS KING +
BCPVLU:	140	;BLOCKING PAWN BY PLAYING TO K3 OR Q3 -
BDDMT:	-60	;THRES FOR MOVE TO BE BAD DEVL WISE
GMAVLU:	140	;CHANGE BALANCE OF POWER ON OTHER THAN PAWN DEF. BY PAWN +
ACSPV:	50	;PLAUSIBLITITY VAL ATTACKING CENTER SQUARE W PAWN +
APVLU:	100	;ATTACKING A PINED PIECE +
APDPV:	20	;ATTACKING A PINNED PAWN WHICH IS DEFENDED BY PAWN +
APFVLU:	14	;ATTACKING PAWN ON FILE +
AWPVLU:	50	;ATTACKING WEAK P (FOR B ISO) +
APFPV:	20	;EXTRA IF PASSED AND NOT BLOCKED BY FRIENDLY P +

LMMPDP:	4	;MOVING P DEFENDED BY P -
LMMFP:	14	;MOVING FORWARD P -
LMMBP:	30	;MOVING BACKWARD P +
LMMIP:	4	;MOVING ISOLATED P +
RDEFVLU:	2	;VALUE FOR RANDOMLY DEFENDING OUR PIECE

PINVLT:	60	;VALUE FOR PIN OF PIECE AS FUNCTION OF RANK (ATTACK NOT SIG)
	50
	50
	60
	70
	100
	110
	110

PINVAT:	140	;ALSO REPRESENTS ATTACK
	120
	120
	140
	160
	200
	220
	220

;PLAUS VALUES ADDED TO MOVE
LMFPT:	100	;ATTACKING TWO
	240	;3
	400	;4
	600	;5 OR MORE

;PASSED PAWN PUSH VALUES(PLAUS)

PPP:	10	;NOTE RANK PSEUDO REDUCED BY 2 FOR PP BLOCKED BY FRIENDLY
	10
	40	;BLOCKING PP ON RANK 2
	60	;PP TO OR BLOCK PP ON RANK 3
	100	;...
	140
	200	;...
	300	;PP TO OR BLOCK PP ON RANK 7
	400	;TO RANK 8

PWNV==200
NV==640		;3 1/4 P
BV==700		;3 1/2 P
RV==1200	;5 P
KQV==2140	;8 3/4 P

QNINC==KQV-PWNV	;EXCESS Q VS P ON SEVENTH

BVMNV==BV-NV
TPCS==2*<RV+BV+NV>+KQV+600	;INITIAL MATERIAL PER SIDE (K=600) EXCEPT FOR PAWNS
MIDMAT==2*<RV+BV>+600		;THIS AMT OF MATERIAL OR MORE IS CONSIDERED MIDDLE GAME
TPNS==8.*PWNV

IFN CHEOPS,  CHVCNV==4	;CONVERSION SHIFT, CHEOPS VALUE -> OCM VALUE
			; PAWN IN CHEOPS = 10
			; PAWN IN OCM = 200

GDMF:	0	;SAFE MOVE FLAG

LLMGPL==500
LMGPDL:	BLOCK LLMGPL

LGLMST:	0
TEFAL:	0
LMQS:	0
LMJS:	0
LMAS:	0
LMBS:	0
PCMVNG:	0
LMARK:	0	;RANK MOVE TO
CDEVV:	0
CDVCF:	0	;CURRENT DEVEL VAL COMPUTED FLAG
ORGPCL:	0	;ORIGIONAL LOCN OF MOVING PC
TEFFORT:	0
LMOA:	0


WMID:	0	;-1 WHITE HAS MIDDLE GAME MATERIAL (OR A Q)
BMID:	0	; LIKEWISE BLACK

HMID:	BMID	;INDEXING TABLE TO ADDRESS HIS MID FLAG
	WMID
	BMID

PCBAL:	TPCS	;MATERIAL FOR WHITE
	TPCS	;FOR BLACK
PNBAL:	TPNS	;PAWN MATERIAL FOR W
	TPNS	;FOR B

OPCBAL:	BLOCK 2	;PCBAL AT TOP OF TREE
OPNBAL:	BLOCK 2	;PNBAL AT TOP OF TREE
ONETBL:	0	;NET AT TOP OF TREE IE MAGNITUDE
			;OPCBAL+OPNBAL - (OPCBAL+1 + OPNBAL+1)

PP PBALP:,	REPEAT 8,PNBAL
		REPEAT 8,PCBAL
		REPEAT 8,PNBAL+1
		REPEAT 8,PCBAL+1

BLGCLR:	0	;BEG OF BLOCK CLEARED AT LMGCD1
LMFORS:	0	;NUMBER FORCING POSSIBILITIES 
EGAIN:	0	;ESTIMATED GAIN
AGAIN:	0	;TOTAL VALUE OF ALL ATTACKED
HPVAL:	0	;EFFECTIVE VALUE OF HIS PIECE
		;ADJUSTED FOR TRADE DESIREABILITY ETC
ELGCLR:		;END OF BLOCK

CPOSV:	0	;VALUE OF CURRENT POSITIONALLY
LMGT1:	0	;TEMP USED IN CAPT SECT OF LMGR
LCDFR:	0	;HIS DEFENDER IN CAPT SECT OF LMGR
LCATR:	0	;OUR NEXT ATTACKER IN CAPT SECT OF LMGR
BPCSOP:	0	;BITS SET FOR PIECE ON PREY
CANTK:	0	;-1 STM CAN TAKE PCS AS THEY STAND
CANMV:	0	;-1 HAS LGL MV
GDNATS:	0	;-1 WOULD BE GOOD ENUF FOR A-B CUT IF COULD TAKE IT
PMGLVL:	0	;LMGD2-HK1V
		;0 LAST NORMAL PMG LVL
		;+ USE STATEV UNLESS FEEDOVER
OSTV:	0	;OUTSTANDING THREATS W AGAINST BLACK
	0	;BLACK AGAINST WHITE

OSTVP:	OSTV
	OSTV+1
	OSTV



OWPNC:	0	;WHITE P CNT AT TOP OF TREE
OBPNC:	0	;B " "
WPNC:	8	;WHITE PAWN COUNT
BPNC:	8	;BLACK PAWN COUNT
WQNC:	1	;WHITE QUEEN COUNT
BQNC:	1	;BLACK QUEEN COUNT
WRKC:	2	;WHITE ROOK COUNT
BRKC:	2	;BLACK ROOK COUNT
WBSC:	2	;WHITE BISHOP COUNT
BBSC:	2	;BLACK BISHOP COUNT
WKNC:	2	;WHITE KNIGHT COUNT
BKNC:	2	;BLACK KNIGHT COUNT
NWKG:	1	;# WHITE KINGS !
NBKG:	1	;# BLACK KINGS!

WLBC:	1	;WHITE BISH ON LIGHT SQ
BLBC:	1	;BLACK BISH ON LIGHT SQ
WDBC:	1	;WHITE BISH ON DARK SQ
BDBC:	1	;BLACK BISH ON DARK SQ

WPCCNT:	7	;# WHITE PCS (EXCLUDE K + PAWNS)
BPCCNT:	7	;BLACK

PCCNTP:	WPCCNT	;PNTR TO WPPCNT
	BPCCNT
	WPCCNT

SLBC:	WLBC
	BLBC
	WLBC

SDBC:	WDBC
	BDBC
	WDBC

SPNC:	WPNC
	BPNC
	WPNC

SQNC:	WQNC
	BQNC
	WQNC

SRKC:	WRKC
	BRKC
	WRKC

SBSC:	WBSC
	BBSC
	WBSC

SKNC:	WKNC
	BKNC
	WKNC

SNUOP:	NUMORP
	NUMORP+1
	NUMORP

OSPNC:	OWPNC
	OBPNC
	OWPNC




;SQVAL:	BLOCK BD2
PP PVALUE:,	REPEAT 4,[
IFE .RPCNT-2, PP RPVAL:,
	REPEAT 8,PWNV
	RV
	NV
	BV
	3000
	KQV
	BV
	NV
	RV
]

CSQP=.-2*BW
	REPEAT 3*BW,0
	REPEAT 2,[
	REPEAT 4,0
	REPEAT 2,-1
	REPEAT 4,0
]
	REPEAT 3*BW,0

LMRDT:	BW
	1
	-BW
	-1

LMBDT:	BW+1
	BW-1
	-BW-1
	-BW+1

PP LMGT:,	;SIGN SET FOR PAWNS
	IRPS PWC,,LMWPW LMBPW
	REPEAT 8, SETZ PWC
	LMROOK
	LMKNT
	LMBIS
	LMKING
	LMQUEEN
	LMBIS
	LMKNT
	LMROOK

TERMIN


PP LMGSTD:,	;SCORING TALE DIRRERENT ROUTINES FOR SLIDING PIECES
	;SIGN NEG FOR WHITE PAWNS
IRP PWC,,[SETZ LMWPW,LMBPW]
	REPEAT 8,PWC
	LSROOK
	LMKNT
	LSBIS
	LMKING
	LSQUEEN
	LSBIS
	LMKNT
	LSROOK
	TERMIN

PP SNFBP:,	;SIGN NEG FOR BLACK PAWNS
	REPEAT NPCS,0
	REPEAT 8,SETZ
	REPEAT 8,0

PP PNTB:,	;PIECE TO BIT
	REPEAT NPC,<42-.RPCNT>_12.+100,,BPCSOP
;OFFSET ONE BIT SO JFFO WILL WORK
PP NPODT:,
	REPEAT NPC,<42-.RPCNT>_12.+100,,NPODBT(C)
PP HNPODT:,
	REPEAT NPC,<42-.RPCNT>_12.+100,,NPODBT(D)

PP NPOD:,BLOCK NPC	;NUMBER OF ATTACKED PIECES GIVEN PIECE IS ONLY DEFENDER OF

PP NPODBT:,BLOCK NPC	;BITS FOR ABOVE PIECES	MUST FOLLOW NPOD

PP DEFVL:,	BLOCK NPC	;VALUE FOR DEFENDING THIS P
		;MUST FOLLOW NPODBT


PP ENPCL:,	BLOCK NPC	;CALCULATED LOSS IN ENPRISE

SYMT:	SIXBIT /K/
	SIXBIT /Q/
	SIXBIT /KR/
	SIXBIT /KN/
	SIXBIT /KB/
	SIXBIT /QR/
	SIXBIT /QN/
	SIXBIT /QB/
	SIXBIT /B/
	SIXBIT /N/
	SIXBIT /R/
	SIXBIT /G/
	SIXBIT /KP/
	SIXBIT /QP/
	SIXBIT /KRP/
	SIXBIT /KNP/
	SIXBIT /KBP/
	SIXBIT /QRP/
	SIXBIT /QNP/
	SIXBIT /QBP/
	SIXBIT /BP/
	SIXBIT /NP/
	SIXBIT /RP/
	SIXBIT /P/
	SIXBIT /O/

SYMPS:
	SIXBIT /PPV/		;PRINT PRINCIPLE VARIATION (AFTER MAKING MOVE)
	SIXBIT /M/
	SIXBIT /U/
	SIXBIT /BD/
	SIXBIT /RESET/
	SIXBIT /PG/
	SIXBIT /PW/
	SIXBIT /PB/
	SIXBIT /PS/
	SIXBIT /PN/
IFN DSPLY,	SIXBIT /FANCY/
	SIXBIT /PNT/
	SIXBIT /WALLP/
	SIXBIT /SETW/
	SIXBIT /SETD/
	SIXBIT /SETF/
	SIXBIT /SETC/
;IFE DEC,	SIXBIT /TTY/
	SIXBIT /DRAW/
IFN HSCOD,	SIXBIT /HASH/
IFE DECTS,	SIXBIT /TIMES/
IFE DECTS,	SIXBIT /CLKSW/
IFE DECTS,	SIXBIT /SPARM/
IFN BOOK,	SIXBIT /BOOK/
IFN UTAPE,	SIXBIT /UREAD/
	SIXBIT /SETSD/
	SIXBIT /SETSSD/
IFE DECTS,	SIXBIT /CLKSET/
IFN UTAPE,[
	SIXBIT /FILE/
	SIXBIT /UWRITE/
	SIXBIT /SAVE/
	SIXBIT /RS/
]	SIXBIT /SPOT/
IFN BOOK,	SIXBIT /CBOOK/
	SIXBIT /TRACE/
	SIXBIT /KPTR/
IFE DECTS,	SIXBIT /TSW/
IFN BOOK,	SIXBIT /RBOOK/
IFN BOOK,	SIXBIT /CKBOOK/
IFN BOOK,	SIXBIT /CKBKEP/
	SIXBIT /LIST/
	SIXBIT /BCS/
	SIXBIT /TPC/
IFN KILLH,	SIXBIT /KHS/
	SIXBIT /FDCTSW/
IFN BOOK,	SIXBIT /WBOOKB/
IFN BOOK,	SIXBIT /RBOOKB/
	SIXBIT /SMSS/	;MULTIPLE SEARCH MODE
	SIXBIT /ICSW/	;INCREMENTAL CAT MODE
	SIXBIT /SLASW/
	SIXBIT /SPVS/
	SIXBIT /TPDV/
	SIXBIT /ICLOCK/
	SIXBIT /STOP/
IFE DECTS,	SIXBIT /FASTER/
IFE DECTS,	SIXBIT /SLOWER/
	SIXBIT /PARSW/
	SIXBIT /ALG/
IFN TS,	SIXBIT /REPLAY/
	SIXBIT /CLEAR/
IFN UTAPE,	SIXBIT /WPOS/
	SIXBIT /RPOS/
	SIXBIT /PUT/
	SIXBIT /SIDE/
	SIXBIT /HPV/
IFN UTAPE,	SIXBIT /SKIP/
	SIXBIT /HBPT/
IFN UTAPE,	SIXBIT /ZPOS/
	SIXBIT /PCGPWN/
IFN TS,	SIXBIT /COMP/

IFN CHEOPS,[
	SIXBIT /CHEOPS/
	SIXBIT /CC/
	SIXBIT /CLPOS/
	SIXBIT /CCBFM/
	SIXBIT /CT/
	SIXBIT /CTA/
	SIXBIT /STABD/
	SIXBIT /STABEP/
	SIXBIT /CHCSTP/
	SIXBIT /CHSTAT/
	SIXBIT /CHMPC/
	SIXBIT /CSPD/
	SIXBIT /PMGAD/
	SIXBIT /PMGBD/
	SIXBIT /PMGEP/
	SIXBIT /CHPSTP/
	SIXBIT /CHMPM/
	SIXBIT /CHFDVF/
	SIXBIT /CHFDL/
	SIXBIT /SBACK/
	SIXBIT /CBACK/
	SIXBIT /PBACK/
	SIXBIT /CDELT/
	SIXBIT /BACKEP/
]
	SIXBIT /PMSTAT/
IFN DSPLY,[
	SIXBIT /FONT/
]
	SIXBIT /INCSHW/
	SIXBIT /SELSHW/
	SIXBIT /PC/
	SIXBIT /SQ/
	SIXBIT /CANCSW/
	SIXBIT /SLEEPT/
	SIXBIT /CNTSW/
	SIXBIT /HDUOSW/
	SIXBIT /OKFILE/
	SIXBIT /KCUT/
	SIXBIT /PINWSQ/
	SIXBIT /RKPOS/
	SIXBIT /AVGSW/
	SIXBIT /PMGL/
	SIXBIT /BKERR/
IFN TS,	SIXBIT /MORE/
IFE DECTS,[
	SIXBIT /SRATE/
	SIXBIT /BASPAR/
]
	SIXBIT /BFLIP/
IFE DECTS,[
	SIXBIT /PPARAM/
]
	SIXBIT /BELL/
	;ADD NEW PSEUDOS HERE ^

BKSMS:
IFN BOOK,[
	SIXBIT /V/
	SIXBIT /E/
	SIXBIT /L/
	SIXBIT /T/
]

NSYMS=.-SYMT

PTB:
REPEAT 3,[
	BIT 12	
;0   1   2   3   4   5   6  7   8
IFE .RPCNT,PTBQ:
	BIT 13	
;G  KRP KNP KBP KP QP QBP QNP QRP
	BIT 9	
;9   10  11  12  13  14  15  16  
	BIT 10	
;KR  KN  KB  K   Q   QB  QN  QR
	BIT 11
	BIT 16
	BIT 15
	BIT 14
	BIT 11 14
	BIT 10 15
	BIT 9 16
	BIT 0
IFE .RPCNT,PTBP:
	BIT 18 4+
	BIT 18 5+
	BIT 18 1+
	BIT 18 2+
	BIT 18 3+
	BIT 18 8+
	BIT 18 7+
	BIT 18 6+
	BIT  18 60+6+
	BIT 18 40+7+
	BIT 18 20+8+
	BIT 1 2 3 4 5 6 7 8
	BIT 17	
;CASTLE
IFE .RPCNT,PTBL=.-PTB
]

SQTB:	4	;1  2  3  4  5  6  7  8
	5	;KR KN KB K  Q  QB QN QR
	1
	2
	3
	8
	7
	6
	3,,6
	7,,2
	1,,8
	REPEAT 14.,600000,,
PSDS:
;4.9 USE STANDARD OUTPUT  
;4.8 USE STANDARD INPUT   
	600000,,PPV	;IF 4.9 BUT NOT 4.8 VARIABLE IS IN DISP ADR -1
	HACK1
	HACK2
;	600000,,MVDS
	PBOARD
	ARESET
	APG
	PWHITE
	PBLACK
	PSELF
	PNORM
IFN DSPLY,SETZ FANCY
	SETZ PNT
	SETZ AWALLP
	ASETW
	SETZ ASETD
	SETZ ASETF
	600000,,CATCUT
;IFE DEC,600000,,HEAR
	ADRAW
IFN HSCOD,	600000,,NHSW
IFE DECTS,	ATTIME	;TYPE TIME
IFE DECTS,	600000,,CLKSW	;SWITCH CLOCK KLUDGE ON AND OFF
IFE DECTS,	ASPARM	;STORE PARAMETERS
IFN BOOK,	600000,,UBKF
IFN UTAPE,AUREAD
	600000,,IVVDD	;SET DEPTH OF SECONDARY ANAL
	600000,,INVD	;SET PLYN FROM WHICH SEC ANAL MADE
IFE DECTS,	ASETCL	;SET CLOCK
IFN UTAPE,[
	AFILE
	AWRT
	ASAVE
	ARST
]	ASPOT	;ODDS
IFN BOOK,	ACBOOK
	ATRACE
	AKPTR		;CRITICAL POSITION TRACE
IFE DECTS,	600000,,TSW
IFN BOOK,	ARBOOK
IFN BOOK,	600000,,CKBOOK	;-1 USE CHEOPS TO CHECK BOOK FOR REASONABILITY
IFN BOOK,	600000,,CKBKEP	;THRESHHOLD FOR CHEOPS VALUE WHEN CHECKING BOOK
	ALIST
	600000,,NSBVS	;BCS
	ATPCG
IFN KILLH,600000,,AKHS
	600000,,FDCTSW	;FEEDOVER CUTOFF SWITCH
IFN BOOK,	AWBKB
IFN BOOK,	ARBKB
	600000,,MSSW	;MULTIPLE SEARCH SWITHC
	600000,,ICSW	;INCREMENAL CAT SWITCH
	600000,,LNSW
	600000,,PPVSW
	ATPCC
	600000,,INVCLK
	ASTOP
IFE DECTS,	AFASTER
IFE DECTS,	ASLOWER
	600000,,PARSW
	600000,,ALGSW
IFN TS,	AREPLAY
	ACLEAR
IFN UTAPE,	AWPOS
	ARPOS
	APUT
	ASIDE
	AHPV
IFN UTAPE,	ASKIP
	AHBPT
IFN UTAPE,	AXPOS
	600000,,PCGPWN
IFN TS,	ACOMP

IFN CHEOPS,[
	SETZ CHEOS		;SET CHEOSW
	ACC			;ENTER CHEOPS CONSOLE PRGM
	ACLPOS			;XFER POSITION TO CHEOPS
	SETZ ACCBFM		;SET BUFFERED-MODE SWITCH 
				; (AS OPPOSED TO CLOSE-COUPLED MODE)
	ACT			;"TRY" CHEOPS ON CURRENT POSITION.
				; ARG IS SETD.  PRINT VALUE AND PV.
	ACTA			;SAME AS CT, BUT USE ASYMETRICAL A/B MODE
	600000,,STABD		;SETD TO USE IN CHEOPS IN STABILITY PRED MODE
	600000,,STABEP		;EPSILON TO USE IN SETTING UP INITIAL ALPHA-BETA
				; IN STABILITY PRED MODE
	600000,,CHCSTP		;"CHEOPS STOP SWITCH".  IF DEPTH > THIS AND CHEOPS
				; SAYS POSITION COMPLETELY STABLE (DELTA=0),	
				; RETURN PCSATS WITHOUT ALLOWING EITHER SIDE TO MOVE!
	SETZ ACHSTT		;SET CHEOPS STATISTICS SWITCH (OR, IF NO ARGS, PRINT
				; STATISTICS ON TTY).  0 -> OFF 1 -> PRINT AFTER MOVE.
	600000,,CHMPC		;"CHEOPS MOVE PLAUSIBLE CAPTURE" SWITCH.  IF .NE. 0,
				;IF CHEOPS RETURNS BETTER FOR STM, AND IF CHMPC < LMGD,
				;MAKE FIRST MOVE IN
				;CHEOPS'ES P.V. A PLAUSIBLE CAPTURE IF IT ISNT ALREADY.
	ACSPD			;SET CHEOPS'ES SPEED.
	600000,,PMGAD		;DEPTH TO USE FOR A SEARCH IN PMG
	600000,,PMGBD		;DEPTH TO USE FOR B SEARCH IN PMG
	600000,,PMGEP		;EPSILON TO USE FOR A-B IN PMG MODE
	600000,,CHPSTP		;PMG LVL STOP SWITCH
	600000,,CHMPM		;PMG LVL MAKE CHEOPS MV MOST PLAUSIBLE SWITCH
				; (IF IT WINS WOOD FOR STM AND LMGD < CHMPM)
	600000,,CHFDVF		;FEEDOVER VERIFY SWITCH
	600000,,CHFDL		;CHEOPS PCG FEEDOVER LIMIT ON WORSE FOR STM
	ASBACK			;START BACKGROUND CHEOPS SEARCH
	ACBACK			;"CONTINUE" BACKGROUND SEARCH.. IE
				; RECONSTRUCT INTERNAL BUFFER ASSUMING CURRENT POSITION
				; IS SAME AS SEARCH WAS STARTED IN.  USE THIS WHEN
				; "PICKING UP" A SEARCH STARTED BY A DIFFERENT OCM.
	APBACK			;PRINT STATE OF BACKGROUND SEARCH
	600000,,CDELT		;DELTA BY WHICH OTHER MOVE HAS TO BE BETTER THAN MAIN
				; OCM MOVE TO BE SELECTED IN CHEOPS 10 MODE. (CHEOPS UNITS)
	600000,,BACKEP		;EPSILON TO USE IN SETTING INITIAL ALPHA AND BETA
				; FOR BACKGROUND CHEOPS SEARCH.  0-> +/- INF.
]
	APMSTA			;TYPE PMG STATS
IFN DSPLY,[
	600000,,FONT		;0 -> 50. WIDE FONT, 1 -> 30. WIDE FONT
]
	600000,,INCSHW		;UPDATE TV DISPLAY TO SHOW POSITION DURING SEARCH
				; + BOTH LMG AND STATEV, - LMG ONLY
	600000,,SELSHW		;SHOW "REASON" FOR MOVE SELECTION, + BOTH LMG AND STATEV,
				; - LMG ONLY.
	APPC			;PRINT PIECE NUMBER
	APSQ			;PRINT SQUARE NUMBER
	600000,,CANCSW		;CONTROL CANCUT S.
	600000,,SLEEPT		;DO A .SLEEP THIS AMT BEFORE CALLING LMG (PRESUMABLY TO
				; LET CHEOPS RUN)
	600000,,CNTSW		;CENTRALIZE KNIGHTS AND PAWNS SWITCH AND WEIGHT
	600000,,HDUOSW		;HEAD DUO SWITCH AND WEIGHT
	600000,,OKFILE		;OPEN FILE NEAR KING SWITCH AND WEIGHT
	600000,,KCUT		;KING CUT OFF SWITCH AND WEIGHT
	600000,,PINWSQ		;PIN OF PIECE ON SQUARE NOT DEF BY PAWN
	600000,,RKPOS		;ROOK POSITION TERM
	600000,,AVGSW		;1 -> TURN ON AVERAGING HACK IN STATEV.
	APMGL			;PRINT LIST OF PLAUSIBLE MOVES.
	ABKERR			;PRINT LAST TAG AND LAST LEVEL SEEN IN READING IN BOOK.
IFN TS,	600000,,MORE		;TURNS ON MORE PROCESSING
IFE DECTS,[
	ASRATE			;SET TIME CONTROL RATE, ETC.
	600000,,BASPAR		;BASE PARAMETER SET (FOR AUTO PARAMETER SETTING)
]				; THIS IS WHAT IT STARTS OFF IN, AND WILL SPEED UP BEYOND
				; THIS FOR FIRST PART OF THE GAME.
	600000,,BFLIP		;FLIP BOARD ON DISPLAY
IFE DECTS,[
	APPAR			;PRINT ALL PARAMETER BLOCKS
]
	600000,,BELL		;TYPE BELL ON MAKING MOVE
	;ADD NEW PSEUDOS HERE ^

IFN BOOK,[
	BKV	;VARIATION NAME
	BKE	;POP 1
	BKM	;POP MULTIPLE
	BKT	;TRANSPOSITION
]

IFN .-SQTB-NSYMS,[PRINTC /SYM TAB LOSSAGE!
/]

PDL:	BLOCK PDLL

SQN:	0
TAKES:	0
TAKES1:	0
TAKES2:	0
EQSGNF:	0
GME:	0	;-1 ON RETURN FROM RMOVE IF TERMINATED BY SOMETHING GROSS (CR OR SOMETHING)
RSAWMN:	0	;-1 IF SAW MOVE NUMBER ON CURRENT LINE.  IF SO, ASSUME READING IN GAME
		; AND SPACE = TAB (AND TERMINATES MOVE). OTHERWISE, SPACE IS JUST A
		; SEPARATOR (LIKE -) FOR TYPING CONVENIENCE.
LGLMV:	0
SIDE:	NPCS
CASLF:	0
PLYN:	0
POSRDI:	0	;-1 POSITION HAS BEEN READ IN SO PLYN NOT REAL
LPSLSH:	0	;LAST PLY OUTPUT WITH BACKSLASHES ON WALLP
GAME:	BLOCK LGAME
IFN HSCOD,[
GHK1:	BLOCK LGAME
]
GAMEV:	BLOCK LGAME	;VALUE OF POSITION OR SETZ IF MOVE TYPED IN OR BOOK
GAMP:	GAME-1
GSYLNF:	0
GSYLMF:	0

	777776,,
	-1
LSYLT==5
SYLT:	BLOCK LSYLT



MCAT4:	CLEARM PKINGF
	POP T,A	;RH OF A HAS LOCN OF PIECE PINNED TO
	LDB B,[PINATP,,A]	;PIECE PINNING
	LDB C,[PINDIR,,A]	;DIRECTION OF PIN
	MOVEI I,0
	SKIPGE @BOARD(A)
	MOVEI I,1	;I GETS SIDE PINNED
	MOVE D,BOARD(A)
	SKIPGE RPIECE-PIECE(D)
	JRST [ SETOM PKINGF	;PIN TO K
	       JRST MCAT6]
	XCT (I) [ SKIPN T1,WA(A)
		  SKIPN T1,BA(A)]
	 JRST MCAT6	;YES REAL PIN (NOT DEFENDED)
	MOVE T2,PVALUE(B)
	CAML T2,PVALUE-PIECE(D)	;SKIP ON PIECE PINNED TO MORE VAL THAN PINNING PIECE
	 JRST MCAT6A
MCAT6:	LDB T1,[PINOPS,,A]	;SQUARE OF PIECE PINNED
	MOVE T1,BOARD(T1)
MCAT6B:	SKIPGE RPIECE-PIECE(T1)
	POPJ P,
	MOVE S,PIECEL-PIECE(T1)
	LDB D,ONEBS(C)
	JUMPE D,MCAT6X
	EXCH C,D
	LDB T2,RDATS(D)
	XCT RMOY6(I)
	TRO A,DPBIT	;PIN BY DOUBLED PIECES
MCAT6X:	AOS B,PINFS
	CAIL B,EPINDT-LPINE
	JRST PINNFS
	AOS PINFS
	MOVEM A,1(B)
	EXCH B,PINT-PIECE(T1)
	SKIPGE PKINGF
	TLO B,400000
	MOVEM B,@PINT-PIECE(T1)
	SKIPGE LMGT-PIECE(T1)
	POPJ P,		;PIECE PINNED IS PAWN
	AOS B,PINFS
	CAIL B,EPINDT-LPINE
	JRST PINNFS
	AOS PINFS
	MOVEM A,1(B)	;ALSO MAKE LIST OF ALL PINS OF PIECES.
	EXCH B,PCPINS
	MOVEM B,@PCPINS	
	POPJ P,

PINNFS:	PTTY [ASCIZ /PIN FS EXH/]
	POPJ P,

PKINGF:	0

;THIS CODE DETECTS CASE WHERE
;PINNED PIECE IS PROVIDING ONLY DEFENCE TO
;PIECE PINNED TO AND PINNED PIECE
;IS OBVIOUSLY EN PRISE
MCAT6A:	SOJN T1,CPOPJ	;MORE THAN ONE DEFENCE
	LDB T1,[PINOPS,,A]
	MOVE T1,BOARD(T1)
	SKIPGE SLDPC-PIECE(T1)	;PINNED PIECE NOT SLIDING
	CAML T2,PVALUE-PIECE(T1)	;WONT HAVE TO MOVE
	JRST MCAT6C
	SKIPGE RFPCS-PIECE(T1)
	CAILE C,3
	JRST .+2
	JRST MCAT6B
	SKIPGE DDPCS-PIECE(T1)
	CAIG C,3
	POPJ P,
	JRST MCAT6B

MCAT6C:	MOVE T2,@LMGST+1(I)	;ATTACKS CURRENTLY ON SQUARE PINNED TO
	PUSH P,A	;COMPUTE ATTACKS CURRENTLY STOPPED BY PIECE PINNED
	MOVE A,PIECEL(B)
MCAT6E:	LDB D,RDAT(C)
	JUMPE D,MCAT6D
	XCT MCATT2(C)	;SLIDING PIECE OF RIGHT TYPE?
	JRST MCAT6D
	MOVE A,PIECEL(D)
	LDB D,[430100,,PIECE(D)]
	XOR D,I
	ADD T2,MCATT3(D)
	JRST MCAT6E

MCAT6D:	POP P,A
	MOVE T1,@LMGST(I)
	SUBI T1,1(T2)	;EXTRA 1 FOR FIRST PINNING PIECE
	JUMPL T1,MCAT6
	POPJ P,


HACK1:
IFN TS,[
	MOVE A,KALINT
	MOVEM A,KAMCLK
	SETOM TRYMOV	;TRYING TO MOVE, IF WE HANG UP, ITS NOT TOO GOOD.
	SKIPN WALLP
	JRST HWPM1
	MOVE A,LPSLSH	;PUT OUT LAST MOVE WITH SLASHES ON WALLPAPER
	SKIPE PLYN
	CAMN A,PLYN
	JRST HWPM1
	MOVEM A,LPSLSH
	MOVEI B,PILPT
	SOUT [ASCIZ ?\?]
	PUSHJ P,TYPLM
	SOUT [ASCIZ ?\?]
HWPM1:	SKIPN TSW
	JRST HTIM1
	.RDTIM A,		;HACK TIMES.
	MOVEM A,EHRTM
	.SUSET [.RRUNT,,A]
	MOVEM A,EHRNM
	MOVEM A,..TSTM
HTIM1:]
	LDB I,[100,,PLYN]
	MOVE A,MACCLR
IFE DECTS,[
	MOVE B,@CLKTB(I)
	MOVEM B,CURCKS
]
IFN BOOK,[
	SKIPGE TSSW	;TRACE HACKERY ACTIVE.
	SKIPN UBKF
	JRST HB1	;USE NO BOOK
	JRST HB1E
]

HB1:
IRPS WKING,,WKING BKING,HK1XW,,HK1XW HK1XB,WKR,,WKR BKR,WQR,,WQR BQR,BKING,,BKING WKING
	SKIPE PIECEL+WKING+1-PIECE
	JRST HK1XW
	SKIPN PIECEL+WKR-PIECE
	JRST .+3
	SKIPE PIECEL+WQR-PIECE
HK1XW:	SKIPA A,[1*2]
	MOVEI A,4*2
	EXCH A,PINVF+BKING-PIECE
	SUB A,PINVF+BKING-PIECE
	IMUL A,PDV+BKING-PIECE
	MOVNS A
	ADDM A,@PDVPNR+BKING-PIECE
TERMIN
	MOVE A,HASHSS
	MOVEM A,HASHS
	CLEARM HSTB
	MOVE A,[HSTB,,HSTB+1]
	BLT A,HSTB+HTNE-1
	MOVE A,GAMP
	SOS A		;DONT ENTER CURRENT POSITION
	CLEARM NPLNCP	;NUMBER PLY NO CAPTURE OR P MOVE

HK1H2:	CAIN A,GAME-1
	JRST HK1H1
	MOVE S,GHK1-GAME(A)
	PUSHJ P,HSHK1
	JRST HK1H3
	MOVSI T1,300000+MHPLN
	MOVEI J,-1
	PUSHJ P,HASHE1
HK1H3:	LDB T1,[MPC,,(A)]
	SKIPL LMGT(T1)
	SKIPGE (A)
	JRST HK1H1
	AOS NPLNCP
	SOJA A,HK1H2
HK1H1:

IFN CHEOPS,[
	CLEARM CRCYC	;IN A CHEOPS RECYCLE FLAG
]
	CLEARM NSRCHS	;NUMBER SEARCHES REQUIRED
	CLEARM ACTV	;VALUE IF NO ACTIVITY
	MOVE A,GAMP
	MOVEM A,ACTVP
IFN CHEOPS,[
	MOVE T1,CHEOSW
	SKIPN HINITD
	 JUMPN T1,[ PUSHJ P,HINITC	;INSERT CHEOPS PAGES, ETC IF NOT ALREADY
		    JRST .+1]		;(T1 CLOBBERED IN THIS PATH)
	SETOM NBKST	;NEED TO START BACKGROUND FLAG  (CANT START IT NOW BECAUSE
			; ESTIMATE NOT AVAILABLE).
]
	JRST MSI1	;COMPUTE INITIAL VALUES FOR ALPHA AND BETA

MSINR:	MOVE D,EVMST	;INITIALIZE ALPHA BETA ENTER HERE TO SET A-B FULL WIDTH
	MOVE T1,EVMST+1
HK1E1:	MOVEM D,BPREV	;ENTER HERE WITH INITIAL A-B IN D,T1
	MOVEM T1,BPREV+1
	MOVEM D,IBPRV
	MOVEM T1,IBPRV+1	;IF NOT = EVMST OK FOR BEST SO FAR TO BE POSSIBLY BETTER
HKTRC1:	LDB I,[100,,PLYN]
	CLEARM STPLVL	;DISPLAY STOP LEVEL
	CLEARM LMGD
	CLEARM LMGD2
	CLEARM PDVLV
	CLEARM CPCDVL	;SHOULDNT MATTER IF SETD >=1, BUT JUST FOR REPRODUCABILITY
IFN KILLH,[
	SKIPN AKHS
	JRST HK1KH1
	SETZM ABFTA
	MOVE D,[ABFTA,,ABFTA+1]
	BLT D,ABFTC+SBRLNG
HK1KH1:]
IFN CHEOPS,[
	SKIPLE T1,CHEOSW
	TRNN T1,34
	JRST BLSTR1	;NO CHEOPS OR NO BLUNDERSTOPPER
	SKIPL TSSW
	JRST BLSTR1	;NOT REALLY GOING TO LOOK AHEAD, ETC
	AOSG NBKST	;SKIP IF ALREADY STARTED IT.
	PUSHJ P,CHBLI	;START BACKGROUND SEARCH FOR BLUNDER STOPPING
			; IF A-B HACKING ENABLED, TAKES ESTIMATE FROM MSIBB.
BLSTR1:
]
	SKIPN WALLP
	JRST HACK11
	MOVEI B,PILPT
	PUSHJ P,FORMF
	SOUT [ASCII /
[MOVE !/]		;]
	MOVE A,PLYN
	ADDI A,2
	LSH A,-1
	PUSHJ P,DPT
	SOUT @SIDTXT(I)
	PUSHJ P,PWNPNT
	MOVE W,[-LINFDT,,INFDT]
	PUSHJ P,STFPNT
HACK11:	CLEARM NPL	;CLEAR STATISTICS
	MOVE T1,[NPL,,NPL+1]
	BLT T1,OPENF
	MOVE T1,PLYN
	MOVEI T2,2	;NORMAL COEF FOR QUEEN
	CAIG T1,20
	JRST HKOPN1
	CAIG T1,50
HKOPN2:	SETOM OPNMID
	MOVEM T2,QDCOF
	MOVEM T2,PINVF+WKING+1-PIECE
;	SUB T2,PINVF+WKING+1-PIECE
;	IMUL T2,PDV+WKING+1-PIECE
;	MOVNS T2
;	ADDM T2,@PDVPNR+WKING+1-PIECE
	MOVE T2,QDCOF
	MOVEM T2,PINVF+BKING+1-PIECE
;	SUB T2,PINVF+BKING+1-PIECE
;	IMUL T2,PDV+BKING+1-PIECE
;	MOVNS T2
;	ADDM T2,@PDVPNR+BKING+1-PIECE
	MOVE T1,PCBAL
	ADD T1,PNBAL
	ADD T1,PCBAL+1
	ADD T1,PNBAL+1
	MOVEM T1,PCRAT1
	CLEARM HFLT
	MOVE T1,[HFLT,,HFLT+1]
	BLT T1,HFLT+LHFLT+LSHFLT-1
;CLEAR LEVEL TABLES FOR STATIC AND PLAUS HASH FLUSH RECORD
	PUSHJ P,.CAT1	;NON-INCREMENTAL CAT(TO HELP ASSURE REPRODUCABILITY)
IFN CHEOPS,[
;	SKIPGE CHEOSW
;	JRST [	 PUSHJ P,LMCHEO	;USE CHEOPS TO GENERATE MOVE
;		 JRST HK1CH1]
]
	SKIPE T1,SLEEPT
	JRST [	.SLEEP T1,	;WAIT SOME (PRESUMABLY TO LET CHEOPS RUN IN BACKGROUND
		JRST .+1]	; MODE.
	PUSHJ P,LMG
HK1CH1:	MOVEM Q,HACKVR
	MOVEM R,HACKVV
	PUSHJ P,CAT	;ASSURE CORRECT DATA IN NON INCREMENTAL MODE
	SKIPGE QTF
	JRST HACK1L
	MOVEI B,PILPT
	SKIPN WALLP
	JRST HACK1H
	PUSHJ P,DCRR
	MOVE W,[-LSTAPT,,STAPT]
	PUSHJ P,STFPNT
IFE TS,[
	SOUT [ASCIZ /  TOTAL TIME /]
	MOVE T1,.TIME
	PUSHJ P,.DPT
	SOUT [ASCIZ / SECONDS /]
]
	SOUT [ASCIZ /
LEVELS OF P M HASH FLUSHES  /]
	MOVSI J,-LHFLT+1
	MOVE A,HFLT+1(J)
	PUSHJ P,DPT
	PUSHJ P,DSPACE
	AOBJN J,.-3
	SOUT [ASCIZ /
LEVELS OF S EV HASH FLUSHES /]
	MOVSI J,-LSHFLT+1
	MOVE A,SHFLT+1(J)
	PUSHJ P,DPT
	PUSHJ P,DSPACE
	AOBJN J,.-3
	PUSHJ P,DCRR
HACK1H:	SKIPE Q,HACKVR	;NO MOVE
	JRST MSR1
IFN CHEOPS,[
	SKIPLE A,CHEOSW
	TRNN A,34
	JRST MSR1B	;NO CHEOPS OR NO BLUNDERSTOPPER
	SKIPL TSSW
	JRST MSR1B	;REALLY DIDNT LOOK AHEAD, ETC
BSMS3:	SKIPN A,CVPR	;HACK BLUNDER STOPPER
	JRST MSR1B
	MOVE A,1(A)		;MOVE INTEND TO PLAY
	PUSHJ P,BSTP
				;RETURN   V1 CHEOP'S OPINION IF THAT MOVE IS A BLUNDER
				;         V2 APPARENTLY BETTER MOVE, IF ANY
				;         V3 NUMBER OF DISTINCT MOVES WITH BEST SCORE
	MOVEI B,TYO
	SOUT [ASCII /CHOSEN /]
	MOVEI W,INVAL
	PUSHJ P,ACTPRB		;PRINT RESULTS BLOCK
	PUSHJ P,BABWRN
	MOVE ZR,INMOV
	CAMN ZR,CBSMOV
	JRST BSTPA1
	MOVE ZR,CBSVAL
	CAMN ZR,INVAL
	JRST BSTPA1
	SOUT [ASCII /CHEOP'S BEST /]
	MOVE C,CBSMOV
	PUSHJ P,EPMOVE
	PUSHJ P,DCRR
	MOVEI W,CBSVAL
	PUSHJ P,ACTPRB
	PUSHJ P,BABWRN
BSTPA1: ISOUT [.ASCII /*U!BSTCNT MOVES TIED FOR BEST/
]
	MOVE T1,CHEOSW
	TRNN T1,30
	JRST MSR1B	;JUST PRINT RESULTS, DONT ACTUALLY USE THEM
	SKIPN CVPR
	JRST MSR1B	;EVIDENTLY MATED OR STALEMATED, CHEOPS CANT DO ANYTHING ABOUT THIS!
	LDB I,[100,,PLYN]
	MOVE A,CBSVAL
	CAME A,CBALPH
	CAMN A,CBBETA
	 JRST BSMS1	;CHEOPS'S BEST AN A-B CUT, SO RECYCLE BACKGROUND
BSMS2:	SUB A,INVAL	; RETURN IF BEST IS ONLY ONE TIED.
	XCT (I) [ JUMPLE A,MSR1B  ;JUMP ON INTENDED MOVE JUST AS GOOD,  
		  JUMPGE A,MSR1B] ; SO GO AHEAD AND PLAY IT.
	MOVMS A		;AMT COULD IMPROVE WITH CHEOPS MOVE (CHEOPS UNITS)
	CAMGE A,CDELT
	JRST MSR1B	;NOT REALLY ENUF..
	MOVE T1,CHEOSW
	TRNE T1,20
	SKIPE CRCYC	;DONT DO THIS IF ALREADY IN CHEOPS RECYCLE
	JRST BSTPA2
	MOVE T1,BSTCNT
	SOJE T1,BSTPA2	;IF ONLY ONE, PLAY IT FOR NOW
	MOVE T1,CBSVAL
	LDB I,[100,,PLYN]
	XCT (I)	[ SUB T1,CDELT
		  ADD T1,CDELT]
	PUSHJ P,NBMRK	;MARK NON BLUNDERS 
	MOVEI B,TYO
	ISOUT 1,[.ASCII /REJECTING OCM MOVE, (/]
	MOVE C,CVPR
	MOVE C,1(C)
	PUSHJ P,PMOVE
	ISOUT [.ASCII /)
 RECYCLING OCM TO SELECT ALTERNATE AMONG *U!NBMRKC ./]
	PUSHJ P,DCRR
	MOVE C,CVPR
	PUSHJ P,LFSRC
	CLEARM CVPR
	SETOM CRCYC
	JRST MSINR

BSMS1:	MOVEI B,TYO
	SOUT [ASCIZ /CHEOP'S BEST AN A-B CUT/]
	MOVE ZR,BSTCNT
	SOJE ZR,[ SOUT [ASCIZ /, BUT ITS ONLY ONE TIED. 
/]
		  MOVE A,CBSVAL
		  JRST BSMS2]
	SKIPE CRCYC
	 JRST [	  SOUT [ASCIZ /, BUT ALREADY IN A RECYCLE. 
/]
		  MOVE A,CBSVAL
		  JRST BSMS2]
	SOUT [ASCIZ /, RECYCLING BACKGROUND SEARCH.
/]
	PUSHJ P,CHBLFR	;RECYCLE WITH FULL RANGE
	MOVEI T2,30.*60.
	.SLEEP T2,	;TOTAL CROCK
	SETOM CRCYC	;TRY TO AVOID INFINITE LOOP	
	JRST BSMS3

BSTPA2:	MOVEI B,TYO
	SOUT [ASCIZ /REJECTING OCM MOVE, (/]
	MOVE C,CVPR
	MOVE C,1(C)
	PUSHJ P,PMOVE
	SOUT [ASCIZ /), PLAYING INSTEAD /]
	PUSHJ P,DCRR
	MOVE A,CBSMOV
	MOVE T1,CVPR
	MOVEM A,1(T1)	;CLOBBER IN P.V.
	MOVEI C,0
	EXCH C,(T1)	;LEAVE THIS A ONE MOVE P.V. AND
	PUSHJ P,LFSRC	;FLUSH THE REST OF OLD P.V.
]
MSR1B:
HACK1E:	SKIPN A,CVPR
	JRST HACK1C
	MOVE A,1(A)
	PUSHJ P,IMMOVE	;PLAY MOVE
	 .VALUE		;SHOULDNT BE ILLEGAL BY THIS TIME
	MOVE A,GAMP
	MOVE T1,HACKVV
	MOVEM T1,GAMEV-GAME(A)	;RECORD NET POSITION VALUE
HB2D:
IFN TS,[
	SKIPGE GETTY
	PUSHJ P,DISUP
]
	MOVEI A,"\
	SKIPE WALLP
	PUSHJ P,PILPT
	MOVEI B,TYO
	PUSHJ P,TYPLM
	MOVEI A,"\
	SKIPE WALLP
	PUSHJ P,PILPT
	MOVE A,PLYN
	MOVEM A,LPSLSH	;LAST PLY PUT OUT WITH BACKSLASHES
	MOVE A,@OKINGT+1(I)
	MOVE C,@LMGST(I)
	JUMPE C,HK1F1
	PUSHJ P,DSPACE
	SOUT [ASCII /CHECK!/]
	MOVM A,HACKVV
	CAIN A,70000-2
	SOUT [ASCII /MATE!/]
IFN TS,[
HK1F1:	SKIPN TSW
	JRST HACK1F
	PUSHJ P,DSPACE
	PUSH P,B
	PUSHJ P,CLKUD
	POP P,B
	MOVE C,LRNTIM
	SUB C,EHRNM
	PUSHJ P,TSMTP
	SOUT [ASCII / IN !/]
	MOVE C,LRTIM
	SUB C,EHRTM
	PUSHJ P,TSRTP
]
IFE TS,HK1F1:
HACK1F:	PUSHJ P,CRR
	MOVEI B,TYO
	MOVEI A,7
	SKIPE BELL
	PUSHJ P,(B)		;ATTRACT GUY'S ATTENTION
	MOVE A,HACKVV
	SKIPN PPV
	JRST HACK1B
	PUSHJ P,DPT
	PUSHJ P,DCRR
	SOUT [ASCII /PRINCIPAL VARIATION
!/]
	MOVE R,CVPR
	PUSHJ P,TYPLNE
HACK1B:	SETOM DISSUP
	MOVE C,CVPR
	PUSHJ P,LFSRC
	CLEARM CVPR
HACK1A:
IFN HSCOD,[
	PUSHJ P,HSREC	;PERMANENT MOVE RECORD FOR HASH TBL SETUP
]
IFE DECTS,[
	LDB I,[100,,PLYN]
	XORI I,1	;MOVE HAS ALREADY BEEN PLAYED
	CAME I,MACCLR
	JRST CLKRC1
	MOVE A,@CLKTB(I)
	SUB A,CURCKS	;RECORD TIME FOR THIS MOVE
IFN TS, IDIVI A,3	;CONVERT TO TENTHS
	AOS B,MMTMP
	CAIL B,LTMDF
	CLEARB B,MMTMP
	MOVEM A,MMTMT(B)
	AOS MSPC	;MOVES SINCE PARAMETER CHANGE
CLKRC1:]
	MOVE T1,LFS
	MOVEI T2,0
	JUMPE T1,FSCH1
	HRRZ T1,(T1)
	AOJA T2,.-2
FSCH1:	CAIE T2,LSPCL+1
	PTTY [ASCII /FS LOST!/]
IFE DECTS,[
	SKIPE PARSW
	PUSHJ P,CCTIM	;MAYBE CHANGE PARAMETERS
]
IFN TS,	CLEARM TRYMOV	;FINISHED TRYING TO MOVE (HOPEFULLY)
	POPJ P,

HACK1C:	SKIPGE TSSW
	SKIPN HK1V
	JRST HACK1B	;JUST STAT BOARD EV (DID SETD 0)
	MOVEI B,TYO	;MATED OR STALEMATED
	MOVE R,HACKVV
	JUMPE R,SMATE
	SOUT [ASCII /
CHECKMATE
!/]
HACK1G:	MOVEI A,MNLPA
	MOVEM A,GSW
	JRST HACK1B

SMATE:	SOUT [ASCII /
STALEMATE
!/]
	JRST HACK1G

PPV:	0

HACK1L:	SKIPE C,CVPR
	PUSHJ P,LFSRC
	JRST PNORM


MSI1:	SKIPL TSSW
	JRST HKTRC1	;TRY NOT TO DISTURB STUFF IF TRACING, ETC.
	PUSHJ P,VALPRE
	MOVE T1,PLYN
	CAME T1,SETESP
	CLEARM ESTSW
	SKIPGE ESTSW
	JRST MSI2A	;USE TYPED IN ESTIMATE
	MOVE T1,GAMP
MSI1A:	CAIN T1,GAME-1
	JRST MSI2
	MOVE D,GAMEV-GAME(T1)
	CAMN D,[SETZ]
	SOJA T1,MSI1A
	SETOM GESTSW	;GOT ESTIMATE FROM GAME
MSI3:	MOVEM D,MSIBB
	PUSHJ P,RLSSET
	MOVE T1,D
	SUB D,MSIB
	ADD T1,MSIB
	MOVM T2,MSIBB
	CAIGE T2,2*PWNV
	JRST ACTS2
	MOVEI TT,0
	MOVE S,GAMP
ACTS4:	CAIN S,GAME-1
	JRST ACTS3
	LDB Q,[MPC,,(S)]
	SKIPL (S)
	SKIPGE LMGT(Q)
	JRST ACTS3
	AOS TT
	SOJA S,ACTS4

ACTS3:	SUBI TT,10.	;NUMBER OF PLYS BEFORE PANIC
	JUMPLE TT,ACTS2
	IMUL TT,T2
	TLC TT,232000
	FADR TT,TT
	FMPR TT,[.015]	;AMOUNT LOST EACH PLY
	MULI TT,400
	ASH R,-243(TT)
	SKIPL MSIBB
	MOVNS R		;WHITE AHEAD, SO GOOD FOR BLACK IF NO ACTIVITY
	MOVEM R,ACTV
ACTS2:	SKIPE GESTSW
	SKIPN MSSW
	JRST MSINR	;USE FULL RANGE
	JRST HK1E1	;USE ESTIMATE IN D,T1

MSI2A:	SETOM GESTSW
	JRST MSI2B

MSI2:	CLEARM GESTSW
MSI2B:	MOVEI D,0	;HAVE MADE NO MOVES IN GAME
	SKIPGE ESTSW
	MOVE D,EST
	JRST MSI3

MSR1:	SKIPL TSSW
	JRST MSR1B	;TRACE HACKERY
	SKIPN MSSW
	JRST MSRE
	CAMGE R,BPREV
	CAMG R,BPREV+1
	JRST MSR1A
MSRE:	PTTY [ASCII /MULTIPLE SEARCH ERROR!/]
	JRST MSR1B

MSR1A:	SKIPE C,CVPR
	PUSHJ P,LFSRC	;RECLAIM FS
	CLEARM CVPR
	MOVEM R,MSIBB	;UPDATE GUESS VALUE
IFN CHEOPS,[
	SKIPG NBKST
	 JRST MSCRC1
	MOVEI A,0	;LOOK TO SEE IF CHEOPS IS GETTING A/B TOO
	PUSHJ P,BSTP
	MOVE A,CBSVAL
	CAME A,CBALPH
	CAMN A,CBALPH
	 JRST MSCRC1
	MOVEI B,TYO
	SOUT [ASCIZ /ON MULTIPLE SEARCH, CHEOPS GETTING A-B CUT TOO. RECYCLING BACKGROUND SEARCH./]
	PUSHJ P,CHBLFR
]
MSCRC1:	MOVE D,EVMST	;MAKE FINAL SEARCH SET UP A B TO REFLECT RESULT OF ORG SEARCH
	MOVE T1,EVMST+1
	AOS C,NSRCHS
	JRST HK1E1

;	LDB I,[100,,PLYN]
;	XCT MSRT1(I)	;TRANSFER TO MSR1C IF WE LOSE
;	XCT EVMT5+1(I)
;	JRST MSRRS	;WE MATE
;	MOVE C,CVPR
;	MOVE A,1(C)
;	PUSHJ P,LFSRC
;	PUSHJ P,MMOVE

;MSRRS:	MOVE R,HACKVV
;	SKIPGE Q
;	MOVEI Q,0
;	XCT @MMSRT2(I)
;	JRST HK1E1

;MSRT1:	JUMPL Q,MSR1C
;	JUMPG Q,MSR1C

MMSRT2:	MMSRT3(Q)
	MMSRT4(Q)

MMSRT3:	HRREI T1,1(R)
	HRREI D,-1(R)

MMSRT4:	HRREI T1,1(R)
	HRREI D,-1(R)

HKOPN1:	MOVEI T2,0
	SETOM OPENF
	JRST HKOPN2

QDCOF:	2	;DEVAL VAL OF QUEEN

VALPRE:	MOVE S,[PCBAL,,OPCBAL]	;COMPUTE ALG STUFF
	BLT S,OPCBAL+4-1	;NOTE: THIS DATA ALWAYS SET UP FOR POSITION AT TOP OF TREE
	MOVE S,PCBAL
	ADD S,PNBAL
	SUB S,PCBAL+1
	SUB S,PNBAL+1
	MOVMM S,ONETBL
	MOVE S,PCBAL
	SUB S,PCBAL+1
	MOVEM S,PCRAT2
	MOVE S,PNBAL
	SUB S,PNBAL+1
	MOVEM S,PNRAT2
	MOVE S,WPNC
	MOVEM S,OWPNC
	MOVE S,BPNC
	MOVEM S,OBPNC
;	PUSHJ P,CDVLV
;	MOVEM S,ORGDSM
;	ADDM T1,ORGDSM
;	SUB S,T1
;	MOVEM S,DVLDIF

;	CLEARB TT,ACTV	;COMPUTE ADV THAT WOULD ACCRUE FOR INACTIVITY (IF ANY)
;	MOVE S,GAMP
;VALP1:	CAIN S,GAME-1	;COUNT MOVES SINCE LAST P MV OR CAPT
;	JRST VALP2
;	LDB Q,[MPC,,(S)]
;	SKIPL (S)
;	SKIPGE LMGT(Q)
;	JRST VALP2
;	AOS TT
;	SOJA S,VALP1
;
;VALP2:	SUBI TT,10.	;NUMBER OF PLYS BEFORE PANIC
;	JUMPLE TT,VALP3
;	TLC TT,232000
;	FADR TT,TT
;	FMPR TT,[.015]	;AMOUNT LOST EACH PLY
;	CAMLE TT,[.75]
;	MOVE TT,[.75]
;	MULI TT,400
;	ASH R,-243+35.(TT)
;	MOVEM R,ACTV
VALP3:	POPJ P,

RLSSET:	CLEARM WTPWSW	;SET RELATIVE SWITCHES ACCORDING TO CURRENT POS, EST IN D
	CLEARM WTPCSW	;NOTE: THIS DATA SOMETIMES SET UP FOR EXPECTED POSITION OR PREVIOUS GAME POSITION
;	CLEARM PWBSW
	MOVM T2,D
	SETOM EMTLSW
	LDB S,[430100,,D]	;SIDE AHEAD
	CAIL T2,PWNV
	JRST RLS1	;ONE SIDE AT LEAST A P AHEAD
	MOVE ZR,T2
	TLC ZR,232000
	FADR ZR,ZR	;FLOAT AMT AHEAD
	MOVE TT,PCBAL(S)
	ADD TT,PNBAL(S)
	TLC TT,232000
	FADR TT,TT
	FDVR ZR,TT
	CAML ZR,[.15]
RLS1:	CLEARM EMTLSW	;ONE SIDE A P OR 15% AHEAD
;	CLEARM ACTVSW
	CAIGE T2,PWNV
	POPJ P,
;	MOVEI ZR,1
;	SKIPN S
;	MOVNI ZR,1
;	MOVEM ZR,ACTVSW	;SIDE WHICH GAINS FROM LACK OF ACTIVITY
RLS2:	MOVE S,PCBAL
	SUB S,PCBAL+1
	MOVM T1,S
	CAIL T1,PWNV
	JRST VALPR1	;PCS UNEVEN
	MOVE S,PNBAL
	SUB S,PNBAL+1
	MOVM T1,S
	CAIGE T1,PWNV
	POPJ P,		;EVEN
	LDB T1,[430100,,S]
	XCT VALPR2(T1)	;SIDE P AHEAD WANTS TO TRD PCS
;	XCT VALPR6(T1)	;SIDE AHEAD WANTS TO KEEP P'S APT
	POPJ P,

VALPR1:	LDB TT,[430100,,S]	;TT GETS SIDE AHEAD PCS
	MOVE ZR,S
	ADD ZR,PNBAL
	SUB ZR,PNBAL+1
	XOR ZR,S
	JUMPL ZR,VALPR7	;OTHER SIDE AHEAD ENUF P'S TO COUNTER BALANCE	
	CAIL T1,5*PWNV
	JRST VALPR5	;SUFFICENTLY AHEAD PAWNS DONT MATTER
	XCT VALPR4(TT)
	JRST VALPR5	;SAME SIDE AHEAD
	XCT VALPR2(TT)	;SIDE AHEAD PCS WANTS TO TRD PCS
	XCT VALPR3+1(TT)	;AND NOT PAWNS
	POPJ P,

VALPR7:	XCT VALPR2+1(TT)	;SIDE AHEAD PCS WANTS TO TRADE NEITHER
	XCT VALPR3+1(TT)
	POPJ P,

VALPR4:	SKIPLE PNRAT2	;WHITE AHD ON PCS SKIP BLACK AHEAD ON PAWNS
	SKIPGE PNRAT2

VALPR5:	XCT VALPR2(TT)	;SUPER AHEAD, TRD PCS AND PAWNS
	XCT VALPR3(TT)
	POPJ P,

VALPR2:	AOS WTPCSW	;WHITE WANTS TO TRD PCS
	SOS WTPCSW
	AOS WTPCSW

VALPR3:	AOS WTPWSW	;WHITE WANTS TO TRD PAWNS
	SOS WTPWSW
	AOS WTPWSW

;VALPR6:	AOS PWBSW
;	SOS PWBSW



GO:	MOVE A,[JSR ERROR]
	MOVEM A,41
	MOVE P,[-PDLL,,PDL-1]
	CLEARM ICMMNT
IFE DECTS+KLNTS,[
IFE TS,[CONO 633550+APRCHN
IFE DEC,[
	MOVE A,[373737,,373737]
	MOVEM A,DISBUF
	SETOM TTYON
	SETOM TTYON+1
	CONO TTY,TTYCHN
]
IFN DEC,[CONO TTY,TTYCHN
	SETOM TTYON
]
	CONO PTP,0
	CONO PI,12377
]
]

IFN KLNTS,[
	CONO 267760	;I/O RESET, DISABLE AND CLEAR ALL FLAGS
	CONO PI,12377
	CONO PAG,600000	;TURN ON CACHE, SET EPT TO 0
]
IFN DECTS,[	CALLI
	INIT TYIC,101
	SIXBIT /TTY/
	TYOO,,TYII
	CALL [SIXBIT /EXIT/]
	OUTPUT TYOC,
	SETZM UREADF
	SETZM UTINT
	SETZM LPTINT
]
IFN CHEOPS,[
	CLEARM HINITD
	.CLOSE CHELCH,
]
IFN TS,[	.OPEN TYOC,TYOF
	.VALUE
	.OPEN TYIC,TYIF
	ERRTTY [ASCII /NO TYPE IN!/]
	.CALL [	SETZ 
		SIXBIT /SSTATU/
		2000,,SDWNTM
		2000,,SYSDBG
		2000,,SUSRS
		2000,,PARERR
		2000,,TIME
		402000,,MACHNM]
	 .VALUE
	CLEARM GETTY
	.CALL [	SETZ 
		'CNSGET
		1000,,TYOC
		2000,,SVSIZ		;VERTICAL SCREEN SIZE
		2000,,SHSIZ		;HORIZ SCREEN SIZE
		402000,,STCTYP ]	; TCTYP
	.VALUE
	.CALL [	SETZ 
		'TTYGET
		1000,,TYOC
		2000,,TTYST1
		2000,,TTYST2
		402000,,TTYSTS]
	.VALUE
	MOVE ZR,[%TSMOR,,]
	IORM ZR,TTYSTS		;TURN OFF SYSTEM MORE PROCESSING
	.CALL [	SETZ
		'TTYSET
		1000,,TYOC
		TTYST1
		TTYST2
		400000,,TTYSTS]
	.VALUE
	MOVE ZR,SHSIZ
	MOVEM ZR,LINEL		;INITIAL APPROX.  CHANGE THIS FOR TV.
	PUSHJ P,FFANTV		;TRY TO GET INTO TV MODE
	CLEARM TOPVP		;TOP OF PAGE VERTICAL POSITION
	SKIPGE TVFLG
	JRST [ 	SETOM GETTY
		MOVEI A,3
		JRST GO1C]		;HAVE TV
	.STATUS TYOC,A
	ANDI A,77
	CAIN A,2
	SETOM GETTY
	SKIPL GETTY
	JRST [	MOVEI B,PNTDIS
		JRST GO1B]
	MOVEI A,11.		;LINE FOR BOARD AT TOP. THIS CONSTANT ALSO AT FANSET+ A FEW
	MOVEM A,TOPVP
	MOVNI A,2
GO1C:	MOVEM A,FFANCY
	MOVEI B,TYO
GO1B:	MOVEM B,TRPSW
GO1:	MOVEI A,TYINT+PDLOVI+%PICLK
	.SETMSK A,
	.RDTIM A,
	MOVEM A,LRTIM
	.SUSET [.RRUNT,,A]
	MOVEM A,LRNTIM
]
IFN CHEOPS,[
	SKIPE CHEOSW		;INITIALIZE CHEOPS
	PUSHJ P,HINITC		; (ACTUALLY T11 MAP MOSTLY)
]
	MOVEI A,OCLOCK
	MOVEM A,CURCLK
	SETZB TT,B
	PUSHJ P,BDINI
IFN HSCOD,[CLEARM HSTB
	MOVE A,[HSTB,,HSTB+1]
	BLT A,HTNE+HSTB-1
]
	PUSHJ P,ARS1
	JRST MNLP2

SDWNTM:	0	;THESE VARIABLES AS READ BY SSTATU
SYSDBG:	0
SUSRS:	0
PARERR:	0
TIME:	0
MACHNM:	0

;THESE VARIABLES AS READ BY CNSGET
SVSIZ:	0	;VERT SIZE
SHSIZ:	0	;HORIZ SIZE
STCTYP:	0	;TCTYP

;THESE AS READ BY TTYGET
TTYST1:	0
TTYST2:	0
TTYSTS:	0

IFN CHEOPS,[
HINITD:	0		;-1 IF CHEOPS PAGES INSERTED, ETC
HINIBF:	-1		;-1 INITIALIZED FOR BUFFERED MODE ONLY (JUST MEMORY PAGES
			; INSERTED, CHEOPS ITSELF UNTOUCHED)

HINITC:	SKIPE HINITD
	POPJ P,		;ALREADY INITED
	.CALL [ SETZ 
		SIXBIT /OPEN/
		5000,,100001
		1000,,CHELCH
		[SIXBIT /DSK/]
		[SIXBIT /CHEOPS/]
		[SIXBIT /  LOCK/]
		SETZ [SIXBIT /CHPROG/] ]
CHLCKD:	 JRST HINITE			; FAILED; SOMEONE ELSE USING CHEOPS
	SETOM HINITD
	MOVE A,MACHNM
	CAME A,[SIXBIT /AI/]	;ONLY DO THAT STUFF ON AI...
	POPJ P,
	PUSHJ P,HINIM		;INSERT MEMORY PAGES..
	LDB A,[40600,,UNIFA]	;CHEOPS JUST POWERED UP?
	CAIE A,77		;STAR POWERS UP 77
	POPJ P,			;LOOKS LIKE ITS PROBABLY LOADED AND ALL..
	MOVEI B,TYO
	ISOUT [ASCIZ /CHEOPS RESET, IT WILL HAVE TO BE RELOADED
/]
HINIL:	AOS HINIBF		;SIGNAL REALLY GRONKED IT
	JRST HINIC		;AND REALLY GRONK IT.

HINITE:	CLEARM CHEOSW
	ERRTTY [ASCIZ /CHEOPS BUSY!!/]
	JRST MNLP2
]

IFN TS,[TYIF:	(SIXBIT /TTY/)
	SIXBIT /CHESS/
	SIXBIT /INPUT/

TYOF:	(21+SIXBIT /TTY/)
	SIXBIT /CHESS/
	SIXBIT /OUTPUT/
GETTY:	0	;-1 => GE CONSOLES WIN WIN
]

IFN DECTS,[
TYII:	BLOCK 3
TYOO:	BLOCK 3
RENTER:	SETOM QTF
	JRST 2,@JOBOPC
]

MNLP1:
IFN DSPLY,PUSHJ P,DISUP
	PTTY [ASCII /ILLEGAL!/]

MNLP:	SETZM DISSUP
IFE TS+DECTS+KLNTS,[
	CONO PI,12377
	CONO 2000+APRCHN
	CONO TTY,TTYCHN
]
	CLEARM BKF2R
IFN BOOK,[CLEARM BOOKF1
]
IFE DECTS,[
	SKIPL CLKSW
	JRST MNCL1
IFN TS,	PUSHJ P,CLKUD
	MOVE A,GSW
	MOVE B,PLYN
	MOVEI C,WCLOCK
	TRNE B,1
	MOVEI C,BCLOCK
	CAIN A,MNLPA
	MOVEI C,OCLOCK
	MOVEM C,CURCLK
]
MNCL1:
IFN TS,	CLEARM TRYMOV		;NOT TRYING TO MOVE (YET)
	MOVE P,[-PDLL,,PDL-1]
	LDB A,[100,,PLYN]
	PUSHJ P,@GSW
	JRST MNLP

MNLPA:	PUSHJ P,RMOVE
	JRST MNLP2B
	PUSHJ P,IMMOVE
	JRST MNLP1
IFN HSCOD,[
	PUSHJ P,HSREC	;PERMANENT MOVE RECORD FOR HASH TBL SETUP
]
	MOVSI A,(SETZ)
	MOVE T1,GAMP
  	MOVEM A,GAMEV-GAME(T1)
	MOVEI A,"_
	SKIPN UREADF
	PUSHJ P,TYO
	SKIPE UREADF
	SETOM DISSUP
	SKIPN PPVSW
	JRST MNLP2R
	LDB I,[100,,PLYN]
	PUSHJ P,STVL4
	MOVE A,R
	MOVEI B,TYO
	PUSHJ P,DPT
	SKIPGE PPVSW
	JRST MNLPP1
MNLPP2:	PUSHJ P,DCRR
MNLP2R:
IFN DSPLY,[
	AOSE DISSUP
	PUSHJ P,DISUP
]
	JRST MNLP

MNLP2:	PUSHJ P,LFSRES		;PLACE TO MANUALLY RESTART MAIN LOOP.  RESET FREE STORAGE.
	CLEARM ICMMNT
	MOVEI A,MNLPA
	MOVEM A,GSW
	JRST MNLP2R

MNLP2B:	SKIPGE UREADF
	SETOM DISSUP
	JRST MNLP2R

MNLPP1:	PUSHJ P,DTAB
	MOVE T1,WTDVL
	MOVE T2,BTDVL
	MOVE D,T1
	SUB D,T2
	ISOUT [.ASCII /WTDVL *U!T1 BTDVL *U!T2 DIF *U!D
/]
	PUSHJ P,ATPCC
	JRST MNLP


;SQPT1:	SQVAL+2*BW+1,,SQVAL+2*BW+2
;	SQVAL+6*BW+1,,SQVAL+6*BW+2
;
;SQPT2:	SQVAL+6*BW+1,,SQVAL+6*BW+2
;	SQVAL+5*BW+1,,SQVAL+5*BW+2
;
;SQPT3:	SQVAL+7*BW+1,,SQVAL+7*BW+2
;	SQVAL+4*BW+1,,SQVAL+4*BW+2
;
;SQPT4:	SQVAL+10*BW+1,,SQVAL+10*BW+2
;	SQVAL+3*BW+1,,SQVAL+3*BW+2
;
;SQPT5:	SQVAL+11*BW+1,,SQVAL+11*BW+2
;	SQVAL+2*BW+1,,SQVAL+2*BW+2
;

ENPP:	ENPCL+1,,ENPCL+2
	ENPCL+NPCS+1,,ENPCL+NPCS+2

WKB3=2*BW+2*BW+2+1
WKP==4
WQP==5
WK3=WKB3+1
WQ3=WK3+1
BKP=WKP+NPCS
BQP=WQP+NPCS
BK3=WK3+3*BW
BQ3=WQ3+3*BW


; USING CHEOPS IN OCM'S PMG.
;  A) CHEOPS SEARCH IN CURRENT POSITION W/ CURRENT STM
;	A1) IF MATE RESULTS, IMMEDIATELY RETURN THAT SINCE IT MUST BE CORRECT.
;	A2) IF BETTER FOR STM, MAKE SURE P.V. MOVE GETS LOOKED AT.
;	A3) IF EVEN OR WORSE FOR STM, AND PCSATS WORSE FOR STM THAN 
;	      ALTERNATIVE HE ALREADY HAS AND DEEP ENUF,
;	      CONSIDER FORWARD CUT.
;
;  B) CHEOPS SEARCH IN CURRENT POSITION W/ OTHER STM
;	B1) IF BETTER OR EVEN FOR ORIG STM, IT IS AN INDICATION THERE ARE
;	      NOT LIKELY TO BE ANY TACTICAL THREATS OUTSTANDING AGAINST
;	      ORIGINAL STM. THUS:  (IE CANTK -> -1)
;	  B1A) IF PCSATS GOOD ENUF FOR A/B CUT AND DEEP ENUF,
;		CONSIDER JUST RETURNING PCSATS.
;       B2) IF WORSE FOR STM, P.V. MOVE IS A THREAT, PARTICULARILY IF
;		B SEARCH IS WORSE FOR STM THAN A SEARCH WAS.
;		(CANTK -> 0)

LMGQ:	SKIPE BKF2R
	JRST LMGQ1
	CLEARB R,CVPR
	MOVEI Q,0
	MOVEI D,-1
	MOVEM D,POSHSA	;HASH ADR OF RETURNNED VARIATION
	POPJ P,

;VALUES RETURNNED FROM LMG
; VALUE IN R
; RELIABILITY IN Q
; HASH TBL LINK IN D AND POSHSA

LMG:	SKIPGE QTF
	JRST LMGQ
LMGQ1:	CLEARM SFB	;IN A FEEDOVER FLAG
	PUSH P,PDVLV
	PUSH P,BPREV(I)
	MOVE T,[-LLMGPL,,LMGPDL-1]
	MOVEM P,LGLMST
	AOS LMGD
	MOVE A,@OKINGT(I)
	SKIPE @LMGST+1(I)
	SKIPA C,LMGD2	;IN CHECK, SO DONT AOS LMGD2
	AOS C,LMGD2
	SUB C,HK1V
	MOVEM C,PMGLVL
IFN HSCOD,[
	MOVN Q,C
	SKIPGE Q
	MOVEI Q,0
	SKIPGE NHSW	;SUPRESS ALL HASH
	JRST LMGH5
	PUSHJ P,HASHR0
	JRST LMGH1	;POSITION FOUND
LMGH2:	CAILE Q,MHPLN
	MOVEI Q,MHPLN
	MOVSI T1,400000(Q)	;POSITION PENDING
	MOVEI J,-1	;NO HASH LINK OUT
	PUSHJ P,HASHE1
]
LMGH5:	JUMPG C,STATE1	;BELOW BASIC DEPTH, SWITCH TO PCG MODE


STATE2:
IFN DSPLY,[
	SKIPE INCSHW
	PUSHJ P,INCDU		;UPDATE BOARD ON SCREEN
]
IFN CHEOPS,[
	CLEARM LMCHAC		;CLEAR CHEOPS ACTIVE FLAG
	CLEARM CHPMV		;MOVE MADE PLAUSIBLE BY CHEOPS
	CLEARM CHCUTF		;CHEOPS CUTOFF FLAG. GETS -1 IF CHPSTP .NE. -1
	SKIPLE T1,CHEOSW	; & LMGD>CHPSTP & CHEOPS SAYS POSITION STABLE
	TRNN T1,2
	JRST LPRD1		;DONT USE CHEOPS OR DONT USE STABILITY PRED HACK
	SKIPG C,PMGAD		;DEPTH TO USE FOR A SEARCH IN PMG MODE
	JRST LPRD1
	PUSH P,T
	MOVEM C,CHXD
	MOVE R,PMGEP		;EPSILON TO APPLY TO PCSATS WHEN SETTING UP CHEOPS 
	MOVEM R,CHXIA		; IN PMG STABILITY PRED MODE
	MOVEI R,14000
	MOVEM R,CHXSTM		;ASYMETRICAL A/B AND DELTA AROUND PCSATS
	AOS PMSRCH
	PUSHJ P,ACLPS3		;MAKE CHEOPS ARG BLOCK
	PUSHJ P,ACSTRT		;START CHEOPS
	SETOM LMCHAC		;SIGNAL CHEOPS "ACTIVE"
	POP P,T
LPRD1:
]	
	CLEARM POSREL
	MOVE R,STVT1(I)
	MOVEM R,POSVAL
	MOVE R,PCBAL
	ADD R,PNBAL
	SUB R,PCBAL+1
	SUB R,PNBAL+1
	MOVEM R,PCSATS
	SUB R,@HASV(I)
	SKIPN I
	MOVNS R
	SUB R,POSBGF
	MOVEM R,AHDATS
	MOVE R,PCSATS
	SUB R,@OASV(I)
	SKIPN I
	MOVNS R
	SUB R,POSBGF
	MOVEM R,ABFATS
	HRRZ T1,GAMP
	LDB T2,[MPC,,(T1)]
	CAIGE T1,GAME
	MOVEI T2,0
	MOVEM T2,HPLMVD	;PIECE HE LAST MOVED
	AOS NPL
;	MOVE A,BSQVAL
;	SKIPGE OPNMID
;	JRST LMGSQ1
;	MOVEM A,SQVAL+2*BW+1
;	MOVE A,[SQVAL+2*BW+1,,SQVAL+2*BW+2]
;	BLT A,SQVAL+BD2-2*BW-2
;	JRST LMGSQ2
;LMGSQ1:	IRPC T,,12345
;	MOVE C,SQPT!T(I)
;	MOVEM A,-1(C)
;IFSN T,1,	MOVEI T1,7(C)
;IFSE T,1,	MOVEI T1,7+3*BW(C)
;	BLT C,(T1)
;IFSN T,5,	AOS A
;	TERMIN
;LMGSQ2:	MOVE C,CSQV	;CENTER SQUARE VALUE
;	XCT LSQBT1(I)
;	ADDM C,SQVAL+WKB3+BW+1
;	ADDM C,SQVAL+WKB3+BW+2
;	XCT LSQBT2(I)
;	ADDM C,SQVAL+WKB3+2*BW+1
;	ADDM C,SQVAL+WKB3+2*BW+2
;	MOVE C,NCSQV
;	IRP L,,[0,1,2,3,BW,BW+3,2*BW,2*BW+3,3*BW,3*BW+1,3*BW+2,3*BW+3]
;	ADDM C,SQVAL+WKB3+L
;	TERMIN
;LMG3:	MOVE C,@OKINGT+1(I)
;	MOVE T1,NKVLU
;	IRP L,,[1,-1,BW,-BW,BW+1,BW-1,-BW+1,-BW-1]
;	ADDM T1,SQVAL+L(C)
;	TERMIN
	CLEARM BPCSOP	;BIT SET FOR PIECES ON PREY
	CLEARM OSTV	;OUTSTANDING THREAT VAL (WHITE AGAINST BLACK)
	CLEARM OSTV+1	;BLACK AGAINST WHITE
	CLEARM CANTK	;FLAG -1 SAYS STM CAN TAKE PCS AS THEY STANK
	CLEARM GDNATS	;-1 => WOULD BE GOOD ENUF FOR A.B. IF COULD TAKE
	MOVE ZR,PCBAL
	CLEARM WMID
	SKIPN WQNC
	CAIL ZR,MIDMAT
	SETOM WMID		;WHITE HAS MID-GAME MATERIAL
	MOVE ZR,PCBAL+1
	CLEARM BMID
	SKIPN BQNC
	CAIL ZR,MIDMAT
	SETOM BMID
	CLEARM NPOD+1
	MOVE T1,[NPOD+1,,NPOD+2]
	BLT T1,DEFVL+NPC-1+1	;NOPD NOPDBT  DEFVL CONSEC
	MOVE T1,ENPP(I)
	MOVE T2,T1
	CLEARM -1(T1)
	BLT T1,NPCS-2(T2)	;CLEAR ENPCL
	CLEARM TRPPCF
	SKIPE D,@TPT1(I)	;CHECK KR2 FOR B'S
	XCT OURGY+1(I)
	JRST LTRP1
	SKIPL RMDTB-PIECE(D)
	JRST LTRP1
	MOVE T2,@TPT2A(I)
	XCT TPT2(I)
	JRST LTRP2	;OUR P AT N3
	MOVE T2,@TPT2B(I)
	XCT TPT2(I)
	JRST LTRP4	;OUR P AT N2
LTRP1:	SKIPE D,@TPT4(I)	;QR2
	XCT OURGY+1(I)
	JRST LTRP3
	SKIPL RMDTB-PIECE(D)
	JRST LTRP3
	MOVE T2,@TPT5A(I)
	XCT TPT2(I)
	JRST LTRP5
	MOVE T2,@TPT5B(I)
	XCT TPT2(I)
	JRST LTRP4
LTRP3:	MOVE B,LGMST2(I)

LMG5:	SKIPE A,PIECEL(B)	;OUR PIECES
	SKIPGE RPIECE(B)	;KING 
	JRST LMG4
LMG5A:	SKIPN TT,@LMGST+1(I)
	JRST LMG4		;NOT ATTACKED
	SKIPN @LMGST(I)
	JRST LMG5F3	;NOT DEFENDED AT ALL
	PUSHJ P,DFLATA		;ASSUME PINS ON DEFENDERS (OUR PCS) HOLD
	JUMPE C,LMG5F1	;NOT EFFECTIVELY DEFENDED (HE MUST BE PINNED)
LMG5F2:	MOVE S,@LMGST(I)
	SOJN S,LMG5E
	AOS NPOD(C)
	MOVEI T1,1	;PIECE DEFENDED ONCE AND ATTACKED RECORD WARNING
	DPB T1,NPODT(B)
LMG5E:	MOVN S,PVALUE(D)
	ADD S,PVALUE(B)
	JUMPG S,LMG5G
	MOVE TT,@LMGST+1(I)
	SOJE TT,LMG4R
	ADD S,PVALUE(C)
	JUMPLE S,LMG4R
	MOVE W,@LMGST(I)
	SOJG W,LMG5B2	;DEFENDED TWICE OR MORE
LMG5B:	CAMLE S,PVALUE(B)
	MOVE S,PVALUE(B)	;EN PRISE
LMG5C:	MOVEM S,ENPCL(B)	;SAVE EN PRISE VALUE FOR USE AT LMGCD
	ADDM S,@OSTVP+1(I)	;HIS THREATS AGAINST US
LMG5C1:	SKIPE PINT(B)
	JRST LMG5D
	PUSHJ P,TRAPP
	SKIPL TRPF
	LSH S,-1
LMG5D:	MOVEM S,DEFVL(B)
	MOVEI T2,1
	DPB T2,PNTB(B)
LMG4:	AOBJN B,LMG5

	MOVE B,LGMST2+1(I)	;HIS PCS
LHPC1:	SKIPE A,PIECEL(B)
	SKIPN T1,@LMGST(I)
	JRST LHPC2	;NOT EXISTANT OR NOT ATTACKED
	SKIPN @LMGST+1(I)
	JRST LHPC3	;NOT DEFENDED BY HIM
	PUSHJ P,AFLATA
	JUMPE D,LHPC3	;HIS ONLY DEF PINNED
	MOVE T2,@LMGST+1(I)
	SOJN T2,LHPC2	;DEFENDED BY OTHER THAN ONE
	MOVEI T1,1
	DPB T1,HNPODT(B)
	AOS NPOD(D)
LHPC2:	MOVN S,PVALUE(C)	;OUR ATTACKER
	ADD S,PVALUE(B)
	JUMPG S,LHPC4	;WE'RE ATTACKING HIM WITH LESS
	MOVE TT,@LMGST(I)
	SOJE TT,LHPC5	;THAT WAS OUR ONLY ATTACK, SO HE'S NOT E.P.
	ADD S,PVALUE(D)	;HIS FIRST DEFENDER
	JUMPLE S,LHPC5	;HE WOULD BE OK EVEN IF HE LOST PC AND FIRST
			;DEFENDER COMPLETELY
LHPC3:
LHPC6:
LHPC7:	MOVE S,PVALUE(B)	;DECLARE PIECE E.P. SINCE WE DONT
LHPC8:	ADDM S,OSTV(I)	;FEEL LIKE FIGURING IT OUT ANY MORE
LHPC5:	AOBJN B,LHPC1

	MOVE A,@OKINGT(I)
	CLEARM CANMV
	SKIPN @OSTVP+1(I)	;SKIP ON THREATS OUTSTANDING
	SKIPE @LMGST+1(I)	;SKIP UNLESS IN CHECK
	JRST PCGM5A	;CAN'T TAKE
	SETOM CANTK
	SKIPE T1,CANCSW
	CAMLE T1,LMGD
	JRST PCGM5	;NO CANCUT S THIS LVL.
	MOVE R,PCSATS
	MOVE Q,EVMT5A(I)
	SUBI R,40	;ALLOW FOR POSSIBLE WEAK P S ETC
	SKIPE I
	ADDI R,100
	XCT PCGABT(I)
	JRST PCGM2	;NOT GOOD ENUF FOR A.B. CUT
	SETOM GDNATS
	SKIPL PMGLVL
	JRST PCGM1	;CUT OFF
PCGM2:	SKIPGE PMGLVL
	JRST PCGM5
IFN CHEOPS,[
PCGM2A:	SKIPGE LMCHAC	;WAIT FOR A SEARCH TO BE COMPLETED
	 JRST [ PUSH P,R
		PUSHJ P,LCSSTP
		POP P,R
		JRST PCGM2A]
	SKIPL CANTK
	JRST PCGM5	;CHEOPS FOUND COULDNT TAKE.. 
]
	MOVEI Q,0	;LOOKS LIKE STM CAN TAKE PCS AS THEY STAND..
	XCT EVMT8(I)
	PUSHJ P,BPRVS	;UPDATE ALPHA BETA VARS
	MOVEM Q,POSREL
	MOVEM R,POSVAL
PCGM5:	CLEARM PCSWSM	;PIECES WITH SAFE MOVES
	MOVE A,@OKINGT(I)
	MOVE B,LGMST2(I)
	MOVEI Q,LMGR
	CLEARM TEFAL	;TOTAL EFFORT ALLOCATED
	MOVEM Q,LMQS
	CLEARM NCKF
	SKIPE C,@LMGST+1(I)
	JRST LMG1	;IN CHECK

LMG2:
IFN CHEOPS,[
	SKIPE LMCHAC	;CHEOPS ACTIVE?
	 PUSHJ P,LCSC	;TEST IF CHEOPS READY, IF SO, ADVANCE STATE AND STUFF
]
	CLEARM NSMVS	;NO. SAFE MOVES
	SETOM CDVCF	;CURRENT DEV VALUE COMPUTED FLAG
	SKIPE A,PIECEL(B)
	PUSHJ T,@LMGT(B)
	SKIPE NSMVS
	AOS PCSWSM
	AOBJN B,LMG2

LMG2E:	SKIPN @NKM(I)
	JRST LMCAS	;TRY CASTLING
LMCAS3:
IFN CHEOPS,[
LCSW1:	SKIPGE LMCHAC	;WAIT FOR A SEARCH TO BE COMPLETED
	 JRST [	PUSHJ P,LCSSTP		;CHEOPS STILL RUNNING, ADVANCE STATE.
		JRST LCSW1]		; (HCHGV WILL WAIT TILL CHEOPS THRU)
]
	MOVEI T1,0
	EXCH T1,BKF2R
	JUMPN T1,(T1)
;	JRST TD1	;OLD STYLE DEBUGGING DISPLAY
IFN DSPLY,[
	SKIPE WALLP
	JRST TDISPL
]
TD7:	JRST EVM

LMGXR:	SOS LMGD	;EXITING VIA RETURN IN BKF2R AND NOT COMMING BACK
	MOVE A,@OKINGT(I)
	SKIPN @LMGST+1(I)
	SOS LMGD2	;DONT SOS UNLESS IT WAS AOS ED
	POPJ P,

LPEXIT:	PUSHJ P,LMGXR
	MOVE P,LGLMST	;SET BKF2R TO HERE TO CAUSE PMG TO JUST POPJ
	POP P,BPREV(I)	; SIMILAR TO EVM5B1
	POP P,PDVLV
	CLEARB R,CVPR	;SIMILAR TO LMGQ
	MOVE Q,0
	MOVEI D,-1
	MOVEM D,POSHSA
	POPJ P,

IFN CHEOPS,[
;IF LMCHAC .NE. 0, PUSHJ HERE OCCASIONALY TO SEE IF CHEOPS NEEDS TENDING.
LCSC:	SKIPG HBMEM+CBABL	;CHEOPS READY?
	 POPJ P,		; NOPE
	PUSH P,A
	PUSH P,B
	PUSH P,Q
	PUSH P,T
	PUSHJ P,LCSSTP		;"STEP" CHEOPS SEARCHER
	POP P,T
	POP P,Q
	POP P,B
	POP P,A
	POPJ P,

LCSSTP:	PUSHJ P,HCHGV		;GET CHEOPS VALUE
	MOVE ZR,CHXSTA		;SUM IN STATISTICS COUNT
	ADDM ZR,CPSTA
	AOS CPSTAC		;COUNT OF NUMBER OF FROBS SUMMED IN.
	SKIPL LMCHAC
	JRST LCBSC		;B SEARCH COMPLETED
LCASC:	MOVM ZR,R		;A SEARCH COMPLETED
	CAIL ZR,10000-40
	JRST LCASC1		;SOMEBODY MATES!
	MOVE Q,R
	SUB Q,CHXIMB		;INITIAL WOOD ON BOARD
	JUMPE Q,LCASC2		;NO GAIN FOR ANYBODY
	XCT (I)[  JUMPG Q,LCASC3 ;XFER IF BETTER FOR STM
		  JUMPL Q,LCASC3]
LCASC5:	AOS CPWSTM		;DROP THRU ON WORSE FOR STM
	CLEARM CANTK		;CERTAINLY CANT TAKE PCS AS THEY STAND
LCBSS:	CLEARM LMCHAC		;START B SEARCH (NULL FOR NOW)
	POPJ P,

LCBSC:	.VALUE			;B SEARCH COMPLETED?

LCASC1:	XCT (I)[  JUMPL R,LCASC5 ;XFER IF WE GET MATED
		  JUMPG R,LCASC5]
	AOS CPMATD		;WE MATE
	SKIPE BKF2R
	JRST LCBSS		;REALLY GENERATING MOVES OR SOMETHING...
	PUSHJ P,HOCMMV
	CLEARM CVPR
;	MOVE ZR,LMGD
;	SOJN ZR,LCASC4
	PUSH P,R		;NEED AT LEAST ONE MV OF P.V.
	SKIPN C,CHXPV1
	.VALUE			;MATE WITH NO P.V.?
	HRRZ A,C
	HLRZ B,C
	PUSHJ P,TMOVE
	.VALUE			;MOBY MATING MOVE ILLEGAL?
	PUSHJ P,RECMP		;"RECORD" MOVE
	PUSHJ P,UNMOVE		;UNMAKE IT
	POP P,R
LCASC4:
	MOVE P,LGLMST		;TRAP OUT AND RETURN VALUE
	MOVEI Q,0
	JSP ZR,PCGM3

LCASC2:	AOS CPEVEN		;COMPLETELY STABLE
	SKIPL T1,CHPSTP
	CAMLE T1,LMGD
	JRST LCBSS		;NOT STOP MODE OR NOT DEEP ENUF
	SETOM CHCUTF
	JRST LCBSS

LCASC3:	AOS CPBSTM		;BETTER FOR STM
	SKIPE T1,CHMPM
	CAMGE T1,LMGD
	JRST LCBSS		;DONT HACK PLAUSIFING CHEOP'S MOVES
	MOVN ZR,Q		;Q HAS DELTA
	XCT (I) [ CAME Q,CHXIA	;PV INVALID DUE TO A/B CUTTOFS?
		  CAME ZR,CHXIA] ;CHXIA HAS DELTA TO WHICH A/B WERE SET
	SKIPN C,CHXPV1
	JRST LCBSS
	HLRZ A,C
	SKIPN PIECEL(A)
	.VALUE
	MOVEM C,CHPMV		;MOVE CHEOPS STRONGLY SUGGESTS
	JRST LCBSS
]


IFN HSCOD,[
LMGH1:	PUSHJ P,HHVC
	JRST LMGH2	;DATA NOT SIG
	HRRZM T2,POSHSA
	MOVE T1,LMGD
IFN CHEOPS,[
	SKIPE CRCYC
	JRST [	CAIE T1,2	;IN CHEOPS RECYCLE
		JRST .+1
		LDB ZR,[HTVCOD,,HSTBV(T2)]	;AT TOP LEVEL. IS THIS MOVE IN OR OUT?
		CAIN ZR,5
		JRST LMGH5	;IN, PROCEED TO SEARCH.
		CAIN ZR,6
		MOVEI J,2	;OUT, RETURN IMMEDIATELY SPECIAL SIGNAL (MOVED TO Q BELOW)
		JRST .+1] 		
	CLEARM CVPR
	AOS NHMCH
	MOVE Q,J
	AOS HFLT(T1)
	MOVE D,POSHSA
	JSP ZR,EVM5B2
]
.ELSE	JRST LMGH5
]

LMG5F3:	PUSHJ P,DFLATA	;LOAD D WITH HIS LEAST VAL ATTACKER
	JRST LMG5F

LMG5F1:	MOVE T1,@LMGST+1(I)
	SOJG T1,LMG5F	;MORE THAN ONE ATTACKER
	SKIPGE RPIECE(D)
	JRST LMG4	;ONLY ATTACKER IS K PIN DOESNT MATTER
	PUSH P,B
	PUSH P,D
	MOVE B,D	;DISABLE HIS FIRST GUY FOR PURPOSES OF PINNING
	PUSHJ P,DFLATA
	POP P,D
	POP P,B
	JUMPE C,LMG5F	;THAT DIDNT MAKE OUR DEFENDER "APPEAR"
	JRST LMG5F2	;FIRST ATTACKER WAS PINNING


LMG5G:	MOVE T2,@LMGST+1(I)
	CAMLE T2,@LMGST(I)	;SKIPN ON WE WILL RECAPTURE (APPROXIMATALLY)
LMG5F:	MOVE S,PVALUE(B)
	MOVEM S,ENPCL(B)
	ADDM S,@OSTVP+1(I)
	CAML S,PVALUE(D)
	MOVE S,PVALUE(D)	;PIECE WORTH MORE THAN ATTACKER SO MOST DEFENSE
	JRST LMG5C1	;CAN DO IS RECPATURE

LMG5B2:	MOVEM S,LMG5T1	;CAN ESCAPE WITH THIS LOSS AT WORSE
	PUSHJ P,F2LA
	JUMPE T1,LMG5B	;DEFENDERS PINNED
	SUB S,PVALUE(T2)
	JUMPL S,LMG5B4	;OUR SIDE AHEAD AFTER CAPTURE OF 2ND ATTACKER
			;NOT ENPRISE UNLESS MORE THAN 2 ATTACKERS
	SOJG TT,LMG5B3	;TRANSFER ON MORE THAN 2 ATTACKERS
LMG5B5:	CAML S,LMG5T1
LMG5B3:	MOVE S,LMG5T1
	JRST LMG5B

LMG5B4:	SOJE TT,LMG4R	;2 ATTACKERS NOT E P
	ADD S,PVALUE(T1)
	JUMPLE S,LMG4R
	JRST LMG5B5

LHPC4:	MOVE TT,@LMGST(I)
	SOJE TT,LHPC8	;THIS OUR ONLY ATTACK AND HE CAN RECAPT
	JRST LHPC7

LTRP2:;	MOVEI S,100	;ALREADY GOT HIM TRAPPED ZAP SQVAL OR KR1+KR2
;	ADDM S,@TPT6B(I)
	JRST LTRP1

LTRP4:	SETOM TRPPCF
	JRST LTRP3

LTRP5:;	MOVEI S,100	;ZAP QR1 QR2
;	ADDM S,@TPT6D(I)
	JRST LTRP3

BBS==2*BW+1	;OFFSET FROM ARRAY BEG TO KR1

TPT1:	BOARD+BBS+BW	;PNTR TO KR2
	BOARD+BBS+6*BW

TPT2:	SKIPGE LGLMST-PIECE(T2)	;SKIP ON NOT OUR P
	SKIPGE SNFBP-PIECE(T2)

TPT2A:	BOARD+BBS+2*BW+1	;PNTR TO KN3
	BOARD+BBS+5*BW+1

TPT2B:	BOARD+BBS+BW+1	;PNTR TO KN2
	BOARD+BBS+6*BW+1

TPT4:	BOARD+BBS+BW+7	;PNTR TO QR2
	BOARD+BBS+6*BW+7

TPT5A:	BOARD+BBS+2*BW+6	;PNTR TO QN3
	BOARD+BBS+5*BW+6

TPT5B:	BOARD+BBS+BW+6	;PNTR TO QN2
	BOARD+BBS+6*BW+6

;TPT6B:	SQVAL+BBS+BW	;SQVAL KR2
;	SQVAL+BBS+6*BW

;TPT6D:	SQVAL+BBS+BW+7	;QR2
;	SQVAL+BBS+6*BW+7

TRPPCF:	0	;-1 IF B MAY BE TRAPPED BY P-N3

LMG4R:	MOVE S,MSIBB
;	XCT LMG4T(I)
	JRST LMG4
;	MOVN S,PVALUE(D)
;	ADD S,PVALUE(B)
;	JUMPL S,LMG4
;	MOVE S,PCBAL	;THREATENED WITH TRADE AND BEHIND
;	MOVE ZR,S
;	SUB ZR,PCBAL+1
;	ADD S,PCBAL+1
;	SUB S,PVALUE(B)
;	SUB S,PVALUE(B)
;	MOVEM ZR,LRH3	;TEMP
;	IMUL ZR,PCRAT1
;	IDIVM ZR,S
;	SUB S,LRH3
;	MOVEM S,ENPCL(B)
;	JRST LMG4

;LMG4T:	CAMLE S,[-PWNV]
;	CAIGE S,PWNV

PCGM5A:	XCT PCGABT(I)	;CANT TAKE, BUT SET UP GDNATS ANYWAY
	JRST PCGM5
	SETOM GDNATS
	JRST PCGM5

PCGM1:			;WOULD LIKE TO FORW CUT, ALLOWING STM TO TAKE PCSATS-40
IFN CHEOPS,[
PCGM1A:	SKIPE LMCHAC
	 JRST [ PUSH P,R
		PUSH P,Q
		PUSHJ P,LCSSTP
		POP P,Q
		POP P,R
		JRST PCGM1A]
	SKIPL CANTK
	JRST [  AOS CPCTS	;CANCUTS CHEOPS STOPPED
		JRST PCGM5]	;CHEOPS CLEARED CANTK, SO CANT TAKE
]
	AOS CANCUT	;# CAN TAKE CUTS
	CLEARM CVPR
PCGM3:	SKIPGE SFB
	AOS MCFB	;THIS A FEEDOVER
	SKIPL D,HSADR	;ENTER HERE IF CHEOPS RETURNS MATE VALUE (CVPR SET UP TO
	SKIPGE T1,NHSW	; MATING MOVE)
	JRST PCGF1
	JUMPE T1,PCGF2
	LDB T1,[HTVCOD,,HSTBV(D)]
	CAIE T1,4
	JRST PCGF1
	MOVE T1,@STVL5T(I)
	DPB T1,[HTVCOD,,HSTBV(D)]
	HRRM R,HSTBV(D)
PCGF1:	JSP ZR,EVM5B2


PCGF2:	CLEARM HSTB(D)
	AOS HASHS
	MOVNI D,1
	JRST PCGF1


PCGABT:	CAMGE R,BPREV+1
	CAMLE R,BPREV


LMCAS:	PUSH P,T
	MOVE T,LGMST1(I)
	PUSHJ P,LKCAS
	JRST LMCAS1
	POP P,T
	PUSH P,[376]
	PUSH P,[1401]
	PUSH P,[0]
	PUSH P,[0]
	PUSH P,T
LMCAS1:	MOVE T,LGMST1(I)
	PUSHJ P,LQCAS
	JRST LMCAS2
	POP P,T
	PUSH P,[377]
	PUSH P,[1400]
	PUSH P,[0]
	PUSH P,[0]
	JRST LMCAS3

LMCAS2:	POP P,T
	JRST LMCAS3

NKM:	NMOVES+WKING-PIECE
	NMOVES+BKING-PIECE


LDPN1:	TLNE D,777000
	JSP TT,LDPN6
LDPBS:	TLNE D,777
	JSP TT,LDPN6
	TRNE D,777000
	JSP TT,LDPN6
	TRNE D,777
	JSP TT,LDPN6
	JRST (W)

LDPN6:	LDB C,MMP3T1-LDPBS(TT)		;GET ONEBLK ENTRY
	MOVE T1,@LDPT1-LDPBS1(W)	;GET DIRECTION
	MOVE J,BOARD(C)			;FETCH CENTER GUY
	XCT OURGYJ(I)
	JRST LDPN7			;HIS GUY, POSSIBLE DISCOVERY.
	SKIPN S,PINT-PIECE(J)
	JRST (TT)
	LDB T2,RDATS(T1)
	XCT RMOY6+1(I)
	JRST (TT)
LDPN5:	LDB C,[PINBS,,1(S)]	;STOPPING SECOND LINE ON OUR PIECE
	CAMN C,A
	JRST LDPN4
	HRRZ S,(S)
	JUMPN S,LDPN5
	JRST (TT)

LDPN4:	RC *M!J PINNED TO ME, SUBI R,40
	JRST (TT)

LDPN7:	LDB T2,RDATS(T1)	;GET PIECE WHICH MAY GET DISCOVERED
	XCT RMOY6+1(I)
	JRST (TT)		;OUR GUY, NO DICE.
	SKIPGE LMGT-PIECE(J)
	 JRST [	;IF PAWN HAS CAPT AVAIL, IT DEFINITELY THREATENS TO CLEAR.
		XCT (I) [ MOVEI S,-BW(C)  ;GET SQUARE AHEAD OF PAWN
			  MOVEI S,BW(C)]
		SKIPLE J,BOARD+1(S)
		XCT OURGYJ(I)
		SKIPA
		JRST .+1	     ;PAWN HAS CAPTURE
		SKIPLE J,BOARD-1(S)
		XCT OURGYJ(I)
		SKIPA
		JRST .+1
		SKIPE BOARD(S)
		JRST (TT)	;PAWN BLOCKED, SO NO DISCOVERY
		XCT (I) [ CAIE T1,3  ;CENTER PIECE HIS PAWN. CAN IT REALLY MOVE OUT OF THE WAY?
			  CAIE T1,2 ]
		JRST .+1
		JRST (TT)]	;NO DISCOVERY, SINCE ITS FRONTWISE FOR PAWN.
	MOVE S,PVALUE(T2)
	CAMGE S,PVALUE(B)
	RC POSSIBLE DISCOVERY BY *P!T2, SUBI R,100
	JRST (TT)

LDPT1:	,MMP3T3-LDPBS(TT)
	0
	,MMP3T4-LDPBS(TT)

EVM:	SKIPGE PMGLVL
	JRST EVMA
	PUSHJ P,CDVLV	;GOING TO STATEV THIS TIME
	SUB S,T1
	MOVEM S,PDVLV
EVMA:	PUSH P,P	;-26 MUST BE TOP
EVMET==-26
	PUSH P,[0]	;-25 NUMBER MOVES INVESTIGATED SINCE LAST
			;BEST SO FAR (RH)
			;NUMBER MOVES INVESTIGATED (LH)
			;(ACTUALLY INVESTIGATED, FC ETC DONT COUNT)
EVNMS==-25
	PUSH P,[,-1]	;-24 HASH ADR OF BEST SO FAR
ESMBHA==-24
	PUSH P,LMGD2	;DEPTH AT START
ESLD2==-23
IFE CHEOPS,	PUSH P,[0]	;FREE
  .ELSE [	PUSH P,CHPMV	;CHEOPS SUGGESTED MOVE
	  ECHPMV==-22  ]
	MOVE T1,PCSWSM
	MOVE S,LMGD
IFN KILLH,SETZM ABFTC(S)
	LSH T1,1
	CAMLE T1,SBR-1(S)
	MOVE T1,SBR-1(S)
	LSH T1,-1
	PUSH P,T1	;DISTINCT PIECES THAT WANT TO MOVE
ESNPM==-21
	PUSH P,[0]
ESPHI==-20	;BIT SET FOR PIECE IF HAVE INVESTIGATED MOVE BY THAT PIECE
	MOVE T1,EVMET-ESNLM+1(P)
	SUB T1,LGLMST
	HRRZS T1
	IDIVI T1,NWDPM
	LSH T1,1
	MOVNS T1
	CAMGE T1,[-NOCM*2]
	SKIPA T1,[JRST OPNS2]
	HRLI T1,(MOVEI T1,)
	PUSH P,T1	;MOVEI T1,-2*NUM LEGAL MOVES OR
ESNLM=-17		;JRST OPNS2 IF LGL MVS > NOCM
	HRRZ T1,LGLMST
	PUSH P,T1	;POINTER TO BEG OF MOVES
ESMLP=-16
	PUSH P,FDCV	;CUTOFF VALUE ON FEEDOVER INVESTIGATION
ESFCV==-15
	PUSH P,POSREL	;-14 CURRENT RELIABILITY CODE
ESMR=-14
	PUSH P,LGLMST	;-13 POINTER TO LAST MOVE INVESTIGATED
ESMTP=-13
	PUSH P,HSADR	;ADR OF CURRENT POS IN HASH TABLE
ESMHA=-12
	PUSH P,BPCSOP	;SAVE PCS ON PREY FOR LINE ANALISYS
ESPOP=-11
	PUSH P,NCKF	;NO. SAFE CHECKS
ESNFK=-10
	PUSH P,SFB	;IN A FEEDOVER FLAG
ESFBL=-7
	PUSH P,[0]	;PRINCIPAL VARIATION SO FAR-6
	PUSH P,[0]	;BEST MOVE-5
	PUSH P,STVT1(I)	;-4 UNMUNGED SIT VALUE
	PUSH P,POSVAL	;INITIAL SIT VALUE -3
	PUSH P,I	;-2
	PUSH P,LGLMST	;-1
	PUSH P,SBR-1(S)	;BASIC SEARCH WIDTH AS FUNCTION OF DEPTH 0

EVM4:	SOSGE (P)
	JRST EVM5D
IFN CHEOPS,[
	SKIPE T1,ECHPMV(P)
	JRST ECHMV1		;CHEOPS SAYS THIS WINS MATERIAL .. 
]
	MOVEI J,[ASCIZ /BASIC SORT
/]
EVM5D3:	MOVNI R,2
	XCT ESNLM(P)
	HRRZ T2,EVMET(P)	;PICK UP PNTR TO END OF MOVES
	JRST OPNSRT(T1)

OPNS2:	MOVE T1,EVMET(P)	;CHECK MOVES OFF TOP IN EXCESS OF NOCM
	SUB T1,ESMLP(P)
	HRRZS T1
	IDIVI T1,NWDPM
	MOVE T2,ESMLP(P)	;PNTR TO BEG
OPNS3:	CAMGE R,2(T2)
	JSP Q,SRTSET
	CAIG T1,NOCM+1
	JRST OPNS4
	ADDI T2,NWDPM
	SOJA T1,OPNS3

SRTSET:	MOVEI C,@-2(Q)
	MOVE R,(C)
	JRST @Q

NOCM==50.	;NUMBER INTERATIONS IN OPEN SORT
;NWDPM==4	;NUMBER WORDS PER MOVE ON PDL
OPNS4:	MOVEI T1,2+NWDPM(T2)	;NEXT LCN THAT WOULD HAVE BEEN COMPARED BY OPNS3
	HRRZ T2,EVMET(P)
	CAIE T1,@OPNS4A
	PTTY [ASCII /SEARCH ERROR!/]
OPNS4A:REPEAT NOCM,[
	CAMGE R,-<NOCM-.RPCNT>*NWDPM+2(T2)
	JSP Q,SRTSET
]
NWPOS==2
OPNSRT:

	JUMPL R,EVM5
	SUBI C,2
EVM5DX:
EVHSH2:	MOVEM C,ESMTP(P)
	SETOM 2(C)
	SKIPGE 3(C)
	SOS ESNFK(P)	;NUMBER OF "CHECKING" MOVES REMAINING UNINVESTIGATED
EVFC2:	MOVE T1,[1,,1]
	ADDM T1,EVNMS(P)
	SKIPE SELSHW
	 JRST [	IFN DSPLY, PUSHJ P,INCDU   ;DISPLAY SELECTION AND REASON
		MOVEI B,TYO
		MOVE A,1(C)
		PUSHJ P,PPMMV
		SOUT (J)
		PUSHJ P,TYI
		JRST .+1]
	HRRZ A,1(C)
	HLRZ B,1(C)
	CLEARM CPCDVL
	CAIL A,375
	JRST EVM5E1
	LDB T1,EVMPB(B)
	JUMPN T1,EVM5E2	;SECOND OR MORE MOVE FOR THIS PIECE INVESTIGATED
	MOVEI T1,1	;NEW PIECE MOVING
	DPB T1,EVMPB(B)
	SOS ESNPM(P)
EVM5E2:	SKIPE D,BOARD(A)
	JRST EVM5E4
	CAMN A,GHLOC
	SKIPL LMGT(B)
	JRST EVM5E1
	MOVE D,@EVMT13(I)
EVM5E4:	MOVE T1,PDV-PIECE(D)
	IMUL T1,PINVF-PIECE(D)
	MOVEM T1,CPCDVL
EVM5E1:	PUSHJ P,TMOVE
	JRST EVM4A	;MOVE ILLEGAL
	XORI I,1
	PUSH P,BPREV
	PUSH P,BPREV+1
	PUSHJ P,LMG
;RETURN RELIABILITY IN Q 1 ACTUAL VALUE MAY BE NUMERICALLY >, -1 <
	POP P,T1
	POP P,T2
	CAMN T1,BPREV+1
	CAME T2,BPREV
	ERRTTY 2,[ASCIZ /A B RESTORE LOSSAGE/]
	LDB T1,[100,,PLYN]
	CAME T1,I
	ERRTTY 2,[ASCIZ /I LOSES AT EVM5E1/]	
	XORI I,1
	CAIN Q,2	;SPECIAL SIGNAL MOVE MARKED OUT BY CHEOPS?
	 JRST EVM6C	; YES COMPLETELY FLUSH IT.
	SKIPN LNSW
	JRST LNAL1
	MOVEI T1,0
	CLEARM LNCP+1
	MOVE A,[LNCP+1,,LNCP+1+1]
	BLT A,LNCP+NPC-1
	SKIPN T2,CVPR
	JRST LNAL2
LNAL4:	SKIPL 1(T2)
	JRST LNAL3	;NOT CAPTURE
	LDB TT,[MPTK,,1(T2)]
	SETOM LNCP(TT)
	MOVE S,RPVAL(TT)
	SKIPGE PIECE(TT)
	MOVNS S
	ADD T1,S
LNAL3:	SKIPE T2,(T2)
	JRST LNAL4
	MOVE T2,CVPR
LNAL2:	XCT LNT1(I)	;TRANSFER TO LNAL1 ON AHEAD OR EVEN
	MOVMS S
	LSH S,-1
	LDB T1,[MPC,,1(T2)]	;WOULD LIKE TO PREVENT HIS MOVE
	MOVE T1,PIECEL(T1)
	HRRZ C,ESMLP(P)
	MOVE J,(T2)
LNAL5A:	SKIPGE 2(C)
	JRST LNAL5
	HRRZ TT,1(C)
	CAME TT,T1
	JRST LNAL6
	MOVEI D,20
	ADDM D,2(C)
LNAL6:	HLRZ TT,1(C)
	SKIPL LNCP(TT)
	JRST LNAL5
	MOVEI D,20
	TLNE J,BMTHR+BIDSF
	MOVE D,S
	ADDM D,2(C)
LNAL5:	ADDI C,NWDPM
	CAIL C,EVMET(P)
	JRST LNAL5A
LNAL1:	MOVE A,R
	CAMLE R,[-67000]
	CAIL R,67000
	JRST MVD3C	;DONT BUGGER ON FLUSH OR MATE
;	JUMPN Q,MVD3
;
;;TIME TO DO CLEVER DIDDLING
;
;	PUSH P,A
;	MOVE C,ESMTP-1(P)
;	LDB T1,[220100,,3(C)]
;	SKIPE T1
;	XCT EVMT6(I)	;MOVE WAS BAD POSITIONALLY
;	SKIPE CVPR
;	SKIPN C,@CVPR
;	JRST MVD3Y
;	SKIPL A,1(C)	;"'REPETITION'"
;	TRNE A,7
;	JRST MVD3Y
;	MOVE C,@GAMP
;MVD3B:	JUMPL C,MVD3Y
;	LDB T1,[MPTO,,A]
;	XOR A,C
;	TLNE A,176000	;SAME PIECE?
;	JRST MVD3Y
;	MOVE T2,PLYN
;	CAIGE T2,20
;	XCT EVMT12(I)
;	LDB A,[MPO,,C]
;	MOVE S,A
;	CAMN T1,A
;	JRST MVD3A
;	LDB B,[MPC,,C]
;	MOVE A,T1
;	MOVE T1,PIECEL(B)
;	ADDI T1,BOARD
;	PUSH P,(T1)
;	SETZM (T1)
;	HRRM T1,MVD3Z
;	PUSHJ P,LGLMP2	;IN ONE LEGAL MOVE
;	JRST MVD3Z
;	XCT EVMT10(I)
;	JRST MVD3Z
;MVD3A:	XCT EVMT11(I)	;BACK TO SAME SQUARE
;	JRST MVD3Y
;MVD3Z:	POP P,.
;MVD3Y:	POP P,A

MVD3:
;	SKIPN MVDS
	SKIPE WALLP
	PUSHJ P,MVD1
MVD2:
	XCT EVMT2(I)
	JRST EVM5C	;REJECT WHOLE BRANCH
	XCT EVMT7A(I)	;TRANSFER (TO EVM6D) ON FLUSH AT LOWER LEVEL IE 
			;POSITION MAY BE EVEN LESS FAVORABLE

	XCT EVMT5(I)
	AOS (P)	;MOVE LED TO MATE
	XCT EVMT1(I)
	JRST EVM6
EVM6A:	SKIPE C,CVPR
	PUSHJ P,LFSRC
EVM6C:	PUSHJ P,UNMOVE
EVM4A:	JRST EVM4

EVM6D:
;	SKIPE -5(P)	;SKIPE IF FIRST LEGAL MOVE INVEST AT THIS LEVEL
	XCT EVMT1(I)	;SKIP UNLESS VALUE BEST SO FAR
	JRST ESL1A	;WILL EVENTUALLY BE FLUSHED BUT RECORD SO BEST SHOWS IN PRINTOUT
EVM6F:	XCT EVMT5(I)
	AOS (P)	;LED TO MATE
	JRST EVM6A

EVM5D:	IFN CHEOPS,[
	SKIPE CRCYC
	 JRST [	MOVE J,LMGD
		CAIE J,1
		JRST .+1
		MOVEI J,[ASCIZ /CHEOPS RECYCLE, CONSIDER ALL
/]
		JRST EVM5D3]
]
	SKIPLE ESNPM(P)	;REGULAR WIDTH EXHAUSTED
	 JRST [	MOVEI J,[ASCIZ /NEED TO CONSIDER MOVE OF MOVE DISTINCT PCS
/]
		JRST EVM5D3]	;NOT ENOUGH PIECES MOVED SO TAKE NEXT MOST PLAUS
	SKIPN ESNFK(P)	;YES NOW LOOK ONLY AT INDIVIDUAL FLAGGED MOVES
	JRST EVM5
	HRRZ C,ESMLP(P)
	HRRZ T1,EVMET(P)
EVM5D2:	CAMN C,T1
	JRST EVM5
	SKIPGE 2(C)
	JRST EVM5D1	;ALREADY INVESTIGATED
	SKIPGE 3(C)
	 JRST [	MOVEI J,[ASCIZ /FLAGGED
/]
		JRST EVM5DX]
EVM5D1:	ADDI C,NWDPM
	JRST EVM5D2


;EVHSH1:	AOS NHFRC
IFN CHEOPS,[
ECHMV1:	AOS NCHFRC
	MOVEI C,[ASCIZ /CHEOPS FORCE 
/]
	CLEARM ECHPMV(P)
	MOVEI J,[ASCIZ /CHEOPS FORCE
/]
]
EVHSH:	MOVE B,LMGD	;FORCE MOVE IN T1 TO BE NEXT ONE LOOKED AT
	SOJN B,EVHSH5
	MOVEI B,PILPT
	SKIPE WALLP
	SOUT (C)
EVHSH5:	HRRZ C,ESMLP(P)
	HRRZ R,EVMET(P)
EVHSH3:	CAMN T1,1(C)
	JRST EVHSH2
	ADDI C,NWDPM
	CAMGE C,R
	JRST EVHSH3
	ERRTTY [ASCIZ /CANT FIND FORCE- EVHSH3/]

MVD3C:	XCT EVMT14(I)	;TRANSFER TO MVD3 ON US GETTING MATED
	MOVM T1,R	;HIM GETTING MATED
	SUBI T1,70000
	ADD T1,LMGD
	MOVNS T1
	SOJE T1,MVD3D	;MATE IN ON DISCONTINUE SEARCH
	MOVE T2,HK1V
	SUBI T2,-1(T1)
	CAMLE T2,LMGD2
	MOVEM T2,LMGD2
	JRST MVD3

MVD3D:	CLEARM (P)	;STOP FURTHER SEARCH THIS LEVEL
	CLEARM ESNPM(P)
	CLEARM ESNFK(P)
	JRST MVD3

EVM6:	JUMPN Q,ESL1	;DONT DO SEC SEARCH ON FLUSHED VAL
	MOVE T1,LMGD
	CAMLE T1,INVD
	JRST ESL1
	CAMLE R,[-67000]
	CAIL R,67000
	JRST ESL1
	PUSH P,Q	;-10
ESLPQ=-10
	PUSH P,A	;-7
ESLPA=-7
	PUSH P,R	;SAVE PREV SCORE -6
ESLPR=-6
	PUSH P,LMGD2	;DO SECONDARY SEARCH -5
	PUSH P,CVPR	;-4
	PUSH P,PLYN	;-3
	PUSH P,I	;-2
	SUB A,R
	PUSH P,A	;SAVE AMT OF BUGGERING
	MOVE A,CVPR
	PUSHJ P,PLLN	;PLAY OUT ALL PLAUS MOVE GEN MOVES
	MOVE A,HK1V
	SUB A,IVVDD
	MOVEM A,LMGD2
	PUSHJ P,.CAT
	LDB I,[100,,PLYN]
	CLEARM CVPR
	AOS NSLA
	PUSHJ P,LMG
	POP P,T1
	MOVE I,-2+2(P)
	MOVE A,R
	CAMLE R,[-67000]
	CAIL R,67000
	JRST ESL3A	;DONT BUGGER ON MATE OR FLUSH
	SUB R,T1
ESL3A:
;	SKIPN MVDS
	SKIPE WALLP
	PUSHJ P,MVD1A
	XCT ESLT1(I)
	JRST ESL3A1
	MOVE A,ESLPA+2(P)	;DONT ALLOW VALUE TO IMPROVE RESTORE PREV VALUE
	MOVE R,ESLPR+2(P)
	MOVE Q,ESLPQ+2(P)	;+2 S BECAUSE TWO PUSHES HAVENT BEEN DONE YET
ESL3A1:	PUSH P,R	;-1
	PUSH P,A	;0

ESL3:	MOVE A,-3(P)
	CAMN A,PLYN
	JRST ESL2
	PUSHJ P,UNMOVE
	JRST ESL3


ESL2:	MOVE T1,-4(P)
	JUMPE T1,ESL6
	HRRZ T2,(T1)
ESL5:	JUMPE T2,ESL4
	SKIPGE (T2)
	JRST ESL4
	MOVE T1,T2
	HRRZ T2,(T2)
	JRST ESL5

ESL4:	MOVE C,CVPR
	EXCH C,(T1)
	PUSHJ P,LFSRC	;PATCH IN NEW PRINC VAR
ESL7:	POP P,A
	POP P,R
	POP P,I
	SUB P,[1,,1]
	POP P,CVPR
	POP P,LMGD2
	SUB P,[3,,3]
	XCT EVMT7A(I)
	XCT EVMT5(I)
	AOS (P)	;WE GET MATED
	XCT EVMT1(I)
	JRST ESL1
	JRST EVM6A

ESL6:	EXCH T1,CVPR
	MOVEM T1,-4(P)
	JRST ESL7

ESL1:
ESL1A:	MOVEM Q,ESMR(P)
	XCT EVMT8(I)
	PUSHJ P,BPRVS
	MOVEM R,-3(P)
	MOVEM A,-4(P)
	MOVE C,ESMTP(P)
EVM6B:	MOVEM C,-5(P)
	MOVE C,-6(P)
	PUSHJ P,LFSRC
	PUSHJ P,RECMP
	MOVE C,CVPR
	MOVE T2,POSHSA
	MOVEM T2,ESMBHA(P)
	MOVE T2,ESMTP(P)
	HLLZ T1,3(T2)
	TLZ T1,-1-BIDSF-BMTHR	;SET DISCOVERY AND MULTIPLE THREAT BITS
	IORM T1,(C)
	HLRZ T1,EVNMS(P)
	DPB T1,[PUSNM,,(C)]
	HLLZS EVNMS(P)
	MOVEM C,-6(P)
	SETZM CVPR
	SKIPE FDCTSW	;SKIP ON NOT IN FEEDOVER CUTTOFF MODE
	SKIPL ESFBL(P)	;SKIPN ON INVESTIGATING FEEDOVER
	JRST EVM6C
	XCT FCT1(I)
	JRST EVM6C
IFN HSCOD,[
	SKIPL D,ESMHA(P)
	SKIPGE T1,NHSW
	JRST EVM6B1
	JUMPE T1,EVM6B2	;DRAW DET ONLY FLUSH FROM TABLE
	LDB T1,[HTVCOD,,HSTBV(D)]
	CAIE T1,4
	JRST EVM6B1
	MOVEI T1,1
	DPB T1,[HTVCOD,,HSTBV(D)]
	HRRM R,HSTBV(D)	;ACT VALUE BETTER OR =
EVM6B1:]
	CLEARM (P)
	CLEARM ESNPM(P)
	CLEARM ESNFK(P)
	JRST EVM6C

IFN HSCOD,[
EVM6B2:	CLEARM HSTBV(D)
	AOS HASHS
	SETOM ESMHA(P)
	JRST EVM6B1
]
FCT1:	CAMGE R,ESFCV(P)
	CAMLE R,ESFCV(P)



BPRVS:	MOVEM R,BPREV(I)
	XCT EVMT8A(I)	;IF THIS IS BEST SO FAR
		;Q SHOULD NOT SHOW THAT IT MAY BE BETTER FOR US
	PTTY [ASCII /ALPHA BETA LOSSAGE!/]
	PUSH P,A
	PUSH P,B
	PUSH P,C
	PUSH P,R
	PUSH P,I
	MOVEI B,TYO
	MOVE R,GAMP
	SUB R,LMGD
BPRV2:	MOVE C,1(R)
	PUSHJ P,EPMOVE
	PUSHJ P,MCRR
	PUSHJ P,DSPACE
	AOS R
	CAME R,GAMP
	JRST BPRV2
	MOVEI A,"!
	PUSHJ P,(B)
	PUSHJ P,DSPACE
	MOVE R,CVPR
	PUSHJ P,TYPLNE
	POP P,I
	POP P,R
	POP P,C
	POP P,B
	JRST POPAJ


ESLT1:	CAMG R,ESLPR+2(P)
	CAML R,ESLPR+2(P)

EVM5C:
IFN KILLH,[
	SKIPN AKHS
	JRST EVM5CK
	MOVE S,LMGD
	MOVE C,ESMTP(P)
	MOVE D,1(C)
	SETCMB T1,ABFTC(S)
	XCT EVMT51(T1)
	SETCMM T1
	XCT EVMT52(T1)	;RECORD AB FL FOR POSSIBLE USE DIRECTING
EVM5CK:			;FUTURE SEARCHES
]
IFN HSCOD,[
	SKIPL D,ESMHA(P)
	SKIPGE T1,NHSW
	JRST EVM5C1
	JUMPE T1,EVM5C1	;DRAW DET ONLY FLUSH FROM TABLE
	LDB T1,[HTVCOD,,HSTBV(D)]
	CAIE T1,4
	JRST EVM5C1	;DONT CLOBBER. (MAY BE CHEOPS MARK OUT, FOR EXAMPLE).
	MOVEI T1,1
	DPB T1,[HTVCOD,,HSTBV(D)]
	HRRM R,HSTBV(D)	;ACT VALUE BETTER OR EQUAL
]
EVM5C1:	AOS NABF
	MOVEM R,-3(P)
	MOVEM R,-4(P)
	MOVE C,-6(P)
	PUSHJ P,LFSRC
	PUSHJ P,RECMP
	MOVE C,POSHSA	  ;MAKE SURE POSHSA AND CVPR IN PHASE (FALSE FALSE HASH MATCHS
	MOVEM C,ESMBHA(P) ; CAN HAPPEN OTHERWISE)
	MOVE C,CVPR
	MOVEM C,-6(P)
	HLRZ A,EVNMS(P)
	DPB A,[PUSNM,,(C)]
	MOVEI A,[105]
	MOVEM A,-5(P)
	PUSHJ P,UNMOVE
	SKIPA Q,EVMT5A(I)	;SCORE MAY BE EVEN BETTER FOR SIDE MOVING

NEV5P==7	;NUMBER POPS BETWEEN EVM5 AND EVM5B

EVM5:	MOVE Q,ESMR(P)	;RET CURRENT RELIABILITY
	MOVE T1,ESLD2(P)
	MOVEM T1,LMGD2
	SKIPE ESFBL(P)
	AOS MCFB	;RETURNING FROM FEEDOVER
	SUB P,[1,,1]	;0
	POP P,LGLMST	;-1
	POP P,I	;-2
	POP P,R	;-3
	SUB P,[1,,1]	;-4
	POP P,T2	;-5
	POP P,CVPR
	JUMPE T2,EVM5A	;NO MOVE
EVM5B:
IFN HSCOD,[
	SKIPL D,ESMHA+NEV5P(P)
	SKIPGE T1,NHSW
	JRST EVM5B2
	JUMPE T1,EVM5F1
	LDB T1,[HTVCOD,,HSTBV(D)]
	CAIE T1,4
	JRST EVM5B3
	MOVE T1,@STVL5T(I)	;GET APPROPRIATE CODE AS INDICATED BY Q AND I
	DPB T1,[HTVCOD,,HSTBV(D)]
	HRRM R,HSTBV(D)
EVM5B3:	HRRZ T2,ESMBHA+NEV5P(P)
	MOVE C,CVPR
	JUMPE C,EVM5B2	;NO PRINC VARIATION ANYWAY
	MOVE C,1(C)
	LDB A,[300,,C]
	DPB A,[HSTPRN,,T2]
	LDB A,[MPTO,,C]
	LDB B,[MPO,,C]
	DPB B,[HSTPON,,T2]
	DPB A,[HSTSQN,,T2]
	MOVEM T2,HSTBL(D)
]
EVM5B2:	MOVEM D,POSHSA


EVM5B1:	MOVE P,LGLMST
	POP P,BPREV(I)
	POP P,PDVLV
	MOVE A,@OKINGT(I)
	SKIPN @LMGST+1(I)
	SOS LMGD2		;DONT SOS UNLESS IT WAS AOS ED
	SOS S,LMGD
IFN KILLH,SETZM ABFTB+2(S)	;CLEAR ONLY ABFTB FOR RANDOMLY LOWER LEVEL
	POPJ P,


EVM5F1:	CLEARM HSTBV(D)
	MOVNI D,1
	AOS HASHS
	JRST EVM5B2

EVM5A:	CAME R,STVT1(I)
	JRST EVM5B	;RETURNING VAL FROM CANTK?
	MOVEI Q,0
	MOVE A,@OKINGT(I)
	SKIPN @LMGST+1(I)
	JRST EVM5A1	;STALEMATE
	MOVE R,EVMT3(I)	;CHECHMATE
	XCT EVMT4(I)
	JRST EVM5B

EVM5A1:	MOVEI R,0
	JRST EVM5B


EVMT4:	ADD R,LMGD
	SUB R,LMGD

	100000
EVMST:	-100000
	100000

EVMT3:	-70000
	70000


IFN KILLH,[
	CAMN D,ABFTA(S)
EVMT51:	CAMN D,ABFTB(S)

	MOVEM D,ABFTA(S)
EVMT52:	MOVEM D,ABFTB(S)
]

EVMTT1:	CAMG A,[-67000]
	CAIL A,67000

EVMT5:	CAMG R,[-67000]
	CAIL R,67000
	CAMG R,[-67000]

EVMT1:	CAMLE R,-3(P)
	CAMGE R,-3(P)

EVMT2:	CAML R,BPREV+1
	CAMG R,BPREV

;EVMT6:	SUB R,BDPV
;	ADD R,BDPV

EVMT8:	CAML R,BPREV
	CAMG R,BPREV+1

EVMT8A:	JUMPLE Q,CPOPJ
	JUMPGE Q,CPOPJ

EVMT9:	CAMLE A,BPREV
	CAMGE A,BPREV+1

;EVMT10:	SUB R,MSP1MV
;	ADD R,MSP1MV
;
;EVMT11:	SUB R,MSP0MV
;	ADD R,MSP0MV
;
;EVMT12:	SUB R,MSPMV
;	ADD R,MSPMV
;
EVMT13:	BOARD-BW(A)
	BOARD+BW(A)

EVMT14:	JUMPL R,MVD3
	JUMPGE R,MVD3

LNT1:	JUMPLE S,LNAL1
	JUMPGE S,LNAL1

EVMT7A:	JUMPL Q,EVM6D
	JUMPG Q,EVM6D

EVMT5A:	1
	-1
	1



PLLN:	JUMPE A,CPOPJ
PLLN1:	SKIPGE (A)	;PLAY OUT ALL MOVES IN LINE IN A
	POPJ P,		;THAT WERE GEN BY PLAUS MOVE
	PUSH P,A	
	MOVE A,1(A)
	LDB I,[420100,,A]
	PUSHJ P,MMVNC
	JFCL
	POP P,A
	HRRZ A,(A)
	JUMPN A,PLLN1
	POPJ P,

IFN 0,[
PLLLNE:	JUMPE A,CPOPJ	;PLAY OUT ALL MOVES OF LINE IN A
	PUSH P,A
	MOVE A,1(A)
	SETOM NCFLG
	LDB I,[420100,,A]
	PUSHJ P,MMVNC
	JFCL
	POP P,A
	HRRZ A,(A)
	JRST PLLLNE
]



LMGR7A:	SKIPGE LMGT(B)
	CAME A,LMGEPS
	POPJ T,
	JRST LMGR

LMGR7:	SKIPGE RPIECE(B)
	POPJ T,
	MOVE T1,KSQTBP
	CAME A,KSQTB(T1)
	AOBJN T1,.-1
	JUMPGE T1,LMGR7A

LMGR:	SKIPGE T1,BOARD(A)
	POPJ T,
	JUMPE T1,LMGRA
	XCT OURGY1(I)	;SKIP ON HIS GUY
	POPJ T,
LMGRA:	SETOM GDMF	;SAFE MOVE FLAG
	CLEARM ICKF
	CLEARM IDISKF
	MOVEM J,LMJS
	MOVEM A,LMAS
	MOVEM B,LMBS
	HRRZM B,PCMVNG
	LDB T1,[BRANK,,BPREL(A)]
	MOVEM T1,LMARK
LMGCD1:	MOVE T1,[BLGCLR,,BLGCLR+1]
	BLT T1,ELGCLR-1
	AOSN CDVCF
	JRST LMGCD
TRS1:		;INSERT TRACE TEST WHEN IN TRACE MODE
	RC C DEV VAL,	MOVE R,CDEVV	;CURRENT DEVEL VALUE
	MOVN W,CPOSV	;CURRENT POSITIONAL VALUE
	CLEARM DISPOS	;POSITIONAL FACTORS ASSOC WITH DISCOVERIES
	MOVE D,PIECEL(B)
	SKIPE T1,BDBLK(D)	;UNBLOCKING SOMETHING ?
	JRST LMUA
LMUA2:	LDB T1,[PTID,,PIECE(B)]
	XCT LMPTT(T1)		;FACTORS RELATING TO TYPE OF PIECE
LMPTX:	RC CONSTANT,	ADD R,IVLU	;INITIAL EFFORT
	SKIPE C,ONEB1(A)
	JSP Q,LMRP1	;SEE IF RELIEVING PIN
LMRPBS:	SKIPE C,ONEB2(A)
	JSP Q,LMRP1
	SKIPN BOARD(A)	;DONT WORRY ABT BLOCKING PAWNS IF CAPTURE
	SKIPGE LMGT(B)
	JRST LMCPB1
	JUMPN I,LMCPB
	SKIPLE T1,BOARD-BW(A)
	SKIPL LMGSTD-PIECE(T1)
	JRST LMCPB1
	CAIN A,WK3
	RC BLOCKING KP AT K3,	SUB R,BCPVLU
	CAIN A,WQ3
	RC BLOCKING QP AT Q3,	SUB R,BCPVLU
LMCPB1:
IFE NEWPLS,[
	MOVE T2,@LMGST(I)	;OUR DEFENSE
	SKIPN BOARD(A)	;SKIP ON CAPTURE
	SKIPL LMGT(B)	;SKIP ON PAWN
	SOS T2	;UNLESS PAWN NON CAPTURE
	MOVEM T2,LMOA
LMGR6:
	SKIPN T1,BOARD(A)
	JRST LMGR3	;NO CAPTURE
LMGR6A:	MOVE T2,LMGD	;GET BACK HERE ON E.P. CAPT
	CAMG T2,CATCUT
	SETOM ICKF	;INVESTIGATE ALL CAPTURES AT FIRST N LEVELS
	RC DEVEL VAL FOR PIECE TAKEN,	MOVEI B,-PIECE(T1)
	PUSH P,T1
	PUSHJ P,CBDV	;ADD DEV VAL OF PIECE TAKEN
	MOVE B,LMBS
	POP P,T1	;NOT BOARD(A) IN CASE OF E.P.
	MOVE TT,PVALUE-PIECE(T1)
	SKIPGE LMGT-PIECE(T1)
	SKIPN S,PPASED-PIECE(T1)
	JRST LMAV1
	ADD TT,PASPV(S)	;ALSO ADD VALUE FOR BEING PASSED
LMAV1:	MOVEM TT,HPVAL
	SKIPN @LMGST+1(I)
	JRST LMGR4I	;ITS NOT PROTECTED
	PUSHJ P,AFLATA
	MOVEM C,LCATR		;NEXT ATTACKER
	MOVEM D,LCDFR		;FIRST DEFENDER
	MOVE T1,BOARD(A)
	JUMPE D,LMGR4I
				;FOLLOWING CODE IS SIMILAR TO LRDC1
	MOVE ZR,@LMGST+1(I)
	SOJN ZR,LMAV1A		;NOT ONLY DEF
	SKIPL LMGT(D)
	JRST PMO1
	MOVE TT,PFILE(D)	;ONLY DEF IS PAWN
	MOVE ZR,@SNPNFL+1(I)
	SOJN ZR,PMO1		;NOT CURRENTLY ONLY P ON FILE
	MOVE T2,PFILE(B)
	SKIPE @SKNPN2+1(I)
	JRST PMO2		;PAWNS IN TWO OVER FILE TO K SIDE, SO K SIDE OK
	CAIN TT,-1(T2)
	RC RECAPTING P WILL BE ISO,ADDI R,40
	SKIPE @SKNPNF+1(I)
	RC ADJ P TO K SIDE MADE ISO,ADDI R,40
PMO2:	SKIPE @SQNPN2+1(I)
	JRST PMO1
	CAIN TT,1(T2)
	RC RECAPTING P WILL BE ISO,ADDI R,40
	SKIPE @SQNPNF+1(I)
	RC ADJ P TO Q SIDE MADE ISO,ADDI R,40
PMO1:	SKIPN T2,NPOD(D)	;SEE IF ONLY DEFENDER CONSTRAINED
	JRST LMAV1A		; NO.
	MOVE J,D
	MOVE C,NPODBT(J)
	AND C,FJLRT1+1(I)	;RESTRICT TO HIS PCS
LRCJ2:	JFFO C,LRCJ1	
LMAV1A:	SKIPE LMFORS
	JRST LMGR4I	;SOME ATTACKS UNCOVERED WHICH MAY PREVENT RECAPTURE
	MOVE TT,PVALUE(B)
	CAMGE TT,HPVAL
	JRST LMGR4B	;FAVORABLE TRADE (AT LEAST)
	CAMG TT,HPVAL	;PIECE WORTH LESS
	JRST LMGCT1	;EVEN TRADE
	SUB TT,HPVAL	;UNFAVORABLE TRADE
	SKIPE LMOA
	JRST LMGR4D	;WE ALSO HAVE OTHER ATTACKS
	MOVNM TT,EGAIN
	RC CALC LOSS 1,	SUB R,TT
	JRST LMGR4N

;PIECE DEFENDING  CAPTED PC IS ONLY DEF OF SOME OTHER PCS.  SEE IF IT HOLDS.
LRCJ1:	ANDCM C,FJLRT2(D)	;CLEAR BIT
	MOVE T2,PIECEL(D)
	CAMN T2,LMAS
	JRST LRCJ2		;RECAPTING ON THIS PC NOW.
	LDB T2,[PTID,,PIECE(J)]
	SOJLE T2,LRCJ3		;P OR N, WILL NOT HOLD
	MOVE S,PIECEL(B)
	PUSH P,BOARD(S)
	CLEARM BOARD(S)	;AVOID INTERFERENCE BY MOVING PC
	PUSH P,B
	MOVE S,PIECEL(D)	;PIECE WHICH WOULD BE LEFT LOOSE
	MOVE B,J
	PUSHJ P,@LGLMPT(B)
	JRST LRCJ3A	;WILL NOT HOLD
	MOVE A,LMAS	;STILL HOLDS
	POP P,B
	MOVE S,PIECEL(B)
	POP P,BOARD(S)
	JRST LRCJ2

LRCJ3A:	MOVE A,LMAS	;DOESNT HOLD
	POP P,B
	MOVE S,PIECEL(B)
	POP P,BOARD(S)
LRCJ3:	MOVE ZR,PVALUE(B)
	SUB ZR,PVALUE(D)
	CAILE ZR,BVMNV
	JRST LRCJ3B	;PIECE GETTING LEFT LOOSE NOT TOO VALUABLE.  ASSUME RECAPT WILL
			; TAKE PLACE, BUT CREDIT CURRENT MOVE FOR POSSIBLE GAIN
			; DUE TO LEFT-LOOSE PIECE
	RC *P!J NOT DEFENDING BECAUSE THEN *P!D WOULD BE LOOSE, JRST LMGR4I

LRCJ3B:	RC IF *P!J RECAPTS *P!D WOULD BE LOOSE, ADDI R,100
	JRST LRCJ2

LMGCT1:	PUSHJ T,LRH2	;TAKE INTO ACCOUNT WHETHER AHEAD
	XCT WTRD(I)	;SKIP ON I WANTS TO TRADE
	JRST LMGR4B
	MOVE ZR,HPVAL
	LSH ZR,-3
	MOVEM ZR,EGAIN
	RC WANT TO TRADE,ADD R,ZR
	JRST LMGR4B	

WTRD:	SKIPG WTPCSW
	SKIPL WTPCSW
]
LMGG1:	XCT LMGR6T(I)
	JRST LMGR6A

LMGR6T:	MOVE T1,BOARD-BW(A)
	MOVE T1,BOARD+BW(A)

LMGRT1:	SKIPLE T1,BOARD+BW(A)
	SKIPLE T1,BOARD-BW(A)


LMGRT3:	SUBM T2,T1
	SUB T1,T2

OQT:	BKING+1-PIECE+PIECEL
	WKING+1-PIECE+PIECEL

;DISPATCH TABLE ON TYPE OF PIECE
LMPTT:	JRST LMPTP	;PAWN, CENTRALIZE, FORM HEAD DUO, PAWN BREAK.
	JRST LMPTN	;NIGHT, CENTRALIZE
	JFCL		;B
	JFCL		;R
	JFCL		;Q
	JRST LMPTK	;K, MAYBE PULL BACK.

LMPTP:	MOVE T1,WCFCT(A)
	SKIPGE PIECE(B)
	MOVM T1,BCFCT(A)	;WANT A POSITIVE FACTOR
	SKIPE CNTSW
	IMUL T1,CNTSW
	RC P CENTERING FACTOR,ADD R,T1
	JRST LMPTX

LMPTN:	MOVE T1,WCFCT(A)
	SKIPGE PIECE(B)
	MOVM T1,BCFCT(A)	;WANT A POSITIVE FACTOR
	IMUL T1,CPCFCT+1
	SKIPE CNTSW
	IMUL T1,CNTSW
	RC N CENTERING FACTOR,ADD R,T1
	JRST LMPTX

LMPTK:	SKIPN OPNMID	;PLAUSIBLE TO PULL BACK KING
	JRST LMGCMY
	MOVE T1,LMARK
	MOVE T2,PRANK(B)
	XCT LMGRT3(I)
	LSH T1,3
	SKIPE OPENF
	LSH T1,3
	SKIPN @OQT(I)
	JRST LMGCMZ
	SKIPE I
	MOVE T2,REVERS(T2)
	IMUL T1,T2
LMGCMZ:	RC PULL KING BACK,	ADD R,T1
LMGCMY:	JRST LMPTX

LMCPB:	SKIPLE T1,BOARD+BW(A)
	SKIPL SNFBP-PIECE(T1)
	JRST LMCPB1
	CAIN A,BK3
	RC BLOCKING KP AT K3,	SUB R,BCPVLU
	CAIN A,BQ3
	RC BLOCKING QP AT Q3,	SUB R,BCPVLU
	JRST LMCPB1

LMFA3:	LDB T1,[BFILE,,BPREL(A)]
	CAMN T1,@KFILE+1(I)
	RC SAME RANK AS K,	ADD R,PTFVLU
	LDB T1,[BRANK,,BPREL(A)]	;NOT LMARK BECAUSE OF CCPV
	CAME T1,@KRNK+1(I)
	POPJ P,
	RC SAME FILE AS K,	ADD R,PTFVLU
	SKIPE BPNFLS(T1)
	POPJ P,
	SKIPN WPNFLS(T1)
	RC FILE OPEN,ADD R,POFVLU
	POPJ P,

LMDA:	MOVE TT,@OKINGT+1(I)
	LDB T2,[BPDAG,,BPREL(A)]
	LDB T1,[BPDAG,,BPREL(TT)]
	CAMN T1,T2
	RC SAME +DIAG AS K,	ADD R,PTFVLU
	LDB T2,[BMDAG,,BPREL(A)]
	LDB T1,[BMDAG,,BPREL(TT)]
	CAMN T1,T2
	RC SAME -DIAG AS K,	ADD R,PTFVLU
	POPJ P,

LMRP1:	JFFO C,LMRP6
	JRST (Q)

LMRP6:	LDB S,FJRPT1(D)
	ANDCM C,FJRPT2(D)
	MOVE J,BOARD(S)
	SKIPE TT,PINT-PIECE(J)
	XCT OURGYJ(I)
	JRST LMRP1
	MOVE T1,@FJRPT3-LMRPBS(Q)
	LDB T2,RDATSS(T1)	;OUR PINNED PIECE
;	SKIPGE SLDPC(T2)	;WOULD NEVER SKIP
	XCT RMOY6+1(I)
	JRST LMRP1
LMRP5:	LDB ZR,[PINATP,,1(TT)]	;ATTACKED BY HIS SLIDER
	CAMN ZR,T2
	JRST LMRP4
	HRRZ TT,(TT)
	JUMPN TT,LMRP5
	JRST LMRP1

LMRP4:	LDB TT,[PINBS,,1(TT)]
	CAMN TT,PIECEL(B)
	JRST LMRP1	;SAME PIECE AS PINNED TO NOW
	MOVE ZR,PVALUE(T2)
	CAMGE ZR,PVALUE-PIECE(J)
	JRST LMRP4A	;HE CAN TAKE PINNED PIECE PROFITABLY
	CAML ZR,PVALUE(B)
	JRST LMRP4B	;NO NEW PIN UNLESS LOOSE
LMRP4A:	RC EASING PIN ON *M!J, ADDI R,20
	JRST LMRP1

LMRP4B:	RC RELIEVING PIN ON *M!J, ADDI R,40
	JRST LMRP1

FJRPT1:	ZZQ==331100,,C
	REPEAT 4,[
	REPEAT 9,ZZQ
	ZZQ==ZZQ-<110000,,>
]
FJRPT2:	ZZQ==777000,,
	REPEAT 4,[
	REPEAT 9,ZZQ
	ZZQ==ZZQ_-9
]
FJRPT3:	FJRPT4(D)
	0
	FJRPT5(D)

FJRPT4:	ZZQ==0
	REPEAT 4,[
	REPEAT 9,ZZQ
	ZZQ==ZZQ+1
]
FJRPT5:	REPEAT 4,[
	REPEAT 9,ZZQ
	ZZQ==ZZQ+1
]

IFE NEWPLS,[
LMGR4I:	MOVE ZR,HPVAL
	MOVEM ZR,EGAIN
	RC PIECE TAKEN LOOSE- FULL VALUE,	ADD R,ZR
	JRST LMGR1

LMGR4E:	MOVE S,@LMGST+1(I)
	SOJE S,LMGR4F	;WE WONT LOSE OUR 2ND ATTACKER
LMGR4G:	CAMG TT,LMGT1
	MOVE TT,LMGT1	;NOT PROFITABLE TO RECAPTURE
	MOVEM TT,EGAIN
	RC CALC GAIN 1,	ADD R,TT
	CAML TT,[-BVMNV]
	JRST LMGR1	;NOT REALLY ALL THAT BAD
LMGR4N:	AOS GDMF

LMGR4M:	PUSH P,A	;CAPTURE WHEN RECAPTURE EXPECTED OR MOVING INTO PRISE
	HRLM B,(P)
	JRST LGR1F1

LMGR4F:	ADD TT,PVALUE(C)
	JUMPL TT,LMGR4G	;BAD ANYWAY
	JRST LMGR4H

LMGR4D:	MOVNM TT,LMGT1	;WE CAN ESCAPE WITH THIS LOSS AT WORSE
	MOVE C,LCATR
	MOVE D,LCDFR
	MOVE TT,PVALUE(D)	;HIS LOSSES
	ADD TT,HPVAL	;PIECE TAKEN + FIRST DEFENDER
	SUB TT,PVALUE(B)	;OUR LOSSES
	SUB TT,PVALUE(C)	;PIECE TAKING + FIRST DEFENDER
	JUMPL TT,LMGR4E	;TRADE APPARENTLY BAD FOR US IF CARRIED OUT ALL THE WAY
LMGR4H:	CAMLE TT,HPVAL	;HE HAS OPTION OF NOT TAKING FIRST TIME
	MOVE TT,HPVAL
	MOVEM TT,EGAIN
	RC CALC GAIN 2,	ADD R,TT
LMGR4C:	MOVE T2,@LMGST+1(I)	;TRADE MAY BE OK ANYWAY

	CAMGE T2,LMOA
	RC HAVE MORE ATTACKS,	ADD R,MJVLU	;MORE ATTACKS THAN OPP
]


LMGR1:	PUSH P,A	;STORE MOVE
	HRLM B,(P)
	PUSHJ P,LMGR1A  ;EVALUATE POSITIONAL FACTORS, ATTACKS, ETC.
	MOVE T1,LMFORS
	SOJG T1,LGR1F	;TWO OR MORE FORCING THREATS
LGR1F1:	MOVEI T1,0
	SKIPE ICKF
	TLO T1,400000
	SKIPE IDISKF
	TLO T1,BIDSF	;DISCOVERY
	SKIPE ICKF
	AOS NCKF	;NO. OF CHECKING MOVES
	IORM T1,LMFORS
	ADD W,DISPOS
	MOVM T1,W
	XCT STDVL1
	SKIPGE W
	MOVNS T1
	RC SCALED POSTIONAL CHANGE,ADD R,T1
	SKIPGE R
	MOVEI R,0
	PUSH P,R	;NET PLAUSIBILITY  NWDPM
	PUSH P,LMFORS	;RETURNED VALUE
	PUSH P,W	;POSITIONAL VALUE
	ADDM R,TEFAL
	SKIPGE GDMF
	AOS NSMVS
	MOVE A,LMAS
	MOVE J,LMJS
	MOVE Q,LMQS
IFN KILLH,[
	SKIPN AKHS
	JRST CPOPJT
	MOVE T2,LMGD
	MOVE T1,-NWDPM+1(P)
	CAMN T1,ABFTA(T2)
	CAME T1,ABFTB(T2)
]
CPOPJT:	POPJ T,
IFN KILLH,[
	MOVEI T1,4000	;THIS MOVE CAUSED AB FLUSH IN PREV INVES
	IORM T1,-NWDPM+2(P)	;MAKE IT VERY PLAUS
	POPJ T,
]


LGR1F:	CAILE T1,3
	MOVEI T1,3
	RC MULTIPLE THREATS,	ADD R,LMFPT(T1)	;ADD BONUS FOR THE THREATS
	SETOM ICKF	;BE SURE TO INVESTIGATE MOVE
	MOVSI T1,BMTHR
	IORM T1,LMFORS	;WILL GET SET INTO WD3
	JRST LGR1F1

LMGR4B:	SKIPE LMOA
	JRST LMGR4J	;WE ALSO HAVE OTHER ATTACKS
LMGR4K:	SUB TT,HPVAL
	MOVNM TT,EGAIN
	RC CALC GAIN 3,	SUB R,TT
	JRST LMGR4M

LMGR4L:	CAMGE T2,LMOA
	JRST LMGR4I
	JRST LMGR4K

LMGR4J:	MOVE T2,@LMGST+1(I)
	SOJN T2,LMGR4L	;HE HAS MORE THAN 1 DEF
	MOVE D,LCDFR
	JUMPE D,LMGR4I	;ITS NOT REALLY DEFENDED
	MOVE TT,HPVAL
	SUB TT,PVALUE(B)
	ADD TT,PVALUE(D)
	CAML TT,HPVAL
	MOVE TT,HPVAL	;HE CANT RECAPTURE PROFITABLY
	MOVEM TT,EGAIN
	RC CALC GAIN 4,	ADD R,TT
	JRST LMGR4C


LMGR1A:	PUSH P,W
	MOVEI W,0
	RC COMPUTE DEV VAL FOR *P!B AT *S!A,MOVEM A,CSMTM
			;SAVE CURRENT ORG SQUARE FOR USE IN LMGR2
	SKIPGE RFPCS(B)
	PUSHJ P,LMFA3
	SKIPGE DDPCS(B)
	PUSHJ P,LMDA
	XCT LMGRT1(I)	;BLOCK PASSED PAWNS
	XCT OURGY1(I)
	JRST LMGR1F
	SKIPE T1,PPASED-PIECE(T1)
	RC BLOCKING PP,	ADD R,PPP(T1)
LMGR1F:	HRROI Q,LMGR2
	SKIPGE LMGT(B)
	JRST LGR1C
	PUSHJ T,@LMGSTD(B)	;EVALUATE DEVELOPMENT AND STRATEGIC VALUE
LMGR1B:	IMUL W,PINVF(B)
	RC TOTAL POSITIONAL VALUE, ADD W,(P)
	SUB P,[1,,1]
	MOVE Q,LMQS
	MOVE A,CSMTM
	POPJ P,


LGR1C:	SKIPGE @LGR1CT(I)
	JRST LGR1C1	;QUEENING
	PUSHJ T,LMGR1C
	JRST LMGR1B

LMGR1C:	XCT LMGRT(I)	;EVALUATE PAWN ATTACK
	PUSHJ T,(Q)
	SUBI A,2
	JRST (Q)

LMGRT:	ADDI A,BW+1
	SUBI A,BW-1


LGR1CT:	BOARD+BW(A)
	BOARD-BW(A)

LGR1C1:	SETOM ICKF
	PUSHJ T,LSQUEEN
	JRST LMGR1B

CCPV:	RC COMPUTE TACT POS VAL *P!B AT *S!A,MOVEM A,CSMTM
	SKIPGE RFPCS(B)
	PUSHJ P,LMFA3
	SKIPGE DDPCS(B)
	PUSHJ P,LMDA
	XCT LMGRT1(I)	;SKIPLE T1,BOARD +(-)BW(A)
	XCT OURGY1(I)
	JRST .+3
	SKIPE T1,PPASED-PIECE(T1)
	RC WAS BLOCKING PP,ADD R,PPP(T1)
CCPV5:	MOVEI W,1	;FOR USE IN DPB ING IN BATTSQ
	HRROI Q,CCPV1
	SKIPGE LMGT(B)
	JRST CCPV2
	PUSHJ T,@LMGSTD(B)
CCPV3:	MOVE A,CSMTM
	MOVE Q,LMQS
	MOVE W,PDV(B)
	RC PRESENT POSITIONAL VALUE,IMUL W,PINVF(B)
	POPJ P,

CCPV2:	PUSHJ T,LMGR1C
	JRST CCPV3

LMGCD:
TRS2:			;INSERT TRACE TEST WHEN IN TRACE MODE
			;GET CURRENT DEVELOPMENT VAL
	RC COMPUTE DEVEL VAL,	CLEARB R,W
	MOVE A,PIECEL(B)
	MOVEM A,ORGPCL	;ORGINAL PIECE LOCN
	CLEARM BASQ1	;GET SET UP WITH SQS CURRENTLY HITTING
	CLEARM BASQ2
	PUSHJ P,CCPV
	RC CURRENT DEVEL VAL,	MOVEM W,CPOSV	;POS VALUE OF CURRENT LOCN
	SKIPE D,ONEB1(A)	;SEE IF WE ARE BASE PIECE OF A PIN
	JSP W,LDPN1
LDPBS1:	SKIPE D,ONEB2(A)
	JSP W,LDPN1
;	SKIPGE SLDPC(B)	;WILL GET BONUS FOR ATTACKING PINNED PIECE
;	JRST LMGCP1	;ARE WE PINNING SOMETHING NOW?
LMGCP2:	LDB T1,[PTID,,PIECE(B)]
	XCT LMGCDX(T1)	;FACTORS RELATING TO TYPE OF PIECE
LMGCDA:
LMGCD7:	RC ENPRISE CALC LOSS, SUB R,ENPCL(B)
LMGCD8:
LMGCD5:
	MOVE T2,PLYN
	SKIPGE POSRDI
	MOVEI T2,105	;POSITION HAS BEEN READ IN
	LDB T1,[PTID,,PIECE(B)]
	XCT LMGCD3(T1)	;TOO EARLY TO MOVE PIECE?
	JRST LMGCD4
LMGCD2:	MOVNM R,CDEVV
	MOVE A,LMAS
	JRST LMGCD1



;LMGCP1:	MOVE T2,LGMST2+1(I)
;LMGCP4:	SKIPE T1,PINT(T2)
;	JRST LMGCP3
;LMGCP6:	AOBJN T2,LMGCP4
;	JRST LMGCP2
;
;LMGCP3:	LDB S,[PINATP,,1(T1)]
;	CAIN S,(B)
;	JRST LMGCP5
;	HRRZ T1,(T1)
;	JUMPN T1,LMGCP4
;	JRST LMGCP6
;
;LMGCP5:	RC PINNING *P!T2, ADDI R,20
;	JRST LMGCP6

LMGCDX:	JRST LMGCDP
	JRST LMGCDN
	JRST LMGCDB
	JRST LMGCDR
	JFCL
	JRST LMGCDK

LMGCDK:	SKIPL @HMID(I)
	JRST LMGCD5	;"ENDGAME" NO PENALITY
	SKIPE T1,NMOVES(B)	;NEG FACTORS ON KING MOVE
	JRST LMGDK3
	RC FIRST KING MOVE,ADD R,FMKING
	XCT LMGKT1(I)	;DOES QR EXIST?
	XCT LMGKT2(I)	;HAS IT MOVED?
	JRST .+2
	JRST LGCDK2
	XCT LMGKT3(I)	;KR
	XCT LMGKT4(I)
	JRST LMGCD5
LGCDK2:	RC MOVING K WHEN O-O(-O) POSSIBLE,ADD R,KKCAS
	JRST LMGCD5

LMGDK3:	SKIPE NMKING(I)
	SOS T1
	SKIPG T1
	RC FIRST K MOVE OTHER THAN O-O(-O), ADD R,FMKING
	JRST LMGCD5

LMGCDR:	SKIPE @NKM(I)
	JRST LMGCDA
	SKIPN NMOVES(B)
	RC MOVING R WHEN O-O(-O) POSSIBLE,	ADD R,FMROOK
	JRST LMGCDA

LMGCDN:
LMGCDB:	SKIPN NMOVES(B)
	RC MOVING MINOR PIECE FIRST TIME,	SUB R,MPFMV
	JRST LMGCDA

LMGCDP:	SKIPN T1,PPASED(B)
	JRST LGCDP2
	SKIPGE T1
	SUBI T1,2	;BLOCKED BY FRIENDLY P
	RC PUSHING PASSED PAWN,	SUB R,PPP(T1)
LGCDP2:	SKIPE T1,PPTP(B)
	XCT LMPPTP(T1)
	JRST LMGCDA


	RC MOVING P DEFENDED BY P,	ADD R,LMMPDP
LMPPTP:	ERRTTY [ASCII /LOSE AT LMPPTP!/]
	RC MOVING FORWARD PAWN,	ADD R,LMMFP
	RC MOVING BACKWARD PAWN,	SUB R,LMMBP
	RC MOVING ISOLATED PAWN,	SUB R,LMMIP

LMGCD3:	JRST LMGCD2	;P
	CAIGE T2,2	;N
	CAIGE T2,2	;B
	CAIGE T2,6	;R
	CAIGE T2,10	;Q
	CAIGE T2,10	;K


LMGCD4:	SKIPE @LMGST+1(I)	;PIECE ATTACKED
	JRST LMGCD2
	RC TOO EARLY TO MOVE THIS PIECE,SUB R,WPVLU
	JRST LMGCD2

LMGKT1:	SKIPE PIECEL+WQR-PIECE
	SKIPE PIECEL+BQR-PIECE

LMGKT2:	SKIPE NMOVES+WQR-PIECE
	SKIPE NMOVES+BQR-PIECE

LMGKT3:	SKIPE PIECEL+WKR-PIECE
	SKIPE PIECEL+BKR-PIECE

LMGKT4:	SKIPE NMOVES+WKR-PIECE
	SKIPE NMOVES+BKR-PIECE


IFE NEWPLS,[
LMGR3:	CAMN A,GHLOC
	SKIPL LMGT(B)
	JRST .+2
	JRST LMGG1	;EP CAPTURE
	SKIPE T1,BDA1(A)
	JSP Q,LBL1
LBFJBS:	SKIPE T1,BDA2(A)
	JSP Q,LBL2
	SKIPGE TRPPCF
	JRST LTMT1	;SEE IF TRAPPING EXPOSED PIECE(B AT R2)
LTMT2:	SKIPN LMFORS	;UNCOVERING ATTACK
	SKIPN @LMGST+1(I)
	JRST LR3	;NO ATTACKED
	PUSHJ P,AFLATA
	JUMPE D,LR3
	JUMPE C,LMGR3X	;NOT DEFENDED
	MOVE TT,PVALUE(D)
	SUB TT,PVALUE(B)
	MOVE S,TT
	CAMGE TT,[-BVMNV]	;BIS-NT VAL
	JRST LMGR3C	;SQUARE ATTACKED BY LESSER VALUE
	MOVE T1,@LMGST+1(I)
	SOJE T1,LR3E	;ONLY ATTACK
	SUB TT,PVALUE(C)
	JUMPG TT,LR3E	;OUR FIRST TWO LESS VAL THA HIS FIRST ONE
	MOVE T2,@LMGST+1(I)
	CAMG T2,LMOA
	JRST LR3E
LMGR3C:	MOVN T1,PVALUE(B)
	CAMG TT,T1	;LOSS IS PIECE OR EXCHANGE WHICHEVER IS LESS
LMGR3X:	MOVN TT,PVALUE(B)	;LOSS IS PIECE
LRDC1:	SKIPN T2,NPOD(D)
	JRST LMGR3G	;HIS PIECE UNENCUMBERED
	MOVE T1,@LMGST+1(I)
	SOJN T1,LMGR3G	;MORE THAN ONE DEF
	MOVE J,D
	MOVE C,NPODBT(J)
	AND C,FJLRT1+1(I)	;RESTRICT TO HIS PCS
LRDFJ2:	JFFO C,LRDFJ1
LMGR3G:	ADDM TT,EGAIN
	RC MOVING INTO PRISE CALC LOSS,ADD R,TT
	AOS GDMF
LMGR4A:	MOVE T1,LMGD
	CAMLE T1,CATCUT
	JRST LMGR4M
LCHK1:	MOVE S,A
	MOVE A,@OKINGT+1(I)
	PUSHJ P,@LGLMPT(B)
	JRST LCHK3
	SETOM ICKF	;LOOK AT ALL CHECKS AT TOP LEVELS
LCHK3:	MOVE A,LMAS
	JRST LMGR4M


LRDFJ1:	ANDCM C,FJLRT2(D)	;CLEAR BIT
	LDB T2,[PTID,,PIECE(J)]
	SOJLE T2,LRDC6	;P OR N WILL NOT HOLD
	MOVE S,PIECEL(B)
	PUSH P,BOARD(S)
	CLEARM BOARD(S)	;AVOID INTERFERENCE BY MOVING PIECE
	PUSH P,B
	MOVE S,PIECEL(D)
	MOVE B,J
	PUSHJ P,@LGLMPT(B)
	JRST LRDC6A	;WILL NOT HOLD
	MOVE A,LMAS	;STILL HOLDS
	POP P,B
	MOVE S,PIECEL(B)
	POP P,BOARD(S)
	JRST LRDFJ2


LRDC6A:	MOVE A,LMAS
	POP P,B
	MOVE S,PIECEL(B)
	POP P,BOARD(S)
LRDC6:	MOVE ZR,PVALUE(B)
	SUB ZR,PVALUE(D)
	CAILE ZR,BVMNV
	JRST LRDFJ2
	SKIPG ZR
	MOVEI ZR,1
	RC NOT DETERRED BY *P!J BECAUSE THEN *P!D WOULD BE LOOSE,SUB R,ZR
	JRST LR3

LR3E:	SKIPGE S
	RC CALC MINOR LOSS,ADD R,S
LR3:	SKIPN NPOD(B)	;MOVE LOOKS OK BUT ARE WE ABANDONING ANYTHING
	JRST LMGR1
	MOVE C,NPODBT(B)
	AND C,FJLRT1(I)	;RESTRICT TO OUR PCS
FJLR2:	JFFO C,FJLR1
	JRST LMGR1

FJLR1:	ANDCM C,FJLRT2(D)
	LDB T2,[PTID,,PIECE(B)]
	SOJLE T2,LR3C	;YES LEAVING SOMETHING EN PRISE
	MOVE S,PIECEL(D)
	PUSHJ P,@LGLMPT(B)
	JRST LR3C1
	JRST FJLR2

LR3C1:
LR3C:	MOVE S,RPVAL(D)
	LSH S,-2
	RC ABANDONING *P!D ,SUB R,S
	JRST FJLR2

]
FJLRT1:	377776,,0	;MASK TO OUR PCS
	1,,777770
	377776,,0

FJLRT2:	0
PP PCBIT:,	REPEAT 32.,MOVE_-.RPCNT
	REPEAT 3,0




SQVAT:	ADD W,WAV(A)
	ADD W,BAV(A)

LMUAGR:	SKIPGE BOARD(A)	;FOR UNCOVERED ATTACK
	POPJ T,
	POP T,LMUTT0
	POP T,LMUTT1
	POP T,LMUTT2
	PUSH T,@LMURAT(I)
	PUSH T,@RDAT(J)
	PUSH T,A
	HRLM J,(T)
	PUSH T,[LMUUN1]
	PUSH T,LMUTT2
	PUSH T,LMUTT1
	PUSH T,LMUTT0
	MOVE T1,LMUBAI
	ADDM T1,@LMURAT(I)
	SKIPN ATTHF
	DPB B,RDAT(J)
	JRST LMGR2C

LMGR2:	SKIPGE BOARD(A)	;COME HERE FOR EACH SQUARE PIECE ATTACKS
	POPJ T,
LMGR2C:	XCT SQVAT(I)
	SKIPN T1,BOARD(A)
	POPJ T,

LMGR2A:	SKIPE DISCOVF
	JRST LG2DA1
	LDB T2,BATTSQ(A)
	JUMPN T2,LGAA1	;ALREADY ATTACKING HERE (BUT MAYBE ADD DEF VALS
			;TO COMPENSATE
LG2DA1:	MOVE T2,(T1)
	XOR T2,PIECE(B)
	JUMPGE T2,LDFP1	;OUR GUY
	SKIPGE SLDPC(B)
	JRST LMGP1
LMGP2:	SKIPGE RPIECE-PIECE(T1)
	SETOM ICKF	;CHECK
	SKIPL LMGT(B)	;PAWN BREAK
	JRST .+3
	SKIPGE LMGT-PIECE(T1)
	RC PAWN BREAK,ADD R,BRKVLU
	SKIPGE PPTP-PIECE(T1)
	SKIPN PINT-PIECE(T1)
	JRST LPSS1
	RC PINNED P DEF BY P,ADD R,APDPV
	JRST LPSS2
LPSS1:	SKIPE PINT-PIECE(T1)
	RC ATTACKING PINNED PIECE *M!T1 ,ADD R,APVLU
LPSS2:	SKIPGE RFPCS(B)
	SKIPL LMGT-PIECE(T1)
	JRST LPSS3
	SKIPGE PPTP-PIECE(T1)
	JRST LPSS3	;PAWN DEF BY PAWN
			;FILE MOVEING PIECE ATTACKING P
	MOVE T2,CSMTM	;ADD BONUS IF ATTACKING ON FILE
	LDB T2,[BFILE,,BPREL(T2)]
	CAME T2,PFILE-PIECE(T1)
	JRST LPSS3
	 RC ATTACKING *M!T1 ON FILE,ADD R,APFVLU	;ATTACK PAWN ON FILE
	SKIPLE PPASED-PIECE(T1)
	 RC PASSED *M!T1 ON FILE,ADD R,APFPV	;ADD EXTRA BONUS IF PAWN PASSED 
LPSS3:	SKIPGE LMGT-PIECE(T1)
	SKIPG PPTP-PIECE(T1)
	JRST LPSS4
	RC ATTACKING WEAK P, ADD R,AWPVLU
LPSS4:	MOVE T2,RPVAL-PIECE(T1)
	ADDM T2,AGAIN
	SKIPN @LMGST+1(I)
	JRST LMGR2D	;HIS PIECE UNDEFENDED
	SUB T2,RPVAL(B)
	JUMPLE T2,LMGR2H
	LSH T2,-1
	CAIL T2,2*PWNV
	MOVEI T2,2*PWNV
	RC ATTACK VAL *M!T1 ,ADD R,T2
	AOS LMFORS

LMGR2B:	MOVE T1,@LMGST+1(I)
	CAMG T1,@LMGST(I)
	RC OVERATTACKING,ADD R,TTVLU
	POPJ T,


CSMTM:	0	;HOLDS SQUARE BEING MOVED TO IN CURRENT MOVE


LMGP1:	SKIPE ATTHF
	JRST LMGP2
	PUSH P,A	;SEE IF PINNING PIECE
LMGP3:	ADD A,RDT(J)
	SKIPN T2,BOARD(A)
	JRST LMGP3
	JUMPL T2,LMGP4
	XCT OURGY2+1(I)
	JRST LMGP4
	SKIPN @LMGST+1(I)
	JRST LMGP5	;YES PINNED
	MOVE ZR,PVALUE-PIECE(T2)
	CAMLE ZR,PVALUE(B)
	JRST LMGP5
	SKIPL LMGT-PIECE(T2)
	JRST LMGP6
	SKIPG PPTP-PIECE(T2)
	JRST LMGP4	;DONT WORRY ABOUT NON WEAK P
LMGP6:	MOVE ZR,@LMGST(I)
	CAMN ZR,@LMGST+1(I)
	JRST LMGP7	;MIGHT BE PINNING
	CAML ZR,@LMGST+1(I)
	RC PSEUDO PIN ON *M!T1, ADDI R,20
LMGP4:	POP P,A
	JRST LMGP2

LMGP7:	RC MAYBE PIN ON *M!T1,ADDI R,40
	JRST LMGP4

LMGP5:	SKIPL LMGT-PIECE(T1)
	JRST LMGP5A
	SKIPG PPTP-PIECE(T1)
	JRST LMGP5B	;PINNING NON WEAK P
LMGP5A:	MOVE S,RPRANK-PIECE(T1)
	MOVE ZR,PVALUE-PIECE(T1)
	CAMLE ZR,PVALUE(B)
	JRST LMGP5C	;ALSO VALID ATTACK
	RC PINNING *M!T1 AT RANK *U!S, ADD R,PINVLT(S)
	JRST LMGP4

LMGP5B:	RC PINNING NON WEAK P,ADDI R,40
	JRST LMGP4

LMGP5C:	RC PINNING+ATTACKING *M!T1 AT RANK *U!S, ADD R,PINVAT(S)
	JRST LMGP4

LTMT1:	SKIPL LMGT(B)
	JRST LTMT2
	CAME A,LTMTT1(I)	;MOVING TO KN3?
	JRST LTMT3
	SKIPE D,@TPT1(I)
	XCT OURGY+1(I)
	JRST LTMT3
	SKIPGE RMDTB-PIECE(D)
	RC TRAPPING B,ADDI R,200
LTMT3:	CAME A,LTMTT2(I)	;MOVING TO QN3
	JRST LTMT2
	SKIPE D,@TPT4(I)
	XCT OURGY+1(I)
	JRST LTMT2
	SKIPGE RMDTB-PIECE(D)
	RC TRAPPING B,ADDI R,200
	JRST LTMT2

LTMTT1:	BBS+2*BW+1	;KN3
	BBS+5*BW+1

LTMTT2:	BBS+2*BW+6	;QN3
	BBS+5*BW+6

LGAA1:	MOVE T2,(T1)	;ALREADY ATT THIS SQ
	XOR T2,PIECE(B)
	JUMPL T2,CPOPJT	;NOT DEF
LDFP1:	CAIN T1,PIECE(B)
	POPJ T,
	SKIPE ATTHF
	JRST LDFP1A
	SKIPN DEFVL-PIECE(T1)
	RC RANDOMLY DEFENDING *M!T1,ADD R,RDEFVLU
LDFP1A:	RC DEFENDING *M!T1,ADD R,DEFVL-PIECE(T1)
	SKIPL SLDPC(B)
	POPJ T,
LDISC1:	SKIPE ATTHF	;SETTING UP DISCOVERY
	POPJ T,
	SKIPGE LMGT-PIECE(T1)
	JRST LDISC3	;P SEE IF BLOCKED
LDISC6:	PUSH P,A
LDISC2:	ADD A,RDT(J)
	SKIPN T2,BOARD(A)
	JRST LDISC2
	JUMPL T2,LDISC4
	XCT OURGY2+1(I)
	JRST LDISC4
	SKIPN @LMGST+1(I)
	JRST LDISC5	;YES POSSIBLE DISCOVERY
	MOVE ZR,PVALUE-PIECE(T2)
	CAMLE ZR,PVALUE(B)
	JRST LDISC5
LDISC4:	POP P,A
	POPJ T,

LDISC5:	SKIPL LMGT-PIECE(T2)	;DISCOVERY ON PAWN NOT THAT BIG A DEAL
	AOS LMFORS
	RC SETTING UP DISCOVERY BY *P!B ON *M!T2,ADDI R,40
	JRST LDISC4

LDISC3:	SKIPE @LDISCT(I)
	JRST LDISC7	;BLOCKED AHEAD HAVE CAPT?
	HRRZ T2,J
	CAIL T2,2
	CAIL T2,4
	JRST LDISC6
LDISC7:	SKIPLE T2,@LDSCT1(I)	;DROP THRU ON ON FILE SO MUST HAVE CAPT
	XCT RMOY6+1(I)
	JRST .+2
	JRST LDISC6
	SKIPLE T2,@LDSCT2(I)
	XCT RMOY6+1(I)
	POPJ T,
	JRST LDISC6

LDISCT:	BOARD+BW(A)
	BOARD-BW(A)

LDSCT1:	BOARD+BW+1(A)
	BOARD-BW+1(A)

LDSCT2:	BOARD+BW-1(A)
	BOARD-BW-1(A)

LMGR2H:	JUMPN T2,LRH1
	SKIPN ATTHF
	PUSHJ T,LRH2	;EVEN SO SEE IF WANT TO OFFER TRADE
LRH1:	SKIPL PPTP-PIECE(T1)	;SHIFTING BALANCE OF POWER OF OTHER THAN PAWN DEF. BY PAWN
	SKIPN T2,@LMGST(I)
	JRST LMGR2B
	SKIPL SLDPC(B)
	JRST LRH4
	LDB ZR,RDAT(J)
	CAIN ZR,(B)
	JRST LRH5	;MOVING TO SAME RANK OR FILE NOTHING UNLESS DISCOVERY

LRH4:	CAME T2,@LMGST+1(I)
	JRST LMGR2B
LRH4A:	RC SHIFTING BAL OF POWER AT *S!A,ADD R,GMAVLU
	POPJ T,

LRH5:	SKIPL DISCOVF
	POPJ T,
	MOVE S,@LMGST+1(I)
	CAIE T2,1(S)	;COMPENSATE FOR DISCOVERED ATTACK
	JRST LMGR2B	;WHICH HAS BEEN ADDED TO LMGST(I) ALREADY
	SKIPL LMGT-PIECE(T1)
	AOS LMFORS
	JRST LRH4A

LMGR2D:	LDB T2,[PTID,,(T1)]	;ATTACKING UNDEFENDED PIECE
	LDB S,[PTID,,PIECE(B)]
	CAMN S,T2
	JRST LMGR2E
LMGR2F:	MOVE T2,PVALUE-PIECE(T1)
	LSH T2,-2
	RC ATTACKING LOOSE PIECE *M!T1 ,ADD R,T2
	AOS LMFORS
	POPJ T,

LMGR2E:	SKIPE PINT-PIECE(T1)
	JRST LMGR2F
LRH2:	MOVE S,PDV(B)
	CAMGE S,PDV-PIECE(T1)
	RC OFFERING TRADE FOR GREATER DEV VAL,ADDI R,40
	RC OFFERING TRADE,ADDI R,10
	POPJ T,

;	MOVE S,PCBAL
;	MOVE ZR,S
;	ADD ZR,PCBAL+1
;	SUB S,PCBAL+1
;	MOVEM S,LRH3
;	SUB ZR,PVALUE(B)
;	SUB ZR,PVALUE(B)	;EACH SIDE LOSES VALUE OF PIECE
;	IMUL S,PCRAT1
;	IDIVM S,ZR
;	SUB ZR,LRH3
;	SKIPE I
;	MOVNS ZR
;	RC TRADE VALUE *M!T1,ADD R,ZR
;	POPJ T,

;LRH3:	0	;TEMP

CCPV1:	SKIPN ATTHF
	SKIPGE T1,BOARD(A)	;STORE RLSING ATT BIT
	POPJ T,
	DPB W,BATTSQ(A)
	JUMPE T1,CPOPJT
	MOVE T2,(T1)
	XOR T2,PIECE(B)
	JUMPL T2,CPOPJT
	SKIPN DEFVL-PIECE(T1)
	RC NOW RANDOMLY DEF *M!T1,ADD R,RDEFVLU
	RC NOW DEF *M!T1,ADD R,DEFVL-PIECE(T1)
	POPJ T,


LMUA7:	JUMPE T2,LMUA2
	MOVE T1,T2
LMUA:	JFFO T1,LUJF1
	JRST LMUA2

LUJF1:	LDB TT,FUJFT1(T2)
	ANDCM T1,FUJFT2(T2)
	SKIPN TT,BDAST(TT)
	JRST LMUA
	MOVE D,FUJFT3(T2)
	MOVE T2,T1

LMUA1:	CAMN A,PIECEL(TT)	;PIECE BEING TAKEN?
	JRST LMUA7
	XCT RMOYTT(I)
	JRST LMUA1A	;HIS GUY
	SKIPL @LMUAT2(D)
	JRST LMUA1A
	SKIPGE @LMUAT3(D)
	JRST LMUA7	;OUR OWN GUY ALREADY ACCOUNTED FOR BY CAT (NEVER REALLY BLOCKING HIM)
LMUA1A:	MOVE S,PCATV(TT)	;COMPUTE WA,BA INC OF WHATS BEING BLOCKED
	SKIPA T1,PIECEL(TT)
LMUA1D:	MOVE T1,PIECEL(T1)
	LDB T1,RDAT1(D)
	JUMPE T1,LMUA1C
	MOVE ZR,PIECE(TT)
	XOR ZR,PIECE(T1)
	JUMPL ZR,LMUA1C
	SKIPL SLDPC(T1)
	JRST LMUA1C
	ADD S,PCATV(T1)
	JRST LMUA1D

LMUA1C:	MOVEM S,LMUBAI
	LDB C,LMUAT(D)	;FETCH LINE ID FROM SQUARE PIECE MOVING TO (A)
	MOVE S,PIECEL(TT)
	LDB ZR,LMUAT1(D)
	CAME C,ZR
	JRST LMUA5	;NO SECONDARY EFFECTS
	SKIPGE LMGT(B)
	JRST LMUA1B
	XCT RMOYTT+1(I)
	JRST LMUA7	;OUR GUY DO NOTHING EX PAWN MOVE
LMUA1B:	SUB S,A
	MOVE ZR,PIECEL(B)
	SUBM A,ZR
	XOR S,ZR
	JUMPGE S,LMUA7	;RESTRICTING
	XCT RMOYTT+1(I)
	JRST LMUOP
	SKIPGE RPIECE(B)
	POPJ T,	;ILLEGAL KING MOVING INTO "SHADOW"
	MOVN ZR,@AT+1(I)
	SKIPE PINVF(TT)
	IMUL ZR,PINVF(TT)
	RC UNBLOCKING *P!TT ON *S!A, ADDM ZR,DISPOS
	PUSH T,@LMURAT+1(I)
	PUSH T,@RDAT(D)
	PUSH T,A
	HRLM D,(T)
	MOVE T1,LMUBAI
	ADDM T1,@LMURAT+1(I)
	DPB TT,RDAT(D)
	PUSHJ T,LMUA7
	JRST LMUUNC

LMUOP:	MOVE ZR,@AT(I)
	SKIPE PINVF(TT)
	IMUL ZR,PINVF(TT)
	RC UNBLOCKING *P!TT ON *S!A, ADDM ZR,DISPOS
	PUSH T,@LMURAT(I)
	PUSH T,@RDAT(D)
	PUSH T,A
	HRLM D,(T)
	MOVE T1,LMUBAI
	ADDM T1,@LMURAT(I)
	DPB TT,RDAT(D)
	PUSHJ T,LMUA7
	JRST LMUUN1

ZZQ==400400,,T1
FUJFT1:	REPEAT 9,[
	REPEAT 4,ZZQ
	ZZQ==ZZQ-<40000,,>
]
ZZQ==740000,,
FUJFT2:	REPEAT 9,[
	REPEAT 4,ZZQ
	ZZQ==ZZQ_-4
]
ZZQ=0
FUJFT3:	REPEAT 9,[
	REPEAT 4,ZZQ
	ZZQ==ZZQ+1
]

LMUA5:	MOVEM A,LMUOSQ	;SAVE SQUARE MOVING TO
	HRRZM B,LMUOPC	;ORG PIECE MOVING
	SKIPE S,BOARD(A)
	SUBI S,PIECE
	MOVEM S,LMUPCP	;PIECE CAPTURED
	PUSH P,LMFORS	;SO CHECK CAN BE MADE FOR IMPORTANT DISCOVERYS
			;PUSH ONTO P DATA NEEDED TO CONTINUE UNBLOCKING SEARCH
	PUSH P,B
	PUSH P,T2
	PUSH P,W
	MOVE A,PIECEL(B)
	MOVE B,TT
	MOVE J,D
	MOVEI Q,LMUAGR
	CLEARB D,W
	SETOM DISCOVF
	XCT RMOYTT(I)
	JRST LMUA6	;HIS GUY
LMUA6R:	MOVE T1,PIECEL(B)
	MOVEM T1,CSMTM
	RC UNBLOCKING *P!B ,MOVEM J,LMUDR
	CAILE J,3
	JRST LMUA6S
	PUSHJ T,LSROOK+1
LMUA6T:	CLEARM DISCOVF
	SKIPE PINVF(B)
	IMUL W,PINVF(B)
	CAIN Q,LMUOA
	MOVNS W	;UNBLOCKING HIS GUY
	RC POSITIONAL VAL OF UNBLOCKAGE, ADDM W,DISPOS
	POP P,W
	MOVE Q,LMQS
	POP P,T2	;NOTE ALSO POPS AT LMV6A
	POP P,B
	MOVE A,LMAS
	POP P,T1
	CAME T1,LMFORS
	SETOM IDISKF	;IMPORTANT DISCOVERY
	JRST LMUA7

LMUA6X:	POP P,W	;MOVE ILLEGAL EXIT
	POP P,T2
	POP P,B
	MOVE A,LMAS
	MOVE J,LMJS
	CLEARM DISCOVF
	MOVE Q,LMQS
	POP P,T1
	POPJ T,

LMUA6S:	PUSHJ T,LSBIS+1
	JRST LMUA6T

LMURT1:	WA(C)
	BA(C)
	WA(C)

LMURAT:	WA(A)
	BA(A)
	WA(A)

LMURAS:	WA(S)
	BA(S)
	WA(S)

LMUAT2:	REPEAT 4,RFPCS(B)
	REPEAT 4,DDPCS(B)

LMUAT3:	REPEAT 4,RFPCS(TT)
	REPEAT 4,DDPCS(TT)

LUA3:	MOVE T2,[-6,,12.]
	JRST LUA4

LUA2:	SKIPA T2,[-6,,6]
LUA1:	MOVSI T2,-6
LUA4:	LDB S,RDAT(T2)
	JUMPE S,LUA5
	XCT RMOY3(I)
	JRST LUA6	;BELONGS TO SIDE NOT TO MOVE
	CAMN S,LMUOPC
	JRST LUA5A	;THIS PIECE MOVING
LUA5C:	AOS NDEFS
	JUMPE C,LUA5B
	MOVE TT,PVALUE(S)
	CAMLE TT,PVALUE(S)
LUA5B:	MOVE C,S
LUA5:	AOBJN T2,LUA4
	POPJ P,

LUA6:	CAME S,LMUPCP
	SKIPE PINT(S)
	JRST LUA5	;THIS PIECE CAPTURED OR PINNED
	AOS NATTS
	JUMPE D,LUA6A
	MOVE TT,PVALUE(D)
	CAMLE TT,PVALUE(S)
LUA6A:	MOVE D,S
	SKIPL SLDPC(S)
	JRST LUA5
LUA6B:	MOVE S,PIECEL(S)
	LDB S,RDATSS(T2)
	JUMPE S,LUA5
	XCT RMOY3(I)
	SKIPL SLDPC(S)
	JRST LUA5
	AOS NATTS
	JRST LUA6B

LUA5A:	LDB S,ONEBSQ(T2)
	JUMPE S,LUA5
	LDB S,RDATSS(T2)	;ORIG PIECE MOVING HAVE FRIEND BEHIND IT?
	SKIPGE SLDPC(S)
	XCT RMOY3(I)
	JRST LUA5
	JRST LUA5C

LMUPCP:	0	;PIECE CAPTURED BY MOVE
LMUOPC:	0	;PIECE MOVING
LMUOSQ:	0	;SQUARE MOVING TO
DISCOVF:	0	;-1 IF ATTACK INVESTIGATING IS A DISCOVERY
LMUBAI:	0	;INC TO WA BA

LMUA6:	MOVE S,@OKINGT(I)
	LDB T1,ONEBS(J)
	CAMN T1,A
	JRST LMUA6X	;MOVE DISCOVERS ON K, ILLEGAL
	MOVEI Q,LMUOA	;UNBLOCKING HIS GUY
	JRST LMUA6R

LMUOA:	SKIPGE BOARD(A)
	POPJ T,
	POP T,LMUTT0	;RETURN TO LSROK, ETC
	POP T,LMUTT1	;PUSHED BY LSROK, ETC
	POP T,LMUTT2	;RETURN TO LMUA6T
	PUSH T,@LMURAT+1(I)
	PUSH T,@RDAT(J)
	PUSH T,A
	HRLM J,(T)
	PUSH T,[LMUUNC]
	PUSH T,LMUTT2	;PUT EM BACK
	PUSH T,LMUTT1
	PUSH T,LMUTT0
	MOVE T1,LMUBAI
	ADDM T1,@LMURAT+1(I)
	SKIPN ATTHF
	DPB B,RDAT(J)
	RC UNBLOCKING SQ *S!A FOR OPP,ADD W,@AT+1(I)
	SKIPE T1,BOARD(A)
	XCT LMUOAT(I)	;SKIPN ON OUR PIECE
	POPJ T,
	CAMN A,@OKINGT(I)
	JRST LMV6A	;STOP WORKS MOVE ILLEGAL
LMV6F:	CLEARM NDEFS
	CLEARM NATTS
	CLEARB C,D
	MOVE T2,LMUOPC
	LDB S,[PTID,,PIECE(T2)]
	JUMPN S,LUE1	;MOVING PIECE MIGHT STILL HOLD
	SKIPN @LMGST(I)
	JRST LMV6B
LUE2:	SKIPE BDA1(A)
	PUSHJ P,LUA1
	SKIPE BDA2(A)
	PUSHJ P,LUA2
	SKIPE BDA3(A)
	PUSHJ P,LUA3
	JUMPE C,LMV6B
	JUMPE D,LUEX
	MOVE TT,PVALUE(D)
	SUB TT,PVALUE-PIECE(T1)
	JUMPL TT,LUE4	;ATTACKED BY LESS
	SOSG NATTS
	JRST LMV6C	;ONLY ATTACK NOT E P
	SUB TT,PVALUE(D)
	JUMPGE TT,LMV6C	;CAN AFFORD TO LOSE P+D FOR A
	SOSLE NDEFS
	JRST LMV6C	;MORE THAN ONE DEF MAKE OPT ASSUMPTION
	MOVNS TT
LUE6:	CAMLE TT,PVALUE-PIECE(T1)
	MOVE TT,PVALUE-PIECE(T1)
LUE5:	RS DIS ATTACK ON *M!T1 CALC LOSS,SUB R,TT
LUEX:	POPJ T,

LUE1:	MOVE S,LMUOSQ
	PUSH P,T1
	PUSH P,B
	MOVE B,LMUOPC
	PUSHJ P,@LGLMPT(B)
	JRST LUE3
	MOVE C,B	;STILL HOLDS
	AOS NDEFS
LUE3:	POP P,B
	POP P,T1
	JRST LUE2

LUE4:	MOVMS TT
	SOSG NDEFS	;SKIP ON MULTPLE DEFS
	SOSG NATTS	;SKIP ON MULT ATTACKS
	JRST LUE5
	SUB TT,PVALUE(D)
	JRST LUE6

NDEFS:	0	;NUMBER DEFS 
NATTS:	0	;NUMBER ATTACKS ON DISCOVERED UPON PIECE


LMUOAT:	SKIPGE (T1)
	SKIPL (T1)

LMV6B:	RC DIS ATTACK ON *M!T1 ITS LOOSE,SUB R,PVALUE-PIECE(T1)
	JRST LUEX

LMV6C:	RC DIS ATTACK ON *M!T1 ,SUB R,OPATV	;UNBLOCKING ATTACK
	JRST LUEX

LMV6A:	SKIPE ATTHF
	JRST LMV6F	;NOT REALLY
	ERRTTY [ASCIZ /ILLEGAL MOVE AT LMV6A/]

LMUTT0:	0	;TEM AT LMUOA AND LMUAGR
LMUTT1:	0
LMUTT2:	0
DISPOS:	0	;POSITIONAL FACTORS ASSOC WITH DISCOVERIES

LMUUNC:	POP T,S
	HLRZ T1,S
	POP T,@RDATSS(T1)
	POP T,@LMURAS+1(I)
	POPJ T,

LMUUN1:	POP T,S
	HLRZ T1,S
	POP T,@RDATSS(T1)
	POP T,@LMURAS(I)
	POPJ T,



LBL2:	AND T1,[777700,,]	;ONLY SLIDING DIRECTIONS
LBL5:
LBL1:	JFFO T1,LBFJ1
	JRST (Q)

LBFJ1:	LDB J,FJTB1(T2)
	ANDCM T1,FJTB2(T2)
	MOVE S,@FJTB3-LBFJBS(Q)
	SKIPL SLDPC(J)
	JRST LBL5
	CAIN J,(B)
	JRST LBL5
	SKIPGE @LBLT2(S)
	JRST LBL5
	SKIPGE @LBLT3(S)
	JRST LBL5A
	XCT RMOYJ(I)
	JRST LB6L1	;HIS GUY
LBL6:	ADD A,RDT(S)	;OURS
	SKIPGE D,BOARD(A)
	JRST LBL7
	LDB ZR,RDAT(S)
	CAME ZR,J
	JRST LBL7
LBL6B:	MOVE ZR,@AT(I)
	SKIPE PINVF(J)
	IMUL ZR,PINVF(J)
	RC BLOCKING OUR GUY *P!J AT *S!A, SUB W,ZR
LBL6A:	JUMPE D,LBL6	;VACANT SQ
;IMPOSSIBLE FOR A TO BE = LMAS SINCE WE STARTED THERE ADDING
	CAMN A,ORGPCL
	JRST LBL7	;USED TO BE BLOCKED HERE
	XCT OURGY(I)
	JRST LBL7	;NOT RUNNING INTO OUR GUY
	MOVE ZR,@LMGST(I)
	SOJG ZR,LBL7	;HES DEFENDED OTHERWISE
	MOVE ZR,@LMGST+1(I)
	JUMPE ZR,LBL7	;HES NOT ATTACKED

	MOVE S,A	;IS MOVING PC PICKING UP DEFENSE?
	MOVE A,LMAS
	PUSH P,T1
	PUSHJ P,@LGLMPT(B)
	JRST LBL6BO	;NO
	POP P,T1
	JRST LBL7	;OK FOR A TO GET CLOBBERED

LBL6BO:	POP P,T1
	MOVE ZR,RPVAL-PIECE(D)
	LSH ZR,-2
	RC BLOCKING ONLY DEF OF *M!D ,SUB R,ZR	;LEAVING HIM EN PRISE
LBL7:	MOVE A,LMAS
	JRST LBL5

LB6L1:	ADD A,RDT(S)
	SKIPGE D,BOARD(A)
	JRST LBL7
	LDB ZR,RDAT(S)
	CAME ZR,J
	JRST LBL7
LBL6C:	MOVE ZR,@AT+1(I)
	SKIPE PINVF(J)
	IMUL ZR,PINVF(J)
	RC BLOCKING HIS GUY *P!J AT *S!A, ADD W,ZR
	JUMPE D,LB6L1	;VACANT SQ
	CAMN A,ORGPCL
	JRST LBL7	;USE TO BE BLOCKED HERE
	XCT OURGY+1(I)
	JRST LBL7B
	SKIPN @LMGST(I)
	JRST LBL7	;NOT ATT BY US
	MOVE ZR,@LMGST+1(I)
	SOJN ZR,LBL7	;DEF MORE THAN ONCE
	RC BLOCKING ONLY DEF OF HIS PC *M!D, ADDI R,40
	MOVE ZR,RPVAL-PIECE(D)
	ADDM ZR,AGAIN
	JRST LBL7

LBL7B:	MOVE ZR,@LMGST+1(I)
	SOJE ZR,LBL7C
	RC BLOCKING ATTACK ON *M!D,ADD R,DEFVL-PIECE(D)
	JRST LBL7

LBL7C:	RC BLOCKING ONLY ATTACK ON *M!D,ADD R,ENPCL-PIECE(D)
	JRST LBL7


LBLT2:	REPEAT 4,RFPCS(B)
LBLT3:	REPEAT 4,[[0]
]	;USED FOR BOTH
	REPEAT 4,DDPCS(B)

LBL5A:	XCT RMOYJ(I)
	JRST LB6L1	;NOT OUR GUY
	LDB ZR,[PTID,,PIECE(J)]
	CAIN ZR,BID
	SKIPE NMOVES(J)
	JRST LBL7
	JRST LBL6	;BLOCKING B THAT HASNT MOVED BAD EVEN IF BY Q

LMGST:	WA(A)
	BA(A)
	WA(A)

LMGST1:	WA(T1)
	BA(T1)
	WA(T1)

LMWPW:	ADDI A,2*BW
	CAIL A,6*BW
	JRST LMWPW1
	SKIPN BOARD(A)
	SKIPE BOARD-BW(A)
	JRST LMWPW1
	PUSHJ T,(Q)
LMWPW1:	SUBI A,BW
LMBPW2:	SKIPN BOARD(A)
	PUSHJ T,(Q)
	ADDI A,1
	CAME A,GHLOC
	SKIPLE BOARD(A)
	PUSHJ T,(Q)
	SUBI A,2
	CAME A,GHLOC
	SKIPLE BOARD(A)
	JRST (Q)
	POPJ T,

LMBPW:	SUBI A,2*BW
	CAIG A,6*BW
	JRST LMBPW1
	SKIPN BOARD(A)
	SKIPE BOARD+BW(A)
	JRST LMBPW1
	PUSHJ T,(Q)
LMBPW1:	ADDI A,BW
	JRST LMBPW2



LMKNT:	ADDI A,2*BW+1
	PUSHJ T,(Q)
	SUBI A,2
	PUSHJ T,(Q)
	SUBI A,4*BW
	PUSHJ T,(Q)
	ADDI A,2
	PUSHJ T,(Q)
	ADDI A,3*BW+1
	PUSHJ T,(Q)
	SUBI A,4
	PUSHJ T,(Q)
	SUBI A,2*BW
	PUSHJ T,(Q)
	ADDI A,4
	JRST (Q)


DEFINE LMKC
	SKIPE @LMGST+1(I)
	SKIPGE Q
	PUSHJ T,(Q)
TERMIN

LMKING:	ADDI A,1
	LMKC
	ADDI A,BW
	LMKC
	SUBI A,1
	LMKC
	SUBI A,1
	LMKC
	SUBI A,BW
	LMKC
	SUBI A,BW
	LMKC
	ADDI A,1
	LMKC
	ADDI A,1
	LMKC
	POPJ T,


LMROOK:	MOVSI J,-4
	PUSH T,A
LMROK1:	MOVE A,(T)
LMROK4:	ADD A,RDT(J)
	PUSHJ T,(Q)
	SKIPN T1,BOARD(A)
	JRST LMROK4
	JUMPL T1,LMROK2
LMROK2:	AOBJN J,LMROK1
POPAJT:	POP T,A
	POPJ T,

LMQUEEN:	PUSHJ T,LMROOK
LMBIS:	MOVE J,[-4,,4]
	PUSH T,A
LMBIS1:	MOVE A,(T)
LMBIS4:	ADD A,RDT(J)
	PUSHJ T,(Q)
	SKIPN T1,BOARD(A)
	JRST LMBIS4
	JUMPL T1,LMBIS2
LMBIS2:	AOBJN J,LMBIS1
	POP T,A
	POPJ T,

LSROOK:	MOVSI J,-4	;FOR SCORING DEV VALUE
	PUSH T,A
LSROK1:	CLEARM ATTHF
	MOVE A,(T)
LSROK4:	ADD A,RDT(J)
	PUSHJ T,(Q)
	SKIPN T1,BOARD(A)
	JRST LSROK4
	JUMPL T1,LSROK2
	MOVE T2,(T1)
	XOR T2,PIECE(B)
	JUMPL T2,LSRK4A	;HIS GUY
	SKIPGE RFPCS-PIECE(T1)
	JRST LSRK4B
LSROK2:	AOBJN J,LSROK1
	CLEARM ATTHF
	POP T,A
	POPJ T,

LSRK4A:	MOVE ZR,PVALUE-PIECE(T1)
	CAMGE ZR,PVALUE(B)
	JRST LSROK2
LSRK4B:	SETOM ATTHF
	HRRZ ZR,Q
	CAIN ZR,LMGR2
	SKIPE DISCOVF
	JRST LSROK4
	LDB ZR,BATTSQ(A)
	JUMPN ZR,LSROK2	;ALREADY HITTING THIS SQ AND WHATS BEYOND
	JRST LSROK4

LSQUEEN:	PUSHJ T,LSROOK
LSBIS:	MOVE J,[-4,,4]
	PUSH T,A
LSBIS1:	CLEARM ATTHF
	MOVE A,(T)
LSBIS4:	ADD A,RDT(J)
	PUSHJ T,(Q)
	SKIPN T1,BOARD(A)
	JRST LSBIS4
	JUMPL T1,LSBIS2
	MOVE T2,(T1)
	XOR T2,PIECE(B)
	JUMPL T2,LSBS4A
	SKIPGE DDPCS-PIECE(T1)
	JRST LSBS4B
	SKIPGE LMGT-PIECE(T1)
	JRST LSBIS5
LSBIS2:	AOBJN J,LSBIS1
	CLEARM ATTHF
	POP T,A
	POPJ T,

LSBS4A:	MOVE ZR,PVALUE-PIECE(T1)
	CAMGE ZR,PVALUE(B)
	JRST LSBIS2
LSBS4B:	SETOM ATTHF
	HRRZ ZR,Q
	CAIN ZR,LMGR2
	SKIPE DISCOVF
	JRST LSBIS4
	LDB ZR,BATTSQ(A)
	JUMPE ZR,LSBIS4		;NOT ALREADY ATTACKING THIS SQ, OK.
	LDB ZR,RDAT(J)
	CAIE ZR,(B)		;SKIP ON ALREADY ATTACKING IT FROM THIS DIR.
	JRST LSBIS4
	JRST LSBIS2

LSBIS5:	SKIPL @BTPDIR(I)
	JRST LSBIS2
	SETOM ATTHF
	HRRZ ZR,Q
	CAIN ZR,LMGR2
	SKIPE DISCOVF
	JRST LSBIS6
	LDB ZR,BATTSQ(A)
	JUMPN ZR,LSBIS2
LSBIS6:	ADD A,RDT(J)
	PUSHJ T,(Q)
	JRST LSBIS2

BTPDIR:	WBTHP(J)
	BBTHP(J)

BBTHP==.-4
	0
	0
WBTHP==.-4
	-1
	-1
	0
	0


IFN HSCOD,[
HSREC:	LDB I,[100,,PLYN]
	PUSHJ P,HASHR0	;GET HASH WORD AND RECORD FOR USE
	JFCL	;INITIALIZING HASH TABLE
	MOVE S,HSP
	MOVE T2,GAMP
	MOVEM S,GHK1-GAME(T2)
	POPJ P,
]


			;HASH BOARD POSITION + LOOK UP IN TABLE
			;SKIP IF NOT FOUND NO SKIP IF FOUND
			;SETS UP HSP WITH HT KEY
			;HSADR WITH TABLE ADR IF FOUND OR ADR OF NEW ENTRY
			;HSADR ALSO RETURNED IN T1
HASHR0:	SKIPN ICSW
HASHR:	PUSHJ P,HSKG
	MOVE S,HSKEY		;IF FOUND, LEAVE HASH ADR IN T2, KEY IN T1
	SKIPE T1,GHLOC
	XOR S,RANDN(T1)
	SKIPE NMOVES+WKING-PIECE
	JRST HASHR1
	SKIPN PIECEL+WKR-PIECE
	JRST .+3
	SKIPN NMOVES+WKR-PIECE
	XORI S,20
	SKIPN PIECEL+WQR-PIECE
	JRST .+3
	SKIPN NMOVES+WQR-PIECE
	XORI S,2
HASHR1:	SKIPE NMOVES+BKING-PIECE
	JRST HASHR2
	SKIPN PIECEL+BKR-PIECE
	JRST .+3
	SKIPN NMOVES+BKR-PIECE
	XORI S,4
	SKIPN PIECEL+BQR-PIECE
	JRST .+3
	SKIPN NMOVES+BQR-PIECE
	XORI S,10
HASHR2:	DPB I,[100,,S]	;SIDE TO MOVE
	CAMN S,HSBPT
	JRST HSBPT1	;HASH BREAKPOINT
HSHK1:	MOVEM S,HSP	;TABLE KEY -- ENTRY FOR PRECOMPUTED KEYS
	MOVE T2,S
	ANDI T2,HSHMSK	;MASK TO SIZE OF TABLE
	MOVNM T2,HASHT1	;TRIAL ADR
	HRLI T2,-HTNE(T2)
	MOVE T1,HSP
HASHR3:	HRRZM T2,HSADR
	CAMN T1,HSTB(T2)
	POPJ P,
	SKIPN HSTB(T2)
	JRST POPJ1
	AOBJN T2,HASHR3
	HRLZ T2,HASHT1

HASHR4:	HRRZM T2,HSADR
	CAMN T1,HSTB(T2)
	POPJ P,
	SKIPN HSTB(T2)
	JRST POPJ1
	AOBJN T2,HASHR4
	ERRTTY [ASCII /HT FULL!/]

HSKG:	SETZM HSKEY
REPEAT 32.,[
	SKIPN T1,PIECEL+.RPCNT+1
	JRST .+4
	MOVE T1,RANDN(T1)
	ROT T1,@HROT+.RPCNT+1
	XORM T1,HSKEY
]	POPJ P,

HSBPT1:	SKIPLE HBPTSW	 ;REACHED HSBPT POSITION, WHAT NOW?
	.VALUE
;	SKIPGE HBPTSW
;	SETOM HSTTF
	SKIPL HBPTSW
	JRST HSHK1
	PUSHJ P,STVTR1   ;TRACE STATEV, GENERATE PRINTOUT, UNTRACE STATEV
	SETOM QTF
	JRST HSHK1

PP HROT:,
	REPEAT 8,1+PID
	1+RID
	1+KNID
	1+BID
	1+KID
	1+QID
	1+BID
	1+KNID
	1+RID
	REPEAT 8,10+PID
	10+RID
	10+KNID
	10+BID
	10+KID
	10+QID
	10+BID
	10+KNID
	10+RID


;HASH TABLE PARAM+VARIABLES
HSKEY:	0	;INCREMENTAL PORTION OF CURRENT HASH KEY.  TO COMPUTE HASH KEY
		; FOR CURRENT POSITION, COMBINE THIS WITH ADJUSTMENTS FOR 
		; GHOST, CASTLING AND STM.
HSBPT:	0	;HASH CODE OF POSITION TO STOP ON.
HBPTSW:	0	;WHAT TO DO ON HSBPT MATCH.  >0 -> .VALUE. <0 TRACE STATEV.
HSP:	0	;HASH KEY OF CURRENT POSITION
HASHT1:	0	;TRIAL ADDRESS (TEMP)
HSADR:	0	;HASH ADR OF CURRENT POSITION.
IFN DEC,[
	0	;HERE FOR LOSING HPV
HSTB:	BLOCK HTNE
HSTBV:	BLOCK HTNE
HSTBL:	BLOCK HTNE
]
HASHS:	HTNE/5*4	;NO ENTRIES LEFT
HASHSS:	HTNE/5*4	;NO ENTRIES ALLOWED

HASHE:
HASHE1:	MOVE T2,HSADR	;ENTER CURRENTLY ADDRESSED HASH ENTRY
	JUMPL T2,CPOPJ  ; T1 -> VALUE
	SKIPE HSTB(T2)  ; J ->  LINK
	JRST HASHE3
	SKIPG HASHS	;AVAILABLE SPACE
	JRST HASHE2
	SOS HASHS
HASHE3:	MOVEM T1,HSTBV(T2)
	MOVE T1,HSP
	MOVEM T1,HSTB(T2)
	MOVEM J,HSTBL(T2)
	POPJ P,


HASHE2:	SETOB T2,HSADR
	POPJ P,

;TABLE OF RANDOM NUMBERS
RANDN==.-2*BW-1
ZQ==105.105105
ZQQ==SIXBIT /FOOBAR/
ZY==696969.69
ZYY==SIXBIT /BLETCH/

REPEAT 8*BW-2,[
ZQ==.OP FMP ZQ ZQQ
ZY==.OP FMP ZY ZYY
	ZQ,,ZY
]
IFN HSCOD,[
HHVC:	AOS THTM
	SKIPGE NHSW	;CHECK SIG OF HASH DATA
	POPJ P,
	MOVE S,LMGD
	SOJE S,CPOPJ	;NO HASH ON FIRST LEVEL NEED MOVE
	LDB S,[HNPLB,,HSTBV(T2)]
	LDB T1,[HTVCOD,,HSTBV(T2)]
	CAIN T1,4	;POSITION IN SEARCH
	JRST HHVC4
	CAMGE S,Q
	POPJ P,	;NO DICE
	JRST HHVCT1(T1)

HHVCT1:	JRST HHVC1	;ACTUAL VALUE
	JRST HHVC2	;>=
	JRST HHVC3	;<=
	JRST HHVC4	;POS IN GAME
	JRST HHVC4	;POS IN SEARCH
	REPEAT 2,JRST HHVC0	;POSITION MARKED BY CHEOPS
	ERRTTY, [ASCII /HT LOSSAGE!/]

HHVC1:	SKIPG NHSW
	POPJ P,
HHVC0:	HRRE R,HSTBV(T2)
	MOVEI J,0
	AOS (P)
	POPJ P,

HHVC2:	SKIPG NHSW
	POPJ P,
	HRRE R,HSTBV(T2)
	XCT EVMT2(I)
	JRST HHVC2A
	POPJ P,

HHVC2A:	MOVE J,EVMT5A(I)
	AOS (P)
	POPJ P,

HHVC3:	SKIPGE NHSW	;POSITION MAY BE WORSE
	POPJ P,
	HRRE R,HSTBV(T2)
	XCT HHVC3A(I)
	POPJ P,
	MOVE J,EVMT5A+1(I)
	AOS (P)
	POPJ P,

HHVC3A:	CAML R,BPREV
	CAMG R,BPREV+1

HHVC4:	CLEARB R,J
	AOS (P)
	POPJ P,

]


LMGD1:	MOVEI T1,0
	LSHC T1,6
	JUMPE T1,.-1
	XCT LMGDT(I)
	AOS C
	JUMPN T2,LMGD1
	POPJ P,

LMG1:	SOJE C,LMG1A
	MOVEI C,0
	SKIPE T2,BDA1(A)
	PUSHJ P,LMGD1
	SKIPE T2,BDA2(A)
	PUSHJ P,LMGD1
	SKIPE T2,BDA3(A)
	PUSHJ P,LMGD1
	SOJE C,LMG1A	;NOT REALLY DOUBLE CHECK
	ADD B,[NPCS-1,,WKING-PIECE-1]	;DOUBLE CHECK
	JRST LMG2

LMGDT:	SKIPGE PIECE(T1)
	SKIPL PIECE(T1)

LMG1A:	PUSH T,B
	ADDI B,WKING-PIECE-1
	PUSH T,A
	SETOM CDVCF
	PUSHJ T,LMKING
	POP T,A
	PUSHJ T,KSQMK
	POP T,B
	MOVEI Q,LMGR7
	MOVEM Q,LMQS
	JRST LMG2


KSQMK:	PUSHJ P,FLATA
	JUMPE D,LOSEY
	MOVEI T2,0	;INDEX TO KSQTB
	LDB T1,[PTID,,PIECE(D)]
	MOVE TT,PIECEL(D)
	CLEARM LMGEPS
	JUMPE T1,LMG1P	;PAWN
	SOJE T1,LMG1D	; KNIGHT
	SOJE T1,LMG1E	;BIS
	SOJE T1,LMG1F	;ROOK
	SOJN T1,LOSEY	;KING?
	LDB T1,[BFILE,,BPREL(A)]	;QUEEN
	CAMN T1,PFILE(D)
	JRST LMG1F
	LDB T1,[BRANK,,BPREL(A)]
	CAMN T1,PRANK(D)
	JRST LMG1F


LMG1E:	LDB T1,[BPDAG,,BPREL(TT)]
	LDB S,[BPDAG,,BPREL(A)]
	CAMN S,T1
	JRST LMG1E1
	LDB T1,[BMDAG,,BPREL(TT)]
	LDB S,[BMDAG,,BPREL(A)]
	CAME S,T1
	JRST LOSEY
	TDZA T1,T1
LMG1E1:	MOVEI T1,1
	ADDI T1,LMBDT
LMG1F2:	CAML A,TT
	ADDI T1,2
LMG1H:	ADD A,(T1)
	MOVEM A,KSQTB(T2)
	CAME A,TT
	AOJA T2,LMG1H
	JRST LMG1M

LMG1F:	LDB S,[BRANK,,BPREL(A)]
	CAMN S,PRANK(D)
	JRST LMG1F1
	LDB S,[BFILE,,BPREL(A)]
	CAME S,PFILE(D)
	JRST LOSEY
	TDZA T1,T1
LMG1F1:	MOVEI T1,1
	ADDI T1,LMRDT
	JRST LMG1F2

LMG1D:	MOVEM TT,KSQTB(T2)
LMG1M:	AOS T2
	MOVNS T2
	HRLZM T2,KSQTBP
	POPJ T,

LOSEY:	ERRTTY [ASCII /LOSEY LOSEY!/]

LMG1PT:	MOVEI T1,BW(TT)
	MOVEI T1,-BW(TT)

LMG1P2:	ADDI TT,BW
	SUBI TT,BW

LMG1P:	XCT LMG1PT(I)
	CAMN T1,GHLOC
	MOVEM T1,LMGEPS	;PAWN THAT IS CHECKING CAN BE TAKEN EP
	JRST LMG1D

TRAPP:	AOS TRAPS
	PUSH P,A
	PUSH P,I
	MOVEM T,TRPPTS
	LDB I,[430100,,PIECE(B)]
	MOVEI Q,TRP1	;CHECK TO SEE IF PIECE IN B IS TRAPPED
	SETOM TRPF
	MOVE A,PIECEL(B)
	PUSHJ T,@LMGT(B)
	POP P,I
	POP P,A
	AOS TRAPSC
	POPJ P,

TRP1:	SKIPGE T1,BOARD(A)
	POPJ T,
	JUMPE T1,TRP3
	MOVE T2,(T1)
	XOR T2,PIECE(B)
	JUMPGE T2,CPOPJT
	MOVE T2,PVALUE(B)
	CAMLE T2,PVALUE-PIECE(T1)
	SKIPN @LMGST+1(I)
	JRST TRP2	;PIECE NOT TRAPPED
	POPJ T,

TRP3:	SKIPE @LMGST+1(I)
	POPJ T,
TRP2:	CLEARM TRPF
	MOVE T,TRPPTS
	POP P,I
	POP P,A
	POPJ P,

TRPF:	0
TRPPTS:	0

CBDV:	PUSH P,I
	PUSH P,W
	MOVEI W,0
	LDB I,[430100,,PIECE(B)]
	MOVEI Q,CBDV1
	MOVE A,PIECEL(B)
	SKIPGE LMGT(B)
	JRST CBDV2
CBDV3:	PUSHJ T,@LMGSTD(B)
CBDV4:	SKIPE PINVF(B)
	IMUL W,PINVF(B)
	RC POS VAL CAPT PIECE,ADD W,(P)
	SUB P,[1,,1]
	POP P,I
	MOVE A,LMAS
	POPJ P,

CBDV2:	PUSHJ T,LMGR1C
	JRST CBDV4

CBDV1:	SKIPGE D,BOARD(A)
	POPJ T,
	RC SQ VAL SQ *S!A ,ADD W,@AT(I)
	JUMPE D,CPOPJT
	XCT OURGY+1(I)
	POPJ T,
	MOVEI ZR,-PIECE(D)
	CAMN ZR,PCMVNG
	POPJ T,	;THIS GUY DOING THE CAPTING
	SKIPE PINT(B)
	JRST CBDV5
	RC THREATNING *M!D, ADD R,ENPCL-PIECE(D)
	POPJ T,

CBDV5:	RC THREATNING *M!D BUT PINNED, ADD R,DEFVL-PIECE(D)
	POPJ T,

STATEV:	AOS NSVS
	AOS LMGD
	MOVE A,@OKINGT(I)
	SKIPE @LMGST+1(I)
	SKIPA T1,LMGD2		;IN CHECK, DONT AOS LMGD2
	AOS T1,LMGD2
	SUB T1,HK1V
	MOVEM T1,PMGLVL
	PUSH P,PDVLV
	PUSH P,BPREV(I)
	MOVEM P,LGLMST
IFN HSCOD,[
	MOVEI Q,0
	SKIPGE NHSW
	JRST STAH1		;DONT USE HASH TABLE
	PUSHJ P,HASHR0		;LOOK UP CURRENT POSITION
	JRST STAH2		;FOUND IT, SEE WHETHER TO HASH CUT
STAH3:	CAILE Q,MHPLN
	MOVEI Q,MHPLN
	MOVSI T1,400000(Q)	;NOPE, ENTER CURRENT POSITION IN TABLE AS PENDING
	MOVEI J,-1
	PUSHJ P,HASHE1
STAH1:
]
STATE1:
IFN DSPLY,[
	SKIPLE INCSHW
	PUSHJ P,INCDU
]
IFN CHEOPS,[
	SKIPLE T1,CHEOSW
	TRNN T1,1
	JRST CPRD1		;DONT USE CHEOPS OR DONT USE STABILITY PRED HACK
	SKIPG C,STABD		;DEPTH TO USE IN STABILITY MODE
	JRST CPRD1
	MOVEM C,CHXD
;	MOVE R,PCBAL		;COMPUTE INITIAL ALPHA-BETA SETTINGS FOR CHEOPS.
;	ADD R,PNBAL		; THIS IS SOMEWHAT OF A CROCK.  CHEOPS SHOULD HAVE
;	SUB R,PCBAL+1		; A MODE WHICH ALLOWS THEM TO BE SET AT + AND -
;	SUB R,PNBAL+1		; DELTA FROM VALUE OF WOOD ON BOARD (IE INITIAL
;				; AC[MATERIAL]).
;	ASH R,-CHVCNV		;CONVERT OCM VALUE TO CHEOPS VALUE
;	MOVE Q,R
;	SUB R,STABEP		;EPSILON TO APPLY TO PCSATS WHEN SETTING UP CHEOPS IN
;	ADD Q,STABEP		; STABILITY PRED MODE
;	MOVEM R,CHXIA
;	MOVEM Q,CHXIB
	MOVE R,PMGEP
	MOVEM R,CHXIA
	MOVEI R,14000
	MOVEM R,CHXSTM		;ASYMETRICAL A/B AND DELTA AROUND PCSATS
	AOS CSSRCH
	PUSHJ P,ACLPS3		;MAKE CHEOPS ARG BLOCK
	PUSHJ P,ACSTRT		;START CHEOPS
CPRD1:
]	
	PUSHJ P,STVL4T		;DO SUPER-STATIC EVALUATION
	MOVEM R,PCSATS
	MOVE T,[-LLMGPL,,LMGPDL-1]
	HRRZ T1,GAMP
	LDB T2,[MPC,,(T1)]
	CAIGE T1,GAME
	MOVEI T1,0
	MOVEM T2,HPLMVD	;PIECE HE LAST MOVED
;	MOVE R,PCBAL
;	ADD R,PNBAL
;	SUB R,PCBAL+1
;	SUB R,PNBAL+1
;	MOVEM R,PCSATS
	MOVE R,PCSATS
	SUB R,@HASV(I)
	SKIPN I
	MOVNS R
	SUB R,POSBGF
	MOVEM R,AHDATS
	MOVE R,PCSATS
	SUB R,@OASV(I)
	SKIPN I
	MOVNS R
	SUB R,POSBGF
	MOVEM R,ABFATS
	AOS NSV
	CLEARM CVPR
	CLEARM HPCOP	;NUMBER HIS PIECES E P
	CLEARM HPCOPV
	SETZM SFEEDF
	SETZM SFDF1
	CLEARM TRDF
	MOVE A,@PCSP(I)
	CAMLE A,@PCSP+1(I)
	SETOM TRDF	;SIDE TO MOVE AHEAD PIECES SO INVESTIGATE TRADES
	SKIPN NWPPP(I)
	JRST STVQLX		;NO PASSED PAWNS, SAVE TIME.
	MOVE B,STT1(I)		;LOOP OVER OUR PAWNS.
STVQL1:	SKIPG T1,PPASED(B)	;QUEENING
	JRST STVQL
	CAIE T1,7
	JRST STVQL3
	MOVE T1,PIECEL(B)	;ON 7TH RANK
	ADD T1,STT2(I)
	SKIPE BOARD(T1)
	JRST STVQL
	PUSH P,T1
	HRLM B,(P)
	PUSH P,[1000]
STVQL:	AOBJN B,STVQL1
STVQLX:
;DROPS THRU


	MOVE A,@OKINGT(I)
	MOVE B,@LMGST+1(I)
	MOVEM B,SMICKF	;SIDE TO MOVE IN CHECK FLAG
	CLEARM TRDP+1
	MOVE B,[TRDP+1,,TRDP+2]
	BLT B,NODF+NPC-1+1	;CLEAR TRDP, NODF

	MOVE B,LGMST2+1(I)	;HIS PIECES
STV1:	SKIPN A,PIECEL(B)
	JRST STV2	;NON EXISTANT
	SKIPGE LMGT(B)
	JRST SPA2
	HRRZ ZR,B
	CAME ZR,HPLMVD
	SKIPE PINT(B)
	JRST SPA1	;NON PAWN PINNED OR LAST MOVED. CAN IT BE ATTACKED BY A P?
SPA2:	SKIPN @LMGST(I)
	JRST STV2	;PIECE NOT ATTACKED
	SKIPN @LMGST+1(I)
	JRST [	MOVEI D,0
		JRST STV3]	;ON PREY (IE NOT DEFENDED)
	PUSHJ P,AFLATA
	JUMPE D,STV3	;HIS PC LOOSE
	MOVE ZR,@LMGST+1(I)
	SOJN ZR,STOD1
	AOS NODF(D)	;THIS PIECE HIS ONLY DEFENSE.
STOD1:	MOVE S,RPVAL(C)
	SUB S,RPVAL(B)
	JUMPL S,STV3	;ATTACKING WITH SMALLER GUY, P.C.
	CAMGE S,[-<BV-NV>]	;DEFICIT NOT TOO MUCH, COULD IT BE OVERCOME BY
	JRST STMO1		; GIVING HIM ISO PAWNS?
	MOVE ZR,@LMGST+1(I)
	SOJN ZR,STMO1		;NOT ONLY DEFENSE
	SKIPL LMGT(D)
	JRST STMO1
	MOVE TT,PFILE(D)	;ONLY DEF A PAWN.  WILL RECAPT CAUSE ISOLATED PAWNS?
	MOVE ZR,@SNPNFL+1(I)
	SOJN ZR,STMO1	;NOT CURRENTLY ONLY PAWN IN THAT FILE
	MOVE T1,PFILE(B)
	SKIPN @SKNPNF+1(I)	;DETERMINE IF PAWNS IN FILE TO K-SIDE OR CAPTING TO K-SIDE
	CAIN TT,-1(T1)
	 JRST [	SKIPN @SKNPN2+1(I) ;NO PAWNS IN FILE +2 TO K-SIDE  -> MAKING ISO PAWNS
		JRST STV3 
		JRST .+1]
	SKIPN @SQNPNF+1(I)
	CAIN TT,1(T1)
	 JRST [	SKIPN @SQNPN2+1(I)
		JRST STV3
		JRST .+1]
STMO1:	JUMPN S,STOD2
	SKIPGE TRDF
	JRST STV3	;LOOK AT TRADES (STM AHEAD PCS)
	SKIPL TRDP(C)	;SKIP ON PC ALREADY HAS P.C.
	HRRM A,TRDP(C)	;CAN AT LEAST TRADE OFF (ALSO SAVE SQ TO MOVE TO)
STOD2:	MOVE TT,@LMGST(I)
	SOJE TT,STV2
	SUB S,RPVAL(D)	;MORE THAN ONE ATTACK.
	JUMPL S,STV3E

STV2:	AOBJN B,STV1
	MOVE B,LGMST2(I)	;OUR PIECES
	CLEARM PCC
	CLEARM PMC
	CLEARM PMCVAL
STVF1:	SKIPE A,PIECEL(B)
	SKIPN TT,@LMGST+1(I)
	JRST STVF2	;NOT EXISTANT OR NOT ATTACKED
	SKIPN @LMGST(I)
	JRST STVF3F	;NOT DEFENDED SO PRESSING MOVE UNLESS HAS A
			;PLAUSIBLE CAPTURE (OR TRADE) AND NOT PINNED
STVF3G:	PUSHJ P,DFLATA
	JUMPE C,STVF3	;NOT DEFENDED
	MOVE S,RPVAL(D)
	SUB S,RPVAL(B)
	JUMPL S,STVF3	;E.P.
	SKIPGE TRDF
	JUMPE S,STVF4	;TRADE OFFERED AND FAVORABLE SO NOT
			;PRESSING MOVE UNLESS PINNED
STVF5:	SOJE TT,STVF2	;ONLY ATTACK SO NOT EN PRISE EVEN IF MOVE GIVEN UP
	SUB S,RPVAL(C)
	JUMPL S,STVF6

STVF2:	AOBJN B,STVF1
;DROPS THRU


	SKIPGE TPCFL
	PUSHJ P,ATPCG1	;IN PCG TRACE MODE, TRAP OUT.  KLUDGE KLUDGE
	MOVE A,PMC
	SKIPL SFEEDF
	CAIL A,2
	JRST STATE4	;SIDE TO MOVE HAS TWO PCS ON PREY. (MAY BE WORSE FOR STM)
	JUMPE A,STATE5	;SIDE TO MOVE HAS NONE ON PREY
	SKIPE PCC
	JRST STATE4	;SIDE TO MOVE HAS 1 EP AND PRESSING MOVE (MAY BE WORSE FOR STM)
	CAIN A,1
	CAME A,HPCOP
	JRST STATE5
	SKIPGE SFDF1	;SET IF SIDE NOT TO MOVE HAS PIECE TRAPPED
	JRST SFDBS4	;BOTH HAVE ONE PIECE ON PREY, BUT SIDE NOT TO MOVE IS TRAPPED
			; (MAY BE BETTER FOR STM)
STATE5:	SKIPN SMICKF
	JRST STATE8	;NOT IN CHECK
	MOVE A,PCC
	ADD A,PMC
	SOJG A,STATE6	;IN CHECK AND HAS PIECES ON PREY(OTHER THAN KING) 
			; (MAY BE WORSE FOR STM)
	MOVE A,HPCOP
	CAIL A,2
	JRST SFDBS6	;AFTER GETTING OUT OF CHECK, OTHER SIDE WILL HAVE 2 EN PRISE
			; (MAY BE BETTER FOR STM)
STATE9:	MOVE J,[-8,,0]  ;MAKE SURE NOT MATED.  IF HAVE ANY K MOVES, WE ARE NOT MATED.
STMT3:	MOVE A,@OKINGT(I)
	LDB B,BDBSQ(J)
	ADD A,RDT(J)
	SKIPL T1,BOARD(A)
	SKIPE @LMGST+1(I)
	JRST STMT1	;NOT ON BOARD OR ATTACKED BY HIM
	JUMPE T1,STMT4
	XCT OURGY1(I)
	JRST STMT1	;ALREADY OCCUPIED BY US
STMT4:	JUMPE B,STATE8	;OK SAFE KING MOVE
	MOVE D,BDAST(B)
	XCT HISGY(I)
	JRST STATE8	;UNBLOCKING OUR GUY
		;MOVING INTO "SHADOW"
;DROPS THRU

STMT1:	AOBJN J,STMT3
	MOVE A,SMICKF	;NO KING MOVES CAN CHECKING PIECE BE CAPTURED
	SOJN A,STMT1A	;IN DOUBLE CHECK
	MOVE A,@OKINGT(I)
	PUSHJ P,FLATA
	MOVE T1,PIECEL(D)
	HRRZ A,LGLMST
STMT1L:	CAIL A,-STWPM+1(P)
	JRST STMT1A
	HRRZ TT,1(A)
	CAMN TT,T1
	JRST STMT1B	;CAN CAPTURE CHECKING PIECE IN PLAUSIBLE CAPTURE
STMT1C:	ADDI A,STWPM
	JRST STMT1L

STMT1A:	AOS NFDCK
	MOVEI T2,1
	JRST STMT2	;NO KING MOVES CAUSE FEEDOVER ANYHOW

HISGY:	SKIPL PIECE(D)
	SKIPGE PIECE(D)

STMT1B:	HLRZ B,1(A)	;CAN CAPTURE CHECKING PIECE
	SKIPE PINT(B)
	JRST STMT1C	;BUT CAPTURING PIECE PINNED
STATE8:
IFN CHEOPS,[		;OCM THINKS POSITION STABLE, DOES CHEOPS?
	SKIPLE A,CHEOSW
	TRNN A,1
	JRST CHSTR1
	PUSHJ P,HCHGV	;GET CHEOPS RESULT
	SKIPE T1,CHXSTA	;SUM IN STATISTICS COUNTER
	AOS CSSTAC	;# OF FROBS SUMMED IN (SKIP TO AVOID DOUBLE COUNT IF TRIED 
	ADDM T1,CSSTA	; TO FEEDOVER.
	CLEARM CHXSTA
	MOVM ZR,R
	CAIL ZR,10000-40
	 JRST [ AOS CSMATD	;CHEOPS DETECTED FORCED MATE
		PUSHJ P,HOCMMV	;MATE VALUE, CONVERT TO OCM VALUE AND RETURN IT
		JRST STIRE4]
	MOVE Q,R
	SUB Q,CHXIMB
	JUMPE Q,[ AOS CSEVEN
		  SKIPL T1,CHCSTP ;COMPLETELY STABLE, NO MATERIAL CHANGE EITHER WAY
		  CAMLE T1,LMGD
		   JRST CHSTR3    ;CHEOPS STOP MODE OFF OR NOT DEEP ENUF
		  JRST STIRET]    ;IMMEDIATELY RETURN VALUE OF PCSATS
	XCT (I)[  JUMPG Q,CHSTR2  ;XFER TO CHSTR2 IF BETTER FOR SIDE TO MOVE
		  JUMPL Q,CHSTR2]
	AOS CSWSTM
	SKIPE Q,CHFDL
	CAMGE Q,LMGD
	JRST [	AOS NCHWFD	;# FEEDOVERS WOULD HAVE CAUSED
		JRST CHSTR4]
	AOS NCHFDO	;# FEEDOVERS CHEOPS CAUSED
	JRST STMT6	;WORSE FOR STM, FORCE FEEDOVER

CHSTR2:	AOS CSBSTM	;BETTER FOR STM
	SKIPE T1,CHMPC	;MAKE CHEOPS MOVE A PLAUSIBLE CAPTURE?
	CAMGE T1,LMGD	; IF NOT TOO DEEP, THAT IS
	JRST CHSTR4
	MOVN ZR,Q	;Q HAS RETURNNED DELTA, CHXIA INITIAL A/B DELTA
	XCT (I)[ CAME Q,CHXIA  ;IF VALUE COMES BACK = LOW A/B LIMIT FOR STM,
		 CAME ZR,CHXIA] ;FLUSH BECAUSE EVERYTHING CUT OFF AND PV IS INVALID
;	CAME R,CHXIA	;DUE TO LOSSAGE, IT LOSES ON EITHER LIMIT
;	CAMN R,CHXIB	; (DOESNT UPDATE P.V. ON A/B CUT)
;	JRST CHSTR4
	SKIPN C,CHXPV1	;MAKE P.V. MOVE A "PLAUSIBLE CAPTURE"
	JRST CHSTR4
	HLRZ A,C
	SKIPN PIECEL(A)
	.VALUE		;SOMETHING SCREWWED UP ...
	HRRZ A,LGLMST	;FIRST MAKE SURE IT ISNT ALREADY IN THERE
CHSTR5:	CAIL A,1-1(P)
	JRST CHSTR6	;OK, NOT PREVIOUSLY A PLAUS CAPT
	CAMN C,1(A)
	JRST CHSTR4	;ALREADY A PC, FLUSH
	ADDI A,STWPM
	JRST CHSTR5

CHSTR6:	AOS CSMVPC	;MAKE CHEOPS MOVE A PLAUS CAPT
	PUSH P,C
	PUSH P,[3000]	;MAKE THIS THE FIRST ONE LOOKED AT
CHSTR4:
CHSTR3:
CHSTR1:
]
	HRRZ A,LGLMST
	AOS A
	MOVEI B,1(P)
	CAME P,LGLMST
	PUSHJ P,SORT	;STWPM IMPLICIT..
	PUSH P,[0]	;# OF MV INVESTIGATED FROM THIS POS
STDMN==-4
	PUSH P,[,-1]
STDBHA==-3
	PUSH P,HSADR
STHSAD==-2
	MOVE T2,LGLMST
	PUSH P,T2
STPDS==-1
	MOVEI T2,1(T2)
	PUSH P,T2
STMVP==0
NWSTP==5	;NUMBER WORDS PUSHED HERE
STWPM==2	;# WDS PUSHED PER MOVE
   ;WD0 MOVE
   ;WD1 RH VALUE,  4.8 -> FORCE PCG IN REPLY TO THIS MOVE (NOT IMPLEMENTED NOW)
;	PUSHJ P,STVL4T
	MOVE R,PCSATS
	MOVE A,PDVDF
	MOVEM A,PDVLV

;DROPS THRU
;DROPS IN
STRET:	CLEARM STSIG
	MOVEM R,STBSV
	XCT EVMT2(I)
	JRST STRET2
	XCT EVMT8(I)
	MOVEM R,BPREV(I)

STV3L:	HRRZ T1,STMVP(P)
	CAIN T1,-NWSTP+1(P)
	JRST STVL5
	HRRZ A,(T1)
	HLRZ B,(T1)
STVL6:	AOS STDMN(P)
	CLEARM CPCDVL
	SKIPE D,BOARD(A)
	JRST STVL6B
	CAMN A,GHLOC
	SKIPL LMGT(B)
	JRST STVL6A
	MOVE D,@EVMT13(I)
STVL6B:	MOVE T1,PDV-PIECE(D)
	IMUL T1,PINVF-PIECE(D)
	MOVEM T1,CPCDVL
STVL6A:	PUSHJ P,TMOVE	;TRANSLATE AND MAKE MOVE
	JRST STV3B
	XORI I,1
	PUSH P,STSIG
	PUSH P,CVPR
	PUSH P,STBSV
	PUSHJ P,STATEV	;ANALYZE SITUATION
	POP P,STBSV
	POP P,C
	POP P,STSIG
	XORI I,1
	XCT EVMT2(I)
	JRST STVL2	;REJECT BRANCH
	XCT STVT2(I)
	JRST TMS1	;WANT MOVE
STV3D1:	EXCH C,CVPR
	PUSHJ P,LFSRC	;RECLAIM FS
STV3D:	PUSHJ P,UNMOVE
STV3B:	MOVEI T1,STWPM
	ADDM T1,STMVP(P)
	JRST STV3L

STVL2:IFN HSCOD,[
	MOVE ZR,POSHSA
	MOVEM ZR,STDBHA(P)
	SKIPL D,STHSAD(P)
	SKIPGE T1,NHSW
	JRST STVL2C
	JUMPE T1,STVL2B
	LDB T1,[HTVCOD,,HSTBV(D)]
	CAIE T1,4
	JRST STVL2A
	MOVEI T1,1
	DPB T1,[HTVCOD,,HSTBV(D)]
	HRRM R,HSTBV(D)
]
STVL2A:	PUSH P,D
	MOVE Q,EVMT5A(I)
	MOVEM Q,STSIG
	MOVEM R,STBSV
	PUSHJ P,LFSRC
	PUSHJ P,RECMS
	MOVE T2,STDMN-1(P)	;ONE ADDTL PUSH DONE
	DPB T2,[PUSNM,,@CVPR]
	PUSHJ P,UNMOVE
	POP P,D
	CAIE D,-1
	JUMPGE D,STVL5C
	JRST STVL5A

IFN HSCOD,[
STVL2B:	CLEARM HSTB(D)
	AOS HASHS
STVL2C:	MOVEI D,-1
	JRST STVL2A
]

STVT1:	-10000000	;LOSING SITUATIONS
	10000000

STVT2:	CAMLE R,STBSV
	CAMGE R,STBSV
	CAMLE R,STBSV



TMS1:	MOVE ZR,POSHSA
	MOVEM ZR,STDBHA(P) 
	MOVEM Q,STSIG
	XCT EVMT8(I)
	PUSHJ P,BPRVS
	PUSHJ P,LFSRC	;RECLAIM FS
	PUSHJ P,RECMS
	MOVE ZR,STDMN(P)
	DPB ZR,[PUSNM,,@CVPR]
	MOVEM R,STBSV
	JRST STV3D

LFSRES:	MOVEI A,LSPC+2	;REINITIALIZE FS.
	MOVEI B,LSPCL
LFSRE1:	MOVEM A,-2(A)
	CLEARM -1(A)
	ADDI A,2
	SOJG B,LFSRE1
	CLEARM -2(A)
	CLEARM -1(A)
	MOVEI A,LSPC
	MOVEM A,LFS
	POPJ P,

LFSRC:	HRRZS C
LFSRC1:	JUMPE C,CPOPJ	;RECLAIM POINTER IN C
	HRRZ T2,C
	HRRZ C,(C)
	EXCH T2,LFS
	MOVEM T2,@LFS
	JRST LFSRC1


STVL5T:	STV5TW(Q)
	STV5TB(Q)

	2
STV5TW:	0
	1

	1
STV5TB:	0
	2

POSVAL:	0	;POS VAL
POSREL:	0	;POS RELIABILITY
POSHSA:	0	;RETURNNED HASH ADR
CVPR:	0	;VALUE RETURNED FOR PRINCIPLE VARIATION
STBSV:	0
BPPVLU:	4	;EXTRA VALUE FOR P P BLOCKED BY OWN PAWN

HPCOP:	0	;HIS PIECES EN PRISE
HPCOPV:	0	;LARGEST VALUE OF PIECES THAT COUNTED HPCOP

PCC:	0	;PRESSING CAPTURE COUNT
		;(OK IF CAPTURED IMMEDIATELY, BUT WOULD BE EN PRISE IF IT
		;WAS HIS TURN TO MOVE

PMC:	0	;PRESSING MOVE COUNT
		;PIECE EN PRISE AND MUST BE MOVED , LOSING TEMPO
PMCVAL:	0	;MAX VALUE OF PIECES THAT COUNTED PMC.

SFEEDF:	0
SFDF1:	0

CATCUT:	2	;INVESTIGATE ALL CAPTURES AT THIS PLY OR LESS
FDCUT:	7	;NO FEEDOVERS THIS DEEP OR DEEPER
SFB:	0	;IN A FEEDOVER
LMGEPS:	0	;LOCN AT WHICH CHECKING PAWN CAN BE TAKEN EP
STSIG:	0	;CURRENT SIG ON STBSV
SMICKF:	0	;-1 SIDE TO MOVE IN CHECK

TRDF:	0	;PROFITABLE FOR SIDE TO MOVE TO TRADE

PCSP:	PCBAL
	PCBAL+1
	PCBAL

KSQTBP:	0
KSQTB:	BLOCK 40
PP TRDP:,	BLOCK NPC	;-1 IF CAN GET RID OF PIECE WITH TEMPO TRACE OR 
	;PLAUS CAPT

PP NODF:,	BLOCK NPC	;NUMBER ATTACKED PIECES PIECE ONLY DEFENCE OF


IFN HSCOD,[
STAH2:	PUSHJ P,HHVC
	JRST STAH3
	HRRZM T2,POSHSA
	MOVE T1,LMGD
	CLEARM CVPR
	AOS NHMSB
	MOVE Q,J
	CAIGE T1,LSHFLT
	AOS SHFLT(T1)
	MOVE D,POSHSA
	JSP ZR,EVM5B2
]
STT1:	-8,,1
	-8,,1+NPCS

STT2:	BW
	-BW
	BW

STT3:	BDAFB(T2)
	BDAFT(T2)

STVF4:	SKIPE PINT(B)
	JRST STVF5
STVF4A:	AOS PCC	;PRESSING CAPTURE NOT INVOLVING LOSS OF TEMPO
	JRST STVF2

STVF6:	MOVE J,@LMGST(I)	;NOT ATTACKED BY LESS THAN P BUT IS LESS THAN P+D
	SOJE J,STVF3A	;ONLY ONE DEFENCE
	SOJG TT,STVF3A	;MORE THAN TWO ATTACKS
	PUSHJ P,F2LA
	JUMPE T1,STVF3A
	ADD S,PVALUE(T2)
	JUMPGE S,STVF2
	JRST STVF3A

STVF3E:	SKIPN PINT(B)
	JRST STVF3A
	MOVE S,RPVAL(D)	;UNDEFENDED IS IT ATTACKED BY LESS?
	SUB S,RPVAL(B)
	JUMPL S,STVF3C	;ATTACKED BY LESS AND PINNED
	JRST STVF3A

STVF3F:	SKIPN PINT(B)
	JRST STVF3A
	JRST STVF3G

STVF3:	SKIPE PINT(B)	;OUR PC EP
	JRST STVF3X
STVF3A:	SKIPGE TT,TRDP(B)	;IF PINNED BUT NOT ATTACKED BY LESS DONT SET SFEEDF
	JRST STVF4A	;CAN SWAP OFF OR MAKE PLAUS CAPT
	JUMPG TT,STVF4B	;HAVE TRADE, BUT ITS NOT A P.C. YET
	SKIPGE LMGT(B)
	JRST STVF3D
	PUSHJ P,TRAPP
	SKIPGE TRPF
STVF3C:	SETOM SFEEDF
STVF3D:	AOS PMC
	MOVE ZR,PVALUE(B)
	CAMLE ZR,PMCVAL
	MOVEM ZR,PMCVAL
	SKIPE PCGPWN
	;CAN WE INTERPOSE WITH P, ATTACKING HIM?
	SKIPL DDPCS(D)
	JRST STVF2
	SKIPN PINT(D)
	CAMN D,HPLMVD
	JRST STVF2	;MV (IF EXISTS) ALREADY HACKED BY OTHER HACK
	MOVE TT,PIECEL(D)	;POSSIBLE TO INTERPOSE P WITH GAIN OF TEMPO?
;	LDB T1,STVFT1(I)
;	JUMPE T1,STVF2	;CANNOT BE ATTACKED BY OUR P IN ONE MOVE
	MOVE T1,PFILE(D)	;SQ OF A
	CAMG T1,PFILE(B)	;FILE OF PC
	JRST STVFC1	;A TO K SIDE OF PIECE INTERPOSE TO Q SIDE OF A
	SKIPE @STVFT5(I)	;P WOULDNT BE DEFENDED
	SKIPE @STVFT4(I)	;PIECE NEXT TO A NO INTERPOSE POSSIBLE
	JRST STVF2
	MOVEI T1,@STVFT4(I)	;SQUARE TO MOVE TO
	SKIPG T2,@STVFT2(I)
	JRST STVFC3	;DOUBLE ADVANCE POSSIBLE?
STVFC4:	SUBI T2,PIECE
	XCT STVFT3(I)	;NOT OUR P
	JRST STVF2
	SUBI T1,BOARD
	PUSH P,T1
	HRLM T2,(P)
	MOVE T1,PVALUE(D)
	SUB T1,PVALUE(T2)
	PUSH P,T1
;	ASH T1,-1
;	CAMLE T1,BPCV
;	MOVEM T1,BPCV
	MOVSI ZR,(MOVE)
	IORM ZR,(P)	;FORCE PCG ON NEXT PLY
	JRST STVF2

STVFC3:	XCT STVFT6(I)
	SKIPG T2,@STVFT7(I)
	JRST STVF2
	JRST STVFC4

STVFC1:	SKIPE @STVFQ5(I)
	SKIPE @STVFQ4(I)
	JRST STVF2
	MOVEI T1,@STVFQ4(I)
	SKIPLE T2,@STVFQ2(I)
	JRST STVFC4
	XCT STVFT6(I)
	SKIPG T2,@STVFQ7(I)
	JRST STVF2
	JRST STVFC4

;STVFT1:	NPAS1,,WPAS(TT)
;	NPAS1,,BPAS(TT)

STVFT5:	WA-BW-1(TT)
	BA+BW-1(TT)

STVFT4:	BOARD-BW-1(TT)
	BOARD+BW-1(TT)
STVFT2:	BOARD-2*BW-1(TT)
	BOARD+2*BW-1(TT)

STVFT3:	SKIPL LMGSTD(T2)
	SKIPL SNFBP(T2)

STVFT6:	SKIPL 4RNKP(TT)
	SKIPG 4RNKP(TT)

STVFT7:	BOARD-3*BW-1(TT)
	BOARD+3*BW-1(TT)

STVFQ5:	WA-BW+1(TT)
	BA+BW+1(TT)

STVFQ4:	BOARD-BW+1(TT)
	BOARD+BW+1(TT)

STVFQ2:	BOARD-2*BW+1(TT)
	BOARD+2*BW+1(TT)

STVFQ7:	BOARD-3*BW+1(TT)
	BOARD+3*BW+1(TT)


SPA1:	SKIPN PCGPWN
	JRST SPA2	;DONT HACK <P-ATTS-LAST-PC OR PINNED-PC> MOVES
;	LDB ZR,SPAT1(I)	;SEE IF CAN ATT PINNED PC OR LAST PC MVED W/ P
;	JUMPE ZR,SPA2
	SKIPE @SPAT2(I)
	JRST SPA3	;SQ TO K SIDE NOT OPEN
	SKIPN @SPAT3(I)
	JRST SPA4	;P WOULD NOT BE ATT ED
	SKIPN @SPAT4(I)
	JRST SPA3	;P WOULD BE ATT AND NOT DEF
SPA4:	MOVEI T1,@SPAT2(I)
	SKIPG T2,@SPAT5(I)
	JRST SPA5	;NO PC THERE, DOUBLE ADV POSSIBLE?
SPA4A:	SUBI T2,PIECE
	XCT STVFT3(I)
	JRST SPA3
	SUBI T1,BOARD
	PUSH P,T1
	HRLM T2,(P)
	PUSH P,[MOVE]
SPA3:	SKIPE @SPAT6(I)
	JRST SPA2
	SKIPN @SPAT7(I)
	JRST SPA6
	SKIPN @SPAT8(I)
	JRST SPA2
SPA6:	MOVEI T1,@SPAT6(I)
	SKIPG T2,@SPAT9(I)
	JRST SPA7
SPA6A:	SUBI T2,PIECE
	XCT STVFT3(I)
	JRST SPA2
	SUBI T1,BOARD
	PUSH P,T1
	HRLM T2,(P)
	PUSH P,[MOVE]
	JRST SPA2

SPA5:	JUMPN T2,SPA3		;SINGLE ADV SQUARE NOT VACANT
	XCT SPATR(I)
	SKIPG T2,@SPAT5A(I)
	JRST SPA3
	JRST SPA4A

SPA7:	JUMPN T2,SPA2		;SINGLE ADV SQ NOT VACANT
	XCT SPATR(I)
	SKIPG T2,@SPAT9A(I)
	JRST SPA2
	JRST SPA6A

SPATR:	SKIPLE 4RNKP(A)		;SKIP UNLESS SQ IN 5TH RANK FOR STM, IE, CAN BE ATT
	SKIPGE 4RNKP(A)		; BY P'S ON 4TH RANK, WHICH IN TURN CAN BE REACHED BY
				; DOUBLE ADVANCE
;SPAT1:	NPAS1,,WPAS(A)
;	NPAS1,,BPAS(A)

SPAT2:	BOARD-BW-1(A)
	BOARD+BW-1(A)

SPAT3:	BA-BW-1(A)
	WA+BW-1(A)

SPAT4:	WA-BW-1(A)
	BA+BW-1(A)

SPAT5:	BOARD-2*BW-1(A)
	BOARD+2*BW-1(A)

SPAT5A:	BOARD-3*BW-1(A)
	BOARD+3*BW-1(A)

SPAT6:	BOARD-BW+1(A)
	BOARD+BW+1(A)

SPAT7:	BA-BW+1(A)
	WA+BW+1(A)

SPAT8:	WA-BW+1(A)
	BA+BW+1(A)

SPAT9:	BOARD-2*BW+1(A)
	BOARD+2*BW+1(A)

SPAT9A:	BOARD-3*BW+1(A)
	BOARD+3*BW+1(A)

STVF4B:	CAMN P,LGLMST
	JRST STVF4A	;HAD NO OTHER P.C. S
	PUSH P,TT	;STORE TRADE OF OUR E.P. PC
	HRLM B,(P)
	PUSH P,[0]
	JRST STVF4A

STVF3X:	SKIPG TT,TRDP(B)
	JRST STVF3C
	CAMN P,LGLMST
	JRST STVF3C
	PUSH P,TT	;STORE MOVE IN CASE TOO DEEP FOR FEEDOVER
	HRLM B,(P)
	PUSH P,[0]
	JRST STVF3C

STVQL3:	SKIPN PCGPWN		;OUR PAWN PASSED, BUT NOT ON 7TH
	JRST STVQL
STVQL5:	SKIPE @PCCNTP+1(I)	;POINTER TO NUMBER OF HIS PCS.  SKIP ON HE HAS ONLY K LEFT.
	JRST STVQL4
	MOVEI ZR,1(T1)		;ASSUME WE ADVANCE P
	SUB ZR,@RKRNK+1(I)	;RPRANK OF HIS K
	CAILE ZR,1
	JRST STVQQ1	;P AHEAD
	MOVE A,PFILE(B)	;HE HAS ONLY K LEFT
	SUB A,@KFILE+1(I)
	MOVMS A
	CAMG A,REVERS(T1)
	JRST STVQL4
STVQQ1:	MOVE T1,PIECEL(B)	;THIS P OUTSIDE SQ OF HIS K
	ADD T1,STT2(I)
	SKIPE BOARD(T1)
	JRST STVQL4		;BLOCKED
STVQL6:	PUSH P,T1
	HRLM B,(P)
	PUSH P,[200000,,1000]	;PLAUSIBILITY OF QUEENING
	JRST STVQL

STVQL4:	MOVE T1,PPASED(B)
	CAIGE T1,5
	JRST STVQL
	MOVE T1,PIECEL(B)	;PP ON 5TH,  ADVANCE PLAUS CAPT IF LOOKS SAFE
	ADD T1,STT2(I)
	SKIPE BOARD(T1)
	JRST STVQL
	SKIPN T2,@LMGST1+1(I)
	JRST STVQL8	;HE DOESNT OPPOSE
	MOVE A,@LMGST1(I)
	LDB TT,STT3(I)	;GET PIECE ATTACKING PAWN FROM REAR.
	JUMPE TT,STVQL7	;NONE.
	SKIPGE RFPCS(TT);NOT SLIDING
	XCT RMOYTT(I)   ;NOT MINE
	JRST STVQL7
	AOS A		;OK THAT WILL BE AN EXTRA DEFENDER.
STVQL7:	JUMPE A,STVQL	;WOULD BE E.P.
STVQL8:	PUSH P,T1
	HRLM B,(P)
	MOVE TT,PPASED(T1)
	MOVE ZR,PASPV+1(TT)
	SUB ZR,PASPV(TT)
	PUSH P,ZR
	JRST STVQL


STVL4T:
STVL4:	MOVE ZR,PCBAL
	CLEARM WMID
	SKIPN WQNC
	CAIL ZR,MIDMAT
	SETOM WMID		;WHITE HAS MID-GAME MATERIAL
	MOVE ZR,PCBAL+1
	CLEARM BMID
	SKIPN BQNC
	CAIL ZR,MIDMAT
	SETOM BMID
	RS WHITE PCS,MOVE R,PCBAL
	RS WHITE PWNS,ADD R,PNBAL
	MOVE T2,R
	RS BLACK PCS,SUB R,PCBAL+1
	RS BLACK PWNS,SUB R,PNBAL+1
	ADD T2,PCBAL+1
	ADD T2,PNBAL+1
	RS NET PCS,IMUL R,PCRAT1
	RS PC RATIO CHNG,IDIV R,T2
	SKIPE NSBVS
	PUSHJ P,STVD	;ADD DEVEL FACTORS BCS
	SKIPE ACTV
	PUSHJ P,STACE	;ACTIVITY FACTOR
	SKIPE CNTSW
	PUSHJ P,STCNT	;CENTRALIZED KNIGHTS AND PAWNS FACTOR
	SKIPE OKFILE
	PUSHJ P,STOKF	;OPEN FILES NEAR K
	SKIPE KCUT
	PUSHJ P,STKC	;KING CUT OFF (PINNED AGAINST EDGE OF BOARD)
	SKIPE PINWSQ
	PUSHJ P,STWSP	;PIN OF PIECE ON SQUARE NOT DEF BY PAWN
	SKIPE RKPOS
	PUSHJ P,STRKP	;ROOK POSITION
	SKIPL BMID	;KING SAFETY IF MID GAME MATL
	JRST STVLK1
	MOVE A,PRANK+WKING-PIECE
	SOS A
	LSH A,3
	RS W KING LOCN,SUB R,A
STVLK1:	SKIPL WMID
	JRST STVL4A
	MOVE A,RPRANK+BKING-PIECE
	SOS A
	LSH A,3
	RS B KING LOCN,ADD R,A
STVL4A:	MOVE B,[-8,,1]
STVLP3:	SKIPE A,PIECEL(B)
	SKIPL LMGT(B)
	JRST STVLP1
	SKIPG T1,PPTP(B)
	JRST STVLP2
	MOVE T2,PFILE(B)
	MOVE D,BNPNFL(T2)
	CAIN T1,3	;WILL DEAL WITH ISOLATED P LATER
	JRST STVLP2
	MOVE S,PMOB(B)
	JUMPE D,[ MOVE T1,OBACKV(S)	;ON OPEN FILE
		  JRST SWOFB1]
	MOVE T1,BACKV(S)
SWOFB1:	IMUL T1,IFILEW(T2)
	RS W FORWARD/BACKWARD *P!B AT *S!A,SUB R,T1
STVLP2:	SKIPN T1,PPASED(B)
	JRST STLHD1
	JUMPL T1,STVLP4	;BLOCKED BY FRIENDLY
	MOVE T2,PMOB(B)
	RS *P!B PASSED P ON *O!T1 RANK,ADD R,@PPVM(T2)
STLHD1:	SKIPLE D,BOARD+1(A)	;IS OUR P ADJ TO K-SIDE?
	SKIPL LMGSTD-PIECE(D)
	JRST STVLP1
	SKIPN PMOB(B)
	SKIPE PMOB-PIECE(D)
	JRST STVLP1		;NOT BOTH MOBILE
	MOVE T1,RPRANK(B)
	MOVE T2,HDOVAL(T1)
	IMUL T2,HDUOSW
	RS DUO AT *S!A, ADD R,T2
STVLP1:	MOVE T1,WNPNFL(B)
	JUMPE T1,STVLF1
	RS W PAWNS IN *F!B FILE, SUB R,MULTP(T1)
	SKIPN WPNFLS-1(B)
	SKIPE WPNFLS+1(B)
	JRST STVLF1
	HRRZ ZR,B
	SUB ZR,PFILE+WKING-PIECE
	MOVMS ZR
	SKIPGE BMID
	CAILE ZR,2
	 JRST [	MOVEI T2,IMULTP(T1)	;PAWNS ISOLATED (NOT NEAR K, OR NOT MIDDLE GAME)
		SKIPE BNPNFL(B)
		JRST STVLF2	;NOT ON OPEN FILE
		ADDI T2,OIMULT-IMULTP
		SKIPN NUMORP+1
		ADDI T2,OIMULV-OIMULT	;OTHER SIDE HAS NO RFPCS
		JRST STVLF2]
	MOVEI T2,KIMLTP(T1)	;ISO PAWNS NEAR K IN MIDDLE GAME
	SKIPN BNPNFL(B)
	ADDI T2,KOIMLT-KIMLTP   ;ON OPEN FILE
STVLF2:	MOVE T1,(T2)
	IMUL T1,IFILEW(B)
	RS W ISOLATED PAWNS IN *F!B FILE, SUB R,T1
STVLF1:
STVLP6:	MOVE T1,BNPNFL(B)
	JUMPE T1,STVLF3
	RS  B PAWNS IN *F!B FILE, ADD R,MULTP(T1)
	SKIPN BPNFLS-1(B)
	SKIPE BPNFLS+1(B)
	JRST STVLF3
	HRRZ ZR,B
	SUB ZR,PFILE+BKING-PIECE
	MOVMS ZR
	SKIPGE WMID
	CAILE ZR,2
	 JRST [	MOVEI T2,IMULTP(T1)	;PAWNS ISOLATED (NOT NEAR K, OR NOT MIDDLE GAME)
		SKIPE WNPNFL(B)
		JRST STVLF4
		ADDI T2,OIMULT-IMULTP
		SKIPN NUMORP
		ADDI T2,OIMULV-OIMULT
		JRST STVLF4]
	MOVEI T2,KIMLTP(T1)
	SKIPN WNPNFL(B)
	ADDI T2,KOIMLT-KIMLTP
STVLF4:	MOVE T1,(T2)
	IMUL T1,IFILEW(B)
	RS B ISOLATED PAWNS IN *F!B FILE , ADD R,T1
STVLF3:	AOBJN B,STVLP3

	MOVE B,[-8,,NPCS+1]
STVLP5:	SKIPE A,PIECEL(B)
	SKIPL LMGT(B)
	JRST STVLP9
	SKIPG T1,PPTP(B)
	JRST STVLP7
	MOVE T2,PFILE(B)
	MOVE D,WNPNFL(T2)
	CAIN T1,3
	JRST STVLP7
	MOVE S,PMOB(B)
	JUMPE D,[ MOVE T1,OBACKV(S)	;ON OPEN FILE
		  JRST SBOFB1]
	MOVE T1,BACKV(S)
SBOFB1:	IMUL T1,IFILEW(T2)
	RS B FORWARD/BACKWARD *P!B AT *S!A,ADD R,T1
STVLP7:	SKIPN T1,PPASED(B)
	JRST STLHD2
	JUMPL T1,STVLP8
	MOVE T2,PMOB(B)
	RS *P!B PASED ON *O!T1 RANK,SUB R,@PPVM(T2)
STLHD2:	SKIPLE D,BOARD+1(A)
	SKIPL SNFBP-PIECE(D)
	JRST STVLP9
	SKIPN PMOB(B)
	SKIPE PMOB-PIECE(D)
	JRST STVLP9
	MOVE T1,RPRANK(B)
	MOVE T2,HDOVAL(T1)
	IMUL T2,HDUOSW
	RS DUO AT *S!A, SUB R,T2
STVLP9:	AOBJN B,STVLP5

	LDB A,[430100,,R]
	SKIPN WPNC(A)
	SKIPE WRKC(A)
	JRST STVLS0
	MOVE T1,WBSC(A)
	CAIGE T1,2
	SKIPE WQNC(A)
	JRST STVLS0
	MOVE T2,WKNC(A)
	CAIGE T2,3
	JUMPE T1,STVLS1
	JUMPN T2,STVLS0
STVLS1:	RS BUT LACKS MATING FORCES,MOVEI R,0
STVLS0:	POPJ P,

STVLP4:	RS *P!B PASSED BUT BLOCKED BY FRIENDLY P, ADD R,BPPVLU
	JRST STLHD1

STVLP8:	RS *P!B PASSED BUT BLOCKED BY FRIENDLY, SUB R,BPPVLU
	JRST STLHD2

STVTR1:	MMSAVAC		;TRACE SUPER STATIC BD EV FROM "DYNAMIC" POSITION
	MOVEI I,2	; (GET HERE ON HBPT -1)
	MOVEM I,TRCSW1
	PUSHJ P,ASTRC1
	MOVE T1,PDVLV
	MOVE T2,CPCDVL
	MOVE B,TRPSW
	ISOUT [.ASCII ?PDVLV=*U!T1 CPCDVL=*U!T2?]
	MOVE I,CATCSA+I
	PUSHJ P,STVL4
	MOVEM R,CATCSA+R
	PUSHJ P,ATRAF1		;FINISH OFF PRINTOUT AND UNTRACE.
	PUSHJ P,TYI
	MMRSAC
	POPJ P,

STVL5:	MOVE Q,STSIG

IFN HSCOD,[
	SKIPL D,STHSAD(P)
	SKIPGE T1,NHSW
	JRST STVL5D
	JUMPE T1,STVL5B
	LDB T1,[HTVCOD,,HSTBV(D)]
	CAIE T1,4
	JRST STVL5C
	MOVE T1,@STVL5T(I)
	DPB T1,[HTVCOD,,HSTBV(D)]
	MOVE R,STBSV
	HRRM R,HSTBV(D)
STVL5C:	HRRZM D,POSHSA
	MOVE T2,STDBHA(P)
	MOVE C,CVPR
	JUMPE C,STVL5A
	MOVE C,1(C)
	LDB A,[300,,C]
	DPB A,[HSTPRN,,T2]
	LDB A,[MPTO,,C]
	LDB B,[MPO,,C]
	DPB B,[HSTPON,,T2]
	DPB A,[HSTSQN,,T2]
	MOVEM T2,HSTBL(D)
]
STVL5A:	MOVE Q,STSIG
	MOVE P,STPDS(P)
	MOVE R,STBSV
STIRE3:	POP P,BPREV(I)
	POP P,PDVLV
	SOS LMGD
	MOVE A,@OKINGT(I)
	SKIPN @LMGST+1(I)	;DONT SOS IT IF DIDNT AOS IT
	SOS LMGD2
	POPJ P,

STIRET:	MOVE R,PCSATS		;IMMEDIATELY RETURN PCSATS WITH RELIABILITY OF 0!
STIRE4:				;RETURN R WITH RELIABILITY OF 0
IFN HSCOD,[
	SKIPL D,HSADR
	SKIPGE T1,NHSW
	JRST STIRE1
	JUMPE T1,STIRE2
	LDB T1,[HTVCOD,,HSTBV(D)]
	CAIE T1,4
	JRST STIRE1
	MOVEI T1,0
	DPB T1,[HTVCOD,,HSTBV(D)]
	HRRM R,HSTBV(D)
]
STIRE1:	MOVEI Q,0
	MOVEI D,-1
	MOVEM D,POSHSA
	MOVE P,LGLMST
	JRST STIRE3

STRET2:	IFN HSCOD,[
	SKIPL D,HSADR
	SKIPGE T1,NHSW
	JRST STRET3
	JUMPE T1,STRET4
	LDB T1,[HTVCOD,,HSTBV(D)]
	CAIE T1,4
	JRST STRET3
	MOVEI T1,1
	DPB T1,[HTVCOD,,HSTBV(D)]
	HRRM R,HSTBV(D)
]
STRET3:	MOVE Q,EVMT5A(I)
	MOVEM Q,STSIG
	MOVEM R,STBSV
STVL5D:	MOVEI D,-1
	MOVEM D,POSHSA
	JRST STVL5A

IFN HSCOD,[
STRET4:	CLEARM HSTB(D)
	MOVEI D,-1
	AOS HASHS
	JRST STRET3

STVL5B:	CLEARM HSTB(D)
	AOS HASHS
	JRST STVL5D

STIRE2:	CLEARM HSTB(D)
	AOS HASHS
	JRST STIRE1
]


SFDBS4:	TDZA T2,T2
SFDBS6:	MOVNI T2,1
	MOVEI T1,1	;MAY BE BETTER FOR STM
	JRST SFDBS5

STATE4:	TDZA T2,T2	;"TRY" TO FEEDOVER
STATE6:	MOVNI T2,1	;SAVE IN T2 INDICATION AS TO RETURN POINT
	MOVEI T1,0	;MAY BE WORSE FOR STM
SFDBS5:	MOVE Q,LMGD2
	CAMGE Q,FDCUT
	SKIPG MCFB
	JRST STATE7	;TOO DEEP OR FEEDOVERS USED UP
IFN CHEOPS,[
	SKIPLE Q,CHEOSW
	TRNN Q,1
	JRST STMT2
	SKIPE Q,CHFDVF
	CAMLE Q,LMGD
	JRST STMT2
	PUSH P,T1
	PUSH P,T2
	PUSH P,A
	PUSHJ P,HCHGV
	SKIPE T1,CHXSTA		;SUM IN STATISTICS COUNT
	AOS CSSTAC
	ADDM T1,CSSTA
	CLEARM CHXSTA		;AVOID POSSIBLE DOUBLE COUNTING IF FILTER BACK THRU
	POP P,A
	POP P,T2
	POP P,T1
	MOVM ZR,R
	CAIL ZR,10000-40
	 JRST [	  AOS CSMATD
		  PUSHJ P,HOCMMV
		  JRST STIRE4]
	MOVE Q,R
	SUB Q,CHXIMB
	JUMPE Q,CHFDV0	;NEITHER BETTER NOR WORSE, NO FEEDOVER
	JUMPN I,CHFDV1
	JUMPE T1,[ JUMPL Q,STMT2 ;THOUGHT MIGHT BE WORSE FOR STM AND WAS, SO FEEDOVER
		   JRST CHFDV0]	 ;TURNS OUT IT ISNT, SO DONT...
	JUMPG Q,STMT2		 ;THOUGHT MIGHT BE BETTER AND IS, SO FEEDOVER
	JRST CHFDV0		 ;TURNS OUT IT ISNT, SO DONT...

CHFDV1:	JUMPE T1,[ JUMPG Q,STMT2
		   JRST CHFDV0]
	JUMPL Q,STMT2
	JRST CHFDV0
]


;DROP IN IN CHEOPS=0 MODE.
STMT2:	SKIPE FDCTSW
	JRST STMT5	;IN FEEDOVER CUTOFF MODE
STMT6:	SOS MCFB	;FEEDOVER (ENTER HERE IF CHEOPS SAYS WORSE FOR STM)
	SETOM SFB	;SET IN A FEEDOVER FLAG
	AOS NFD
	MOVE P,LGLMST
	MOVE T,[-LLMGPL,,LMGPDL-1]
	MOVE T1,LMGD2
	SUB T1,HK1V
	MOVEM T1,PMGLVL
	JRST STATE2

STMT5:	SETOM HSADR
;	PUSH P,A
;	PUSH P,T
;	PUSH P,T2
;	PUSHJ P,STVL4
;	POP P,T2
;	POP P,T
;	POP P,A
	MOVE R,PCSATS
	XCT STMT5T(I)
	JRST STATE7	;ALREADY HAVE A BETTER LINE ELSEWHERE EVEN IF THIS GETS NO WORSE
	MOVEM R,FDCV	;QUIT ON FINDING A LINE AS GOOD AS THIS OR BETTER
	JRST STMT6

IFN CHEOPS,[
CHFDV0:	AOS NCHNFD	;# FEEDOVERS CHEOPS "STOPPED"
	JRST CHFDV2
]
STATE7:	AOS NMFD
CHFDV2:	JUMPL T2,STATE9
	JUMPG T2,STATE8	;EVIDENTLY IMPOSSIBLE ...
	JRST STATE5

STMT5T:	CAMG R,BPREV
	CAML R,BPREV+1

FDCTSW:	0		;FEEDOVER CUTOFF SWITCH
FDCV:	0		;FEEDOVER VERIFICATION VALUE.


STV3E:	SKIPGE RPIECE(D)
	JRST STV3	;KING FIRST DEF ATTACKED TWICE THEREFORE EN PRISE
	PUSHJ P,F2LA
	JUMPE T2,STV3
	MOVE S,RPVAL(C)
	SUB S,RPVAL(B)	;NET ON FIRST EXCH
	ADD S,RPVAL(T1)
	SUB S,RPVAL(D)
	JUMPL S,STV3	;AHEAD AFTER SECOND TRADE
	MOVE J,@LMGST(I)
	CAIN J,2
	JRST STV2	;NO POSSIBILITY OF RECAPTURE
	SUB S,RPVAL(T2)
	JUMPGE S,STV2	;RECAPTURE WOULD NOT RECOUP

STV3:	AOS HPCOP	;D HAS HIS FIRST DEFENDER OR 0 IF NONE
	MOVE ZR,PVALUE(B)
	CAMLE ZR,HPCOPV
	MOVEM ZR,HPCOPV
	SKIPGE LMGT(B)	;PIECE IN B CONSIDERED TO BE EN PRISE.
	JRST STV3F1
STV3F2:	SKIPE PINT(B)
	SETOM SFDF1	;ALSO PINNED, MAYBE CAUSE FEEDOVER EVENTUALLY
	PUSHJ P,TRAPP
	SKIPGE TRPF
	SETOM SFDF1	;OR TRAPPED, LIKEWISE.
STV3F:	SKIPE T1,BDA1(A)  ;CAUSE CAPTURES OF THIS PIECE (BY US) TO BE PLAUSIBLE (MAYBE)
	PUSHJ T,STV3A
	SKIPE T1,BDA2(A)
	PUSHJ T,STV3A
	SKIPE T1,BDA3(A)
	PUSHJ T,STV3A
	JRST STV2


STV3F1:	SKIPG PPTP(B)	;DONT WORRY ABOUT PAWN PINNED, ETC, UNLESS WEAK.
	JRST STV3F
	JRST STV3F2	;WEAK PAWN

STV3A:	JFFO T1,STV3A1
	POPJ T,

STV3T:	SKIPGE PIECE(TT)
	SKIPL PIECE(TT)

STV3A1:	LDB TT,FJTB1(T2)
	ANDCM T1,FJTB2(T2)
	XCT STV3T(I)
	JRST STV3A
	SKIPE J,PINT(TT)
	JRST STPL1	;THIS MOVE REALLY LGL?
STPL2:	MOVE J,A
	SKIPGE LMGT(TT)
	SKIPL LMGT(B)
	JRST STV3A7
	LDB Q,[BRANK,,BPREL(A)]
	CAMN Q,PRANK(TT)
	XCT STV3AT(I)	;EP CAPT
STV3A7:	MOVE T2,RPVAL(B)
	SKIPN @LMGST+1(I)
	JRST STV3VK
	JUMPE D,STV3VK	;NO EFFECTIVE DEFENDER
	SKIPGE RPIECE(TT)
	JRST STV3A2	;K CANT CAP DEF ED THING
	SUB T2,RPVAL(TT)
	JUMPL T2,STV3A3
	MOVE Q,@LMGST(I)
	SOJE Q,STV3A8
	MOVE T2,RPVAL(D)	;MIN P, P+D-A
	SUB T2,RPVAL(TT)
	ADD T2,RPVAL(B)
	CAMLE T2,RPVAL(B)
	MOVE T2,RPVAL(B)
STV3A4:	CAML T2,RPVAL(TT)
STV3VK:	SETOM TRDP(TT)	;PIECE HAS PLAUS CAPT
STV3VF:	PUSH P,J
	HRLM TT,(P)
	PUSH P,T2
STV3A2:	JFFO T1,STV3A1
	POPJ T,

STPL1:	SKIPGE (J)
	JRST STPL3	;PIN TO K
	HRRZ J,(J)
	JUMPE J,STPL2
	JRST STPL1

STPL3:	LDB Q,[PINDIR,,1(J)]
	MOVE T2,PIECEL(TT)
	LDB ZR,STPLT1(Q)
	LDB T2,STPLT2(Q)
	CAMN T2,ZR
	JRST STPL2	;ALONG LINE OF PIN, OK
	JRST STV3A2	;ILLEGAL

STPLT1:	BRANK,,BPREL(T2)
	BRANK,,BPREL(T2)
	BFILE,,BPREL(T2)
	BFILE,,BPREL(T2)
	BPDAG,,BPREL(T2)
	BMDAG,,BPREL(T2)
	BPDAG,,BPREL(T2)
	BMDAG,,BPREL(T2)

STPLT2:	BRANK,,BPREL(A)
	BRANK,,BPREL(A)
	BFILE,,BPREL(A)
	BFILE,,BPREL(A)
	BPDAG,,BPREL(A)
	BMDAG,,BPREL(A)
	BPDAG,,BPREL(A)
	BMDAG,,BPREL(A)

STPLT3:	BRANK,,BPREL(S)
	BRANK,,BPREL(S)
	BFILE,,BPREL(S)
	BFILE,,BPREL(S)
	BPDAG,,BPREL(S)
	BMDAG,,BPREL(S)
	BPDAG,,BPREL(S)
	BMDAG,,BPREL(S)

STV3AT:	MOVEI J,BW(A)
	MOVEI J,-BW(A)

STV3A3:	MOVE ZR,@LMGST(I)
	SOJN ZR,STV3A5	;WE HAVE OTHER ATTACKS
STV3A6:	MOVE S,PIECEL(TT)
	SKIPN @STLST+1(I)
	 JRST [	SKIPL LMGT(D)	;IS THIS THE CREATING ISOLATED PAWNS CASE?
		JRST STV3A2	;THIS PIECE NOT ATTACKED
		MOVE T2,RPVAL(B)
		SUB T2,RPVAL(TT)
		CAMGE T2,[-<BV-NV>]
		JRST STV3A2
		JRST .+1]	;YES, MAYBE CREATING ISO PAWN.
	MOVEI T2,0
	JRST STV3VF	;APPARENT UNFAVORABLE TRADE, BUT PIECE ATTACKED SO IT MAY BE BEST


STV3A5:	MOVE T2,RPVAL(TT)
	SUB T2,RPVAL(B)
	SUB T2,RPVAL(D)
	JUMPG T2,STV3A6	;PIECE WORTH MORE THAN PIECE TAKEN+1ST DEFENDER
			;THEREFORE DONT CONSIDER UNLESS PIECE ATTACKED
	MOVNS T2
	CAMLE T2,RPVAL(B)	;HE CAN RECAPT EXACTLY ONCE IF HE WANTS
STV3A8:	MOVE T2,RPVAL(B)
	JRST STV3A4

STLST:	WA(S)
	BA(S)
	WA(S)


STVD:	PUSHJ P,CDVLV
	SUB S,T1
	MOVEM S,PDVDF		;DEVEL DIF THIS LVL
	SKIPN AVGSW
	JRST [	MOVM T1,S	;TURN OFF AVERAGING HACK
		XCT STDVL2	;THIS SHIFT GENERALLY ONE LESS THAN STDVLS
		SKIPGE S
		MOVNS T1
		JRST STVD0]
	ADD S,PDVLV		;DEVEL DIF LAST LVL
	XCT (I)	[ SUB S,CPCDVL	;WHITE TO MOVE NOW, SO A WHITE PC CAPTED.  THEREFORE,
		  ADD S,CPCDVL] ; CURRENT VALUE TOO GOOD FOR WHITE, THEREFORE SUB.
	MOVM T1,S
	XCT STDVLS		;SHIFT TO ADJUST
	SKIPGE S
	MOVNS T1
STVD0:	RS DEV VAL,ADD R,T1
	MOVE T1,WTDVL
	ADD T1,BTDVL
	ASH T1,-14.
	XCT STVDI
	POPJ P,

STVI1:	RS TOTAL DEVEL FACTOR, ADD R,T1
	RS TOTAL DEVEL FACTOR, SUB R,T1
STVDI:	JFCL	;LOAD AT HACK1 IF SIDE SHOULD KEEP GAME CLOSED

STACE:	HRRZ T1,GAMP
STACE1:	CAIN T1,GAME-1
	POPJ P,
	CAMN T1,ACTVP
	JRST STACR1
	LDB T2,[MPC,,(T1)]
	SKIPL (T1)
	SKIPGE LMGT(T2)
	POPJ P,
	SOJA T1,STACE1

STACR1:	RS ACTIVITY, ADD R,ACTV
	POPJ P,

STCNT:	SKIPGE WMID
	SKIPL BMID
	POPJ P,		;BOTH SIDES MUST HAVE MIDGAME MATL
	MOVE C,[-LCSQT,,CSQT]
STCNT1:	MOVE A,(C)
	SKIPE D,BOARD(A)
	SKIPGE SLDPC-PIECE(D)
	JRST STCNT2		;SQUARE VACANT OR OCC BY SLIDING PC
	LDB T2,[PTID,,(D)]
	CAILE T2,KNID	;P=0, N=1
	JRST STCNT2
	MOVE T1,WCFCT(A)	;WHITE CENTER SQUARE FACTOR TABLE
	SKIPGE (D)
	MOVE T1,BCFCT(A)	;BLACK CENTER SQUARE FACTOR TABLE
	IMUL T1,CPCFCT-PID(T2)
	IMUL T1,CNTSW		;KLUDGILY ALLOW IMPORTANCE OF THIS TO BE SET.
	RS CENTER OCC *M!D,ADD R,T1
STCNT2:	AOBJN C,STCNT1
	POPJ P,

CSQT:	WKB3
	WK3
	WQ3
	WQ3+1
	WKB3+BW
	WK3+BW
	WQ3+BW
	WQ3+1+BW
	WKB3+2*BW
	WK3+2*BW
	WQ3+2*BW
	WQ3+1+2*BW
	WKB3+3*BW
	WK3+3*BW
	WQ3+3*BW
	WQ3+1+3*BW
LCSQT==.-CSQT

CPCFCT:	1		;CENTRALIZIING FACTOR FOR PAWNS
	4		;CENTRALIZING FACTOR FOR KNIGHTS

WCFCT==.-2*BW
 REPEAT 2,[
	0
	BLOCK 8
	0
]
	0
	0 ? 0 ? 1 ? 2 ? 2 ? 1 ? 0 ? 0		;3RD RANK
	0 ? 0
	0 ? 0 ? 2 ? 3 ? 3 ? 2 ? 0 ? 0		;4TH RANK
	0 ? 0
	0 ? 0 ? 3 ? 4 ? 4 ? 3 ? 0 ? 0		;5TH RANK
 	0 ? 0
	0 ? 0 ? 3 ? 5 ? 5 ? 3 ? 0 ? 0		;6TH RANK
	0
 REPEAT 2,[
	0
	BLOCK 8
	0
]
BCFCT==.-2*BW
 REPEAT 2,[
	0
	BLOCK 8
	0
]
	0
	0 ? 0 ? -3 ? -5 ? -5 ? -5 ? 0 ? 0		;6TH RANK
	0 ? 0
	0 ? 0 ? -3 ? -4 ? -4 ? -3 ? 0 ? 0		;5TH RANK
	0 ? 0
	0 ? 0 ? -2 ? -3 ? -3 ? -2 ? 0 ? 0		;4TH RANK
	0 ? 0
	0 ? 0 ? -1 ? -2 ? -2 ? -1 ? 0 ? 0		;3RD RANK
	0
 REPEAT 2,[
	0
	BLOCK 8
	0
]

STOKF:	MOVE T1,PFILE+WKING-PIECE
	MOVEI T2,4
	SKIPN WQNC+1
	 JRST [	SKIPN NUMORP+1
		JRST STOKF5
		MOVEI T2,1
		JRST .+1]
	CAIG T1,1
	JRST STOKF1		;-1 FILE OFF BOARD
	MOVEI C,0
	SKIPN WPNFLS-1(T1)
	ADDI C,2
	SKIPN BPNFLS-1(T1)
	ADDI C,1
	MOVE ZR,T2
	IMUL ZR,OKFACT(C)
	IMUL ZR,OKFILE
	SKIPGE BMID		;OK IF BLACK DOESNT HAVE MID GAME MATL
	RS OPEN FILE TO K SIDE OF WK,SUB R,ZR
STOKF1:	CAIL T1,8
	JRST STOKF2
	MOVEI C,0
	SKIPN WPNFLS+1(T1)
	ADDI C,2
	SKIPN BPNFLS+1(T1)
	ADDI C,1
	MOVE ZR,T2
	IMUL ZR,OKFACT(C)
	SKIPGE BMID		;OK IF BLACK DOESNT HAVE MID GAME MATL
	RS OPEN FILE TO Q SIDE OF WK,SUB R,ZR
STOKF2:	MOVEI C,0
	SKIPN WPNFLS(T1)
	ADDI C,2		;AT LEAST HALF OPEN FOR US
	SKIPN BPNFLS(T1)
	ADDI C,1		;AT LEAST HALF OPEN FOR HIM
	LSH T2,1		;DOUBLE FOR FILE K IS ON
	IMUL T2,OKFACT(C)
	IMUL T2,OKFILE
	SKIPGE BMID		;OK IF BLACK DOESNT HAVE MID GAME MATL
	RS WK ON OPEN FILE,SUB R,T2
STOKF5:	MOVE T1,PFILE+BKING-PIECE
	MOVEI T2,4
	SKIPN WQNC
	 JRST [	SKIPN NUMORP
		POPJ P,
		MOVEI T2,1
		JRST .+1]
	CAIG T1,1
	JRST STOKF6		;-1 FILE OFF BOARD
	MOVEI C,0
	SKIPN BPNFLS-1(T1)
	ADDI C,2
	SKIPN WPNFLS-1(T1)
	ADDI C,1
	MOVE ZR,T2
	IMUL ZR,OKFACT(C)
	IMUL ZR,OKFILE
	SKIPGE WMID		;OK IF WHITE DOESNT HAVE MID GAME MATL
	RS OPEN FILE TO K SIDE OF BK,ADD R,ZR
STOKF6:	CAIL T1,8
	JRST STOKF7
	MOVEI C,0
	SKIPN BPNFLS+1(T1)
	ADDI C,2
	SKIPN WPNFLS+1(T1)
	ADDI C,1
	MOVE ZR,T2
	IMUL ZR,OKFACT(C)
	SKIPGE WMID		;OK IF WHITE DOESNT HAVE MID GAME MATL
	RS OPEN FILE TO Q SIDE OF BK,ADD R,ZR
STOKF7:	MOVEI C,0
	SKIPN BPNFLS(T1)
	ADDI C,2		;AT LEAST HALF OPEN FOR US
	SKIPN WPNFLS(T1)
	ADDI C,1		;AT LEAST HALF OPEN FOR HIM
	LSH T2,1		;DOUBLE FOR FILE K IS ON
	IMUL T2,OKFACT(C)
	IMUL T2,OKFILE
	SKIPGE WMID		;OK IF WHITE DOESNT HAVE MID GAME MATL
	RS BK ON OPEN FILE,ADD R,T2
	POPJ P,

OKFACT:	0		;FILE CLOSED
	2		;HALF OPEN FOR HIM
	1		;HALF OPEN FOR US
	4		;FILE OPEN

STKC:	MOVE A,PIECEL+WKING-PIECE
	SKIPGE BOARD-BW(A)
	 JRST STWKC1
STWKR1:	SKIPGE BOARD-1(A)
	 JRST STWKC2
STWKR2:	SKIPGE BOARD+1(A)
	 JRST STWKC3
STWKR3:	SKIPGE BOARD+BW(A)
	 JRST STWKC4
STWKR4:	MOVE A,PIECEL+BKING-PIECE
	SKIPGE BOARD-BW(A)
	 JRST STBKC1
STBKR1:	SKIPGE BOARD-1(A)
	 JRST STBKC2
STBKR2:	SKIPGE BOARD+1(A)
	 JRST STBKC3
STBKR3:	SKIPGE BOARD+BW(A)
	 JRST STBKC4
STBKR4:	POPJ P,

STWKC1:	SKIPGE BOARD+BW-1(A)
	JRST .+3
	SKIPN BA+BW-1(A)	;AT BOTTOM OF BOARD, FENCED IN?
	JRST STWKR1
	SKIPGE BOARD+BW+1(A)
	JRST .+3
	SKIPN BA+BW+1(A)
	JRST STWKR1
	SKIPE BA+BW(A)
	RS W K PINNED TO EDGE,SUB R,KCUT
	JRST STWKR1

STWKC2:	SKIPGE BOARD+BW+1(A)
	JRST .+3
	SKIPN BA+BW+1(A)
	JRST STWKR2
	SKIPGE BOARD-BW+1(A)
	JRST .+3
	SKIPN BA-BW+1(A)
	JRST STWKR2
	SKIPE BA+1(A)
	RS W K PINNED TO EDGE,SUB R,KCUT
	JRST STWKR2

STWKC3:	SKIPGE BOARD+BW-1(A)
	JRST .+3
	SKIPN BA+BW-1(A)
	JRST STWKR3
	SKIPGE BOARD-BW-1(A)
	JRST .+3
	SKIPN BA-BW-1(A)
	JRST STWKR3
	SKIPE BA-1(A)
	RS W K PINNED TO EDGE,SUB R,KCUT
	JRST STWKR3

STWKC4:	SKIPGE BOARD-BW+1(A)
	JRST .+3
	SKIPN BA-BW+1(A)
	JRST STWKR4
	SKIPGE BOARD-BW-1(A)
	JRST .+3
	SKIPN BA-BW-1(A)
	JRST STWKR4
	SKIPE BA-BW(A)
	RS W K PINNED TO EDGE,SUB R,KCUT
	JRST STWKR4
		
STBKC1:	SKIPGE BOARD+BW-1(A)
	JRST .+3
	SKIPN WA+BW-1(A)	;AT BOTTOM OF BOARD, FENCED IN?
	JRST STBKR1
	SKIPGE BOARD+BW+1(A)
	JRST .+3
	SKIPN WA+BW+1(A)
	JRST STBKR1
	SKIPE WA+BW(A)
	RS B K PINNED TO EDGE,ADD R,KCUT
	JRST STBKR1

STBKC2:	SKIPGE BOARD+BW+1(A)
	JRST .+3
	SKIPN WA+BW+1(A)
	JRST STBKR2
	SKIPGE BOARD-BW+1(A)
	JRST .+3
	SKIPN WA-BW+1(A)
	JRST STBKR2
	SKIPE WA+1(A)
	RS B K PINNED TO EDGE,ADD R,KCUT
	JRST STBKR2

STBKC3:	SKIPGE BOARD+BW-1(A)
	JRST .+3
	SKIPN WA+BW-1(A)
	JRST STBKR3
	SKIPGE BOARD-BW-1(A)
	JRST .+3
	SKIPN WA-BW-1(A)
	JRST STBKR3
	SKIPE WA-1(A)
	RS B K PINNED TO EDGE,ADD R,KCUT
	JRST STBKR3

STBKC4:	SKIPGE BOARD-BW+1(A)
	JRST .+3
	SKIPN WA-BW+1(A)
	JRST STBKR4
	SKIPGE BOARD-BW-1(A)
	JRST .+3
	SKIPN WA-BW-1(A)
	JRST STBKR4
	SKIPE WA-BW(A)
	RS B K PINNED TO EDGE,ADD R,KCUT
	JRST STBKR4
		
STWSP:	SKIPN C,PCPINS
	POPJ P,
STWSP1:	LDB A,[PINOPS,,1(C)]
	MOVE D,BOARD(A)
	SKIPGE (D)
	JRST STWSP2	;PIN ON BLACK
	SKIPLE T1,BOARD-BW-1(A)
	SKIPL LMGSTD-PIECE(T1)
	JRST .+2
	JRST STWSP3	;OK DEFENDED BY OUR P
	SKIPLE T1,BOARD-BW+1(A)
	SKIPL LMGSTD-PIECE(T1)
	RS *M!D PINNED AND NOT DEF BY PAWN, SUB R,PINWSQ
STWSP3:	SKIPE C,(C)
	JRST STWSP1
	POPJ P,

STWSP2:	SKIPLE T1,BOARD+BW-1(A)
	SKIPL SNFBP-PIECE(T1)
	JRST .+2
	JRST STWSP3
	SKIPLE T1,BOARD+BW+1(A)
	SKIPL SNFBP-PIECE(T1)
	RS *M!D PINNED AND NOT DEF BY PAWN, ADD R,PINWSQ
	JRST STWSP3

;ROOK POSITION TERM.  CREDIT ROOK PENETRATION AND # OPPOSING PCS ON SAME RANK
STRKP:	SKIPN A,WKR+PIECEL-PIECE
	JRST STRKP1
	MOVE C,WKR+RPRANK-PIECE
	RS WKR RANK,ADD R,RRNKV(C)
	PUSHJ P,STRKRW		;CREDIT FOR OPPOSING PCS ON SAME RANK
STRKP1:	SKIPN A,WQR+PIECEL-PIECE
	JRST STRKP2
	MOVE C,WQR+RPRANK-PIECE
	RS WQR RANK,ADD R,RRNKV(C)
	PUSHJ P,STRKRW
STRKP2:	SKIPN A,BKR+PIECEL-PIECE
	JRST STRKP3
	MOVE C,BKR+RPRANK-PIECE
	RS BKR RANK,SUB R,RRNKV(C)
	PUSHJ P,STRKRB
STRKP3:	SKIPN A,BQR+PIECEL-PIECE
	JRST STRKP4
	MOVE C,BQR+RPRANK-PIECE
	RS BQR RANK,SUB R,RRNKV(C)
	PUSHJ P,STRKRB
STRKP4:	POPJ P,

STRKRW:	MOVEI T1,0	;COUNT HIS PCS ON RANK WITH R ON SQUARE IN A.
	PUSH P,A
STKRW1:	SKIPGE D,BOARD-1(A)
	JRST STKRW2
	JUMPE D,STKRW5
	SKIPGE (D)
	AOS T1
STKRW5:	SOJA A,STKRW1
STKRW2:	POP P,A
STKRW4:	SKIPGE D,BOARD+1(A)
	JRST STKRW3
	JUMPE D,STKRW6
	SKIPGE (D)
	AOS T1
STKRW6:	AOJA A,STKRW4
STKRW3:	IMUL T1,RKPOS
	RS HIS PCS ON RANK WITH R,ADD R,T1
	POPJ P,

STRKRB:	MOVEI T1,0	;COUNT HIS PCS ON RANK WITH R ON SQUARE IN A.
	PUSH P,A
STKRB1:	SKIPGE D,BOARD-1(A)
	JRST STKRB2
	JUMPE D,STKRB5
	SKIPL (D)
	AOS T1
STKRB5:	SOJA A,STKRB1
STKRB2:	POP P,A
STKRB4:	SKIPGE D,BOARD+1(A)
	JRST STKRB3
	JUMPE D,STKRB6
	SKIPL (D)
	AOS T1
STKRB6:	AOJA A,STKRB4
STKRB3:	IMUL T1,RKPOS
	RS HIS PCS ON RANK WITH R,SUB R,T1
	POPJ P,

RRNKV:	0		;ROOK PENETRATION, VALUE FOR ROOK AS FCTN OF RANK
	0	;1ST
	0	;2ND
	1	;3RD
	2	;4TH
	3 	;5TH
	4	;6TH
	5	;7TH
	6	;8TH

CDVLV:	SKIPN ICSW
	JRST .CDVLV
	MOVE S,WTDVL
	MOVE T1,BTDVL
	POPJ P,

.CDVLV:	MOVE B,[-NPCS,,1]
	CLEARB T1,S
STVD1:	SKIPN A,PIECEL(B)
	JRST STVD2
	MOVE T2,PDV(B)
	IMUL T2,PINVF(B)
	ADD S,T2
STVD2:	AOBJN B,STVD1
	HRLI B,-NPCS
STVD3:	SKIPN A,PIECEL(B)
	JRST STVD4
	MOVE T2,PDV(B)
	IMUL T2,PINVF(B)
	ADD T1,T2
STVD4:	AOBJN B,STVD3
	MOVE B,NMKING
	SKIPGE BMID
	ADD S,STVDT1(B)
	MOVE B,NMKING+1
	SKIPGE WMID
	ADD T1,STVDT1(B)
	MOVEM S,WTDVL
	MOVEM T1,BTDVL
	POPJ P,

ACTV:	0	;IF NE 0 DELTA TO BE ADDED IF NO P MOVE OR CAPT
ACTVP:	0	;PNTR TO GAMP AT TOP LEVEL

WTDVL:	0	;TOTAL WHITE DEVEL
BTDVL:	0	;TOTAL BLACK DEVEL

PDVLV:	0	;DEVELOPMENT VALUE AT PREV LEVEL
STDVLS:	ASH T1,-6	;AMT TO SHIFT SUM OF THIS + PREV DIF BEFORE ADDING TO POS VAL
STDVL2:	ASH T1,-5	;AMT TO SHIFT DEVEL VAL BEFORE ADDING TO POS VAL (IF AVGSW OFF)
STDVL1:	ASH T1,-4	;DEVEL VALUE SCALING SHIFT USED IN PMG
PDVDF:	0	;DIFFERENCE CURRENT POSITION
CPCDVL:	0	;PDV OF PIECE CAPTURED LAST MOVE IF ANY (COMPENSATE PDVLV)


STVDT1:	0	;DEVELOPMENT VALUES FOR CASTLING
	750.	;O-O
	600.	;O-O-O

CDVPNR:	WTDVL	;DEVEL (SIDE)
	BTDVL


ATPCG:	SETOM TPCFL		;TYPE PLAUSIBLE CAPTS
	LDB I,[100,,PLYN]
	MOVEM P,LGLMST
	MOVE T,[-LLMGPL,,LMGPDL-1]
	JRST STATE1

ATPCG1:
ATPCG5:
	MOVE B,TRPSW
	HRRZ R,LGLMST
ATPCG4:	CAIL R,-STWPM+1(P)
	JRST ATPCG3
	HLRZ A,1(R)
	PUSHJ P,PCOUT
	MOVEI A,"-
	PUSHJ P,(B)
	HRRZ A,1(R)
	PUSHJ P,SQOUT
	PUSHJ P,DSPACE
	MOVE A,2(R)
	PUSHJ P,DPT
	PUSHJ P,DCRR
	ADDI R,STWPM
	JRST ATPCG4

ATPCG3:	CLEARM TPCFL
	JRST MNLP

TPCFL:	0		;TOTALLY KLUDGEY TRACE PCG FLAG

ATPCC:	MOVEI B,TYO
ATPC1:	MOVE C,[-NPC,,1]
ATPC3:	SKIPN T1,PIECEL(C)
	JRST ATPC2
	MOVE T2,PDV(C)
	MOVE TT,T2
	IMUL TT,PINVF(C)
	ISOUT [.ASCII ?*P!C AT *S!T1 *U!T2 TOTAL *U!TT?]
ATPC2:	AOBJN C,ATPC3
	POPJ P,

NSBVS:	1	;BCS
PCGPWN:	1

DEFINE SQVRK A,B,C,D
	0
	A
	B
	C
	D
	D
	C
	B
	A
	0
TERMIN

CSQVL=.-2*BW
	SQVRK 2,3,4,4
	SQVRK 3,6,8,8
	SQVRK 4,8,12.,12.
	SQVRK 4,8,12.,14.
	SQVRK 4,8,12.,14.
	SQVRK 4,8,12.,12.
	SQVRK 3,6,8,8
	SQVRK 2,3,4,4


PP PINVF:,
REPEAT 2,[
	REPEAT 8, 6*2
	2*2
	3*2
	3*2
	1*2
	1*2
	3*2
	3*2
	2*2
]

;1 FOR W'S FOURTH RANK -1 FOR BLACKS
4RNKP==.-2*BW
	REPEAT 3*BW,0
	REPEAT BW,1
	REPEAT BW,-1
	REPEAT 3*BW,0

ATEV:	CLEARM WAV	;FILL WAV BAV
	MOVE A,[WAV,,WAV+1]
	BLT A,BAV+BD2-1
	MOVSI T1,-8
	MOVE T2,[-8,,2*BW+1]
ATEV1:	MOVE A,CSQVL(T2)
	LSH A,1
	ADDI A,1(T1)
	MOVEM A,WAV(T2)
	MOVE A,CSQVL(T2)
	LSH A,1
	MOVEI S,-8(T1)
	SUB A,S
	HRRZM A,BAV(T2)
	AOBJN T2,ATEV1
	ADD T2,[-8,,2]
	AOBJN T1,ATEV1
	MOVE T2,PIECEL+BKING-PIECE
	MOVE T1,NKSI
	MOVE S,PIECEL+WKING-PIECE
IRP A,,[1,-1,BW,-BW,BW+1,BW-1,-BW+1,-BW-1,0]
	SKIPL BOARD+A(T2)
	ADDM T1,WAV+A(T2)
	SKIPL BOARD+A(S)
	ADDM T1,BAV+A(S)
TERMIN
	POPJ P,

NKSI:	10.	;EXTRA FOR NEAR KING



;ARRAYS OF VALUES FOR PAWN STRUCTURE STATEV

MULTP:	0	;0 PAWNS IN FILE
	0	;1 PWN.
	10	;...
	40
	140
	240
	340

;ISOLATED PAWN BUGGER VALUES
  ;BASE VALUES, NON OPEN FILE, NO SPECIAL FACTORS
   IP1==20/4	;REGULAR ISOLATED
   IP2==100/4	;DOUBLED AND ISOLATED, APPLIED ONCE PER FILE
   IP3==300/4   ;TRIPLED, ETC

;NEAR K IN MIDDLE GAME FACTOR
DEFINE IPNKF
3/2!TERMIN

;OPEN FILE FACTOR
DEFINE IPOFF
2!TERMIN

;BOTH OPEN FILE AND NEAR K IN MIDDLE GAME
DEFINE IPNKOF
3!TERMIN

;OPEN FILE, OTHER SIDE HAVING NO RFPCS
DEFINE IPONR
5/4!TERMIN

IMULTP:	0	;ISOLATED NON OPEN FILE PWNS IN FILE
	IP1 ? IP2 ? IP3 ? IP3 ? IP3 ? IP3

KIMLTP:	0	;ISOLATED NON OPEN FILE PWNS IN FILE NEAR K IN MIDDLE GAME
	IP1*IPNKF ? IP2*IPNKF ? IP3*IPNKF ? IP3*IPNKF ? IP3*IPNKF ? IP3*IPNKF

OIMULT:	0	;OPEN FILE ISOLATED PWNS
	IP1*IPOFF ? IP2*IPOFF ? IP3*IPOFF ? IP3*IPOFF ? IP3*IPOFF ? IP3*IPOFF

KOIMLT:	0	;OPEN FILE ISOLATED PWNS NEAR K IN MIDDLE GAME
	IP1*IPNKOF ? IP2*IPNKOF ? IP3*IPNKOF ? IP3*IPNKOF ? IP3*IPNKOF ? IP3*IPNKOF

OIMULV:	0	;OPEN FILE ISO PWNS OTHER SIDE HAVING NO RFPCS
	IP1*IPONR ? IP2*IPONR ? IP3*IPONR ? IP3*IPONR ? IP3*IPONR ? IP3*IPONR

IFILEW:	0	;WEIGHTING OF ISOLATED PAWNS AS FUNCTION OF FILE
	2
	2
	3
	4
	4
	3
	2
	2
	0

;VALUE OF FORWARD/BACKWARD PAWN NOT ON OPEN FILE AS FCTN OF MOBILITY
BACKV:	14/4		;FREE
	20/4		;OUR PC
	24/4		;OUR PAWN
	40/4		;HIS PC
	 4/4		;HIS PAWN

;VALUE OF FORWARD/BACKWARD PAWN ON OPEN FILE AS FCTN OF MOBILITY
OBACKV:	34/4		;FREE
	40/4		;OUR PC
	44/4		;OUR PAWN
	60/4		;HIS PC
	 0/4		;HIS PAWN (IMPOSSIBLE)

;PASSED P VALUES AS FUNCTION OF PAWN MOBILITY AND RANK IN T1
PPVM:	PASPV(T1)	;SQUARE AHEAD CLEAR
	PASPV(T1)	;BLOCKED BY OUR PC (SLIGHTLY LESS MOBILE)
	PASPV(T1)	;BLOCKED BY OUR PAWN ??? SHOULD BE IMPOSSIBLE
	PASPV1(T1)	;BLOCKED BY HIS PC (BLOCKADED)
	PASPV1(T1)	;BLOCKED BY HIS PAWN ??? SHOULD BE IMPOSSIBLE

;PASSED PAWN VALUES (FOR MOBILE PAWNS)
PASPV:	0	;PP ON RANK 0?
	0
	10	;PP ON RANK 2
	14	;...
	30
	64
	160	;...
	400	;PP ON RANK 7
	1000	;8TH (CAN BE REF'ED AT STVQL4)

;IF PAWN BLOCKADED BY HIS PIECE
PASPV1:	0	;PP ON RANK 0?
	0
	10/2	;PP ON RANK 2
	14/2	;...
	30/2
	64/2
	160/2	;...
	400/2	;PP ON RANK 7
	1000/2	;8TH (CAN BE REF'ED AT STVQL4)

;VALUE OF MOBILE DUO AS FUNCTION OF RANK
HDOVAL:	0	;RANK 0?
	0	;1
	0	;2
	0	;3
	4	;4
	20	;5
	200	;6  (THEY ARE REALLY CONNECTED PASSED PAWNS)
	400	;7
	400	;8?

BPREL:	REPEAT 2*BW,0
	REPEAT 8,[
	ZZ==.RPCNT
	0
	REPEAT 8,[
	ZFILE==.RPCNT+1
	ZRANK==ZZ+1
	ZPDAG==ZRANK+ZFILE
	ZMDAG==ZRANK+9-ZFILE
	ZFILE_9+ZRANK,,ZPDAG_9+ZMDAG
]
	0
]
	REPEAT 2*BW,0

;SYMBOLIC BYTE POINTERS INTO BPREL
BFILE=331100
BRANK=221100
BPDAG=111100
BMDAG=1100
BCOLR==110100

LSPCL=100.
;LIST STRUCTURE SPACE FOR RECORDING PRINCPLE VARIATIONS
;1ST WD LINK
;4.9 MOVE GEN BY STATIC BD EV 4.8,4.7- BMTHR,BIDSF
PUSNM==220600	;NTH MOVE INVESTIGATED AT THIS LVL
;2 ND WD STANDARD MOVE

LSPC:	REPEAT LSPCL,[	.+2
	0
]
	0
	0

LFS:	LSPC



ICCST:	SETZ WA	;PNTRS TO ARRAYS STORED/CHECKED 4.9 BOARD SIZE 4.8 NOT  PIECE 4.7 FILE ORIENTED
	SETZ BA	;4.6 SINGLE WORD
	SETZ BDA1
	SETZ BDA2
	SETZ BDA3
	SETZ BDBLK
	SETZ ONEB1
	SETZ ONEB2
	SETZ WAV
	SETZ BAV
	PPASED
	PPTP
	100000,,PDV
	200000,,WPNFLS
	200000,,BPNFLS
	200000,,WNPNFL
	200000,,BNPNFL
	40000,,NWPPP
	40000,,NBPPP
	40000,,HSKEY
	40000,,WTDVL
	40000,,BTDVL

LICCST==.-ICCST
NPCAR==3	;NUMBER PIECE SIZE
NBDAR==10.	;NUMBER BOARD SIZE
NFLAR==4	;NUMBER FILE ORIENTED
NWDAR==5	;NUMBER WORD ORIENTED

ICEDT:	ISOUT [.ASCII ?WA DFRS *S!A (#=*H!A) CPY *O!Q ARY *O!D?]
	ISOUT [.ASCII ?BA DFRS *S!A (#=*H!A) CPY *O!Q ARY *O!D?]
	JRST CBDA1D
	JRST CBDA2D
	JRST CBDA3D
	JRST CBDBKD
	JRST CONB1D
	JRST CONB2D
	ISOUT [.ASCII ?WAV DFRS *S!A (=*H!A) CPY *O!Q ARY *O!D?]
	ISOUT [.ASCII ?BAV DFRS *S!A (=*H!A) CPY *O!Q ARY *O!D?]
	ISOUT [.ASCII ?PPASED DFRS *P!A (#=*H!A) CPY *O!Q, ARY *O!D?]
	ISOUT [.ASCII ?PPTP DFRS *P!A (#=*H!A) CPY *O!Q ARY *O!D?]
	ISOUT [.ASCII ?PDV DFRS *P!A (=*H!A) CPY *O!Q ARY *O!D?]
	ISOUT [.ASCII ?WPNFLS DFRS *F!A ARY *O!D, CPY *O!Q?]
	ISOUT [.ASCII ?BPNFLS DFRS *F!A ARY *O!D, CPY *O!Q?]
	ISOUT [.ASCII ?WNPNFL DFRS *F!A ARY *O!D, CPY *O!Q?]
	ISOUT [.ASCII ?BNPNFL DFRS *F!A ARY *O!D, CPY *O!Q?]
	ISOUT [.ASCII ?NWPPP DFRS *O!D, CPY *O!Q?]
	ISOUT [.ASCII ?NBPPP DFRS *O!D, CPY *O!Q?]
	ISOUT [.ASCII ?HSKEY DFRS *O!D, CPY *O!Q?]
	ISOUT [.ASCII ?WTDVL DFRS *O!D, CPY *O!Q?]
	ISOUT [.ASCII ?BTDVL DFRS *O!D, CPY *O!Q?]

IFN .-ICEDT-LICCST,.ERR ICEDT LOSES

BDINI:	SETZM PLYN	;INITIALIZE BOARD, PIECEL, PCBAL, PLYN, GAMP, AND ALL CAT ARRAYS
	MOVEI A,GAME-1
	MOVEM A,GAMP
	MOVEI A,TPCS
	MOVEM A,PCBAL
	MOVEM A,PCBAL+1
	MOVEI A,TPNS
	MOVEM A,PNBAL
	MOVEM A,PNBAL+1
	SETZM NMOVES+1
	MOVE A,[NMOVES+1,,NMOVES+1+1]
	BLT A,NMOVES+NPC-1+1
	MOVE A,[OPIECE+NPC,,OPIECE]
	BLT A,OPIECE+NPC-1
	MOVSI C,-8
	MOVEI B,OPIECE
	MOVEM B,BOARD+3*BW+1(C)
	AOS B
	AOBJN C,.-2
	MOVSI C,-8
	MOVEM B,BOARD+2*BW+1(C)
	AOS B
	AOBJN C,.-2
	MOVSI C,-8
	MOVEM B,BOARD+8*BW+1(C)
	AOS B
	AOBJN C,.-2
	MOVSI C,-8
	MOVEM B,BOARD+9*BW+1(C)
	AOS B
	AOBJN C,.-2
	MOVSI T1,-4
BDINI1:	MOVSI C,-8
	SETZM BOARD+4*BW+1(T1)
	AOS T1
	AOBJN C,.-2
	AOS T1
	AOBJN T1,BDINI1
	SETZM PIECEL+1
	MOVE A,[PIECEL+1,,PIECEL+1+1]
	BLT A,PIECEL+NPC-1+1
	MOVSI T1,-BD2
BDIN3:	SKIPG B,BOARD(T1)
	JRST BDIN2
	HRRZM T1,PIECEL-PIECE(B)
	LDB T2,[BFILE,,BPREL(T1)]
	MOVEM T2,PFILE-PIECE(B)
	LDB T2,[BRANK,,BPREL(T1)]
	MOVEM T2,PRANK-PIECE(B)
	SKIPGE (B)
	MOVE T2,REVERS(T2)
	MOVEM T2,RPRANK-PIECE(B)
BDIN2:	AOBJN T1,BDIN3
	PUSHJ P,ATEV	;SET UP WAV BAV
	CLEARM POSRDI
	JRST .CAT1

ATEVE:	AOS ATEVEC
	MOVEI C,DFPCT
	MOVEI D,ATPCT
	SKIPE T1,BDA1(A)
	JSP TT,AT1
FATBS:	SKIPE T1,BDA2(A)
	JSP TT,AT1
	SKIPE T1,BDA3(A)
	JSP TT,AT1
	MOVEM C,DFPCP
	MOVEM D,ATPCP
	POPJ P,

BATSVB:	;BEGINNING SAVE BLOCK FOR ATEVE
ATPCP:	0	;POINTER TO ATTACK PIECES TABLE DOES NOT POINT TO ACTIVE ENTRY IN STEADY STATE
DFPCP:	0	;DEFENDING PIECES
NATKS:	0	;NUMBER ATTACKS - 1
SPCLST==10.	;SIZE OF LISTING TABLES
	BLOCK SPCLST
ATPCT=.-1
	BLOCK SPCLST
DFPCT=.-1
EATSVB:	;END SAVE BLOCK
ATSVBB:	BLOCK EATSVB-BATSVB	;PLACE TO STORE ATPCP, ETC IF WANT TO ATEVE
			; AND PRESERVE CONTENTS

AJ1:	LDB S,FJTB1(T2)
	ANDCM T1,FJTB2(T2)
	XCT RMOY3(I)
	JRST AT1C	;ATTACKS
	CAIE C,DFPCT
	JRST AT1D
	MOVEM S,(C)
	SOJA C,AT1B1	;ONLY ONE

AT1D:	MOVE ZR,PVALUE(S)
	MOVE Q,1(C)
	CAMLE ZR,PVALUE(Q)
	JRST AT1E
	MOVEM S,(C)
	SOJA C,AT1B1	;LESS THAN LEAST SO FAR

AT1E:	MOVE J,C
AT1G:	CAIN J,DFPCT-1	;INSERT IN LIST AFTER ITEM POINTED TO IN J
	JRST AT1F
	MOVE Q,2(J)
	CAMLE ZR,PVALUE(Q)	;SKIP ON GOES BEFORE THIS ONE
	AOJA J,AT1G
AT1F:	HRRZ ZR,C
	HRLI ZR,1(C)
	BLT ZR,(J)
	MOVEM S,1(J)
	SOJA C,AT1B3

AT1B1:	SKIPL LMGT(S)
	SKIPGE SLDPC(S)
	JRST AT1B2
AT1B:	CAILE C,DFPCT-SPCLST
	CAIG D,ATPCT-SPCLST
	ERRTTY [ASCIZ /LOSSAGE AT ATEVL/]
AT1BL:
AT1:	JFFO T1,AJ1
	JRST (TT)

AT1B2:	MOVE J,C
AT1B4:	MOVE S,PIECEL(S)	;SLIDING PIECE OR P MAY DOUBLE WITH SOMETHING
	MOVE Q,@FATTB1-FATBS(TT)
	LDB S,RDATSS(Q)	;J POINTS TO MAIN GUY INSERTED (IE C(1(J)) IS ITS PIECE #
	JUMPE S,AT1B
	SKIPGE SLDPC(S)	;SKIP ON NOT SLIDING
	XCT RMOY3(I)	;SKIP ON OUR GUY
	JRST AT1B
	MOVE ZR,PVALUE(S)	;UNBLOCKING OUR PIECE
	TLO S,400000
	CAILE C,DFPCT-SPCLST
	JRST AT1G	;IF COME AROUND AGAIN, KNOWN TO BE SLIDING, NOT P
	ERRTTY [ASCIZ /LOOP DEFS AT ATEVL/]

AT1B3:	SKIPL LMGT(S)
	SKIPGE SLDPC(S)
	SOJA J,AT1B4
	JRST AT1B

AT1C:	CAIE D,ATPCT
	JRST AT2D
	MOVEM S,(D)
	SOJA D,AT1B7

AT2D:	MOVE ZR,PVALUE(S)
	MOVE Q,1(D)
	CAMLE ZR,PVALUE(Q)
	JRST AT2E
	MOVEM S,(D)
	SOJA D,AT1B7

AT2E:	MOVE J,D
AT2G:	CAIN J,ATPCT-1
	JRST AT2F
	MOVE Q,2(J)
	CAMLE ZR,PVALUE(Q)
	AOJA J,AT2G
AT2F:	HRRZ ZR,D
	HRLI ZR,1(D)
	BLT ZR,(J)
	MOVEM S,1(J)
	SOJA D,AT1B5

AT1B5:	SKIPL LMGT(S)
	SKIPGE SLDPC(S)
	SOJA J,AT1B6
	JRST AT1B

AT1B7:	SKIPGE LMGT(S)
	JRST AT1B8
	SKIPL SLDPC(S)
	JRST AT1B
AT1B8:	MOVE J,D
AT1B6:	MOVE Q,@FATTB1-FATBS(TT)
	TRNE Q,30
	JRST AT1B	;MUST BE EP (NOT RANK OR FILE AND BY P)
	MOVE S,PIECEL(S)
	LDB S,RDATSS(Q)
	JUMPE S,AT1B
	SKIPGE SLDPC(S)
	XCT RMOY3+1(I)
	JRST AT1B
	MOVE ZR,PVALUE(S)
	TLO S,400000
	CAILE D,ATPCT-SPCLST
	JRST AT2G
	ERRTTY [ASCIZ /LOOP ATS AT ATEVL/]

FATTB1:	FJTB4(T2)
	0
	FJTB5(T2)
	0
	FJTB6(T2)

APINS:	0
DPINS:	0

IRPS ACNAM,,Q S J T2 TT
FSA!ACNAM:	0
TERMIN

;PIECES OF SIDE TO MOVE "DEFEND"
;PIECES OF OTHER SIDE "ATTACK"

PFLATA:	SETOM DPINS	;PINED PIECES DONT DEFEND
AFLAT1:	SETOM APINS	;DONT ATTACK
	JRST MFLATA

AFLATA:	CLEARM DPINS	;PINNED PIECES DEFEND
	JRST AFLAT1

DFLATA:	SETOM DPINS	;PINNED PIECES ATTACK
	JRST DFLAT1

FLATA:	CLEARM DPINS	;PINNED PIECES DEFEND
DFLAT1:	CLEARM APINS	;PINNED PIECES ATTACK
MFLATA:	IRPS A,,Q S J T2 TT
	MOVEM A,FSA!A
TERMIN
	CLEARB C,D		;SQUARE IN A DO NOT RETURN PIECE IN B
	SKIPE T1,BDA1(A)	;RET FIRST DEFENDER (SAME AS I) IN C
	JSP TT,FLATA2		;ATTACKER (DIF SIDE FROM I) IN D
FLTBS:	SKIPE T1,BDA2(A)	;IF PIECE PINNED BY PC IN B, IGNORE PIN
	JSP TT,FLATA2
	SKIPE T1,BDA3(A)
	JSP TT,FLATA2
	IRPS A,,Q S J T2 TT
	MOVE A,FSA!A
TERMIN
	POPJ P,


FLATA2:	JFFO T1,FJ1
	JRST (TT)

FJ1:	LDB J,FJTB1(T2)
	ANDCM T1,FJTB2(T2)
	CAIN J,(B)
	JRST FLATAB
FLATAC:	XCT FAT2(I)
	JRST FLATA4	;HIS GUY
	SKIPGE DPINS
	SKIPN S,PINT(J)
FLTP2:	SKIPA S,PVALUE(C)
	JRST FLTP1
	JUMPE C,FLATA5
	CAMLE S,PVALUE(J)
FLATA5:	MOVE C,J
	JFFO T1,FJ1
	JRST (TT)

FLTP1:	HRRZ ZR,(S)
	JUMPN ZR,FLATA2	;MULTIPLY PINNED
	LDB ZR,[PINATP,,1(S)]
	CAIE ZR,(B)
	JRST FLATA2	;HONOR PIN
	LDB ZR,[BPDPB,,1(S)]
	JUMPE ZR,FLTP2	;IGNORE PIN
	JRST FLATA2	;DONT IGNORE DOUBLE PIN

FLTP3:	HRRZ ZR,(S)
	JUMPN ZR,FLATA2	;MULTIPLY PINNED
	LDB ZR,[PINATP,,1(S)]
	CAIE ZR,(B)
	JRST FLATA2
	LDB ZR,[BPDPB,,1(S)]
	JUMPE ZR,FLTP4
	JRST FLATA2

FLTP5:	PUSH P,S
	MOVE S,PINT(J)
	HRRZ ZR,(S)
	JUMPN ZR,POPSJ	;MULTIPLY PINNED
	LDB ZR,[BPDPB,,1(S)]
	JUMPN ZR,POPSJ	;DONT IGNORE PIN BY MULTIPLE PIECES
	LDB ZR,[PINATP,,1(S)]
	CAIN ZR,(B)
	JRST FLTP6R

POPSJ:	POP P,S
	POPJ P,

FLTP6R:	POP P,S
	JRST FLTP6

FLTP7:	PUSH P,S
	MOVE S,PINT(J)
	HRRZ ZR,(S)
	JUMPN ZR,POPSJ	;MULTIPLY PINNED
	LDB ZR,[BPDPB,,1(S)]
	JUMPN ZR,POPSJ
	LDB ZR,[PINATP,,1(S)]
	CAIN ZR,(B)
	JRST FLTP8R
	POP P,S
	POPJ P,

FLTP8R:	POP P,S
	JRST FLTP8


FLATA4:	SKIPGE APINS
	SKIPN S,PINT(J)
FLTP4:	SKIPA S,PVALUE(D)
	JRST FLTP3
	JUMPE D,FLATAA
	CAMLE S,PVALUE(J)
FLATAA:	MOVE D,J
	JFFO T1,FJ1
	JRST (TT)

FLATAB:	MOVE Q,@FJTB3-FLTBS(TT)	;IGNORE THAT GUY, GOBBLE GUY BEHIND HIM?
	CAILE Q,7
	JRST FLATA2
	MOVE J,PIECEL(J)
	LDB J,F2LAT(Q)
	JUMPE J,FLATA2
	SKIPGE SLDPC(J)
	JRST FLATAC
	JRST FLATA2


ZQY==360600,,T1
FJTB1:	REPEAT 6,[
	REPEAT 6,ZQY
	ZQY==ZQY-<60000,,0>
]
ZQY==770000,,
FJTB2:	REPEAT 6,[
	REPEAT 6,ZQY
	ZQY==ZQY_-6
]
FJTB3:	FJTB4(T2)
	0
	FJTB5(T2)
	0
	[69]

	ZQY==0
FJTB4:	REPEAT 6,[
	REPEAT 6,ZQY
	ZQY==ZQY+1
]

	ZQY==6
FJTB5:	REPEAT 6,[
	REPEAT 6,ZQY
	ZQY==ZQY+1
]
ZQY==12.
FJTB6:	REPEAT 6,[
	REPEAT 6,ZQY
	ZQY==ZQY+1
]

F2LA:	PUSH P,Q
	PUSH P,S
	PUSH P,J
	CLEARB T1,T2	;FIND 2ND ATTACK ON SQUARE IN A
	SKIPN S,BDA1(A)	;RESULT OF FLATA IN C,D
	JRST F2LA1	;RETURN RESULT IN T1,T2
	MOVEI Q,6
F2LA3:	SOS Q
	TRNE S,77
	PUSHJ P,F2LA2
	LSH S,-6
	JUMPN S,F2LA3
F2LA1:	SKIPN S,BDA2(A)
	JRST F2LA8
	MOVEI Q,12.
F2LA7:	SOS Q
	TRNE S,77
	PUSHJ P,F2LA2
	LSH S,-6
	JUMPN S,F2LA7
F2LA8:	SKIPN S,BDA3(A)
	JRST F2R
	MOVEI Q,69
F2LA9:	TRNE S,77
	PUSHJ P,F2LA2
	LSH S,-6
	JUMPN S,F2LA9
F2R:	POP P,J
	POP P,S
	POP P,Q
	POPJ P,


F2LA2:	LDB J,[600,,S]
	CAIN J,(B)
	JRST F2LA2A

F2LA4B:	XCT FAT2(I)
	JRST F2LA4
	CAMN J,C
	JRST F2LA4A
	SKIPGE DPINS
	SKIPN PINT(J)
	JRST .+2
	JRST FLTP5
FLTP6:	JUMPE T1,F2LA5
	MOVE ZR,PVALUE(T1)
	CAMLE ZR,PVALUE(J)
F2LA5:	MOVE T1,J
	POPJ P,

F2LA4:	CAMN J,D
	JRST F2LA4A
	SKIPGE APINS
	SKIPN PINT(J)
	JRST .+2
	JRST FLTP7
FLTP8:	JUMPE T2,F2LA4C
	MOVE ZR,PVALUE(T2)
	CAMLE ZR,PVALUE(J)
F2LA4C:	MOVE T2,J
	POPJ P,

F2LA4A:	CAILE Q,7
	POPJ P,
	MOVE J,PIECEL(J)
	LDB J,F2LAT(Q)
	JUMPE J,CPOPJ
	SKIPGE SLDPC(J)
	JRST F2LA4B
	POPJ P,	;NOT SLIDING

F2LA2A:	CAME J,C
	CAMN J,D
	JRST F2LA4A
	POPJ P,

FAT2:	SKIPGE PIECE(J)
	SKIPL PIECE(J)

F2LAT:	BDARL(J)
	BDARR(J)
	BDAFB(J)
	BDAFT(J)
	BDALL(J)
	BDALR(J)
	BDAUR(J)
	BDAUL(J)


APMGL:	MOVEI A,APMGL1		;PRINT SORTED PMG MOVE LIST
	PUSHJ P,CMPM
	POPJ P,

APMGL1:	PUSHJ P,LMGXR
	MOVEI B,TYO
	MOVE T,[-LLMGPL,,LMGPDL-1]
	PUSHJ T,TDFROB
	JRST CMPMX

APMSTA:	MOVEI B,TYO		;PRINT OUT PMG STATS
	MOVE W,[-LINFDT,,INFDT]
	PUSHJ P,STFPNT
	MOVE W,[-LSTAPT,,STAPT]
	PUSHJ P,STFPNT
	JRST DCRR


IFN CHEOPS,[
ACC:	SKIPN HINITD
	PUSHJ P,HINITC
	SKIPGE HINIBF
	PUSHJ P,HINIL		;REALLY WANT TO CONTROL IT
	SKIPE CCBFM		;SKIP ON NOT IN BUFFERED MODE
	PUSHJ P,CXENC		;WERE, LEAVE IT AND SAVE STATE
	PUSH P,FFANCY
	MOVEI C,1
	PUSHJ P,FANSET
	PUSHJ P,HHU		;CLEAR SCREEN
	PUSHJ P,HCLEOF
	PUSHJ P,HCMAIN
	POP P,C
	PUSHJ P,FANSET
	POPJ P,

ASBACK:	SKIPN HINITD
	PUSHJ P,HINITC
	PUSHJ P,CHBLI		;START BACKGROUND
	POPJ P,

ACBACK:	SKIPN HINITD
	PUSHJ P,HINITC
	MOVE TT,CCBFM		;TRY TO SET UP A/B LIMITS AS WERE.
	CAIN TT,1
	 JRST [	MOVNI A,20000	;TOO MUCH HAIR, IM AFRAID. TRY TO LIMIT CONFUSION
		MOVN B,A
		JRST ACBAK0]
	LDB A,[242000,,HBMEM+CBBBL+2]  ;GET WHAT A-B ACTUALLY WERE OUT OF ARG BLOCK
	TRNE A,100000
	ORCMI A,77777
	LDB B,[042000,,HBMEM+CBBBL+2]
	TRNE B,100000
	ORCMI B,77777
ACBAK0:	MOVEM A,CBALPH
	MOVEM B,CBBETA
	MOVEI A,ACBAKR		;"CONTINUE" BACKGROUND.. USE THIS WHEN "PICKING UP"
	JRST ACBAK1		; BACKGROUND SEARCH STARTED BY A DIFFERENT OCM
				; BOARD POSITION MUST BE SAME AS SEARCH WAS STARTED IN.

ACBAKR:	PUSHJ P,LMGXR
	MOVEI A,CBBBL
	MOVEM A,CBBBP		;KEEP TRACK OF THIS JUST SO WILL KNOW IF BUFFER FILLED
	MOVEI A,CBBMT
	MOVEM A,CBBMP
	HRRZ A,LGLMST
	ADDI A,1
	MOVEI B,1(P)
	PUSHJ P,4SORT
	MOVE TT,LGLMST
ACBAK2:	CAMN TT,P
	JRST ACBAKX
	PUSH P,TT
	HRRZ A,1(TT)
	HLRZ B,1(TT)
	LDB I,[100,,PLYN]
	PUSHJ P,TMOVE
	 JRST ACBAK3
	MOVE C,CBBBP
	CAIL C,HBMEML
	JRST ACBAK3
	ADDI C,40
	MOVEM C,CBBBP
	MOVE A,@GAMP
	MOVEM A,@CBBMP
	AOS CBBMP
ACBAK3:	PUSHJ P,UNMOVE
	POP P,TT
	ADD TT,[NWDPM,,NWDPM]
	JRST ACBAK2

ACBAKX:	CLEARM @CBBMP
	JRST CMPMX

NBMRK:	MOVEM T1,NBMVAL		;MARK MOVES WITH CHEOPS VALUE AT LEAST AS GOOD AS THIS
	CLEARM NBMRKC		;COUNT OF MOVES MARKED.
	SETOM BRCYC
NBMRK0:	MOVEI A,CBBBL
	MOVEM A,CBBBP
	MOVEM A,BSMIND
	CLEARM BSMAXD
	MOVEI A,CBBMT
	MOVEM A,CBBMP
NBMRK1:	SKIPN @CBBMP
	JRST NBMRKX
	MOVE C,CBBBP
	MOVE A,CCBFM
	XCT CXBRV(A)		;SETS UP CHXVAL, ETC. ALSO VALUE IN R.
	MOVE C,CHXSTD
	CAMLE C,BSMAXD
	MOVEM C,BSMAXD
	CAMGE C,BSMIND
	MOVEM C,BSMIND
	MOVE A,@CBBMP
	LDB I,[100,,PLYN]
	PUSHJ P,MMOVE
	 .VALUE		;THAT SHOULD BE LEGAL
	LDB I,[100,,PLYN]
	PUSHJ P,HASHR0	;LOOK UP IN HASH TABLE
	 JRST NBMRK3	;FOUND
	MOVEI J,-1
	MOVEI T1,0
NBMRK5:	MOVE A,CHXVAL
	HRLI T1,500000+MHPLN		;POSITION MARKED IN
	XCT (I) [ CAMLE A,NBMVAL	;I HAS OPPOSITE SIDE FROM SIDE REALLY TO MOVE.
		  CAMGE A,NBMVAL ]
	JRST [	HRLI T1,600000+MHPLN	;POSITION MARKED OUT
		JRST NBMRK6]
	AOS NBMRKC		;COUNT MARKED IN.
NBMRK6:	PUSHJ P,HASHE1
NBMRK4:	PUSHJ P,UNMOVE
NBMRK2:	MOVE C,CBBBP
	ADDI C,40
	MOVEM C,CBBBP
	AOS CBBMP
	JRST NBMRK1

NBMRK3:	HRRZ T1,HSTBV(T2)	;PRESERVE VALUE INFO FOR DEBUGGING
	LDB ZR,[HTVCOD,,HSTBV(T2)]	;POSITION FOUND IN HASH TABLE
	CAIN ZR,3
	JRST NBMRK4		;POSITION IN GAME, LEAVE THAT IN HASH TABLE
	MOVE J,HSTBL(T2)	;PRESERVE PREVIOUS LINK, ETC
	JRST NBMRK5

NBMRKX:	POPJ P,

NBMVAL:	0	;MARK MOVES AS GOOD OR BETTER THAN THIS FOR STM
NBMRKC:	0	;COUNT OF MOVES MARKED

;STOP BLUNDERS!!  GETS RESULTS OF BACKGROUND SEARCH.
; SAVES TWO SETS OF CHEOPS RESULTS: THE "BEST" (CBSXXX) AND THE "CHOSEN" (INXXX)
BSTP:	MOVEM A,INMOV		;SAVE INTENDED MOVE
	SETOM BRCYC		;RECYCLE FLAG.  IF SETD'S READ FROM CHEOPS DIFFER BY
				; MORE THAN 1, CYCLE BACK TO GET UPDATED STUFF.
BSTP0:	LDB I,[100,,PLYN]
	MOVEI A,CBBBL
	MOVEM A,CBBBP
	MOVEM A,BSMIND
	CLEARM BSMAXD
	MOVEI A,CBBMT
	MOVEM A,CBBMP
	MOVE R,EVMST(I)
	MOVEM R,CBSVAL		;BEST VALUE SO FAR
	CLEARM CBSSTD		;FOR NULL DETECTION
	CLEARM BSTCNT		;NUMBER OF MOVES WITH THAT VALUE
	CLEARM INFND		;CLEAR FOUND CHOSEN ONE FLAG
BSTP1:	SKIPN @CBBMP
	JRST BSTPX
	MOVE C,CBBBP
	MOVE A,CCBFM
	XCT CXBRV(A)		;SETS UP CHXVAL, ETC.  ALSO RETS VALUE IN R.
	MOVE C,CHXSTD
	CAMLE C,BSMAXD
	MOVEM C,BSMAXD
	CAMGE C,BSMIND
	MOVEM C,BSMIND
	MOVE C,@CBBMP		;THIS THE CHOSEN MOVE?
	CAMN C,INMOV
	JRST BSTPF		;OK FOUND IT, IS IT A BLUNDER..
BSTPF1:	XCT (I)[   CAMGE R,CBSVAL
		   CAMLE R,CBSVAL]
	JRST BSTP2		;THIS ONE A COMPLETE LOSER
	CAMN R,CBSVAL
	 JRST [	AOS BSTCNT	;ANOTHER ONE WITH EQUAL TO BEST VALUE
		JRST BSTP2]
	MOVEM C,CBSMOV
	MOVE A,[CHXVAL,,CBSVAL]	;THIS A NEW BSF
	BLT A,CBSE-1
	MOVEI A,1
	MOVEM A,BSTCNT
BSTP2:	MOVE C,CBBBP
	ADDI C,40
	MOVEM C,CBBBP
	AOS CBBMP
	JRST BSTP1

BSTPX:	AOSLE BRCYC
	POPJ P,		;ALREADY RECYCLED ONCE, DONT GET INTO LOOP.
	MOVE C,BSMAXD
	SUB C,BSMIND
	CAILE C,1
	JRST BSTP0	;MIN AND MAX DFR BY MORE THAN ONE, SO ANOTHER PLY OF INFO
	POPJ P,		; BE AVAILABLE.  LOOP BACK TO GET BETTER DATA.
			; (THIS CAN HAPPEN PARTICULARILY ON MC WITH
			;   CHAOS NET LOSSAGE).

BSTPF:	SKIPE INFND		;SAVE STUFF FOR SELECTED MOVE
	.VALUE			;MOVE IN LIST TWICE??
	SETOM INFND
	MOVE A,[CHXVAL,,INVAL]
	BLT A,INE-1
	JRST BSTPF1

BSTCNT:	0		;# OF MOVES TIED WITH BEST CHEOPS VALUE
INFND:	0		;-1 -> HAVE FOUND SELECTED MOVE

BRCYC:	0		;FLAG TO AVOID POSSIBLE LOOP RE-READING CHEOPS
BSMIND:	0		;MIN SETD OF ANY OF CHEOPS RESPONSES
BSMAXD:	0		;MAX SETD OF ANY OF CHEOPS RESPONSES.

APBACK:				;PRINT BACKGROUND STATUS
	MOVEI A,CBBBL
	MOVEM A,CBBBP
	MOVEI A,CBBMT
	MOVEM A,CBBMP
APBL1:	SKIPN @CBBMP
	POPJ P,
	MOVE C,CBBBP
	MOVE A,CCBFM
	XCT CXBRV(A)		;GET RESULT
	MOVEI B,TYO
	ISOUT 1,[ASCII /AFTER /]
	MOVE C,@CBBMP		;MOVE
	PUSHJ P,EPMOVE
	ISOUT [.ASCII ?, SETD *U!CHXSTD ?]
	PUSHJ P,ACTPR
	PUSHJ P,BABWRN
	MOVE C,CBBBP
	ADDI C,40
	MOVEM C,CBBBP
	AOS CBBMP
	JRST APBL1

CHBLI:	SKIPE BACKEP		;INITIALIZE ALPHA AND BETA
	 JRST [	SKIPN GESTSW
		JRST CHBLFR	;ESTIMATE NOT REALLY WORTH MUCH
		MOVE C,MSIBB	;IF A-B HACKING ENABLED TAKE ESTIMATE FROM MSIBB
		IDIVI C,1_CHVCNV
		MOVE D,C
		MOVM ZR,C	;IF ONE SIDE WAY AHEAD, ALLOW EXTRA MARGIN.
		LSH ZR,-2
		ADD ZR,BACKEP
		SUB C,ZR
		ADD D,ZR
		JRST CHBLI4]
CHBLFR:	MOVNI C,20000		;ENTER DIRECTLY HERE TO FORCE FULL RANGE A-B
	MOVN D,C
CHBLI4:	MOVEM C,CHXIA
	MOVEM D,CHXIB
	MOVEM C,CBALPH		;ALPHA AND BETA BACKGROUND SEARCHES INITIALIZED TO
	MOVEM D,CBBETA
	MOVEI C,2		;INITIAL SETD TO USE, -1
	MOVEM C,CHXD		;IT INCR S FIRST, SO START OFF AT SETD 3
	MOVE A,CCBFM
	XCT CXBKI(A)		;INITIALIZE BACKGROUND SEARCH

CXBIB:	MOVE A,[177777_4]	;CLOBBER ARG POINTER SO SEARCH DOESNT START AGAIN
	MOVEM A,HBMEM+5
	MOVEI A,13		;ABORT ANY BACKGROUND SEARCH IN PROGRESS
	PUSHJ P,HDPDB1
	MOVEI B,100000
CHBLI0:	LDB A,[%HDBL UNIFA]	;MAKE SURE COMMAND ACKNOWLEDGED TO AVOID ANY
	TRNE A,3		; POSSIBLE TIMING ERROR
	JRST [	SOJG B,CHBLI0
		MOVEI B,TYO
		SOUT [ASCIZ /CHEOPS FAILED TO ACKNOWLEDGE, TRYING AGAIN
/]
		JRST CXBIB]
	MOVE A,HBMEM+5
	TLNN A,777774
	 JRST [	SOJG B,CHBLI0
		MOVEI B,TYO
		SOUT [ASCIZ /CHEOPS FAILED TO ABORT BACKGROUND
/]
		JRST CXBIB]
CXBIN:	MOVEI A,CHBLIR
ACBAK1:				;INITIALIZE BLUNDER STOPPER MODE IN CHEOPS.
				; IE STORE LVL 1 SUCCESSOR POSITIONS IN POSITION BUFFER
			;ENTER HERE FROM CONTINUE BACKGROUND
	PUSHJ P,CMPM
	LDB I,[100,,PLYN]	;MAKE SURE REAL STM LEFT IN I
	POPJ P,

CHBLIR:	PUSHJ P,LMGXR		;UNWEDGE LMGD, ETC
	MOVEI A,CBBBL		;FIRST LOCN TO USE FOR BACKGROUND BLOCK
	MOVEM A,CBBBP		;INITIALIZE PNTR
	MOVEM A,CBBIP		;INITIAL PNTR TO RING TO
	MOVEI A,CBBMT		;INITIALIZE POINTER THAT KEEPS TRACK OF WHICH
	MOVEM A,CBBMP		; MOVES LEAD TO WHICH POSITION
	HRRZ A,LGLMST
	ADDI A,1
	MOVEI B,1(P)
	PUSHJ P,4SORT		;SORT FROBS
	MOVE TT,LGLMST
CHBLI1:	CAMN TT,P
	JRST CHBLIX		;THRU
	PUSH P,TT
	HRRZ A,1(TT)
	HLRZ B,1(TT)
	LDB I,[100,,PLYN]
	PUSHJ P,TMOVE		;PLAY MOVE
	 JRST CHBLI3		;MOVE ILLEGAL
	PUSHJ P,ACLPS1		;MAKE ARG BLOCK
	MOVEI A,3000
	IORM A,CHXSTM		;SET CHAIN MODE AND INCR SETD MODE
	MOVE C,CBBBP
	CAIL C,HBMEML		;SKIP ON ROOM IN BUFF MEM 
	JRST CHBLI3
;	SKIPE T,CBBLB		;LAST BUFFER ADR
;	 JRST [	MOVE TT,C	;CHAIN PREVIOUS  BUFFER TO THIS ONE
;		LSH TT,1
;		ADDI TT,CBBAS/2
;		MOVEM TT,CHXCHW
;		DPB TT,[042000,,HBMEM+3(T)]	;INTO CHAIN POINTER
;		JRST .+1]
	MOVEI TT,40(C)		;ADR OF NEXT BLOCK
	LSH TT,1
	ADDI TT,CBBAS/2
	MOVEM TT,CHXCHW		;LINK THIS BLOCK TO FOLLOWING BLOCK (ASSUMING, FOR
				; THE MOMENT, THERE IS ONE).
	MOVEI T,CHXTB
CXBTRN:	MOVE A,CCBFM
	XCT CXBKT(A)
	ADDI C,40		;INCR TO NEXT BLOCK
	MOVEM C,CBBBP
	MOVE A,@GAMP		;SAVE MOVE WHICH LEAD TO THIS POSITION
	MOVEM A,@CBBMP
	AOS CBBMP
CHBLI3:	PUSHJ P,UNMOVE
	POP P,TT
CHBLI2:	ADD TT,[NWDPM,,NWDPM]
	JRST CHBLI1

CHBLIX:	CLEARM @CBBMP		;TERMINATE LIST OF MOVES
	MOVE A,CCBFM
	XCT CXBFN(A)		;FINALIZE RING AND START BACKGROUND
	JRST CMPMX

CXBFC:	MOVE TT,CBBIP
	LSH TT,1
	ADDI TT,CBBAS/2
	MOVE T,CBBBP
	DPB TT,[042000,,HBMEM+3-40(T)]	;RING BUFFERS
	LSH TT,4
	MOVEM TT,HBMEM+5	;INTO BACKGROUND ARG BLOCK POINTER
	POPJ P,

CBBBP:	0	;PNTR TO NEXT ARG BLOCK
CBBIP:	0	;PNTR TO INITIAL ARG BLOCK (TO RING AT END)
CBBMP:	0	;PNTR TO CBBMT TBL

CBALPH:	0	;ALPHA USED TO INITIALIZE BACKGROUND BLOCKS
CBBETA:	0	;BETA USED TO INITIALIZE BACKGROUND BLOCKS

.SEE CBBMT			 ;ONE WD FOR EACH POSITION IN POSITION BUFFER
				;WHICH HOLDS MOVE THAT LEAD TO THAT POSITION.
				;TERMINATED BY 0 MOVE.

LMCHEO:				;GENERATE MOVE IN CHEOPS BRUTE FORCE MODE
	MOVEI A,LMCHR
	PUSHJ P,CMPM		;GENERATE PLAUSIBLE MOVES ...
	POPJ P,

LMCHR:	PUSHJ P,LMGXR
	MOVEI A,20000		;INITIALIZE ALPHA AND BETA
	MOVNM A,CHXIA		;TO + AND - INF
	MOVEM A,CHXIB
	HRRZ A,LGLMST		;SORT FROBS
	ADDI A,1
	MOVEI B,1(P)
	PUSHJ P,4SORT
	MOVE TT,LGLMST
LMCHR1:	CAMN TT,P
	JRST LMCHEV		;NOW SEE WHICH MOVE WAS BEST
	PUSH P,TT
	HRRZ A,1(TT)
	HLRZ B,1(TT)
	LDB I,[100,,PLYN]
	PUSHJ P,TMOVE		;PLAY MOVE
	 JRST [	PUSHJ P,UNMOVE
		POP P,TT	;MOVE ILLEGAL
		MOVSI ZR,(SETZ)
		IORM ZR,1(TT)	;FLAG MOVE A LOSER
		JRST LMCHR2]
	PUSHJ P,ACLPS1		;MAKE ARG BLOCK DESCRIBING POSITION
	PUSHJ P,ACSTRT		;"START" CHEOPS
	PUSHJ P,HCHGV		;GET CHEOPS VALUE INTO R
	PUSH P,R
	PUSHJ P,UNMOVE
	POP P,R
	POP P,TT
	PUSHJ P,HOCMMV		;CONVERT TO OCM VALUE, SAVE CHEOPS VALUE IN Q
	MOVEM R,2(TT)		;CLOBBER VALUE INTO PLAUSIBILITY WD
	LDB I,[100,,PLYN]
	XCT LMCABT(I)		;SEE IF THIS BEST SO FAR (COMPARE CHEOPS VALUE)
	XCT LMCABU(I)		;UPDATE A-B VARIABLE TO REFLECT THAT
				; STORE CHEOPS VALUE
LMCHR2:	ADD TT,[NWDPM,,NWDPM]
	JRST LMCHR1


ACSTRT:	MOVE TT,CCBFM		;"START" CHEOPS
	XCT CXSTRT(TT)

ACWATP:	MOVEI C,CBABL		;PRIORITY BLOCK, RIGHT THING FOR CCBFM + AND -
	SKIPGE HBMEM(C)
	 JRST [	AOS CSNBSY
		SKIPGE HBMEM(C)
		.HANG		;WAIT UNTIL CHEOPS FINISHED WITH PREVIOUS LOSSAGE
		JRST .+1]
	POPJ P,

AXST2:	PUSHJ P,ACWATP
	PUSHJ P,ACLBPM		;USE PRIORITY HACK, ETC
	POPJ P,

AXST1:	PUSHJ P,ACWATP
	PUSHJ P,ACLBM		;LOAD POSITION INTO BUFFER MEM
	POPJ P,

LMCHB1:	PUSHJ P,ACLPS2		;LOAD POSITION INTO CHEOPS
	MOVEI A,[0]		;CLEAR STATISTICS COUNTER
	MOVEI B,HODSTA
	PUSHJ P,XWOD
	MOVEI B,HODSTB
	PUSHJ P,XWOD
	PUSHJ P,HCP		;RUN CHEOPS AND WAIT FOR IT TO STOP
	POPJ P,

HCHGV1:	MOVEI A,HS1TEM
	MOVEI B,HASSTB
	PUSHJ P,XRAS	;GOBBLE DOWN STATISTICS COUNTER
	MOVE J,HS1TEM
	MOVEI B,HASSTA
	PUSHJ P,XRAS
	LSH J,20
	IOR J,HS1TEM
	MOVEM J,CHXSTA	;RETURNNED STATISTICS COUNTER
	MOVEI B,1	;GOBBLE DOWN SETD  DEEP-PARAMETER
	PUSHJ P,XRPDLB
	MOVE J,HS1TEM
	MOVEM J,HCHSTD	;TEMP FOR SETD
	MOVSI C,-3
	MOVEI B,4	;PV00A
HCHGV3:	PUSHJ P,XRPDLB	;GOBBLE P.V.
	MOVE J,HS1TEM
	AOS B
	PUSHJ P,XRPDLB
	LSH J,16.
	IOR J,HS1TEM
	LSH J,4		;REFORMAT A LA BUFFERED MODE
	SOSL HCHSTD	;SKIP ON THIS ALL OF P.V. THATS VALID
	TLNN J,777774
	JRST HCHGV5	;MATE OR STALEMATE REACHED
	PUSHJ P,HCHMMV	;MAP TO OCM STYLE MOVES
	MOVEM R,CHXPV1(C)
	AOS B
	AOBJN C,HCHGV3
HCHGV6:	MOVEI B,3	;AC MATERIAL
	MOVEI A,CHXIMB
	PUSHJ P,XRAC	;GET INITIAL MATERIAL BALANCE FOR COMPAIRSON
	MOVE R,CHXIMB
	TRNE R,100000
	ORCMI R,77777
	MOVEM R,CHXIMB		;SAVE THAT FOR COMPARISON
	MOVEI B,4	;AC VALUE
	MOVEI A,HS1TEM	;DIG VALUE OUT OF CHEOPS AND RETURN
	PUSHJ P,XRAC
	MOVE R,HS1TEM
	TRNE R,100000	;EXTEND 16 BIT NEG NUMBERS
	ORCMI R,77777
	MOVEM R,CHXVAL
	POPJ P,


HCHGV5:	CLEARM CHXPV1(C)	;ENCOUNTERED MATE OR STALEMATE, CLEAR REST
	AOBJN C,HCHGV5
	JRST HCHGV6

HCHGV:	MOVE TT,CCBFM
	XCT CXGV(TT)

GXV1:	MOVEI C,CBABL	;WAIT FOR CHEOPS TO FINISH AND RETURN VALUE
HCHGVC:	SKIPG HBMEM(C)	;ENTER HERE DIRECTLY WITH ADR IN C TO READ BACKGROUND BLOCK
	 JRST [	AOS CSNRDY
		SKIPG HBMEM(C)
		.HANG
		JRST .+1]
HCHGVR:	LDB J,[042000,,HBMEM+1(C)]	;GET SETD FROM PARAM BLOCK
	MOVEM J,HCHSTD		;FOR INTERNAL HACKERY
	MOVEM J,CHXSTD		;ALSO RETURN DEPTH TO USER
	MOVE J,HBMEM+11(C)	;GET RETURNED PV (1ST MV)
	SOSL HCHSTD
	TLNN J,777774
	 JRST [	CLEARM CHXPV1	;EVIDENTLY MATE OR STALEMATE ON MOVE
		CLEARM CHXPV2
		CLEARM CHXPV3
		JRST HCHGV4]
	PUSHJ P,HCHMMV		;"MAP" MOVE
	MOVEM R,CHXPV1
	MOVE J,HBMEM+12(C)	;2ND MV
	SOSL HCHSTD
	TLNN J,777774
	 JRST [	CLEARM CHXPV2
		CLEARM CHXPV3
		JRST HCHGV4]
	PUSHJ P,HCHMMV
	MOVEM R,CHXPV2
	MOVE J,HBMEM+13(C)	;3RD MV
	SOSL HCHSTD
	TLNN J,777774
	 JRST [	CLEARM CHXPV3
		JRST HCHGV4]
	PUSHJ P,HCHMMV
	MOVEM R,CHXPV3
HCHGV4:	LDB R,[042000,,HBMEM+10(C)]	;GET INITIAL MATERIAL BALANCE
	TRNE R,100000
	ORCMI R,77777
	MOVEM R,CHXIMB		;SAVE THAT FOR COMPARISON
	LDB R,[242000,,HBMEM+7(C)]	;STATA (LOW ORDER)
	LDB J,[042000,,HBMEM+7(C)]	;STATB (HIGH ORDER)
	LSH J,20
	IOR J,R
	MOVEM J,CHXSTA			;STORE STATISTICS COUNTER
	LDB R,[242000,,HBMEM+10(C)]
	TRNE R,100000	;EXTEND 16 BIT NEG NUMBERS
	ORCMI R,77777
	MOVEM R,CHXVAL
	LDB J,[042000,,HBMEM+1(C)]	;GET SETD FROM PARAM BLOCK AGAIN
	CAME J,CHXSTD		;SAME AS READ BEFORE?
	JRST HCHGVR		;NOPE, MUST HAVE COMPLETED NEW SETD, TRY AGAIN
	POPJ P,

HOCMMV:	MOVE Q,R		;LEAVE CHEOPS VALUE IN Q
	MOVM ZR,R		;CONVERT CHEOPS VALUE IN R TO OCM VALUE
	SUBI ZR,10000-40
	JUMPGE ZR,HOCMM1	;MATE VALUE
	ASH R,CHVCNV		;CONVERT CHEOPS VALUE -> OCM VALUE
	POPJ P,

HOCMM1:	ADDI ZR,70000-40-2	;MATE BASE IN OCM IS 70000
	SKIPGE R
	MOVNS ZR
	MOVE R,ZR
	POPJ P,

LMCABT:	CAMLE Q,CHXIA		;SKIP ON R WORSE OR EQUAL TO WHAT SIDE ALREADY HAS
	CAMGE Q,CHXIB

LMCABU:	MOVEM Q,CHXIA		;STORE SIDE NOW GUARRENTEED AT LEAST THIS
	MOVEM Q,CHXIB


LMCHEV:	MOVE TT,LGLMST		;FIND "BEST" MOVE
	LDB I,[100,,PLYN]
	MOVE B,LMCHIV(I)	;INITIAL VALUE
	MOVNI T,1
LMCHE1:	CAMN TT,P
	JRST LMCHEX		;THRU
	SKIPGE 1(TT)
	JRST LMCHE2		;THAT MOVE ILLEGAL
	XCT LCHTST(I)
	JRST [	HRRZ T,TT	;BEST SO FAR
		MOVE B,2(TT)
		JRST .+1]
LMCHE2:	ADD TT,[NWDPM,,NWDPM]
	JRST LMCHE1

LMCHEX:	JUMPL T,LMCHNM		;NO MOVE, MATE OR STALEMATE?
	PUSH P,B
	CLEARM CVPR		;GENERATE "PRINCIPLE VARIATION"
	HRRZ A,1(T)
	HLRZ B,1(T)
	LDB I,[100,,PLYN]
	PUSHJ P,TMOVE		;PLAY MOVE
	.VALUE			;SHOULD HAVE BEEN LEGAL
	PUSHJ P,RECMP
	PUSHJ P,UNMOVE
	MOVEI Q,0
	POP P,R
	JRST CMPMX

LMCHNM:	.VALUE

LMCHIV:	-10000000
	+10000000

LCHTST:	CAMGE B,2(TT)
	CAMLE B,2(TT)


ACLPOS:	SKIPN HINITD
	PUSHJ P,HINITC
	MOVEI A,20000
	MOVNM A,CHXIA		;ON DIRECT COMMAND, USE + AND - INF
	MOVEM A,CHXIB
	PUSHJ P,ACLPS1		;MAKE ARG BLOCK
	MOVE A,CCBFM
	XCT CXLPS(A)

ACLBPM:	MOVEI T,CHXTB		;USE NEW HACK BUFFERED MODE, USE PRIORITY BLOCK.
	MOVEI C,CBABL
	PUSHJ P,CXBPOS
	MOVE TT,C
	LSH TT,1
	ADDI TT,CBBAS/2
	LSH TT,4
	MOVEM TT,HBMEM+3	;PRIORITY POINTER
CCOMV1:	MOVEI TT,3000
	MOVEI A,3		;SEND DOORBELL OP 0 TO INITIATE PRIORITY BLOCK
	PUSHJ P,HDPDB1
CCOMV2:	LDB A,[%HDBL UNIFA]
	TRNN A,1
	POPJ P,
	SOJG TT,CCOMV2
	MOVEI B,TYO
	SOUT [ASCIZ /CHEOPS FAILED TO ACKNOWLEDGE COMMAND TO START PRIORITY BLOCK
/]
	JRST CCOMV1

ACLPS2:	MOVEI A,CHXTB		;POINTER TO ARG BLOCK
	PUSHJ P,HLDPOS		;IN CLOSE-COUPLED MODE
	POPJ P,

ACLBM:	MOVEI A,CHXTB
	PUSHJ P,HLDPB		;IN BUFFERED MODE (THIS MAKES BACKGROUND POINTER POINT
	POPJ P,			; TO BACKGROUND BLOCK)

ACLPS1:	CLEARM CHXSTM		;CONSTRUCT CHEOPS ARG BLOCK AT CHXTB
ACLPS3:	PUSHJ P,CHXBD		;ENTER HERE WHEN CHXSTM INITED TO FUNNY MODE
	LDB A,[100,,PLYN]	;GET STM
	LSH A,17		;SHIFT INTO APPRO BIT
	IORM A,CHXSTM		;PUT INTO BITS AND MODES WD
	MOVEI A,0
	SKIPE PIECEL+WKR-PIECE
	SKIPE NMOVES+WKR-PIECE
	TRO A,4			;WKR MOVED OR FLUSHED
	SKIPE PIECEL+WQR-PIECE
	SKIPE NMOVES+WQR-PIECE
	TRO A,10		;WQR MOVED OR FLUSHED
	SKIPE NMOVES+WKING-PIECE
	TRO A,14		;NO CASTLING FOR WHITE
	SKIPE PIECEL+BKR-PIECE
	SKIPE NMOVES+BKR-PIECE
	TRO A,1			;BKR MOVED OR FLUSHED
	SKIPE PIECEL+BQR-PIECE
	SKIPE NMOVES+BQR-PIECE
	TRO A,2			;BQR MOVED OR FLUSHED
	SKIPE NMOVES+BKING-PIECE
	TRO A,3			;NO CASTLING FOR BLACK
	LDB I,[100,,PLYN]
	MOVE T1,@OKINGT(I)
	SKIPE @LMGST1+1(I)	;STM IN CHECK?
	TRO A,100		;SET KCHK BIT
	SKIPE B,GHLOC
	 JRST [	MOVE B,CHEOSQ(B)	;CONVERT TO CHEOPS SQUARE #
		ANDI B,7		;MASK TO FILE
		TRO B,10		;SET GHOST PRESENT
		DPB B,[100400,,A]
		JRST .+1]
	MOVEM A,CHXFW		;FLAGWORD
	POPJ P,

;TRANSFER TABLES INDEXED ON VALUE OF CCBFM

	POPJ P,
CXBKI:	POPJ P,		;BACKGROUND PRE-INITIALIZATION.  FROM CHBLI
	JRST CXBIB	;ABORT ANY PREVIOUS BACKGROUND SEARCH, ETC.
	JRST CXBIN

	JRST 4,.
CXBKT:	JRST 4,.	;"TRANSFER" POSITION TO CHEOPS IN BACKGROUND MODE.
	PUSHJ P,CXBPOS  ; FROM CXBTRN
	PUSHJ P,CXTPOS

	JRST 4,.
CXBFN:	JRST 4,.	;FINALIZE, CLOSE RING, AND START BACKGROUND
	PUSHJ P,CXBFC
	PUSHJ P,CXBFNT

	JRST 4,.
CXBRV:	JRST 4,.	;GET RESULTS FROM ARG BLOCK IN C  FROM BSTP1 AND APBL1
	PUSHJ P,HCHGVC	; (BACKGROUND MODE)
	PUSHJ P,CXGVN

	JFCL
CXSLIR:	JFCL	;SKIP IF BACKGROUND MODE AVAILABLE  FROM CHBLIR
	SKIPA
	SKIPA

	JRST AXST1
CXSTRT: JRST LMCHB1	;ROUTINE TO START CHEOPS  FROM ACSTRT
	JRST AXST2
	JRST NSTRT

	JRST GXV1
CXGV:	JRST HCHGV1	;GET VALUE ROUTINE  FROM HCHGV.
	JRST GXV1
	JRST NGTV

	JRST ACLBM
CXLPS:	JRST ACLPS2	;LOAD POSITION ROUTINE FROM ACLPOS.
	JRST ACLBPM
	JRST NSTRT

	PUSHJ P,CXLVB
CXLV:	PUSHJ P,CXLVC	;LEAVING THIS MODE  FROM ACCBFM
	PUSHJ P,CXLVB
	PUSHJ P,CXLVN

	PUSHJ P,CXENB
CXENT:	PUSHJ P,CXENC	;ENTERING THIS MODE FROM ACCBFM
	PUSHJ P,CXENB
	PUSHJ P,CXENN	;ENTER NETWORK MODE

CCBFM:	1	;CHEOPS BUFFERED-MODE SWITCH
		; 0 -> CLOSE-COUPLED 
		;   10 STORES POSITIONS DIRECTLY INTO CHEOPS WITH CONSOLE PROGRAM
		;-1 -> BUFFERED-MODE
		;   10 STORES POSITIONS IN BUFFER MEMORY, CHEOPS LOADS ITSELF
		; 1 -> BUFFERED-MODE USING PRIORITY BLOCK AND NEW
		;   CHEOPS TRANSFER ROUTINES.
		; 2 -> BUFFERED-MODE VIA CHAOS NET
		;
ACCBFM:	PUSHJ P,GETNUM
	CAIN C,2
	JRST .+3	;IN NET MODE, REALLY OPEN AND CLOSE IT.
	CAMN C,CCBFM
	POPJ P,
	MOVE D,CCBFM
	MOVEM C,CCBFM
	XCT CXLV(D)
	MOVE C,CCBFM
	XCT CXENT(C)
	POPJ P,

CXLVC:	POPJ P,

CXLVB:	POPJ P,			;ENTER HERE TO LEAVE BUFFERED MODE
	
CXENB:	MOVE A,[177777_4]	;CLOBBER POINTER TO ARG BLOCK SO IT DOESNT POINT AT
	MOVEM A,HBMEM+5		; ANY PREVIOUS LOSSAGE
	MOVEM A,HBMEM+3		;ALSO OTHER ARG BLOCK POINTER
	CLEARM HBMEM+CBABL
	MOVEI A,2		;START CHEOPS, AND GIVE IT COMMAND 2
	PUSHJ P,HCCOM		;  (GO INTO BUFFERED MODE)
	MOVE A,HUSADR
	MOVEM A,HCNUM
	PUSHJ P,HG		;SET STARTING ADR
ACLBF2:	PUSHJ P,HLEAVE		;RESTORE STATE
	PUSHJ P,XCLK
	PUSHJ P,XSRUN		;START CHEOPS AND LEAVE IT RUNNING
	POPJ P,


CXENC:	CLEARM CCBFM		;CAN BE CALLED VIA PRGM ...
CXENC1:	SKIPGE HINIBF		;ENTER CLOSE-COUPLED MODE
	PUSHJ P,HINIL		;REALLY GRAB CHEOPS IF HAVENT ALREADY
	PUSHJ P,HCPX		;CHECK FOR PARITY ERROR, AND STOP CHEOPS
	PUSHJ P,HENTER		;SAVE STATE
	SOS HDPFLG		;INDICATE CONSOLE NEEDS UPDATING
	POPJ P,

CHHOST:	CHHSTN		;CHAOS NET HOST NUMBER OF CHEOPS.

CXENN:	MOVE B,CHHOST	;SET UP CHEOPS CHAOS NET CONNECTION
	MOVEI C,[ASCIZ /CHEOPS-SERVER/]
	MOVEI D,3
	PUSHJ P,CHACON
	 JRST .+2
	POPJ P,
	MOVEI B,TYO
	SOUT [ASCIZ /CONNECTION FAILED
/]
	JRST MNLP2

CXLVN:	.STATUS CHNETI,A
	SKIPN A
	POPJ P,
	MOVEI C,[ASCIZ /I'M THRU, SO LONG/]
	PUSHJ P,CHACLS
	 .VALUE
	POPJ P,		;SHOULD CLOSE NETWORK CONNECTION


ACT:	TDZA C,C		;USE REGULAR MODE
ACTA:	MOVEI C,4000		;USE ASYMETRICAL A/B
	MOVEM C,CHXSTM
	SKIPN HINITD
	PUSHJ P,HINITC
	PUSHJ P,GETNUM		;TRY CHEOPS IN CURRENT POSITION, ARG IS SETD
	MOVEM C,CHXD
	MOVEI A,20000		;INITIALIZE ALPHA AND BETA IF NOT GIVEN
	MOVNM A,CHXIA
	MOVEM A,CHXIB
	SKIPGE GME
	JRST ACT1
	PUSHJ P,GETNUM		;OTHER ARGS, IF SUPPLIED, ARE ALPHA AND BETA
	MOVEM C,CHXIA
	SKIPGE GME
	JRST ACT1
	PUSHJ P,GETNUM
	MOVEM C,CHXIB
ACT1:	PUSHJ P,ACLPS3		;MAKE ARG BLOCK
	PUSHJ P,ACSTRT		;LOAD INTO CHEOPS
	PUSHJ P,HCHGV		;GET RESULT
ACTPR:	MOVEI W,CHXVAL		;VALUE BLOCK TO PRINT
	MOVEI B,TYO
ACTPRB:	MOVE R,CHXVAL-CHXVAL(W)	;COMPUTE DELTA
	MOVE Q,R
	SUB Q,CHXIMB-CHXVAL(W)	;INITIAL MATERIAL BALANCE
	MOVE J,CHXSTA-CHXVAL(W)
	MOVE C,CHXSTD-CHXVAL(W)
	ISOUT 1,[.ASCII ?VALUE *U!R, DELTA *U!Q, STATC *U!J, SETD *U!C
PV ?]
	SKIPE C,CHXPV1-CHXVAL(W)
	PUSHJ P,PMVT
	PUSHJ P,DSPACE
	SKIPE C,CHXPV2-CHXVAL(W)
	PUSHJ P,PMVT
	PUSHJ P,DSPACE
	SKIPE C,CHXPV3-CHXVAL(W)
	PUSHJ P,PMVT
	PUSHJ P,DCRR
	POPJ P,

BABWRN:	MOVE R,CHXVAL-CHXVAL(W)	;WARN IF TOP LEVEL A/B CUTOFF HAS OCCURRED
	CAMN R,CBALPH		;(ASSUMING VALUE FROM BACKGROUND SEARCH)
	SOUT [ASCIZ / NEG A-B CUT /]
	CAMN R,CBBETA
	SOUT [ASCIZ / POS A-B CUT /]
	POPJ P,

PMVT:	HRRZ R,C		;PRINT MOVE IN C (TMOVE FORMAT)
	HLRZ Q,C
	CAIL R,376
	JRST PMVT1
	ISOUT 1,[.ASCII ?*P!Q - *S!R ?]
	POPJ P,

PMVT1:	SOUT TYPMT-376(R)
	POPJ P,


CHSTSW:	0		;CHEOPS STATISTICS SWITCH
ACHSTT:	SKIPGE GME
	JRST ACHPST	;PRINT CHEOPS STATISTICS
	PUSHJ P,GETNUM
	MOVEM C,CHSTSW
	JUMPE C,CPOPJ
ACHPST:	MOVE ZR,CPSTA	;COMPUTE AVERAGER STAT COUNTS
	IDIV ZR,CPSTAC
	MOVEM ZR,CPSTAV
	MOVE ZR,CSSTA
	IDIV ZR,CSSTAC
	MOVEM ZR,CSSTAV
	MOVEI B,TYO
	MOVE W,[-LCHSDT,,CHSDT]
	PUSHJ P,STFPNT
	PUSHJ P,DCRR
	POPJ P,

CPSTAV:	0	;AVG STATC PMG
CSSTAV:	0	;AVG STATC PCG

ACSPD:	SKIPN EQSGNF		;HACK CHEOPS SPEED
	JRST ACSPD1		; SET IT
	MOVEI B,TYO		;TYPE CURRENT SPEED OUT
	MOVE A,HCHSPD
	JRST DPT

ACSPD1:	PUSHJ P,GETNUM
	MOVEM C,HCHSPD		;SET SPEED
	SKIPL HINIBF
	SKIPN HINITD
	JRST [	MOVEI B,TYO
		ISOUT [ASCIZ /NOT IN CONTROL OF CHEOPS, DO CC SO NEW SPEED TAKES/]
		POPJ P,]
	SKIPN CCBFM
	POPJ P,
	PUSHJ P,CXENC1		;STOP CHEOPS
	PUSHJ P,ACLBF2		;THEN START IT AGAIN SO NEW SPEED TAKES
	POPJ P,

;FOLLOWING ROUTINE STORES BOARD AT ADR IN CHEOPS BUFFER MEMORY GIVEN IN C.
;DOES IT IN ONE STEP, UNLIKE OLD CROCK WHICH TOOK TWO.  ARG BLOCK POINTER IN
;T (LIKE CHXTB, BUT ONLY STUFF -(T) IS RELAVENT).
CXBPOS:	MOVE TT,C
	ADD TT,[242000,,HBMEM+17]
	MOVE B,[-NPC,,1]
CXBP1:	SKIPN A,PIECEL(B)
	JRST CXBP2
	SKIPGE D,CHEOPC(B)
	 JRST [	LDB ZR,[PTID,,PIECE(B)]
		CAIE ZR,PID
		TRO D,40	;THIS P PROMOTED
		JRST .+1]
	MOVE ZR,CHEOSQ(A)
	DPB D,[101000,,ZR]
	IDPB ZR,TT
CXBP2:	AOBJN B,CXBP1
	MOVEI ZR,0
	IDPB ZR,TT		;TERMINATE LIST
	MOVE TT,C
	ADD TT,[442000,,HBMEM+1] ;POINTER TO ARG SECTION OF COMMAND BLOCK
	MOVE ZR,-1(T)	;BITS AND MODES WD
	IDPB ZR,TT
	MOVE ZR,-5(T)	;DEPTH
	IDPB ZR,TT
	MOVE ZR,-4(T)	;INITIAL ALPHA
	IDPB ZR,TT
	MOVE ZR,-3(T)	;INITIAL BETA
	IDPB ZR,TT
	MOVE ZR,-2(T)	;INITIAL FLAGWORD
	IDPB ZR,TT
	MOVE ZR,-6(T)	;CHAIN WORD
	IDPB ZR,TT
	MOVSI TT,-4
	MOVEM TT,HBMEM(C)	;SIGNAL BLOCK READY FOR CHEOPS
	POPJ P,

CHXBD:	MOVEI C,CHXTB		;TRANSLATE BOARD INTO A FORM SUITABLE FOR CHEOPS
	MOVEI A,2*BW+1
CHXBD1:	SKIPG B,BOARD(A)
	JRST CHXBD2
	SKIPGE D,CHEOPC-PIECE(B)	;GET CHEOPS PC #. SKIP UNLESS INDEX WAS
	 JRST [	LDB ZR,[PTID,,PIECE-PIECE(B)]  ;A OCM PAWN
		CAIE ZR,PID
		TRO D,40	;THIS A PROMOTED P
		JRST .+1]
	MOVE T,CHEOSQ(A)
	HRRZM D,(C)
	MOVEM T,1(C)
	ADDI C,2
CHXBD2:	CAIGE A,2*BW+8*BW
	AOJA A,CHXBD1
	SETOM (C)
	POPJ P,

;THE FOLLOWING IS AN OCM CHEOPS VALUE BLOCK.. ORDER, ETC IMPORTANT
CHXVAL:	0	;VALUE
CHXPV1:	0	;MV1 CHEOPS RETURNED PV
CHXPV2:	0	;MV2
CHXPV3:	0	;MV3
CHXIMB:	0	;INITIAL MATERIAL BALANCE (FOR COMPARISON)
CHXSTA:	0	;RETURNED STATISTICS COUNTER
CHXSTD:	0	;SETD DONE

;THE FOLLOWING RESULT BLOCKS USED BY BLUNDER STOPPER MODE.  ARE BLT ED FROM CHXVAL, ETC.

CBSMOV:	0	;MOVE THAT REACHED BELOW POSITION
CBSVAL:	0	;"BEST" RESULT FOUND DURING BACKGROUND SCAN
CBSPV1:	0
CBSPV2:	0
CBSPV3:	0
CBSIMB:	0
CBSSTA:	0
CBSSTD:	0
CBSE:

INMOV:	0	;MOVE THAT OCM SELECTED (REACHES BELOW POSITION)
INVAL:	0	;RESULTS FOR "INTENDED" MOVE, IE THE ONE OCM WAS ABOUT TO PLAY
INPV1:	0
INPV2:	0
INPV3:	0
INIMB:	0
INSTA:	0
INSTD:	0
INE:

HCHSTD:	0	;SETD DONE (SO AS TO IGNORE GARBAGE P.V. MVS) INTERNAL TEMP.

;THE FOLLOWING BLOCK OF VARIABLES ARE A STANDARD ARG BLOCK. ORDER IS IMPORTANT!
CHXCHW:	0			;CHAIN TO NEXT BLOCK WORD
CHXD:	-1			;CHEOPS DEPTH
CHXIA:	-20000			;INITIAL ALPHA
CHXIB:	20000			;INITIAL BETA
CHXFW:	0			;FLAGCELL WORD
CHXSTM:	0			;BITS AND MODES WD
				; 100000 -> STM
				;  40000 -> ALPHA CARRY OVER MODE (NOT IMPLEMENTED)
				;  20000 -> BETA    "    "    "     "      "
				;  10000 -> USE ALPHA AS DELTA AROUND CURRENT MATERIAL.
				;   4000 -> ASYMMETRICAL A/B MODE
				;   2000 -> INCR SETD BEFORE STARTING SEARCH (GETS STORED
				;	     BACK WHEN SEARCH DONE)
				;   1000 -> CHAIN TO FOLLOWING CHEOPS ARG BLOCK.
CHXTB:	-1
	BLOCK 64.*2

HCHMMV:	SKIPN R,J
	POPJ P,			;NO MOVE, RETURN NIL
	LDB Q,[341000,,J]	;MAP CHEOPS MOVE IN J TO OCM MOVE (PC -? SQ FORM) IN R
	SKIPGE Q,OCMPC(Q)	;MAP PC MOVING
	.VALUE
	LDB R,[041000,,J]	;TO SQ
	MOVE R,OCMSQ(R)		;MAP IT
	SKIPGE RPIECE(Q)	;K MOVING ?
	 JRST [	LDB S,[241000,,J]	;YES, GET ORIG SQ
		MOVE S,OCMSQ(S)	;SEE IF THIS IS REALLY CASTLING
		SUB S,R
		MOVM ZR,S
		CAIE ZR,2
		JRST .+1	;NOT CASTLING
		MOVEI R,376	;O-O
		SKIPL S
		MOVEI R,377	;O-O-O
		POPJ P,]
	SKIPGE LMGT(Q)
	 JRST [ LDB S,[241000,,J]	;EP? GET ORIG SQ
		MOVE S,OCMSQ(S)		;TO SAME RANK AS DEST SQ?
		LDB ZR,[BRANK,,BPREL(S)]
		LDB T1,[BRANK,,BPREL(R)]
		TLNN Q,1		;SKIP ON THIS P REALLY PROMOTED
		CAME ZR,T1		;CHEOPS RETURNS EP CAPTS AS P(B5)-N5 FOR EXAMPLE
		JRST .+1
;		SKIPLE S,BOARD(R)	;UNFORTUNATELY, IF ITS THE 2ND OR 3RD PLY IT
;		SKIPL LMGT-PIECE(S)	; MAY NOT BE THERE YET
;		.VALUE			;HAD BETTER BE A P THERE.
		ADDI R,BW		;BUT OCM LIKES TO SEE P-N6
		SKIPGE PIECE(Q)
		SUBI R,2*BW
		JRST .+1]
	HRLM Q,R
	POPJ P,


PARGB:	MOVEM 17,DUACS+17	;DISPLAY ARG BLOCK IN C (MANUAL ENTRY FOR DEBUGGING)
	MOVEI 17,DUACS
	BLT 17,DUACS+16
	MOVE 17,DUACS+17
	SETOM NOINCU
	PUSHJ P,DBLKB		;DISPLAY BLANK BOARD
	MOVE TT,C
	ADD TT,[242000,,HBMEM+17]
PARGB1:	ILDB B,TT
	JUMPE B,PARGX	;END OF PIECE LIST
	PUSH P,TT
	LDB A,[001000,,B]
	MOVE A,OCMSQ(A)
	LDB Q,[101000,,B]
	SKIPGE TT,OCMPC(Q)
	.VALUE
	ADDI TT,PIECE
	PUSHJ P,DSQC
	POP P,TT
	JRST PARGB1

PARGX:	MOVSI 17,DUACS
	BLT 17,17
	POPJ P,

DBLKB:	MOVSI A,-BD2
DBLKB1:	SKIPGE BOARD(A)
	JRST DBLKB2
	MOVEI TT,0
	PUSH P,A
	PUSHJ P,DSQC
	POP P,A
DBLKB2:	AOBJN A,DBLKB1
	POPJ P,

OCMPC:			;MAP FROM CHEOPS PIECE # TO OCM PC #
	REPEAT 16.,-1	;NULL PIECES
	4  ? 5  ? 3  ? 6  ? 2  ? 7  ? 1  ? 10 ?   ;W PS
	24 ? 25 ? 23 ? 26 ? 22 ? 27 ? 21 ? 30 ?   ;B PS
	14 ? 15 ? 11 ? 20 ? 13 ? 16 ? 12 ? 17 ?   ;W NOBLES
	34 ? 35 ? 31 ? 40 ? 33 ? 36 ? 32 ? 37 ?   ;B NOBLES
	1,,4  ? 1,,5  ? 1,,3  ? 1,,6  ? 
	  1,,2  ? 1,,7  ? 1,,1  ? 1,,10 ?   ;W PS (ANOTHER COPY SINCE OCM USES
	1,,24 ? 1,,25 ? 1,,23 ? 1,,26 ? 
	  1,,22 ? 1,,27 ? 1,,21 ? 1,,30 ?   ;B PS SAME NUMBERS FOR PROMOTED PS)

PP CHEOPC:,		;MAP FROM OCM PC # TO CHEOPS PIECE #
	SETZ 26 ? SETZ 24 ? SETZ 22 ? SETZ 20 ? SETZ 21 ? SETZ 23 ? SETZ 25 ? SETZ 27 ?
	42 ? 46 ? 44 ? 40 ? 41 ? 45 ? 47 ? 43 ?
	SETZ 36 ? SETZ 34 ? SETZ 32 ? SETZ 30 ? SETZ 31 ? SETZ 33 ? SETZ 35 ? SETZ 37 ?
	52 ? 56 ? 54 ? 50 ? 51 ? 55 ? 57 ? 53 ?

OCMSQ:			;CHEOPS SQ TO OCM SQ
REPEAT 8,[
  ZZQCH==2*BW+.RPCNT*BW
  REPEAT 8, ZZQCH+1+7-.RPCNT
]

CHEOSQ==.-2*BW		;OCM SQ TO CHEOPS SQ
REPEAT 8,[
  ZZQCH==.RPCNT
	0
   REPEAT 8, ZZQCH*10+7-.RPCNT
	0
]
CONSTANTS

.INSRT CCHEOP >
IFN CHNET,	.INSRT CHNET >

CBBMT:	BLOCK <<HBMEML-100>/40>+10  ;HBMEML (BUFFER MEM LENGTH) IS DEFINED IN CCHEOP

]
.INSRT OCAUX >
IFN DSPLY,	.INSRT OCDIS >

;EXPAND TRACE MACROS.  MAKE SURE THIS AFTER OCAUX.
TRT:	REPEAT NRMM,	CONC ZZ,\.RPCNT
LTRT==.-TRT

STRT:	REPEAT NSMM,	CONC ZQ,\.RPCNT
LSTRT==.-STRT

TTRT:	REPEAT NTMM,	CONC ZW,\.RPCNT
LTTRT==.-TTRT

PATT:
PATCH":	BLOCK 200
PAT:	BLOCK 100

CONSTANTS
VARIABLES
HSICT:	0
ICORSZ==<.+1777>_-12

END GO

